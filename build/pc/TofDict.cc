//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:53:20 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdITofDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "TofDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HTofCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCal(void *p = 0);
   static void *newArray_HTofCal(Long_t size, void *p);
   static void delete_HTofCal(void *p);
   static void deleteArray_HTofCal(void *p);
   static void destruct_HTofCal(void *p);
   static void streamer_HTofCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCal*)
   {
      ::HTofCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCal", ::HTofCal::Class_Version(), "././htofcal.h", 6,
                  typeid(::HTofCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCal::Dictionary, isa_proxy, 0,
                  sizeof(::HTofCal) );
      instance.SetNew(&new_HTofCal);
      instance.SetNewArray(&newArray_HTofCal);
      instance.SetDelete(&delete_HTofCal);
      instance.SetDeleteArray(&deleteArray_HTofCal);
      instance.SetDestructor(&destruct_HTofCal);
      instance.SetStreamerFunc(&streamer_HTofCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCal*)
   {
      return GenerateInitInstanceLocal((::HTofCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofCalPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCalPar(void *p = 0);
   static void *newArray_HTofCalPar(Long_t size, void *p);
   static void delete_HTofCalPar(void *p);
   static void deleteArray_HTofCalPar(void *p);
   static void destruct_HTofCalPar(void *p);
   static void streamer_HTofCalPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCalPar*)
   {
      ::HTofCalPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCalPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCalPar", ::HTofCalPar::Class_Version(), "././htofcalpar.h", 98,
                  typeid(::HTofCalPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCalPar::Dictionary, isa_proxy, 0,
                  sizeof(::HTofCalPar) );
      instance.SetNew(&new_HTofCalPar);
      instance.SetNewArray(&newArray_HTofCalPar);
      instance.SetDelete(&delete_HTofCalPar);
      instance.SetDeleteArray(&deleteArray_HTofCalPar);
      instance.SetDestructor(&destruct_HTofCalPar);
      instance.SetStreamerFunc(&streamer_HTofCalPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCalPar*)
   {
      return GenerateInitInstanceLocal((::HTofCalPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCalPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofCalibrater_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCalibrater(void *p = 0);
   static void *newArray_HTofCalibrater(Long_t size, void *p);
   static void delete_HTofCalibrater(void *p);
   static void deleteArray_HTofCalibrater(void *p);
   static void destruct_HTofCalibrater(void *p);
   static void streamer_HTofCalibrater(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCalibrater*)
   {
      ::HTofCalibrater *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCalibrater >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCalibrater", ::HTofCalibrater::Class_Version(), "././htofcalibrater.h", 11,
                  typeid(::HTofCalibrater), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCalibrater::Dictionary, isa_proxy, 0,
                  sizeof(::HTofCalibrater) );
      instance.SetNew(&new_HTofCalibrater);
      instance.SetNewArray(&newArray_HTofCalibrater);
      instance.SetDelete(&delete_HTofCalibrater);
      instance.SetDeleteArray(&deleteArray_HTofCalibrater);
      instance.SetDestructor(&destruct_HTofCalibrater);
      instance.SetStreamerFunc(&streamer_HTofCalibrater);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCalibrater*)
   {
      return GenerateInitInstanceLocal((::HTofCalibrater*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCalibrater*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofDigiPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofDigiPar(void *p = 0);
   static void *newArray_HTofDigiPar(Long_t size, void *p);
   static void delete_HTofDigiPar(void *p);
   static void deleteArray_HTofDigiPar(void *p);
   static void destruct_HTofDigiPar(void *p);
   static void streamer_HTofDigiPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofDigiPar*)
   {
      ::HTofDigiPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofDigiPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofDigiPar", ::HTofDigiPar::Class_Version(), "././htofdigipar.h", 89,
                  typeid(::HTofDigiPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofDigiPar::Dictionary, isa_proxy, 0,
                  sizeof(::HTofDigiPar) );
      instance.SetNew(&new_HTofDigiPar);
      instance.SetNewArray(&newArray_HTofDigiPar);
      instance.SetDelete(&delete_HTofDigiPar);
      instance.SetDeleteArray(&deleteArray_HTofDigiPar);
      instance.SetDestructor(&destruct_HTofDigiPar);
      instance.SetStreamerFunc(&streamer_HTofDigiPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofDigiPar*)
   {
      return GenerateInitInstanceLocal((::HTofDigiPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofDigiPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofWalkPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofWalkPar(void *p = 0);
   static void *newArray_HTofWalkPar(Long_t size, void *p);
   static void delete_HTofWalkPar(void *p);
   static void deleteArray_HTofWalkPar(void *p);
   static void destruct_HTofWalkPar(void *p);
   static void streamer_HTofWalkPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofWalkPar*)
   {
      ::HTofWalkPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofWalkPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofWalkPar", ::HTofWalkPar::Class_Version(), "././htofwalkpar.h", 17,
                  typeid(::HTofWalkPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofWalkPar::Dictionary, isa_proxy, 1,
                  sizeof(::HTofWalkPar) );
      instance.SetNew(&new_HTofWalkPar);
      instance.SetNewArray(&newArray_HTofWalkPar);
      instance.SetDelete(&delete_HTofWalkPar);
      instance.SetDeleteArray(&deleteArray_HTofWalkPar);
      instance.SetDestructor(&destruct_HTofWalkPar);
      instance.SetStreamerFunc(&streamer_HTofWalkPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofWalkPar*)
   {
      return GenerateInitInstanceLocal((::HTofWalkPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofWalkPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofDigitizer(void *p = 0);
   static void *newArray_HTofDigitizer(Long_t size, void *p);
   static void delete_HTofDigitizer(void *p);
   static void deleteArray_HTofDigitizer(void *p);
   static void destruct_HTofDigitizer(void *p);
   static void streamer_HTofDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofDigitizer*)
   {
      ::HTofDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofDigitizer", ::HTofDigitizer::Class_Version(), "././htofdigitizer.h", 21,
                  typeid(::HTofDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HTofDigitizer) );
      instance.SetNew(&new_HTofDigitizer);
      instance.SetNewArray(&newArray_HTofDigitizer);
      instance.SetDelete(&delete_HTofDigitizer);
      instance.SetDeleteArray(&deleteArray_HTofDigitizer);
      instance.SetDestructor(&destruct_HTofDigitizer);
      instance.SetStreamerFunc(&streamer_HTofDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofDigitizer*)
   {
      return GenerateInitInstanceLocal((::HTofDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofHit(void *p = 0);
   static void *newArray_HTofHit(Long_t size, void *p);
   static void delete_HTofHit(void *p);
   static void deleteArray_HTofHit(void *p);
   static void destruct_HTofHit(void *p);
   static void streamer_HTofHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofHit*)
   {
      ::HTofHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofHit", ::HTofHit::Class_Version(), "././htofhit.h", 6,
                  typeid(::HTofHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofHit::Dictionary, isa_proxy, 1,
                  sizeof(::HTofHit) );
      instance.SetNew(&new_HTofHit);
      instance.SetNewArray(&newArray_HTofHit);
      instance.SetDelete(&delete_HTofHit);
      instance.SetDeleteArray(&deleteArray_HTofHit);
      instance.SetDestructor(&destruct_HTofHit);
      instance.SetStreamerFunc(&streamer_HTofHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofHit*)
   {
      return GenerateInitInstanceLocal((::HTofHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofGeomPar(void *p = 0);
   static void *newArray_HTofGeomPar(Long_t size, void *p);
   static void delete_HTofGeomPar(void *p);
   static void deleteArray_HTofGeomPar(void *p);
   static void destruct_HTofGeomPar(void *p);
   static void streamer_HTofGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofGeomPar*)
   {
      ::HTofGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofGeomPar", ::HTofGeomPar::Class_Version(), "././htofgeompar.h", 8,
                  typeid(::HTofGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HTofGeomPar) );
      instance.SetNew(&new_HTofGeomPar);
      instance.SetNewArray(&newArray_HTofGeomPar);
      instance.SetDelete(&delete_HTofGeomPar);
      instance.SetDeleteArray(&deleteArray_HTofGeomPar);
      instance.SetDestructor(&destruct_HTofGeomPar);
      instance.SetStreamerFunc(&streamer_HTofGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofGeomPar*)
   {
      return GenerateInitInstanceLocal((::HTofGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofRaw(void *p = 0);
   static void *newArray_HTofRaw(Long_t size, void *p);
   static void delete_HTofRaw(void *p);
   static void deleteArray_HTofRaw(void *p);
   static void destruct_HTofRaw(void *p);
   static void streamer_HTofRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofRaw*)
   {
      ::HTofRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofRaw", ::HTofRaw::Class_Version(), "././htofraw.h", 7,
                  typeid(::HTofRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HTofRaw) );
      instance.SetNew(&new_HTofRaw);
      instance.SetNewArray(&newArray_HTofRaw);
      instance.SetDelete(&delete_HTofRaw);
      instance.SetDeleteArray(&deleteArray_HTofRaw);
      instance.SetDestructor(&destruct_HTofRaw);
      instance.SetStreamerFunc(&streamer_HTofRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofRaw*)
   {
      return GenerateInitInstanceLocal((::HTofRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofHitF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofHitF(void *p = 0);
   static void *newArray_HTofHitF(Long_t size, void *p);
   static void delete_HTofHitF(void *p);
   static void deleteArray_HTofHitF(void *p);
   static void destruct_HTofHitF(void *p);
   static void streamer_HTofHitF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofHitF*)
   {
      ::HTofHitF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofHitF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofHitF", ::HTofHitF::Class_Version(), "././htofhitf.h", 16,
                  typeid(::HTofHitF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofHitF::Dictionary, isa_proxy, 0,
                  sizeof(::HTofHitF) );
      instance.SetNew(&new_HTofHitF);
      instance.SetNewArray(&newArray_HTofHitF);
      instance.SetDelete(&delete_HTofHitF);
      instance.SetDeleteArray(&deleteArray_HTofHitF);
      instance.SetDestructor(&destruct_HTofHitF);
      instance.SetStreamerFunc(&streamer_HTofHitF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofHitF*)
   {
      return GenerateInitInstanceLocal((::HTofHitF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofHitF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofHitF2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofHitF2(void *p = 0);
   static void *newArray_HTofHitF2(Long_t size, void *p);
   static void delete_HTofHitF2(void *p);
   static void deleteArray_HTofHitF2(void *p);
   static void destruct_HTofHitF2(void *p);
   static void streamer_HTofHitF2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofHitF2*)
   {
      ::HTofHitF2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofHitF2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofHitF2", ::HTofHitF2::Class_Version(), "././htofhitf2.h", 18,
                  typeid(::HTofHitF2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofHitF2::Dictionary, isa_proxy, 0,
                  sizeof(::HTofHitF2) );
      instance.SetNew(&new_HTofHitF2);
      instance.SetNewArray(&newArray_HTofHitF2);
      instance.SetDelete(&delete_HTofHitF2);
      instance.SetDeleteArray(&deleteArray_HTofHitF2);
      instance.SetDestructor(&destruct_HTofHitF2);
      instance.SetStreamerFunc(&streamer_HTofHitF2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofHitF2*)
   {
      return GenerateInitInstanceLocal((::HTofHitF2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofHitF2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofLookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofLookup(void *p = 0);
   static void *newArray_HTofLookup(Long_t size, void *p);
   static void delete_HTofLookup(void *p);
   static void deleteArray_HTofLookup(void *p);
   static void destruct_HTofLookup(void *p);
   static void streamer_HTofLookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofLookup*)
   {
      ::HTofLookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofLookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofLookup", ::HTofLookup::Class_Version(), "././htoflookup.h", 97,
                  typeid(::HTofLookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofLookup::Dictionary, isa_proxy, 0,
                  sizeof(::HTofLookup) );
      instance.SetNew(&new_HTofLookup);
      instance.SetNewArray(&newArray_HTofLookup);
      instance.SetDelete(&delete_HTofLookup);
      instance.SetDeleteArray(&deleteArray_HTofLookup);
      instance.SetDestructor(&destruct_HTofLookup);
      instance.SetStreamerFunc(&streamer_HTofLookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofLookup*)
   {
      return GenerateInitInstanceLocal((::HTofLookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofLookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofUnpacker(void *p = 0);
   static void *newArray_HTofUnpacker(Long_t size, void *p);
   static void delete_HTofUnpacker(void *p);
   static void deleteArray_HTofUnpacker(void *p);
   static void destruct_HTofUnpacker(void *p);
   static void streamer_HTofUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofUnpacker*)
   {
      ::HTofUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofUnpacker", ::HTofUnpacker::Class_Version(), "././htofunpacker.h", 13,
                  typeid(::HTofUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HTofUnpacker) );
      instance.SetNew(&new_HTofUnpacker);
      instance.SetNewArray(&newArray_HTofUnpacker);
      instance.SetDelete(&delete_HTofUnpacker);
      instance.SetDeleteArray(&deleteArray_HTofUnpacker);
      instance.SetDestructor(&destruct_HTofUnpacker);
      instance.SetStreamerFunc(&streamer_HTofUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofUnpacker*)
   {
      return GenerateInitInstanceLocal((::HTofUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofContFact(void *p = 0);
   static void *newArray_HTofContFact(Long_t size, void *p);
   static void delete_HTofContFact(void *p);
   static void deleteArray_HTofContFact(void *p);
   static void destruct_HTofContFact(void *p);
   static void streamer_HTofContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofContFact*)
   {
      ::HTofContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofContFact", ::HTofContFact::Class_Version(), "././htofcontfact.h", 9,
                  typeid(::HTofContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HTofContFact) );
      instance.SetNew(&new_HTofContFact);
      instance.SetNewArray(&newArray_HTofContFact);
      instance.SetDelete(&delete_HTofContFact);
      instance.SetDeleteArray(&deleteArray_HTofContFact);
      instance.SetDestructor(&destruct_HTofContFact);
      instance.SetStreamerFunc(&streamer_HTofContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofContFact*)
   {
      return GenerateInitInstanceLocal((::HTofContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofCalParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCalParCell(void *p = 0);
   static void *newArray_HTofCalParCell(Long_t size, void *p);
   static void delete_HTofCalParCell(void *p);
   static void deleteArray_HTofCalParCell(void *p);
   static void destruct_HTofCalParCell(void *p);
   static void streamer_HTofCalParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCalParCell*)
   {
      ::HTofCalParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCalParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCalParCell", ::HTofCalParCell::Class_Version(), "././htofcalpar.h", 9,
                  typeid(::HTofCalParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCalParCell::Dictionary, isa_proxy, 1,
                  sizeof(::HTofCalParCell) );
      instance.SetNew(&new_HTofCalParCell);
      instance.SetNewArray(&newArray_HTofCalParCell);
      instance.SetDelete(&delete_HTofCalParCell);
      instance.SetDeleteArray(&deleteArray_HTofCalParCell);
      instance.SetDestructor(&destruct_HTofCalParCell);
      instance.SetStreamerFunc(&streamer_HTofCalParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCalParCell*)
   {
      return GenerateInitInstanceLocal((::HTofCalParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCalParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofCalParMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCalParMod(void *p = 0);
   static void *newArray_HTofCalParMod(Long_t size, void *p);
   static void delete_HTofCalParMod(void *p);
   static void deleteArray_HTofCalParMod(void *p);
   static void destruct_HTofCalParMod(void *p);
   static void streamer_HTofCalParMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCalParMod*)
   {
      ::HTofCalParMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCalParMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCalParMod", ::HTofCalParMod::Class_Version(), "././htofcalpar.h", 72,
                  typeid(::HTofCalParMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCalParMod::Dictionary, isa_proxy, 0,
                  sizeof(::HTofCalParMod) );
      instance.SetNew(&new_HTofCalParMod);
      instance.SetNewArray(&newArray_HTofCalParMod);
      instance.SetDelete(&delete_HTofCalParMod);
      instance.SetDeleteArray(&deleteArray_HTofCalParMod);
      instance.SetDestructor(&destruct_HTofCalParMod);
      instance.SetStreamerFunc(&streamer_HTofCalParMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCalParMod*)
   {
      return GenerateInitInstanceLocal((::HTofCalParMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCalParMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofCalParSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCalParSec(void *p = 0);
   static void *newArray_HTofCalParSec(Long_t size, void *p);
   static void delete_HTofCalParSec(void *p);
   static void deleteArray_HTofCalParSec(void *p);
   static void destruct_HTofCalParSec(void *p);
   static void streamer_HTofCalParSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCalParSec*)
   {
      ::HTofCalParSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCalParSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCalParSec", ::HTofCalParSec::Class_Version(), "././htofcalpar.h", 85,
                  typeid(::HTofCalParSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCalParSec::Dictionary, isa_proxy, 0,
                  sizeof(::HTofCalParSec) );
      instance.SetNew(&new_HTofCalParSec);
      instance.SetNewArray(&newArray_HTofCalParSec);
      instance.SetDelete(&delete_HTofCalParSec);
      instance.SetDeleteArray(&deleteArray_HTofCalParSec);
      instance.SetDestructor(&destruct_HTofCalParSec);
      instance.SetStreamerFunc(&streamer_HTofCalParSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCalParSec*)
   {
      return GenerateInitInstanceLocal((::HTofCalParSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCalParSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofDigiParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofDigiParCell(void *p = 0);
   static void *newArray_HTofDigiParCell(Long_t size, void *p);
   static void delete_HTofDigiParCell(void *p);
   static void deleteArray_HTofDigiParCell(void *p);
   static void destruct_HTofDigiParCell(void *p);
   static void streamer_HTofDigiParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofDigiParCell*)
   {
      ::HTofDigiParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofDigiParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofDigiParCell", ::HTofDigiParCell::Class_Version(), "././htofdigipar.h", 9,
                  typeid(::HTofDigiParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofDigiParCell::Dictionary, isa_proxy, 0,
                  sizeof(::HTofDigiParCell) );
      instance.SetNew(&new_HTofDigiParCell);
      instance.SetNewArray(&newArray_HTofDigiParCell);
      instance.SetDelete(&delete_HTofDigiParCell);
      instance.SetDeleteArray(&deleteArray_HTofDigiParCell);
      instance.SetDestructor(&destruct_HTofDigiParCell);
      instance.SetStreamerFunc(&streamer_HTofDigiParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofDigiParCell*)
   {
      return GenerateInitInstanceLocal((::HTofDigiParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofDigiParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofDigiParMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofDigiParMod(void *p = 0);
   static void *newArray_HTofDigiParMod(Long_t size, void *p);
   static void delete_HTofDigiParMod(void *p);
   static void deleteArray_HTofDigiParMod(void *p);
   static void destruct_HTofDigiParMod(void *p);
   static void streamer_HTofDigiParMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofDigiParMod*)
   {
      ::HTofDigiParMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofDigiParMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofDigiParMod", ::HTofDigiParMod::Class_Version(), "././htofdigipar.h", 63,
                  typeid(::HTofDigiParMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofDigiParMod::Dictionary, isa_proxy, 0,
                  sizeof(::HTofDigiParMod) );
      instance.SetNew(&new_HTofDigiParMod);
      instance.SetNewArray(&newArray_HTofDigiParMod);
      instance.SetDelete(&delete_HTofDigiParMod);
      instance.SetDeleteArray(&deleteArray_HTofDigiParMod);
      instance.SetDestructor(&destruct_HTofDigiParMod);
      instance.SetStreamerFunc(&streamer_HTofDigiParMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofDigiParMod*)
   {
      return GenerateInitInstanceLocal((::HTofDigiParMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofDigiParMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofDigiParSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofDigiParSec(void *p = 0);
   static void *newArray_HTofDigiParSec(Long_t size, void *p);
   static void delete_HTofDigiParSec(void *p);
   static void deleteArray_HTofDigiParSec(void *p);
   static void destruct_HTofDigiParSec(void *p);
   static void streamer_HTofDigiParSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofDigiParSec*)
   {
      ::HTofDigiParSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofDigiParSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofDigiParSec", ::HTofDigiParSec::Class_Version(), "././htofdigipar.h", 76,
                  typeid(::HTofDigiParSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofDigiParSec::Dictionary, isa_proxy, 0,
                  sizeof(::HTofDigiParSec) );
      instance.SetNew(&new_HTofDigiParSec);
      instance.SetNewArray(&newArray_HTofDigiParSec);
      instance.SetDelete(&delete_HTofDigiParSec);
      instance.SetDeleteArray(&deleteArray_HTofDigiParSec);
      instance.SetDestructor(&destruct_HTofDigiParSec);
      instance.SetStreamerFunc(&streamer_HTofDigiParSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofDigiParSec*)
   {
      return GenerateInitInstanceLocal((::HTofDigiParSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofDigiParSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofLookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofLookupChan(void *p = 0);
   static void *newArray_HTofLookupChan(Long_t size, void *p);
   static void delete_HTofLookupChan(void *p);
   static void deleteArray_HTofLookupChan(void *p);
   static void destruct_HTofLookupChan(void *p);
   static void streamer_HTofLookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofLookupChan*)
   {
      ::HTofLookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofLookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofLookupChan", ::HTofLookupChan::Class_Version(), "././htoflookup.h", 8,
                  typeid(::HTofLookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofLookupChan::Dictionary, isa_proxy, 0,
                  sizeof(::HTofLookupChan) );
      instance.SetNew(&new_HTofLookupChan);
      instance.SetNewArray(&newArray_HTofLookupChan);
      instance.SetDelete(&delete_HTofLookupChan);
      instance.SetDeleteArray(&deleteArray_HTofLookupChan);
      instance.SetDestructor(&destruct_HTofLookupChan);
      instance.SetStreamerFunc(&streamer_HTofLookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofLookupChan*)
   {
      return GenerateInitInstanceLocal((::HTofLookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofLookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofLookupSlot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofLookupSlot(void *p = 0);
   static void *newArray_HTofLookupSlot(Long_t size, void *p);
   static void delete_HTofLookupSlot(void *p);
   static void deleteArray_HTofLookupSlot(void *p);
   static void destruct_HTofLookupSlot(void *p);
   static void streamer_HTofLookupSlot(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofLookupSlot*)
   {
      ::HTofLookupSlot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofLookupSlot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofLookupSlot", ::HTofLookupSlot::Class_Version(), "././htoflookup.h", 52,
                  typeid(::HTofLookupSlot), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofLookupSlot::Dictionary, isa_proxy, 0,
                  sizeof(::HTofLookupSlot) );
      instance.SetNew(&new_HTofLookupSlot);
      instance.SetNewArray(&newArray_HTofLookupSlot);
      instance.SetDelete(&delete_HTofLookupSlot);
      instance.SetDeleteArray(&deleteArray_HTofLookupSlot);
      instance.SetDestructor(&destruct_HTofLookupSlot);
      instance.SetStreamerFunc(&streamer_HTofLookupSlot);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofLookupSlot*)
   {
      return GenerateInitInstanceLocal((::HTofLookupSlot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofLookupSlot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofLookupCrate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofLookupCrate(void *p = 0);
   static void *newArray_HTofLookupCrate(Long_t size, void *p);
   static void delete_HTofLookupCrate(void *p);
   static void deleteArray_HTofLookupCrate(void *p);
   static void destruct_HTofLookupCrate(void *p);
   static void streamer_HTofLookupCrate(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofLookupCrate*)
   {
      ::HTofLookupCrate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofLookupCrate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofLookupCrate", ::HTofLookupCrate::Class_Version(), "././htoflookup.h", 76,
                  typeid(::HTofLookupCrate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofLookupCrate::Dictionary, isa_proxy, 0,
                  sizeof(::HTofLookupCrate) );
      instance.SetNew(&new_HTofLookupCrate);
      instance.SetNewArray(&newArray_HTofLookupCrate);
      instance.SetDelete(&delete_HTofLookupCrate);
      instance.SetDeleteArray(&deleteArray_HTofLookupCrate);
      instance.SetDestructor(&destruct_HTofLookupCrate);
      instance.SetStreamerFunc(&streamer_HTofLookupCrate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofLookupCrate*)
   {
      return GenerateInitInstanceLocal((::HTofLookupCrate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofLookupCrate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofTrb2LookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofTrb2LookupChan(void *p = 0);
   static void *newArray_HTofTrb2LookupChan(Long_t size, void *p);
   static void delete_HTofTrb2LookupChan(void *p);
   static void deleteArray_HTofTrb2LookupChan(void *p);
   static void destruct_HTofTrb2LookupChan(void *p);
   static void streamer_HTofTrb2LookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofTrb2LookupChan*)
   {
      ::HTofTrb2LookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofTrb2LookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofTrb2LookupChan", ::HTofTrb2LookupChan::Class_Version(), "././htoftrb2lookup.h", 13,
                  typeid(::HTofTrb2LookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofTrb2LookupChan::Dictionary, isa_proxy, 0,
                  sizeof(::HTofTrb2LookupChan) );
      instance.SetNew(&new_HTofTrb2LookupChan);
      instance.SetNewArray(&newArray_HTofTrb2LookupChan);
      instance.SetDelete(&delete_HTofTrb2LookupChan);
      instance.SetDeleteArray(&deleteArray_HTofTrb2LookupChan);
      instance.SetDestructor(&destruct_HTofTrb2LookupChan);
      instance.SetStreamerFunc(&streamer_HTofTrb2LookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofTrb2LookupChan*)
   {
      return GenerateInitInstanceLocal((::HTofTrb2LookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofTrb2LookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofTrb2LookupBoard_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofTrb2LookupBoard(void *p = 0);
   static void *newArray_HTofTrb2LookupBoard(Long_t size, void *p);
   static void delete_HTofTrb2LookupBoard(void *p);
   static void deleteArray_HTofTrb2LookupBoard(void *p);
   static void destruct_HTofTrb2LookupBoard(void *p);
   static void streamer_HTofTrb2LookupBoard(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofTrb2LookupBoard*)
   {
      ::HTofTrb2LookupBoard *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofTrb2LookupBoard >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofTrb2LookupBoard", ::HTofTrb2LookupBoard::Class_Version(), "././htoftrb2lookup.h", 58,
                  typeid(::HTofTrb2LookupBoard), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofTrb2LookupBoard::Dictionary, isa_proxy, 0,
                  sizeof(::HTofTrb2LookupBoard) );
      instance.SetNew(&new_HTofTrb2LookupBoard);
      instance.SetNewArray(&newArray_HTofTrb2LookupBoard);
      instance.SetDelete(&delete_HTofTrb2LookupBoard);
      instance.SetDeleteArray(&deleteArray_HTofTrb2LookupBoard);
      instance.SetDestructor(&destruct_HTofTrb2LookupBoard);
      instance.SetStreamerFunc(&streamer_HTofTrb2LookupBoard);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofTrb2LookupBoard*)
   {
      return GenerateInitInstanceLocal((::HTofTrb2LookupBoard*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofTrb2LookupBoard*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofTrb2Lookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofTrb2Lookup(void *p = 0);
   static void *newArray_HTofTrb2Lookup(Long_t size, void *p);
   static void delete_HTofTrb2Lookup(void *p);
   static void deleteArray_HTofTrb2Lookup(void *p);
   static void destruct_HTofTrb2Lookup(void *p);
   static void streamer_HTofTrb2Lookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofTrb2Lookup*)
   {
      ::HTofTrb2Lookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofTrb2Lookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofTrb2Lookup", ::HTofTrb2Lookup::Class_Version(), "././htoftrb2lookup.h", 78,
                  typeid(::HTofTrb2Lookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofTrb2Lookup::Dictionary, isa_proxy, 0,
                  sizeof(::HTofTrb2Lookup) );
      instance.SetNew(&new_HTofTrb2Lookup);
      instance.SetNewArray(&newArray_HTofTrb2Lookup);
      instance.SetDelete(&delete_HTofTrb2Lookup);
      instance.SetDeleteArray(&deleteArray_HTofTrb2Lookup);
      instance.SetDestructor(&destruct_HTofTrb2Lookup);
      instance.SetStreamerFunc(&streamer_HTofTrb2Lookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofTrb2Lookup*)
   {
      return GenerateInitInstanceLocal((::HTofTrb2Lookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofTrb2Lookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofDetector(void *p = 0);
   static void *newArray_HTofDetector(Long_t size, void *p);
   static void delete_HTofDetector(void *p);
   static void deleteArray_HTofDetector(void *p);
   static void destruct_HTofDetector(void *p);
   static void streamer_HTofDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofDetector*)
   {
      ::HTofDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofDetector", ::HTofDetector::Class_Version(), "././htofdetector.h", 8,
                  typeid(::HTofDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HTofDetector) );
      instance.SetNew(&new_HTofDetector);
      instance.SetNewArray(&newArray_HTofDetector);
      instance.SetDelete(&delete_HTofDetector);
      instance.SetDeleteArray(&deleteArray_HTofDetector);
      instance.SetDestructor(&destruct_HTofDetector);
      instance.SetStreamerFunc(&streamer_HTofDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofDetector*)
   {
      return GenerateInitInstanceLocal((::HTofDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofRawSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofRawSim(void *p = 0);
   static void *newArray_HTofRawSim(Long_t size, void *p);
   static void delete_HTofRawSim(void *p);
   static void deleteArray_HTofRawSim(void *p);
   static void destruct_HTofRawSim(void *p);
   static void streamer_HTofRawSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofRawSim*)
   {
      ::HTofRawSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofRawSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofRawSim", ::HTofRawSim::Class_Version(), "././htofrawsim.h", 6,
                  typeid(::HTofRawSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofRawSim::Dictionary, isa_proxy, 0,
                  sizeof(::HTofRawSim) );
      instance.SetNew(&new_HTofRawSim);
      instance.SetNewArray(&newArray_HTofRawSim);
      instance.SetDelete(&delete_HTofRawSim);
      instance.SetDeleteArray(&deleteArray_HTofRawSim);
      instance.SetDestructor(&destruct_HTofRawSim);
      instance.SetStreamerFunc(&streamer_HTofRawSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofRawSim*)
   {
      return GenerateInitInstanceLocal((::HTofRawSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofRawSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofRawSimTmp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofRawSimTmp(void *p = 0);
   static void *newArray_HTofRawSimTmp(Long_t size, void *p);
   static void delete_HTofRawSimTmp(void *p);
   static void deleteArray_HTofRawSimTmp(void *p);
   static void destruct_HTofRawSimTmp(void *p);
   static void streamer_HTofRawSimTmp(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofRawSimTmp*)
   {
      ::HTofRawSimTmp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofRawSimTmp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofRawSimTmp", ::HTofRawSimTmp::Class_Version(), "././htofrawsim.h", 30,
                  typeid(::HTofRawSimTmp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofRawSimTmp::Dictionary, isa_proxy, 0,
                  sizeof(::HTofRawSimTmp) );
      instance.SetNew(&new_HTofRawSimTmp);
      instance.SetNewArray(&newArray_HTofRawSimTmp);
      instance.SetDelete(&delete_HTofRawSimTmp);
      instance.SetDeleteArray(&deleteArray_HTofRawSimTmp);
      instance.SetDestructor(&destruct_HTofRawSimTmp);
      instance.SetStreamerFunc(&streamer_HTofRawSimTmp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofRawSimTmp*)
   {
      return GenerateInitInstanceLocal((::HTofRawSimTmp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofRawSimTmp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofRawSimFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofRawSimFilter(void *p = 0);
   static void *newArray_HTofRawSimFilter(Long_t size, void *p);
   static void delete_HTofRawSimFilter(void *p);
   static void deleteArray_HTofRawSimFilter(void *p);
   static void destruct_HTofRawSimFilter(void *p);
   static void streamer_HTofRawSimFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofRawSimFilter*)
   {
      ::HTofRawSimFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofRawSimFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofRawSimFilter", ::HTofRawSimFilter::Class_Version(), "././htofrawsimfilter.h", 7,
                  typeid(::HTofRawSimFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofRawSimFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HTofRawSimFilter) );
      instance.SetNew(&new_HTofRawSimFilter);
      instance.SetNewArray(&newArray_HTofRawSimFilter);
      instance.SetDelete(&delete_HTofRawSimFilter);
      instance.SetDeleteArray(&deleteArray_HTofRawSimFilter);
      instance.SetDestructor(&destruct_HTofRawSimFilter);
      instance.SetStreamerFunc(&streamer_HTofRawSimFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofRawSimFilter*)
   {
      return GenerateInitInstanceLocal((::HTofRawSimFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofRawSimFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofGeantReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofGeantReader(void *p = 0);
   static void *newArray_HTofGeantReader(Long_t size, void *p);
   static void delete_HTofGeantReader(void *p);
   static void deleteArray_HTofGeantReader(void *p);
   static void destruct_HTofGeantReader(void *p);
   static void streamer_HTofGeantReader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofGeantReader*)
   {
      ::HTofGeantReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofGeantReader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofGeantReader", ::HTofGeantReader::Class_Version(), "././htofgeantreader.h", 10,
                  typeid(::HTofGeantReader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofGeantReader::Dictionary, isa_proxy, 0,
                  sizeof(::HTofGeantReader) );
      instance.SetNew(&new_HTofGeantReader);
      instance.SetNewArray(&newArray_HTofGeantReader);
      instance.SetDelete(&delete_HTofGeantReader);
      instance.SetDeleteArray(&deleteArray_HTofGeantReader);
      instance.SetDestructor(&destruct_HTofGeantReader);
      instance.SetStreamerFunc(&streamer_HTofGeantReader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofGeantReader*)
   {
      return GenerateInitInstanceLocal((::HTofGeantReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofGeantReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofCalSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCalSim(void *p = 0);
   static void *newArray_HTofCalSim(Long_t size, void *p);
   static void delete_HTofCalSim(void *p);
   static void deleteArray_HTofCalSim(void *p);
   static void destruct_HTofCalSim(void *p);
   static void streamer_HTofCalSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCalSim*)
   {
      ::HTofCalSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCalSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCalSim", ::HTofCalSim::Class_Version(), "././htofcalsim.h", 6,
                  typeid(::HTofCalSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCalSim::Dictionary, isa_proxy, 0,
                  sizeof(::HTofCalSim) );
      instance.SetNew(&new_HTofCalSim);
      instance.SetNewArray(&newArray_HTofCalSim);
      instance.SetDelete(&delete_HTofCalSim);
      instance.SetDeleteArray(&deleteArray_HTofCalSim);
      instance.SetDestructor(&destruct_HTofCalSim);
      instance.SetStreamerFunc(&streamer_HTofCalSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCalSim*)
   {
      return GenerateInitInstanceLocal((::HTofCalSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCalSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofHitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofHitSim(void *p = 0);
   static void *newArray_HTofHitSim(Long_t size, void *p);
   static void delete_HTofHitSim(void *p);
   static void deleteArray_HTofHitSim(void *p);
   static void destruct_HTofHitSim(void *p);
   static void streamer_HTofHitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofHitSim*)
   {
      ::HTofHitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofHitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofHitSim", ::HTofHitSim::Class_Version(), "././htofhitsim.h", 6,
                  typeid(::HTofHitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofHitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HTofHitSim) );
      instance.SetNew(&new_HTofHitSim);
      instance.SetNewArray(&newArray_HTofHitSim);
      instance.SetDelete(&delete_HTofHitSim);
      instance.SetDeleteArray(&deleteArray_HTofHitSim);
      instance.SetDestructor(&destruct_HTofHitSim);
      instance.SetStreamerFunc(&streamer_HTofHitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofHitSim*)
   {
      return GenerateInitInstanceLocal((::HTofHitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofHitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofHitSimTmp_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofHitSimTmp(void *p = 0);
   static void *newArray_HTofHitSimTmp(Long_t size, void *p);
   static void delete_HTofHitSimTmp(void *p);
   static void deleteArray_HTofHitSimTmp(void *p);
   static void destruct_HTofHitSimTmp(void *p);
   static void streamer_HTofHitSimTmp(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofHitSimTmp*)
   {
      ::HTofHitSimTmp *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofHitSimTmp >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofHitSimTmp", ::HTofHitSimTmp::Class_Version(), "././htofhitsim.h", 27,
                  typeid(::HTofHitSimTmp), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofHitSimTmp::Dictionary, isa_proxy, 0,
                  sizeof(::HTofHitSimTmp) );
      instance.SetNew(&new_HTofHitSimTmp);
      instance.SetNewArray(&newArray_HTofHitSimTmp);
      instance.SetDelete(&delete_HTofHitSimTmp);
      instance.SetDeleteArray(&deleteArray_HTofHitSimTmp);
      instance.SetDestructor(&destruct_HTofHitSimTmp);
      instance.SetStreamerFunc(&streamer_HTofHitSimTmp);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofHitSimTmp*)
   {
      return GenerateInitInstanceLocal((::HTofHitSimTmp*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofHitSimTmp*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofHitFSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofHitFSim(void *p = 0);
   static void *newArray_HTofHitFSim(Long_t size, void *p);
   static void delete_HTofHitFSim(void *p);
   static void deleteArray_HTofHitFSim(void *p);
   static void destruct_HTofHitFSim(void *p);
   static void streamer_HTofHitFSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofHitFSim*)
   {
      ::HTofHitFSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofHitFSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofHitFSim", ::HTofHitFSim::Class_Version(), "././htofhitfsim.h", 12,
                  typeid(::HTofHitFSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofHitFSim::Dictionary, isa_proxy, 0,
                  sizeof(::HTofHitFSim) );
      instance.SetNew(&new_HTofHitFSim);
      instance.SetNewArray(&newArray_HTofHitFSim);
      instance.SetDelete(&delete_HTofHitFSim);
      instance.SetDeleteArray(&deleteArray_HTofHitFSim);
      instance.SetDestructor(&destruct_HTofHitFSim);
      instance.SetStreamerFunc(&streamer_HTofHitFSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofHitFSim*)
   {
      return GenerateInitInstanceLocal((::HTofHitFSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofHitFSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofTrigger_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofTrigger(void *p = 0);
   static void *newArray_HTofTrigger(Long_t size, void *p);
   static void delete_HTofTrigger(void *p);
   static void deleteArray_HTofTrigger(void *p);
   static void destruct_HTofTrigger(void *p);
   static void streamer_HTofTrigger(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofTrigger*)
   {
      ::HTofTrigger *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofTrigger >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofTrigger", ::HTofTrigger::Class_Version(), "././htoftrigger.h", 10,
                  typeid(::HTofTrigger), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofTrigger::Dictionary, isa_proxy, 0,
                  sizeof(::HTofTrigger) );
      instance.SetNew(&new_HTofTrigger);
      instance.SetNewArray(&newArray_HTofTrigger);
      instance.SetDelete(&delete_HTofTrigger);
      instance.SetDeleteArray(&deleteArray_HTofTrigger);
      instance.SetDestructor(&destruct_HTofTrigger);
      instance.SetStreamerFunc(&streamer_HTofTrigger);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofTrigger*)
   {
      return GenerateInitInstanceLocal((::HTofTrigger*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofTrigger*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofUnpacker99_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofUnpacker99(void *p = 0);
   static void *newArray_HTofUnpacker99(Long_t size, void *p);
   static void delete_HTofUnpacker99(void *p);
   static void deleteArray_HTofUnpacker99(void *p);
   static void destruct_HTofUnpacker99(void *p);
   static void streamer_HTofUnpacker99(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofUnpacker99*)
   {
      ::HTofUnpacker99 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofUnpacker99 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofUnpacker99", ::HTofUnpacker99::Class_Version(), "././htofunpacker99.h", 13,
                  typeid(::HTofUnpacker99), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofUnpacker99::Dictionary, isa_proxy, 0,
                  sizeof(::HTofUnpacker99) );
      instance.SetNew(&new_HTofUnpacker99);
      instance.SetNewArray(&newArray_HTofUnpacker99);
      instance.SetDelete(&delete_HTofUnpacker99);
      instance.SetDeleteArray(&deleteArray_HTofUnpacker99);
      instance.SetDestructor(&destruct_HTofUnpacker99);
      instance.SetStreamerFunc(&streamer_HTofUnpacker99);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofUnpacker99*)
   {
      return GenerateInitInstanceLocal((::HTofUnpacker99*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofUnpacker99*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofTrb2Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofTrb2Unpacker(void *p = 0);
   static void *newArray_HTofTrb2Unpacker(Long_t size, void *p);
   static void delete_HTofTrb2Unpacker(void *p);
   static void deleteArray_HTofTrb2Unpacker(void *p);
   static void destruct_HTofTrb2Unpacker(void *p);
   static void streamer_HTofTrb2Unpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofTrb2Unpacker*)
   {
      ::HTofTrb2Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofTrb2Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofTrb2Unpacker", ::HTofTrb2Unpacker::Class_Version(), "././htoftrb2unpacker.h", 10,
                  typeid(::HTofTrb2Unpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofTrb2Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HTofTrb2Unpacker) );
      instance.SetNew(&new_HTofTrb2Unpacker);
      instance.SetNewArray(&newArray_HTofTrb2Unpacker);
      instance.SetDelete(&delete_HTofTrb2Unpacker);
      instance.SetDeleteArray(&deleteArray_HTofTrb2Unpacker);
      instance.SetDestructor(&destruct_HTofTrb2Unpacker);
      instance.SetStreamerFunc(&streamer_HTofTrb2Unpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofTrb2Unpacker*)
   {
      return GenerateInitInstanceLocal((::HTofTrb2Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofTrb2Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HTofParRootFileIo(void *p);
   static void deleteArray_HTofParRootFileIo(void *p);
   static void destruct_HTofParRootFileIo(void *p);
   static void streamer_HTofParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofParRootFileIo*)
   {
      ::HTofParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofParRootFileIo", ::HTofParRootFileIo::Class_Version(), "././htofparrootfileio.h", 14,
                  typeid(::HTofParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HTofParRootFileIo) );
      instance.SetDelete(&delete_HTofParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HTofParRootFileIo);
      instance.SetDestructor(&destruct_HTofParRootFileIo);
      instance.SetStreamerFunc(&streamer_HTofParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HTofParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HTofParAsciiFileIo(void *p);
   static void deleteArray_HTofParAsciiFileIo(void *p);
   static void destruct_HTofParAsciiFileIo(void *p);
   static void streamer_HTofParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofParAsciiFileIo*)
   {
      ::HTofParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofParAsciiFileIo", ::HTofParAsciiFileIo::Class_Version(), "././htofparasciifileio.h", 12,
                  typeid(::HTofParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HTofParAsciiFileIo) );
      instance.SetDelete(&delete_HTofParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HTofParAsciiFileIo);
      instance.SetDestructor(&destruct_HTofParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HTofParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HTofParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofClusterFPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofClusterFPar(void *p = 0);
   static void *newArray_HTofClusterFPar(Long_t size, void *p);
   static void delete_HTofClusterFPar(void *p);
   static void deleteArray_HTofClusterFPar(void *p);
   static void destruct_HTofClusterFPar(void *p);
   static void streamer_HTofClusterFPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofClusterFPar*)
   {
      ::HTofClusterFPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofClusterFPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofClusterFPar", ::HTofClusterFPar::Class_Version(), "././htofclusterfpar.h", 9,
                  typeid(::HTofClusterFPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofClusterFPar::Dictionary, isa_proxy, 1,
                  sizeof(::HTofClusterFPar) );
      instance.SetNew(&new_HTofClusterFPar);
      instance.SetNewArray(&newArray_HTofClusterFPar);
      instance.SetDelete(&delete_HTofClusterFPar);
      instance.SetDeleteArray(&deleteArray_HTofClusterFPar);
      instance.SetDestructor(&destruct_HTofClusterFPar);
      instance.SetStreamerFunc(&streamer_HTofClusterFPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofClusterFPar*)
   {
      return GenerateInitInstanceLocal((::HTofClusterFPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofClusterFPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofCluster(void *p = 0);
   static void *newArray_HTofCluster(Long_t size, void *p);
   static void delete_HTofCluster(void *p);
   static void deleteArray_HTofCluster(void *p);
   static void destruct_HTofCluster(void *p);
   static void streamer_HTofCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofCluster*)
   {
      ::HTofCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofCluster", ::HTofCluster::Class_Version(), "././htofcluster.h", 6,
                  typeid(::HTofCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofCluster::Dictionary, isa_proxy, 1,
                  sizeof(::HTofCluster) );
      instance.SetNew(&new_HTofCluster);
      instance.SetNewArray(&newArray_HTofCluster);
      instance.SetDelete(&delete_HTofCluster);
      instance.SetDeleteArray(&deleteArray_HTofCluster);
      instance.SetDestructor(&destruct_HTofCluster);
      instance.SetStreamerFunc(&streamer_HTofCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofCluster*)
   {
      return GenerateInitInstanceLocal((::HTofCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofClusterF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofClusterF(void *p = 0);
   static void *newArray_HTofClusterF(Long_t size, void *p);
   static void delete_HTofClusterF(void *p);
   static void deleteArray_HTofClusterF(void *p);
   static void destruct_HTofClusterF(void *p);
   static void streamer_HTofClusterF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofClusterF*)
   {
      ::HTofClusterF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofClusterF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofClusterF", ::HTofClusterF::Class_Version(), "././htofclusterf.h", 20,
                  typeid(::HTofClusterF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofClusterF::Dictionary, isa_proxy, 0,
                  sizeof(::HTofClusterF) );
      instance.SetNew(&new_HTofClusterF);
      instance.SetNewArray(&newArray_HTofClusterF);
      instance.SetDelete(&delete_HTofClusterF);
      instance.SetDeleteArray(&deleteArray_HTofClusterF);
      instance.SetDestructor(&destruct_HTofClusterF);
      instance.SetStreamerFunc(&streamer_HTofClusterF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofClusterF*)
   {
      return GenerateInitInstanceLocal((::HTofClusterF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofClusterF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofClusterFSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofClusterFSim(void *p = 0);
   static void *newArray_HTofClusterFSim(Long_t size, void *p);
   static void delete_HTofClusterFSim(void *p);
   static void deleteArray_HTofClusterFSim(void *p);
   static void destruct_HTofClusterFSim(void *p);
   static void streamer_HTofClusterFSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofClusterFSim*)
   {
      ::HTofClusterFSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofClusterFSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofClusterFSim", ::HTofClusterFSim::Class_Version(), "././htofclusterfsim.h", 12,
                  typeid(::HTofClusterFSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofClusterFSim::Dictionary, isa_proxy, 0,
                  sizeof(::HTofClusterFSim) );
      instance.SetNew(&new_HTofClusterFSim);
      instance.SetNewArray(&newArray_HTofClusterFSim);
      instance.SetDelete(&delete_HTofClusterFSim);
      instance.SetDeleteArray(&deleteArray_HTofClusterFSim);
      instance.SetDestructor(&destruct_HTofClusterFSim);
      instance.SetStreamerFunc(&streamer_HTofClusterFSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofClusterFSim*)
   {
      return GenerateInitInstanceLocal((::HTofClusterFSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofClusterFSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofClusterSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofClusterSim(void *p = 0);
   static void *newArray_HTofClusterSim(Long_t size, void *p);
   static void delete_HTofClusterSim(void *p);
   static void deleteArray_HTofClusterSim(void *p);
   static void destruct_HTofClusterSim(void *p);
   static void streamer_HTofClusterSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofClusterSim*)
   {
      ::HTofClusterSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofClusterSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofClusterSim", ::HTofClusterSim::Class_Version(), "././htofclustersim.h", 9,
                  typeid(::HTofClusterSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofClusterSim::Dictionary, isa_proxy, 0,
                  sizeof(::HTofClusterSim) );
      instance.SetNew(&new_HTofClusterSim);
      instance.SetNewArray(&newArray_HTofClusterSim);
      instance.SetDelete(&delete_HTofClusterSim);
      instance.SetDeleteArray(&deleteArray_HTofClusterSim);
      instance.SetDestructor(&destruct_HTofClusterSim);
      instance.SetStreamerFunc(&streamer_HTofClusterSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofClusterSim*)
   {
      return GenerateInitInstanceLocal((::HTofClusterSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofClusterSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTofTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTofTaskSet(void *p = 0);
   static void *newArray_HTofTaskSet(Long_t size, void *p);
   static void delete_HTofTaskSet(void *p);
   static void deleteArray_HTofTaskSet(void *p);
   static void destruct_HTofTaskSet(void *p);
   static void streamer_HTofTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTofTaskSet*)
   {
      ::HTofTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTofTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTofTaskSet", ::HTofTaskSet::Class_Version(), "././htoftaskset.h", 7,
                  typeid(::HTofTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTofTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HTofTaskSet) );
      instance.SetNew(&new_HTofTaskSet);
      instance.SetNewArray(&newArray_HTofTaskSet);
      instance.SetDelete(&delete_HTofTaskSet);
      instance.SetDeleteArray(&deleteArray_HTofTaskSet);
      instance.SetDestructor(&destruct_HTofTaskSet);
      instance.SetStreamerFunc(&streamer_HTofTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTofTaskSet*)
   {
      return GenerateInitInstanceLocal((::HTofTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTofTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HTofCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCal::Class_Name()
{
   return "HTofCal";
}

//______________________________________________________________________________
const char *HTofCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofCalPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCalPar::Class_Name()
{
   return "HTofCalPar";
}

//______________________________________________________________________________
const char *HTofCalPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCalPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCalPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCalPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofCalibrater::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCalibrater::Class_Name()
{
   return "HTofCalibrater";
}

//______________________________________________________________________________
const char *HTofCalibrater::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalibrater*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCalibrater::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalibrater*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCalibrater::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalibrater*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCalibrater::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalibrater*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofDigiPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofDigiPar::Class_Name()
{
   return "HTofDigiPar";
}

//______________________________________________________________________________
const char *HTofDigiPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofDigiPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofDigiPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofDigiPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofWalkPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofWalkPar::Class_Name()
{
   return "HTofWalkPar";
}

//______________________________________________________________________________
const char *HTofWalkPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofWalkPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofWalkPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofWalkPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofWalkPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofWalkPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofWalkPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofWalkPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofDigitizer::Class_Name()
{
   return "HTofDigitizer";
}

//______________________________________________________________________________
const char *HTofDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofHit::Class_Name()
{
   return "HTofHit";
}

//______________________________________________________________________________
const char *HTofHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofGeomPar::Class_Name()
{
   return "HTofGeomPar";
}

//______________________________________________________________________________
const char *HTofGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofRaw::Class_Name()
{
   return "HTofRaw";
}

//______________________________________________________________________________
const char *HTofRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofHitF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofHitF::Class_Name()
{
   return "HTofHitF";
}

//______________________________________________________________________________
const char *HTofHitF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofHitF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofHitF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofHitF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofHitF2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofHitF2::Class_Name()
{
   return "HTofHitF2";
}

//______________________________________________________________________________
const char *HTofHitF2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofHitF2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofHitF2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofHitF2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitF2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofLookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofLookup::Class_Name()
{
   return "HTofLookup";
}

//______________________________________________________________________________
const char *HTofLookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofLookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofLookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofLookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofUnpacker::Class_Name()
{
   return "HTofUnpacker";
}

//______________________________________________________________________________
const char *HTofUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofContFact::Class_Name()
{
   return "HTofContFact";
}

//______________________________________________________________________________
const char *HTofContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofCalParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCalParCell::Class_Name()
{
   return "HTofCalParCell";
}

//______________________________________________________________________________
const char *HTofCalParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCalParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCalParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCalParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofCalParMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCalParMod::Class_Name()
{
   return "HTofCalParMod";
}

//______________________________________________________________________________
const char *HTofCalParMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCalParMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCalParMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCalParMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofCalParSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCalParSec::Class_Name()
{
   return "HTofCalParSec";
}

//______________________________________________________________________________
const char *HTofCalParSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCalParSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCalParSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCalParSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalParSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofDigiParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofDigiParCell::Class_Name()
{
   return "HTofDigiParCell";
}

//______________________________________________________________________________
const char *HTofDigiParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofDigiParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofDigiParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofDigiParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofDigiParMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofDigiParMod::Class_Name()
{
   return "HTofDigiParMod";
}

//______________________________________________________________________________
const char *HTofDigiParMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofDigiParMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofDigiParMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofDigiParMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofDigiParSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofDigiParSec::Class_Name()
{
   return "HTofDigiParSec";
}

//______________________________________________________________________________
const char *HTofDigiParSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofDigiParSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofDigiParSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofDigiParSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDigiParSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofLookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofLookupChan::Class_Name()
{
   return "HTofLookupChan";
}

//______________________________________________________________________________
const char *HTofLookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofLookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofLookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofLookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofLookupSlot::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofLookupSlot::Class_Name()
{
   return "HTofLookupSlot";
}

//______________________________________________________________________________
const char *HTofLookupSlot::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupSlot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofLookupSlot::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupSlot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofLookupSlot::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupSlot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofLookupSlot::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupSlot*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofLookupCrate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofLookupCrate::Class_Name()
{
   return "HTofLookupCrate";
}

//______________________________________________________________________________
const char *HTofLookupCrate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupCrate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofLookupCrate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupCrate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofLookupCrate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupCrate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofLookupCrate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofLookupCrate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofTrb2LookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofTrb2LookupChan::Class_Name()
{
   return "HTofTrb2LookupChan";
}

//______________________________________________________________________________
const char *HTofTrb2LookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofTrb2LookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofTrb2LookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofTrb2LookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofTrb2LookupBoard::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofTrb2LookupBoard::Class_Name()
{
   return "HTofTrb2LookupBoard";
}

//______________________________________________________________________________
const char *HTofTrb2LookupBoard::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupBoard*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofTrb2LookupBoard::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupBoard*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofTrb2LookupBoard::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupBoard*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofTrb2LookupBoard::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2LookupBoard*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofTrb2Lookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofTrb2Lookup::Class_Name()
{
   return "HTofTrb2Lookup";
}

//______________________________________________________________________________
const char *HTofTrb2Lookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Lookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofTrb2Lookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Lookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofTrb2Lookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Lookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofTrb2Lookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Lookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofDetector::Class_Name()
{
   return "HTofDetector";
}

//______________________________________________________________________________
const char *HTofDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofRawSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofRawSim::Class_Name()
{
   return "HTofRawSim";
}

//______________________________________________________________________________
const char *HTofRawSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofRawSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofRawSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofRawSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofRawSimTmp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofRawSimTmp::Class_Name()
{
   return "HTofRawSimTmp";
}

//______________________________________________________________________________
const char *HTofRawSimTmp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimTmp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofRawSimTmp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimTmp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofRawSimTmp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimTmp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofRawSimTmp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimTmp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofRawSimFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofRawSimFilter::Class_Name()
{
   return "HTofRawSimFilter";
}

//______________________________________________________________________________
const char *HTofRawSimFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofRawSimFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofRawSimFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofRawSimFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofRawSimFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofGeantReader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofGeantReader::Class_Name()
{
   return "HTofGeantReader";
}

//______________________________________________________________________________
const char *HTofGeantReader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeantReader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofGeantReader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeantReader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofGeantReader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeantReader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofGeantReader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofGeantReader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofCalSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCalSim::Class_Name()
{
   return "HTofCalSim";
}

//______________________________________________________________________________
const char *HTofCalSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCalSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCalSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCalSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCalSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofHitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofHitSim::Class_Name()
{
   return "HTofHitSim";
}

//______________________________________________________________________________
const char *HTofHitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofHitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofHitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofHitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofHitSimTmp::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofHitSimTmp::Class_Name()
{
   return "HTofHitSimTmp";
}

//______________________________________________________________________________
const char *HTofHitSimTmp::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSimTmp*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofHitSimTmp::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSimTmp*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofHitSimTmp::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSimTmp*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofHitSimTmp::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitSimTmp*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofHitFSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofHitFSim::Class_Name()
{
   return "HTofHitFSim";
}

//______________________________________________________________________________
const char *HTofHitFSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitFSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofHitFSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitFSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofHitFSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitFSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofHitFSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofHitFSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofTrigger::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofTrigger::Class_Name()
{
   return "HTofTrigger";
}

//______________________________________________________________________________
const char *HTofTrigger::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrigger*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofTrigger::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrigger*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofTrigger::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrigger*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofTrigger::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrigger*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofUnpacker99::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofUnpacker99::Class_Name()
{
   return "HTofUnpacker99";
}

//______________________________________________________________________________
const char *HTofUnpacker99::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker99*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofUnpacker99::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker99*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofUnpacker99::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker99*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofUnpacker99::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofUnpacker99*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofTrb2Unpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofTrb2Unpacker::Class_Name()
{
   return "HTofTrb2Unpacker";
}

//______________________________________________________________________________
const char *HTofTrb2Unpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofTrb2Unpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofTrb2Unpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofTrb2Unpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTrb2Unpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofParRootFileIo::Class_Name()
{
   return "HTofParRootFileIo";
}

//______________________________________________________________________________
const char *HTofParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofParAsciiFileIo::Class_Name()
{
   return "HTofParAsciiFileIo";
}

//______________________________________________________________________________
const char *HTofParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofClusterFPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofClusterFPar::Class_Name()
{
   return "HTofClusterFPar";
}

//______________________________________________________________________________
const char *HTofClusterFPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofClusterFPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofClusterFPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofClusterFPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofCluster::Class_Name()
{
   return "HTofCluster";
}

//______________________________________________________________________________
const char *HTofCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofClusterF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofClusterF::Class_Name()
{
   return "HTofClusterF";
}

//______________________________________________________________________________
const char *HTofClusterF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofClusterF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofClusterF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofClusterF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofClusterFSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofClusterFSim::Class_Name()
{
   return "HTofClusterFSim";
}

//______________________________________________________________________________
const char *HTofClusterFSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofClusterFSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofClusterFSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofClusterFSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterFSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofClusterSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofClusterSim::Class_Name()
{
   return "HTofClusterSim";
}

//______________________________________________________________________________
const char *HTofClusterSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofClusterSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofClusterSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofClusterSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofClusterSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTofTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTofTaskSet::Class_Name()
{
   return "HTofTaskSet";
}

//______________________________________________________________________________
const char *HTofTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTofTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTofTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTofTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTofTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HTofDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetector::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTofDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofDetector::IsA(), kTRUE);
      HDetector::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofDetector.
      TClass *R__cl = ::HTofDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofDetector(void *p) {
      return  p ? new(p) ::HTofDetector : new ::HTofDetector;
   }
   static void *newArray_HTofDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HTofDetector[nElements] : new ::HTofDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofDetector(void *p) {
      delete ((::HTofDetector*)p);
   }
   static void deleteArray_HTofDetector(void *p) {
      delete [] ((::HTofDetector*)p);
   }
   static void destruct_HTofDetector(void *p) {
      typedef ::HTofDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofDetector(TBuffer &buf, void *obj) {
      ((::HTofDetector*)obj)->::HTofDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofDetector

//______________________________________________________________________________
void HTofContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HTofContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofContFact.
      TClass *R__cl = ::HTofContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofContFact(void *p) {
      return  p ? new(p) ::HTofContFact : new ::HTofContFact;
   }
   static void *newArray_HTofContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HTofContFact[nElements] : new ::HTofContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofContFact(void *p) {
      delete ((::HTofContFact*)p);
   }
   static void deleteArray_HTofContFact(void *p) {
      delete [] ((::HTofContFact*)p);
   }
   static void destruct_HTofContFact(void *p) {
      typedef ::HTofContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofContFact(TBuffer &buf, void *obj) {
      ((::HTofContFact*)obj)->::HTofContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofContFact

//______________________________________________________________________________
void HTofParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofParRootFileIo.

   HDetParRootFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HTofParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofParRootFileIo.
      TClass *R__cl = ::HTofParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HTofParRootFileIo(void *p) {
      delete ((::HTofParRootFileIo*)p);
   }
   static void deleteArray_HTofParRootFileIo(void *p) {
      delete [] ((::HTofParRootFileIo*)p);
   }
   static void destruct_HTofParRootFileIo(void *p) {
      typedef ::HTofParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofParRootFileIo(TBuffer &buf, void *obj) {
      ((::HTofParRootFileIo*)obj)->::HTofParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofParRootFileIo

//______________________________________________________________________________
void HTofParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HTofParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofParAsciiFileIo.
      TClass *R__cl = ::HTofParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setSize", &setSize);
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HTofParAsciiFileIo(void *p) {
      delete ((::HTofParAsciiFileIo*)p);
   }
   static void deleteArray_HTofParAsciiFileIo(void *p) {
      delete [] ((::HTofParAsciiFileIo*)p);
   }
   static void destruct_HTofParAsciiFileIo(void *p) {
      typedef ::HTofParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HTofParAsciiFileIo*)obj)->::HTofParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofParAsciiFileIo

//______________________________________________________________________________
void HTofRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> rightT;
      R__b >> leftT;
      R__b >> rightQ;
      R__b >> leftQ;
      R__b >> nHit;
      R__b >> sector;
      R__b >> module;
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HTofRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofRaw::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << rightT;
      R__b << leftT;
      R__b << rightQ;
      R__b << leftQ;
      R__b << nHit;
      R__b << sector;
      R__b << module;
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofRaw.
      TClass *R__cl = ::HTofRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightT", &rightT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftT", &leftT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightQ", &rightQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftQ", &leftQ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHit", &nHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofRaw(void *p) {
      return  p ? new(p) ::HTofRaw : new ::HTofRaw;
   }
   static void *newArray_HTofRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HTofRaw[nElements] : new ::HTofRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofRaw(void *p) {
      delete ((::HTofRaw*)p);
   }
   static void deleteArray_HTofRaw(void *p) {
      delete [] ((::HTofRaw*)p);
   }
   static void destruct_HTofRaw(void *p) {
      typedef ::HTofRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofRaw(TBuffer &buf, void *obj) {
      ((::HTofRaw*)obj)->::HTofRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofRaw

//______________________________________________________________________________
void HTofCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> timeR;
      R__b >> timeL;
      R__b >> chargeR;
      R__b >> chargeL;
      R__b >> nHit;
      R__b >> address;
      R__b.CheckByteCount(R__s, R__c, HTofCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofCal::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << timeR;
      R__b << timeL;
      R__b << chargeR;
      R__b << chargeL;
      R__b << nHit;
      R__b << address;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCal.
      TClass *R__cl = ::HTofCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeR", &timeR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeL", &timeL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeR", &chargeR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeL", &chargeL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHit", &nHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCal(void *p) {
      return  p ? new(p) ::HTofCal : new ::HTofCal;
   }
   static void *newArray_HTofCal(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCal[nElements] : new ::HTofCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCal(void *p) {
      delete ((::HTofCal*)p);
   }
   static void deleteArray_HTofCal(void *p) {
      delete [] ((::HTofCal*)p);
   }
   static void destruct_HTofCal(void *p) {
      typedef ::HTofCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCal(TBuffer &buf, void *obj) {
      ((::HTofCal*)obj)->::HTofCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCal

//______________________________________________________________________________
void HTofHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofHit.
      TClass *R__cl = ::HTofHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xpos", &xpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xposAdc", &xposAdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep", &edep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lAmp", &lAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rAmp", &rAmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlab", &xlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ylab", &ylab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlab", &zlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dist", &dist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagAdc", &flagAdc);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofHit(void *p) {
      return  p ? new(p) ::HTofHit : new ::HTofHit;
   }
   static void *newArray_HTofHit(Long_t nElements, void *p) {
      return p ? new(p) ::HTofHit[nElements] : new ::HTofHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofHit(void *p) {
      delete ((::HTofHit*)p);
   }
   static void deleteArray_HTofHit(void *p) {
      delete [] ((::HTofHit*)p);
   }
   static void destruct_HTofHit(void *p) {
      typedef ::HTofHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofHit(TBuffer &buf, void *obj) {
      ((::HTofHit*)obj)->::HTofHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofHit

//______________________________________________________________________________
void HTofCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCluster.
      TClass *R__cl = ::HTofCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clustSize", &clustSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clustProbAll", &clustProbAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clustProbLep", &clustProbLep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexhit2", &indexhit2);
      HTofHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCluster(void *p) {
      return  p ? new(p) ::HTofCluster : new ::HTofCluster;
   }
   static void *newArray_HTofCluster(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCluster[nElements] : new ::HTofCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCluster(void *p) {
      delete ((::HTofCluster*)p);
   }
   static void deleteArray_HTofCluster(void *p) {
      delete [] ((::HTofCluster*)p);
   }
   static void destruct_HTofCluster(void *p) {
      typedef ::HTofCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCluster(TBuffer &buf, void *obj) {
      ((::HTofCluster*)obj)->::HTofCluster::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCluster

//______________________________________________________________________________
void HTofCalibrater::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofCalibrater.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HReconstructor::Streamer(R__b);
      fLoc.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTofCalibrater::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofCalibrater::IsA(), kTRUE);
      HReconstructor::Streamer(R__b);
      fLoc.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofCalibrater::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCalibrater.
      TClass *R__cl = ::HTofCalibrater::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCat", &fRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCat", &fCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalPar", &fCalPar);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCalibrater(void *p) {
      return  p ? new(p) ::HTofCalibrater : new ::HTofCalibrater;
   }
   static void *newArray_HTofCalibrater(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCalibrater[nElements] : new ::HTofCalibrater[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCalibrater(void *p) {
      delete ((::HTofCalibrater*)p);
   }
   static void deleteArray_HTofCalibrater(void *p) {
      delete [] ((::HTofCalibrater*)p);
   }
   static void destruct_HTofCalibrater(void *p) {
      typedef ::HTofCalibrater current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCalibrater(TBuffer &buf, void *obj) {
      ((::HTofCalibrater*)obj)->::HTofCalibrater::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCalibrater

//______________________________________________________________________________
void HTofHitF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofHitF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HTofHitF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofHitF.
      TClass *R__cl = ::HTofHitF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCat", &fRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCatTmp", &fRawCatTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCatTmp", &fHitCatTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartHitCat", &fStartHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalPar", &fCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalParSim", &fCalParSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTmp", &iterTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofGeometry", &fTofGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeometry", &fSpecGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTofSimulation", &fTofSimulation);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofHitF(void *p) {
      return  p ? new(p) ::HTofHitF : new ::HTofHitF;
   }
   static void *newArray_HTofHitF(Long_t nElements, void *p) {
      return p ? new(p) ::HTofHitF[nElements] : new ::HTofHitF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofHitF(void *p) {
      delete ((::HTofHitF*)p);
   }
   static void deleteArray_HTofHitF(void *p) {
      delete [] ((::HTofHitF*)p);
   }
   static void destruct_HTofHitF(void *p) {
      typedef ::HTofHitF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofHitF(TBuffer &buf, void *obj) {
      ((::HTofHitF*)obj)->::HTofHitF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofHitF

//______________________________________________________________________________
void HTofHitF2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofHitF2.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HTofHitF2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofHitF2.
      TClass *R__cl = ::HTofHitF2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCat", &fRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCatTmp", &fRawCatTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCatTmp", &fHitCatTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartHitCat", &fStartHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalPar", &fCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalParSim", &fCalParSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiPar", &fDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTmp", &iterTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofGeometry", &fTofGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeometry", &fSpecGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTofSimulation", &fTofSimulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofWalkPar", &fTofWalkPar);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofHitF2(void *p) {
      return  p ? new(p) ::HTofHitF2 : new ::HTofHitF2;
   }
   static void *newArray_HTofHitF2(Long_t nElements, void *p) {
      return p ? new(p) ::HTofHitF2[nElements] : new ::HTofHitF2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofHitF2(void *p) {
      delete ((::HTofHitF2*)p);
   }
   static void deleteArray_HTofHitF2(void *p) {
      delete [] ((::HTofHitF2*)p);
   }
   static void destruct_HTofHitF2(void *p) {
      typedef ::HTofHitF2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofHitF2(TBuffer &buf, void *obj) {
      ((::HTofHitF2*)obj)->::HTofHitF2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofHitF2

//______________________________________________________________________________
void HTofDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofDigitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HTofDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofDigitizer.
      TClass *R__cl = ::HTofDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantCat", &fGeantCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantKineCat", &fGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCat", &fRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCatTmp", &fRawCatTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiPar", &fDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofWalkPar", &fTofWalkPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofCalPar", &fTofCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterGeant", &iterGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTofRaw", &iterTofRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTofRawTmp", &iterTofRawTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "storeFirstTrack", &storeFirstTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debug", &debug);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*out", &out);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*outFile", &outFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useOld", &useOld);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofDigitizer(void *p) {
      return  p ? new(p) ::HTofDigitizer : new ::HTofDigitizer;
   }
   static void *newArray_HTofDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HTofDigitizer[nElements] : new ::HTofDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofDigitizer(void *p) {
      delete ((::HTofDigitizer*)p);
   }
   static void deleteArray_HTofDigitizer(void *p) {
      delete [] ((::HTofDigitizer*)p);
   }
   static void destruct_HTofDigitizer(void *p) {
      typedef ::HTofDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofDigitizer(TBuffer &buf, void *obj) {
      ((::HTofDigitizer*)obj)->::HTofDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofDigitizer

//______________________________________________________________________________
void HTofClusterF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofClusterF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HTofClusterF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofClusterF.
      TClass *R__cl = ::HTofClusterF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hit", &hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cluster", &cluster);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_ph", &tof_ph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xposMod_ph", &xposMod_ph);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_h", &tof_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xposMod_h", &xposMod_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep_h", &edep_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xposModAdc_h", &xposModAdc_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lAmp_h", &lAmp_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rAmp_h", &rAmp_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlab_h", &xlab_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ylab_h", &ylab_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlab_h", &zlab_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagAdc_h", &flagAdc_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "absTd_h", &absTd_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "absXd_h", &absXd_h);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof_c", &tof_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xposMod_c", &xposMod_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edep_c", &edep_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xposModAdc_c", &xposModAdc_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lAmp_c", &lAmp_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rAmp_c", &rAmp_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlab_c", &xlab_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ylab_c", &ylab_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlab_c", &zlab_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagAdc_c", &flagAdc_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size_c", &size_c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusterCat", &fClusterCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fpLoc", &fpLoc);
      R__insp.InspectMember(fpLoc, "fpLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCLoc", &fCLoc);
      R__insp.InspectMember(fCLoc, "fCLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterh", &iterh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterc", &iterc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofGeometry", &fTofGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSpecGeometry", &fSpecGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusterFPar", &fClusterFPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexHit1", &indexHit1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexHit2", &indexHit2);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofClusterF(void *p) {
      return  p ? new(p) ::HTofClusterF : new ::HTofClusterF;
   }
   static void *newArray_HTofClusterF(Long_t nElements, void *p) {
      return p ? new(p) ::HTofClusterF[nElements] : new ::HTofClusterF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofClusterF(void *p) {
      delete ((::HTofClusterF*)p);
   }
   static void deleteArray_HTofClusterF(void *p) {
      delete [] ((::HTofClusterF*)p);
   }
   static void destruct_HTofClusterF(void *p) {
      typedef ::HTofClusterF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofClusterF(TBuffer &buf, void *obj) {
      ((::HTofClusterF*)obj)->::HTofClusterF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofClusterF

//______________________________________________________________________________
void HTofUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofUnpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HTofUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofUnpacker.
      TClass *R__cl = ::HTofUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evCounter", &evCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "errorCounter", &errorCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofUnpacker(void *p) {
      return  p ? new(p) ::HTofUnpacker : new ::HTofUnpacker;
   }
   static void *newArray_HTofUnpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HTofUnpacker[nElements] : new ::HTofUnpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofUnpacker(void *p) {
      delete ((::HTofUnpacker*)p);
   }
   static void deleteArray_HTofUnpacker(void *p) {
      delete [] ((::HTofUnpacker*)p);
   }
   static void destruct_HTofUnpacker(void *p) {
      typedef ::HTofUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofUnpacker(TBuffer &buf, void *obj) {
      ((::HTofUnpacker*)obj)->::HTofUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofUnpacker

//______________________________________________________________________________
void HTofUnpacker99::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofUnpacker99.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HTofUnpacker99::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofUnpacker99.
      TClass *R__cl = ::HTofUnpacker99::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTofData", &pTofData);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofUnpacker99(void *p) {
      return  p ? new(p) ::HTofUnpacker99 : new ::HTofUnpacker99;
   }
   static void *newArray_HTofUnpacker99(Long_t nElements, void *p) {
      return p ? new(p) ::HTofUnpacker99[nElements] : new ::HTofUnpacker99[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofUnpacker99(void *p) {
      delete ((::HTofUnpacker99*)p);
   }
   static void deleteArray_HTofUnpacker99(void *p) {
      delete [] ((::HTofUnpacker99*)p);
   }
   static void destruct_HTofUnpacker99(void *p) {
      typedef ::HTofUnpacker99 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofUnpacker99(TBuffer &buf, void *obj) {
      ((::HTofUnpacker99*)obj)->::HTofUnpacker99::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofUnpacker99

//______________________________________________________________________________
void HTofTrb2Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofTrb2Unpacker.

   HTrb2Unpacker::Streamer(R__b);
}

//______________________________________________________________________________
void HTofTrb2Unpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofTrb2Unpacker.
      TClass *R__cl = ::HTofTrb2Unpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeRef", &timeRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeRefRemove", &timeRefRemove);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeShift", &timeShift);
      HTrb2Unpacker::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofTrb2Unpacker(void *p) {
      return  p ? new(p) ::HTofTrb2Unpacker : new ::HTofTrb2Unpacker;
   }
   static void *newArray_HTofTrb2Unpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HTofTrb2Unpacker[nElements] : new ::HTofTrb2Unpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofTrb2Unpacker(void *p) {
      delete ((::HTofTrb2Unpacker*)p);
   }
   static void deleteArray_HTofTrb2Unpacker(void *p) {
      delete [] ((::HTofTrb2Unpacker*)p);
   }
   static void destruct_HTofTrb2Unpacker(void *p) {
      typedef ::HTofTrb2Unpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofTrb2Unpacker(TBuffer &buf, void *obj) {
      ((::HTofTrb2Unpacker*)obj)->::HTofTrb2Unpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofTrb2Unpacker

//______________________________________________________________________________
void HTofCalPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofCalPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTofCalPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofCalPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofCalPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCalPar.
      TClass *R__cl = ::HTofCalPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCalPar(void *p) {
      return  p ? new(p) ::HTofCalPar : new ::HTofCalPar;
   }
   static void *newArray_HTofCalPar(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCalPar[nElements] : new ::HTofCalPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCalPar(void *p) {
      delete ((::HTofCalPar*)p);
   }
   static void deleteArray_HTofCalPar(void *p) {
      delete [] ((::HTofCalPar*)p);
   }
   static void destruct_HTofCalPar(void *p) {
      typedef ::HTofCalPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCalPar(TBuffer &buf, void *obj) {
      ((::HTofCalPar*)obj)->::HTofCalPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCalPar

//______________________________________________________________________________
void HTofCalParSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofCalParSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTofCalParSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofCalParSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofCalParSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCalParSec.
      TClass *R__cl = ::HTofCalParSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCalParSec(void *p) {
      return  p ? new(p) ::HTofCalParSec : new ::HTofCalParSec;
   }
   static void *newArray_HTofCalParSec(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCalParSec[nElements] : new ::HTofCalParSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCalParSec(void *p) {
      delete ((::HTofCalParSec*)p);
   }
   static void deleteArray_HTofCalParSec(void *p) {
      delete [] ((::HTofCalParSec*)p);
   }
   static void destruct_HTofCalParSec(void *p) {
      typedef ::HTofCalParSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCalParSec(TBuffer &buf, void *obj) {
      ((::HTofCalParSec*)obj)->::HTofCalParSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCalParSec

//______________________________________________________________________________
void HTofCalParMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofCalParMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTofCalParMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofCalParMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofCalParMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCalParMod.
      TClass *R__cl = ::HTofCalParMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCalParMod(void *p) {
      return  p ? new(p) ::HTofCalParMod : new ::HTofCalParMod;
   }
   static void *newArray_HTofCalParMod(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCalParMod[nElements] : new ::HTofCalParMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCalParMod(void *p) {
      delete ((::HTofCalParMod*)p);
   }
   static void deleteArray_HTofCalParMod(void *p) {
      delete [] ((::HTofCalParMod*)p);
   }
   static void destruct_HTofCalParMod(void *p) {
      typedef ::HTofCalParMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCalParMod(TBuffer &buf, void *obj) {
      ((::HTofCalParMod*)obj)->::HTofCalParMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCalParMod

//______________________________________________________________________________
void HTofCalParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCalParCell.
      TClass *R__cl = ::HTofCalParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftK", &leftK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightK", &rightK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vGroup", &vGroup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "posK", &posK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timK", &timK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedestalL", &pedestalL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pedestalR", &pedestalR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "attLen", &attLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gainAsym", &gainAsym);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "edepK", &edepK);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twC1", &twC1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twC2", &twC2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "twC3", &twC3);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCalParCell(void *p) {
      return  p ? new(p) ::HTofCalParCell : new ::HTofCalParCell;
   }
   static void *newArray_HTofCalParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCalParCell[nElements] : new ::HTofCalParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCalParCell(void *p) {
      delete ((::HTofCalParCell*)p);
   }
   static void deleteArray_HTofCalParCell(void *p) {
      delete [] ((::HTofCalParCell*)p);
   }
   static void destruct_HTofCalParCell(void *p) {
      typedef ::HTofCalParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCalParCell(TBuffer &buf, void *obj) {
      ((::HTofCalParCell*)obj)->::HTofCalParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCalParCell

//______________________________________________________________________________
void HTofDigiPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofDigiPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTofDigiPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofDigiPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofDigiPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofDigiPar.
      TClass *R__cl = ::HTofDigiPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofDigiPar(void *p) {
      return  p ? new(p) ::HTofDigiPar : new ::HTofDigiPar;
   }
   static void *newArray_HTofDigiPar(Long_t nElements, void *p) {
      return p ? new(p) ::HTofDigiPar[nElements] : new ::HTofDigiPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofDigiPar(void *p) {
      delete ((::HTofDigiPar*)p);
   }
   static void deleteArray_HTofDigiPar(void *p) {
      delete [] ((::HTofDigiPar*)p);
   }
   static void destruct_HTofDigiPar(void *p) {
      typedef ::HTofDigiPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofDigiPar(TBuffer &buf, void *obj) {
      ((::HTofDigiPar*)obj)->::HTofDigiPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofDigiPar

//______________________________________________________________________________
void HTofDigiParSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofDigiParSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTofDigiParSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofDigiParSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofDigiParSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofDigiParSec.
      TClass *R__cl = ::HTofDigiParSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofDigiParSec(void *p) {
      return  p ? new(p) ::HTofDigiParSec : new ::HTofDigiParSec;
   }
   static void *newArray_HTofDigiParSec(Long_t nElements, void *p) {
      return p ? new(p) ::HTofDigiParSec[nElements] : new ::HTofDigiParSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofDigiParSec(void *p) {
      delete ((::HTofDigiParSec*)p);
   }
   static void deleteArray_HTofDigiParSec(void *p) {
      delete [] ((::HTofDigiParSec*)p);
   }
   static void destruct_HTofDigiParSec(void *p) {
      typedef ::HTofDigiParSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofDigiParSec(TBuffer &buf, void *obj) {
      ((::HTofDigiParSec*)obj)->::HTofDigiParSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofDigiParSec

//______________________________________________________________________________
void HTofDigiParMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofDigiParMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTofDigiParMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofDigiParMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofDigiParMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofDigiParMod.
      TClass *R__cl = ::HTofDigiParMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofDigiParMod(void *p) {
      return  p ? new(p) ::HTofDigiParMod : new ::HTofDigiParMod;
   }
   static void *newArray_HTofDigiParMod(Long_t nElements, void *p) {
      return p ? new(p) ::HTofDigiParMod[nElements] : new ::HTofDigiParMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofDigiParMod(void *p) {
      delete ((::HTofDigiParMod*)p);
   }
   static void deleteArray_HTofDigiParMod(void *p) {
      delete [] ((::HTofDigiParMod*)p);
   }
   static void destruct_HTofDigiParMod(void *p) {
      typedef ::HTofDigiParMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofDigiParMod(TBuffer &buf, void *obj) {
      ((::HTofDigiParMod*)obj)->::HTofDigiParMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofDigiParMod

//______________________________________________________________________________
void HTofDigiParCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofDigiParCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> halfLen;
      R__b >> angleRef;
      R__b >> attenLen;
      R__b >> groupVel;
      R__b >> slopeLeftTDC;
      R__b >> slopeRightTDC;
      R__b >> thrLeftCFD;
      R__b >> thrRightCFD;
      R__b >> thrLeftADC;
      R__b >> thrRightADC;
      R__b.CheckByteCount(R__s, R__c, HTofDigiParCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofDigiParCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << halfLen;
      R__b << angleRef;
      R__b << attenLen;
      R__b << groupVel;
      R__b << slopeLeftTDC;
      R__b << slopeRightTDC;
      R__b << thrLeftCFD;
      R__b << thrRightCFD;
      R__b << thrLeftADC;
      R__b << thrRightADC;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofDigiParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofDigiParCell.
      TClass *R__cl = ::HTofDigiParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "halfLen", &halfLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "angleRef", &angleRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "attenLen", &attenLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "groupVel", &groupVel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeLeftTDC", &slopeLeftTDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeRightTDC", &slopeRightTDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrLeftCFD", &thrLeftCFD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrRightCFD", &thrRightCFD);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrLeftADC", &thrLeftADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thrRightADC", &thrRightADC);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofDigiParCell(void *p) {
      return  p ? new(p) ::HTofDigiParCell : new ::HTofDigiParCell;
   }
   static void *newArray_HTofDigiParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HTofDigiParCell[nElements] : new ::HTofDigiParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofDigiParCell(void *p) {
      delete ((::HTofDigiParCell*)p);
   }
   static void deleteArray_HTofDigiParCell(void *p) {
      delete [] ((::HTofDigiParCell*)p);
   }
   static void destruct_HTofDigiParCell(void *p) {
      typedef ::HTofDigiParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofDigiParCell(TBuffer &buf, void *obj) {
      ((::HTofDigiParCell*)obj)->::HTofDigiParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofDigiParCell

//______________________________________________________________________________
void HTofGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetGeomPar::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTofGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofGeomPar::IsA(), kTRUE);
      HDetGeomPar::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofGeomPar.
      TClass *R__cl = ::HTofGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetGeomPar::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofGeomPar(void *p) {
      return  p ? new(p) ::HTofGeomPar : new ::HTofGeomPar;
   }
   static void *newArray_HTofGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HTofGeomPar[nElements] : new ::HTofGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofGeomPar(void *p) {
      delete ((::HTofGeomPar*)p);
   }
   static void deleteArray_HTofGeomPar(void *p) {
      delete [] ((::HTofGeomPar*)p);
   }
   static void destruct_HTofGeomPar(void *p) {
      typedef ::HTofGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofGeomPar(TBuffer &buf, void *obj) {
      ((::HTofGeomPar*)obj)->::HTofGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofGeomPar

//______________________________________________________________________________
void HTofLookupChan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofLookupChan.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> sector;
      R__b >> module;
      R__b >> cell;
      R__b >> side;
      R__b.CheckByteCount(R__s, R__c, HTofLookupChan::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofLookupChan::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << sector;
      R__b << module;
      R__b << cell;
      R__b << side;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofLookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofLookupChan.
      TClass *R__cl = ::HTofLookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofLookupChan(void *p) {
      return  p ? new(p) ::HTofLookupChan : new ::HTofLookupChan;
   }
   static void *newArray_HTofLookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HTofLookupChan[nElements] : new ::HTofLookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofLookupChan(void *p) {
      delete ((::HTofLookupChan*)p);
   }
   static void deleteArray_HTofLookupChan(void *p) {
      delete [] ((::HTofLookupChan*)p);
   }
   static void destruct_HTofLookupChan(void *p) {
      typedef ::HTofLookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofLookupChan(TBuffer &buf, void *obj) {
      ((::HTofLookupChan*)obj)->::HTofLookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofLookupChan

//______________________________________________________________________________
void HTofLookupSlot::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofLookupSlot.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> modType;
      R__b >> maxChannel;
      R__b >> nChannels;
      R__b.CheckByteCount(R__s, R__c, HTofLookupSlot::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofLookupSlot::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << modType;
      R__b << maxChannel;
      R__b << nChannels;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofLookupSlot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofLookupSlot.
      TClass *R__cl = ::HTofLookupSlot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modType", &modType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxChannel", &maxChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChannels", &nChannels);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofLookupSlot(void *p) {
      return  p ? new(p) ::HTofLookupSlot : new ::HTofLookupSlot;
   }
   static void *newArray_HTofLookupSlot(Long_t nElements, void *p) {
      return p ? new(p) ::HTofLookupSlot[nElements] : new ::HTofLookupSlot[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofLookupSlot(void *p) {
      delete ((::HTofLookupSlot*)p);
   }
   static void deleteArray_HTofLookupSlot(void *p) {
      delete [] ((::HTofLookupSlot*)p);
   }
   static void destruct_HTofLookupSlot(void *p) {
      typedef ::HTofLookupSlot current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofLookupSlot(TBuffer &buf, void *obj) {
      ((::HTofLookupSlot*)obj)->::HTofLookupSlot::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofLookupSlot

//______________________________________________________________________________
void HTofLookupCrate::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofLookupCrate.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> maxSlot;
      R__b >> nSlots;
      R__b.CheckByteCount(R__s, R__c, HTofLookupCrate::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofLookupCrate::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << maxSlot;
      R__b << nSlots;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofLookupCrate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofLookupCrate.
      TClass *R__cl = ::HTofLookupCrate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxSlot", &maxSlot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSlots", &nSlots);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofLookupCrate(void *p) {
      return  p ? new(p) ::HTofLookupCrate : new ::HTofLookupCrate;
   }
   static void *newArray_HTofLookupCrate(Long_t nElements, void *p) {
      return p ? new(p) ::HTofLookupCrate[nElements] : new ::HTofLookupCrate[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofLookupCrate(void *p) {
      delete ((::HTofLookupCrate*)p);
   }
   static void deleteArray_HTofLookupCrate(void *p) {
      delete [] ((::HTofLookupCrate*)p);
   }
   static void destruct_HTofLookupCrate(void *p) {
      typedef ::HTofLookupCrate current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofLookupCrate(TBuffer &buf, void *obj) {
      ((::HTofLookupCrate*)obj)->::HTofLookupCrate::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofLookupCrate

//______________________________________________________________________________
void HTofLookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofLookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> maxCrate;
      R__b.CheckByteCount(R__s, R__c, HTofLookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofLookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << maxCrate;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofLookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofLookup.
      TClass *R__cl = ::HTofLookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCrate", &maxCrate);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofLookup(void *p) {
      return  p ? new(p) ::HTofLookup : new ::HTofLookup;
   }
   static void *newArray_HTofLookup(Long_t nElements, void *p) {
      return p ? new(p) ::HTofLookup[nElements] : new ::HTofLookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofLookup(void *p) {
      delete ((::HTofLookup*)p);
   }
   static void deleteArray_HTofLookup(void *p) {
      delete [] ((::HTofLookup*)p);
   }
   static void destruct_HTofLookup(void *p) {
      typedef ::HTofLookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofLookup(TBuffer &buf, void *obj) {
      ((::HTofLookup*)obj)->::HTofLookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofLookup

//______________________________________________________________________________
void HTofTrb2Lookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofTrb2Lookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HTofTrb2Lookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofTrb2Lookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofTrb2Lookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofTrb2Lookup.
      TClass *R__cl = ::HTofTrb2Lookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofTrb2Lookup(void *p) {
      return  p ? new(p) ::HTofTrb2Lookup : new ::HTofTrb2Lookup;
   }
   static void *newArray_HTofTrb2Lookup(Long_t nElements, void *p) {
      return p ? new(p) ::HTofTrb2Lookup[nElements] : new ::HTofTrb2Lookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofTrb2Lookup(void *p) {
      delete ((::HTofTrb2Lookup*)p);
   }
   static void deleteArray_HTofTrb2Lookup(void *p) {
      delete [] ((::HTofTrb2Lookup*)p);
   }
   static void destruct_HTofTrb2Lookup(void *p) {
      typedef ::HTofTrb2Lookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofTrb2Lookup(TBuffer &buf, void *obj) {
      ((::HTofTrb2Lookup*)obj)->::HTofTrb2Lookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofTrb2Lookup

//______________________________________________________________________________
void HTofTrb2LookupBoard::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofTrb2LookupBoard.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTofTrb2LookupBoard::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofTrb2LookupBoard::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofTrb2LookupBoard::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofTrb2LookupBoard.
      TClass *R__cl = ::HTofTrb2LookupBoard::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofTrb2LookupBoard(void *p) {
      return  p ? new(p) ::HTofTrb2LookupBoard : new ::HTofTrb2LookupBoard;
   }
   static void *newArray_HTofTrb2LookupBoard(Long_t nElements, void *p) {
      return p ? new(p) ::HTofTrb2LookupBoard[nElements] : new ::HTofTrb2LookupBoard[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofTrb2LookupBoard(void *p) {
      delete ((::HTofTrb2LookupBoard*)p);
   }
   static void deleteArray_HTofTrb2LookupBoard(void *p) {
      delete [] ((::HTofTrb2LookupBoard*)p);
   }
   static void destruct_HTofTrb2LookupBoard(void *p) {
      typedef ::HTofTrb2LookupBoard current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofTrb2LookupBoard(TBuffer &buf, void *obj) {
      ((::HTofTrb2LookupBoard*)obj)->::HTofTrb2LookupBoard::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofTrb2LookupBoard

//______________________________________________________________________________
void HTofTrb2LookupChan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofTrb2LookupChan.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> sector;
      R__b >> module;
      R__b >> cell;
      R__b >> side;
      R__b.CheckByteCount(R__s, R__c, HTofTrb2LookupChan::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofTrb2LookupChan::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << sector;
      R__b << module;
      R__b << cell;
      R__b << side;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofTrb2LookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofTrb2LookupChan.
      TClass *R__cl = ::HTofTrb2LookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofTrb2LookupChan(void *p) {
      return  p ? new(p) ::HTofTrb2LookupChan : new ::HTofTrb2LookupChan;
   }
   static void *newArray_HTofTrb2LookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HTofTrb2LookupChan[nElements] : new ::HTofTrb2LookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofTrb2LookupChan(void *p) {
      delete ((::HTofTrb2LookupChan*)p);
   }
   static void deleteArray_HTofTrb2LookupChan(void *p) {
      delete [] ((::HTofTrb2LookupChan*)p);
   }
   static void destruct_HTofTrb2LookupChan(void *p) {
      typedef ::HTofTrb2LookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofTrb2LookupChan(TBuffer &buf, void *obj) {
      ((::HTofTrb2LookupChan*)obj)->::HTofTrb2LookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofTrb2LookupChan

//______________________________________________________________________________
void HTofClusterFPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofClusterFPar.
      TClass *R__cl = ::HTofClusterFPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffTmax", &diffTmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffXmax", &diffXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mipLimit", &mipLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mL1all", &mL1all);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sL1all", &sL1all);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mL2all", &mL2all);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sL2all", &sL2all);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ratCall1", &ratCall1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mL1lep", &mL1lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sL1lep", &sL1lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mL2lep", &mL2lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sL2lep", &sL2lep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ratClep1", &ratClep1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diffPmax", &diffPmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lossEmax", &lossEmax);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofClusterFPar(void *p) {
      return  p ? new(p) ::HTofClusterFPar : new ::HTofClusterFPar;
   }
   static void *newArray_HTofClusterFPar(Long_t nElements, void *p) {
      return p ? new(p) ::HTofClusterFPar[nElements] : new ::HTofClusterFPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofClusterFPar(void *p) {
      delete ((::HTofClusterFPar*)p);
   }
   static void deleteArray_HTofClusterFPar(void *p) {
      delete [] ((::HTofClusterFPar*)p);
   }
   static void destruct_HTofClusterFPar(void *p) {
      typedef ::HTofClusterFPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofClusterFPar(TBuffer &buf, void *obj) {
      ((::HTofClusterFPar*)obj)->::HTofClusterFPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofClusterFPar

//______________________________________________________________________________
void HTofWalkPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofWalkPar.
      TClass *R__cl = ::HTofWalkPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWPars", &fWPars);
      R__insp.InspectMember(fWPars, "fWPars.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWErrors", &fWErrors);
      R__insp.InspectMember(fWErrors, "fWErrors.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSideIsUsed", &fSideIsUsed);
      R__insp.InspectMember(fSideIsUsed, "fSideIsUsed.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParsSX", &fParsSX);
      R__insp.InspectMember(fParsSX, "fParsSX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParsDX", &fParsDX);
      R__insp.InspectMember(fParsDX, "fParsDX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParsGeantToData", &fParsGeantToData);
      R__insp.InspectMember(fParsGeantToData, "fParsGeantToData.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParsGroupVelocityData", &fParsGroupVelocityData);
      R__insp.InspectMember(fParsGroupVelocityData, "fParsGroupVelocityData.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParsGroupVelocityScale", &fParsGroupVelocityScale);
      R__insp.InspectMember(fParsGroupVelocityScale, "fParsGroupVelocityScale.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiPar", &fDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalPar", &fCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTofGeometry", &fTofGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*func", &func);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fdxsigma", &fdxsigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fdxoffset", &fdxoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fscaleDxSigma", &fscaleDxSigma);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofWalkPar(void *p) {
      return  p ? new(p) ::HTofWalkPar : new ::HTofWalkPar;
   }
   static void *newArray_HTofWalkPar(Long_t nElements, void *p) {
      return p ? new(p) ::HTofWalkPar[nElements] : new ::HTofWalkPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofWalkPar(void *p) {
      delete ((::HTofWalkPar*)p);
   }
   static void deleteArray_HTofWalkPar(void *p) {
      delete [] ((::HTofWalkPar*)p);
   }
   static void destruct_HTofWalkPar(void *p) {
      typedef ::HTofWalkPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofWalkPar(TBuffer &buf, void *obj) {
      ((::HTofWalkPar*)obj)->::HTofWalkPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofWalkPar

//______________________________________________________________________________
void HTofGeantReader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofGeantReader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HGeantReader::Streamer(R__b);
      R__b >> t;
      R__b.CheckByteCount(R__s, R__c, HTofGeantReader::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofGeantReader::IsA(), kTRUE);
      HGeantReader::Streamer(R__b);
      R__b << t;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofGeantReader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofGeantReader.
      TClass *R__cl = ::HTofGeantReader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantTofCat", &fGeantTofCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      HGeantReader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofGeantReader(void *p) {
      return  p ? new(p) ::HTofGeantReader : new ::HTofGeantReader;
   }
   static void *newArray_HTofGeantReader(Long_t nElements, void *p) {
      return p ? new(p) ::HTofGeantReader[nElements] : new ::HTofGeantReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofGeantReader(void *p) {
      delete ((::HTofGeantReader*)p);
   }
   static void deleteArray_HTofGeantReader(void *p) {
      delete [] ((::HTofGeantReader*)p);
   }
   static void destruct_HTofGeantReader(void *p) {
      typedef ::HTofGeantReader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofGeantReader(TBuffer &buf, void *obj) {
      ((::HTofGeantReader*)obj)->::HTofGeantReader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofGeantReader

//______________________________________________________________________________
void HTofRawSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofRawSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTofRaw::Streamer(R__b);
      R__b >> nTrack1;
      R__b >> nTrack2;
      R__b.CheckByteCount(R__s, R__c, HTofRawSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofRawSim::IsA(), kTRUE);
      HTofRaw::Streamer(R__b);
      R__b << nTrack1;
      R__b << nTrack2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofRawSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofRawSim.
      TClass *R__cl = ::HTofRawSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1", &nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2", &nTrack2);
      HTofRaw::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofRawSim(void *p) {
      return  p ? new(p) ::HTofRawSim : new ::HTofRawSim;
   }
   static void *newArray_HTofRawSim(Long_t nElements, void *p) {
      return p ? new(p) ::HTofRawSim[nElements] : new ::HTofRawSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofRawSim(void *p) {
      delete ((::HTofRawSim*)p);
   }
   static void deleteArray_HTofRawSim(void *p) {
      delete [] ((::HTofRawSim*)p);
   }
   static void destruct_HTofRawSim(void *p) {
      typedef ::HTofRawSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofRawSim(TBuffer &buf, void *obj) {
      ((::HTofRawSim*)obj)->::HTofRawSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofRawSim

//______________________________________________________________________________
void HTofRawSimTmp::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofRawSimTmp.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTofRawSim::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTofRawSimTmp::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofRawSimTmp::IsA(), kTRUE);
      HTofRawSim::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofRawSimTmp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofRawSimTmp.
      TClass *R__cl = ::HTofRawSimTmp::IsA();
      if (R__cl || R__insp.IsA()) { }
      HTofRawSim::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofRawSimTmp(void *p) {
      return  p ? new(p) ::HTofRawSimTmp : new ::HTofRawSimTmp;
   }
   static void *newArray_HTofRawSimTmp(Long_t nElements, void *p) {
      return p ? new(p) ::HTofRawSimTmp[nElements] : new ::HTofRawSimTmp[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofRawSimTmp(void *p) {
      delete ((::HTofRawSimTmp*)p);
   }
   static void deleteArray_HTofRawSimTmp(void *p) {
      delete [] ((::HTofRawSimTmp*)p);
   }
   static void destruct_HTofRawSimTmp(void *p) {
      typedef ::HTofRawSimTmp current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofRawSimTmp(TBuffer &buf, void *obj) {
      ((::HTofRawSimTmp*)obj)->::HTofRawSimTmp::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofRawSimTmp

//______________________________________________________________________________
void HTofCalSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofCalSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTofCal::Streamer(R__b);
      R__b >> nTrack1;
      R__b >> nTrack2;
      R__b.CheckByteCount(R__s, R__c, HTofCalSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofCalSim::IsA(), kTRUE);
      HTofCal::Streamer(R__b);
      R__b << nTrack1;
      R__b << nTrack2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofCalSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofCalSim.
      TClass *R__cl = ::HTofCalSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1", &nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2", &nTrack2);
      HTofCal::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofCalSim(void *p) {
      return  p ? new(p) ::HTofCalSim : new ::HTofCalSim;
   }
   static void *newArray_HTofCalSim(Long_t nElements, void *p) {
      return p ? new(p) ::HTofCalSim[nElements] : new ::HTofCalSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofCalSim(void *p) {
      delete ((::HTofCalSim*)p);
   }
   static void deleteArray_HTofCalSim(void *p) {
      delete [] ((::HTofCalSim*)p);
   }
   static void destruct_HTofCalSim(void *p) {
      typedef ::HTofCalSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofCalSim(TBuffer &buf, void *obj) {
      ((::HTofCalSim*)obj)->::HTofCalSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofCalSim

//______________________________________________________________________________
void HTofHitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofHitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTofHit::Streamer(R__b);
      R__b >> nTrack1;
      R__b >> nTrack2;
      R__b.CheckByteCount(R__s, R__c, HTofHitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofHitSim::IsA(), kTRUE);
      HTofHit::Streamer(R__b);
      R__b << nTrack1;
      R__b << nTrack2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofHitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofHitSim.
      TClass *R__cl = ::HTofHitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1", &nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2", &nTrack2);
      HTofHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofHitSim(void *p) {
      return  p ? new(p) ::HTofHitSim : new ::HTofHitSim;
   }
   static void *newArray_HTofHitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HTofHitSim[nElements] : new ::HTofHitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofHitSim(void *p) {
      delete ((::HTofHitSim*)p);
   }
   static void deleteArray_HTofHitSim(void *p) {
      delete [] ((::HTofHitSim*)p);
   }
   static void destruct_HTofHitSim(void *p) {
      typedef ::HTofHitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofHitSim(TBuffer &buf, void *obj) {
      ((::HTofHitSim*)obj)->::HTofHitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofHitSim

//______________________________________________________________________________
void HTofHitSimTmp::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofHitSimTmp.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTofHitSim::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTofHitSimTmp::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofHitSimTmp::IsA(), kTRUE);
      HTofHitSim::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofHitSimTmp::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofHitSimTmp.
      TClass *R__cl = ::HTofHitSimTmp::IsA();
      if (R__cl || R__insp.IsA()) { }
      HTofHitSim::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofHitSimTmp(void *p) {
      return  p ? new(p) ::HTofHitSimTmp : new ::HTofHitSimTmp;
   }
   static void *newArray_HTofHitSimTmp(Long_t nElements, void *p) {
      return p ? new(p) ::HTofHitSimTmp[nElements] : new ::HTofHitSimTmp[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofHitSimTmp(void *p) {
      delete ((::HTofHitSimTmp*)p);
   }
   static void deleteArray_HTofHitSimTmp(void *p) {
      delete [] ((::HTofHitSimTmp*)p);
   }
   static void destruct_HTofHitSimTmp(void *p) {
      typedef ::HTofHitSimTmp current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofHitSimTmp(TBuffer &buf, void *obj) {
      ((::HTofHitSimTmp*)obj)->::HTofHitSimTmp::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofHitSimTmp

//______________________________________________________________________________
void HTofHitFSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofHitFSim.

   HTofHitF::Streamer(R__b);
}

//______________________________________________________________________________
void HTofHitFSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofHitFSim.
      TClass *R__cl = ::HTofHitFSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      HTofHitF::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofHitFSim(void *p) {
      return  p ? new(p) ::HTofHitFSim : new ::HTofHitFSim;
   }
   static void *newArray_HTofHitFSim(Long_t nElements, void *p) {
      return p ? new(p) ::HTofHitFSim[nElements] : new ::HTofHitFSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofHitFSim(void *p) {
      delete ((::HTofHitFSim*)p);
   }
   static void deleteArray_HTofHitFSim(void *p) {
      delete [] ((::HTofHitFSim*)p);
   }
   static void destruct_HTofHitFSim(void *p) {
      typedef ::HTofHitFSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofHitFSim(TBuffer &buf, void *obj) {
      ((::HTofHitFSim*)obj)->::HTofHitFSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofHitFSim

//______________________________________________________________________________
void HTofClusterSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofClusterSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTofCluster::Streamer(R__b);
      R__b >> nParticipants;
      R__b.ReadStaticArray((int*)nTrack1);
      R__b.ReadStaticArray((int*)nTrack2);
      R__b.CheckByteCount(R__s, R__c, HTofClusterSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofClusterSim::IsA(), kTRUE);
      HTofCluster::Streamer(R__b);
      R__b << nParticipants;
      R__b.WriteArray(nTrack1, 3);
      R__b.WriteArray(nTrack2, 3);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofClusterSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofClusterSim.
      TClass *R__cl = ::HTofClusterSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nParticipants", &nParticipants);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1[3]", nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2[3]", nTrack2);
      HTofCluster::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofClusterSim(void *p) {
      return  p ? new(p) ::HTofClusterSim : new ::HTofClusterSim;
   }
   static void *newArray_HTofClusterSim(Long_t nElements, void *p) {
      return p ? new(p) ::HTofClusterSim[nElements] : new ::HTofClusterSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofClusterSim(void *p) {
      delete ((::HTofClusterSim*)p);
   }
   static void deleteArray_HTofClusterSim(void *p) {
      delete [] ((::HTofClusterSim*)p);
   }
   static void destruct_HTofClusterSim(void *p) {
      typedef ::HTofClusterSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofClusterSim(TBuffer &buf, void *obj) {
      ((::HTofClusterSim*)obj)->::HTofClusterSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofClusterSim

//______________________________________________________________________________
void HTofClusterFSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofClusterFSim.

   HTofClusterF::Streamer(R__b);
}

//______________________________________________________________________________
void HTofClusterFSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofClusterFSim.
      TClass *R__cl = ::HTofClusterFSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      HTofClusterF::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofClusterFSim(void *p) {
      return  p ? new(p) ::HTofClusterFSim : new ::HTofClusterFSim;
   }
   static void *newArray_HTofClusterFSim(Long_t nElements, void *p) {
      return p ? new(p) ::HTofClusterFSim[nElements] : new ::HTofClusterFSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofClusterFSim(void *p) {
      delete ((::HTofClusterFSim*)p);
   }
   static void deleteArray_HTofClusterFSim(void *p) {
      delete [] ((::HTofClusterFSim*)p);
   }
   static void destruct_HTofClusterFSim(void *p) {
      typedef ::HTofClusterFSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofClusterFSim(TBuffer &buf, void *obj) {
      ((::HTofClusterFSim*)obj)->::HTofClusterFSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofClusterFSim

//______________________________________________________________________________
void HTofTrigger::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofTrigger.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HTofTrigger::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofTrigger.
      TClass *R__cl = ::HTofTrigger::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterator", &iterator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nThreshold", &nThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*kineGeant", &kineGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSec2", &nSec2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSec5", &nSec5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMult", &nMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvCounter", &nEvCounter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofTrigger(void *p) {
      return  p ? new(p) ::HTofTrigger : new ::HTofTrigger;
   }
   static void *newArray_HTofTrigger(Long_t nElements, void *p) {
      return p ? new(p) ::HTofTrigger[nElements] : new ::HTofTrigger[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofTrigger(void *p) {
      delete ((::HTofTrigger*)p);
   }
   static void deleteArray_HTofTrigger(void *p) {
      delete [] ((::HTofTrigger*)p);
   }
   static void destruct_HTofTrigger(void *p) {
      typedef ::HTofTrigger current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofTrigger(TBuffer &buf, void *obj) {
      ((::HTofTrigger*)obj)->::HTofTrigger::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofTrigger

//______________________________________________________________________________
void HTofRawSimFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofRawSimFilter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HFilter::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTofRawSimFilter::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofRawSimFilter::IsA(), kTRUE);
      HFilter::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofRawSimFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofRawSimFilter.
      TClass *R__cl = ::HTofRawSimFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      HFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofRawSimFilter(void *p) {
      return  p ? new(p) ::HTofRawSimFilter : new ::HTofRawSimFilter;
   }
   static void *newArray_HTofRawSimFilter(Long_t nElements, void *p) {
      return p ? new(p) ::HTofRawSimFilter[nElements] : new ::HTofRawSimFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofRawSimFilter(void *p) {
      delete ((::HTofRawSimFilter*)p);
   }
   static void deleteArray_HTofRawSimFilter(void *p) {
      delete [] ((::HTofRawSimFilter*)p);
   }
   static void destruct_HTofRawSimFilter(void *p) {
      typedef ::HTofRawSimFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofRawSimFilter(TBuffer &buf, void *obj) {
      ((::HTofRawSimFilter*)obj)->::HTofRawSimFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofRawSimFilter

//______________________________________________________________________________
void HTofTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTofTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTofTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HTofTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTofTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTofTaskSet.
      TClass *R__cl = ::HTofTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhitfinderVersion", &fhitfinderVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdoCluster", &fdoCluster);
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTofTaskSet(void *p) {
      return  p ? new(p) ::HTofTaskSet : new ::HTofTaskSet;
   }
   static void *newArray_HTofTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HTofTaskSet[nElements] : new ::HTofTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTofTaskSet(void *p) {
      delete ((::HTofTaskSet*)p);
   }
   static void deleteArray_HTofTaskSet(void *p) {
      delete [] ((::HTofTaskSet*)p);
   }
   static void destruct_HTofTaskSet(void *p) {
      typedef ::HTofTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTofTaskSet(TBuffer &buf, void *obj) {
      ((::HTofTaskSet*)obj)->::HTofTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTofTaskSet

/********************************************************
* ../build/pc/TofDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableTofDict();

extern "C" void G__set_cpp_environmentTofDict() {
  G__cpp_reset_tagtableTofDict();
}
#include <new>
extern "C" int G__cpp_dllrevTofDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HTofCal */
static int G__TofDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCal[n];
     } else {
       p = new((void*) gvp) HTofCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCal;
     } else {
       p = new((void*) gvp) HTofCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HTofCal*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofCal*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofCal*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofCal*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HTofCal*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCal*) G__getstructoffset())->getTimeLeft());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCal*) G__getstructoffset())->getTimeRight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCal*) G__getstructoffset())->getChargeLeft());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCal*) G__getstructoffset())->getCargeRight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setTimeLeft((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setTimeRight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setChargeLeft((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setChargeRight((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setNHit((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setCell((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->setAddress((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_168_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_168_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofCal(*(HTofCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCal G__THTofCal;
static int G__TofDict_168_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCal*) (soff+(sizeof(HTofCal)*i)))->~G__THTofCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCal*) (soff))->~G__THTofCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_168_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCal* dest = (HTofCal*) G__getstructoffset();
   *dest = *(HTofCal*) libp->para[0].ref;
   const HTofCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofCalPar */
static int G__TofDict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTofCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofCalPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofCalPar[n];
       } else {
         p = new((void*) gvp) HTofCalPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofCalPar;
       } else {
         p = new((void*) gvp) HTofCalPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofCalParSec& obj = ((HTofCalPar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofCalPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofCalPar*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCalPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCalPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCalPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofCalPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofCalPar(*(HTofCalPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCalPar G__THTofCalPar;
static int G__TofDict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCalPar*) (soff+(sizeof(HTofCalPar)*i)))->~G__THTofCalPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCalPar*) (soff))->~G__THTofCalPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalPar* dest = (HTofCalPar*) G__getstructoffset();
   *dest = *(HTofCalPar*) libp->para[0].ref;
   const HTofCalPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofCalibrater */
static int G__TofDict_207_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalibrater[n];
     } else {
       p = new((void*) gvp) HTofCalibrater[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalibrater;
     } else {
       p = new((void*) gvp) HTofCalibrater;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HTofCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalibrater*) G__getstructoffset())->initParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofCalibrater& obj = ((HTofCalibrater*) G__getstructoffset())->operator=(*(HTofCalibrater*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCalibrater::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalibrater::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCalibrater::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCalibrater::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalibrater*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalibrater::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalibrater::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalibrater::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_207_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalibrater::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCalibrater G__THTofCalibrater;
static int G__TofDict_207_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCalibrater*) (soff+(sizeof(HTofCalibrater)*i)))->~G__THTofCalibrater();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCalibrater*) (soff))->~G__THTofCalibrater();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofDigiPar */
static int G__TofDict_553_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTofDigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofDigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofDigiPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigiPar[n];
       } else {
         p = new((void*) gvp) HTofDigiPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigiPar;
       } else {
         p = new((void*) gvp) HTofDigiPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofDigiParSec& obj = ((HTofDigiPar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigiPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofDigiPar*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofDigiPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofDigiPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofDigiPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_553_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_553_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofDigiPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofDigiPar(*(HTofDigiPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofDigiPar G__THTofDigiPar;
static int G__TofDict_553_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofDigiPar*) (soff+(sizeof(HTofDigiPar)*i)))->~G__THTofDigiPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofDigiPar*) (soff))->~G__THTofDigiPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_553_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiPar* dest = (HTofDigiPar*) G__getstructoffset();
   *dest = *(HTofDigiPar*) libp->para[0].ref;
   const HTofDigiPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofWalkPar */
static int G__TofDict_554_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofWalkPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofWalkPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTofWalkPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofWalkPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofWalkPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofWalkPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofWalkPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofWalkPar[n];
       } else {
         p = new((void*) gvp) HTofWalkPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofWalkPar;
       } else {
         p = new((void*) gvp) HTofWalkPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HTofWalkPar*) G__getstructoffset())->getPars((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofWalkPar*) G__getstructoffset())->getError((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofWalkPar*) G__getstructoffset())->getIsUsed((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HTofWalkPar*) G__getstructoffset())->getParsSX((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HTofWalkPar*) G__getstructoffset())->getParsDX((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HTofWalkPar*) G__getstructoffset())->getParsGeantToData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HTofWalkPar*) G__getstructoffset())->getGroupVelocity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HTofWalkPar*) G__getstructoffset())->getGroupVelocityScale());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setPars(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t*) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setErrors((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setIsUsed((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setParsSX((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setParsDX((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setParsGeantToData((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setGroupVelocity((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->setGroupVelocityScale((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->getContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofWalkPar*) G__getstructoffset())->getOffset((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->getOffsets(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])
, *(Float_t*) G__Floatref(&libp->para[8]), *(Float_t*) G__Floatref(&libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->getErrors(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]), *(Float_t*) G__Floatref(&libp->para[7])
, *(Float_t*) G__Floatref(&libp->para[8]), *(Float_t*) G__Floatref(&libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->getTofPos((HTofRaw*) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HTofWalkPar*) G__getstructoffset())->getDxSigma((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HTofWalkPar*) G__getstructoffset())->getDxSigmaDigi((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HTofWalkPar*) G__getstructoffset())->getDxOffset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HTofWalkPar*) G__getstructoffset())->getNormedDX((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Bool_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HTofWalkPar*) G__getstructoffset())->scaleGeantToData((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofWalkPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofWalkPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofWalkPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofWalkPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofWalkPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofWalkPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofWalkPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofWalkPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_554_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofWalkPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_554_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofWalkPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofWalkPar(*(HTofWalkPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofWalkPar G__THTofWalkPar;
static int G__TofDict_554_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofWalkPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofWalkPar*) (soff+(sizeof(HTofWalkPar)*i)))->~G__THTofWalkPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofWalkPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofWalkPar*) (soff))->~G__THTofWalkPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_554_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofWalkPar* dest = (HTofWalkPar*) G__getstructoffset();
   *dest = *(HTofWalkPar*) libp->para[0].ref;
   const HTofWalkPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofDigitizer */
static int G__TofDict_555_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigitizer((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofDigitizer((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigitizer[n];
       } else {
         p = new((void*) gvp) HTofDigitizer[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigitizer;
       } else {
         p = new((void*) gvp) HTofDigitizer;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofDigitizer*) G__getstructoffset())->initParContainer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigitizer*) G__getstructoffset())->executeOld());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofDigitizer::getTofDigtizer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigitizer*) G__getstructoffset())->setStoreFirstTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigitizer*) G__getstructoffset())->setDebug((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HTofDigitizer*) G__getstructoffset())->setOutputFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HTofDigitizer*) G__getstructoffset())->setOutputFile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigitizer*) G__getstructoffset())->setUseOld((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HTofDigitizer::setTimeResolution((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HTofDigitizer::setTimeResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_555_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofDigitizer G__THTofDigitizer;
static int G__TofDict_555_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofDigitizer*) (soff+(sizeof(HTofDigitizer)*i)))->~G__THTofDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofDigitizer*) (soff))->~G__THTofDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofHit */
static int G__TofDict_556_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHit[n];
     } else {
       p = new((void*) gvp) HTofHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHit;
     } else {
       p = new((void*) gvp) HTofHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofHit*) G__getstructoffset())->getIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofHit*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofHit*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofHit*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofHit*) G__getstructoffset())->getTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofHit*) G__getstructoffset())->getXpos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofHit*) G__getstructoffset())->getXposAdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofHit*) G__getstructoffset())->getEdep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofHit*) G__getstructoffset())->getLeftAmp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofHit*) G__getstructoffset())->getRightAmp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->getXYZLab(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->getDistance(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->getTheta(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->getPhi(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofHit*) G__getstructoffset())->getAdcFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setCell((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setTof((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setXpos((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setXposAdc((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setEdep((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setLeftAmp((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setRightAmp((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setXYZLab((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setDistance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setAdcFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->setValues((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofHit*) G__getstructoffset())->operator<(*(HTofHit*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofHit*) G__getstructoffset())->operator>(*(HTofHit*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofHit*) G__getstructoffset())->operator!=(*(HTofHit*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofHit& obj = ((HTofHit*) G__getstructoffset())->operator=(*(HTofHit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_556_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_556_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofHit(*(HTofHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofHit G__THTofHit;
static int G__TofDict_556_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofHit*) (soff+(sizeof(HTofHit)*i)))->~G__THTofHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofHit*) (soff))->~G__THTofHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofGeomPar */
static int G__TofDict_557_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTofGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofGeomPar[n];
       } else {
         p = new((void*) gvp) HTofGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofGeomPar;
       } else {
         p = new((void*) gvp) HTofGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_557_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_557_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofGeomPar(*(HTofGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofGeomPar G__THTofGeomPar;
static int G__TofDict_557_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofGeomPar*) (soff+(sizeof(HTofGeomPar)*i)))->~G__THTofGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofGeomPar*) (soff))->~G__THTofGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_557_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofGeomPar* dest = (HTofGeomPar*) G__getstructoffset();
   *dest = *(HTofGeomPar*) libp->para[0].ref;
   const HTofGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofRaw */
static int G__TofDict_561_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRaw[n];
     } else {
       p = new((void*) gvp) HTofRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRaw;
     } else {
       p = new((void*) gvp) HTofRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofRaw*) G__getstructoffset())->getRightTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofRaw*) G__getstructoffset())->getLeftTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofRaw*) G__getstructoffset())->getRightCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofRaw*) G__getstructoffset())->getLeftCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HTofRaw*) G__getstructoffset())->getNHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HTofRaw*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofRaw*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofRaw*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofRaw*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setRightTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setLeftTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setRightCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setLeftCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setNHit((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->incNHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setCell((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->setAddress((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->doit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_561_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_561_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofRaw(*(HTofRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofRaw G__THTofRaw;
static int G__TofDict_561_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofRaw*) (soff+(sizeof(HTofRaw)*i)))->~G__THTofRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofRaw*) (soff))->~G__THTofRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_561_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRaw* dest = (HTofRaw*) G__getstructoffset();
   *dest = *(HTofRaw*) libp->para[0].ref;
   const HTofRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofHitF */
static int G__TofDict_562_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitF[n];
     } else {
       p = new((void*) gvp) HTofHitF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitF;
     } else {
       p = new((void*) gvp) HTofHitF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HTofHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitF*) G__getstructoffset())->initParContainer((HSpectrometer*) G__int(libp->para[0]), (HRuntimeDb*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofHitF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofHitF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofHitF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_562_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofHitF G__THTofHitF;
static int G__TofDict_562_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofHitF*) (soff+(sizeof(HTofHitF)*i)))->~G__THTofHitF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofHitF*) (soff))->~G__THTofHitF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofHitF2 */
static int G__TofDict_563_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitF2[n];
     } else {
       p = new((void*) gvp) HTofHitF2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitF2;
     } else {
       p = new((void*) gvp) HTofHitF2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitF2* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofHitF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HTofHitF2((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitF2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofHitF2::setForceKeepGeant((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitF2*) G__getstructoffset())->initParContainer((HSpectrometer*) G__int(libp->para[0]), (HRuntimeDb*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofHitF2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitF2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofHitF2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofHitF2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitF2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitF2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitF2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitF2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_563_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitF2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofHitF2 G__THTofHitF2;
static int G__TofDict_563_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofHitF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofHitF2*) (soff+(sizeof(HTofHitF2)*i)))->~G__THTofHitF2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofHitF2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofHitF2*) (soff))->~G__THTofHitF2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofLookup */
static int G__TofDict_567_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HTofLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HTofLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTofLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofLookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofLookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofLookup[n];
       } else {
         p = new((void*) gvp) HTofLookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofLookup;
       } else {
         p = new((void*) gvp) HTofLookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofLookupCrate& obj = ((HTofLookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofLookup*) G__getstructoffset())->getSlot((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookup*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Char_t) G__int(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofLookup*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofLookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofLookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofLookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_567_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_567_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofLookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofLookup(*(HTofLookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofLookup G__THTofLookup;
static int G__TofDict_567_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofLookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofLookup*) (soff+(sizeof(HTofLookup)*i)))->~G__THTofLookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofLookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofLookup*) (soff))->~G__THTofLookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_567_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookup* dest = (HTofLookup*) G__getstructoffset();
   *dest = *(HTofLookup*) libp->para[0].ref;
   const HTofLookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofUnpacker */
static int G__TofDict_568_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofUnpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofUnpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofUnpacker[n];
       } else {
         p = new((void*) gvp) HTofUnpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofUnpacker;
       } else {
         p = new((void*) gvp) HTofUnpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_568_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_568_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofUnpacker(*(HTofUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofUnpacker G__THTofUnpacker;
static int G__TofDict_568_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofUnpacker*) (soff+(sizeof(HTofUnpacker)*i)))->~G__THTofUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofUnpacker*) (soff))->~G__THTofUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_568_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofUnpacker* dest = (HTofUnpacker*) G__getstructoffset();
   *dest = *(HTofUnpacker*) libp->para[0].ref;
   const HTofUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofContFact */
static int G__TofDict_572_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofContFact[n];
     } else {
       p = new((void*) gvp) HTofContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofContFact;
     } else {
       p = new((void*) gvp) HTofContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_572_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_572_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofContFact(*(HTofContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofContFact G__THTofContFact;
static int G__TofDict_572_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofContFact*) (soff+(sizeof(HTofContFact)*i)))->~G__THTofContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofContFact*) (soff))->~G__THTofContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_572_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofContFact* dest = (HTofContFact*) G__getstructoffset();
   *dest = *(HTofContFact*) libp->para[0].ref;
   const HTofContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofCalParCell */
static int G__TofDict_574_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalParCell[n];
     } else {
       p = new((void*) gvp) HTofCalParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalParCell;
     } else {
       p = new((void*) gvp) HTofCalParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getLeftK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getRightK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getVGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getPosK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getTimK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getPedestalL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getPedestalR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getAttLen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getGainAsym());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getEdepK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getTimeWalkC1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getTimeWalkC2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCalParCell*) G__getstructoffset())->getTimeWalkC3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->fill(*(HTofCalParCell*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setLeftK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setRightK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setVGroup((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setPosK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setTimK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setPedestalL((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setPedestalR((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setAttLen((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setGainAsym((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setEdepK((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setTimeWalkC1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setTimeWalkC2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setTimeWalkC3((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->setDefaults();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCalParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCalParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCalParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_574_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_574_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofCalParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofCalParCell(*(HTofCalParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCalParCell G__THTofCalParCell;
static int G__TofDict_574_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCalParCell*) (soff+(sizeof(HTofCalParCell)*i)))->~G__THTofCalParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCalParCell*) (soff))->~G__THTofCalParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_574_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalParCell* dest = (HTofCalParCell*) G__getstructoffset();
   *dest = *(HTofCalParCell*) libp->para[0].ref;
   const HTofCalParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofCalParMod */
static int G__TofDict_575_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalParMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofCalParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalParMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofCalParMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofCalParMod[n];
       } else {
         p = new((void*) gvp) HTofCalParMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofCalParMod;
       } else {
         p = new((void*) gvp) HTofCalParMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofCalParCell& obj = ((HTofCalParMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofCalParMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCalParMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCalParMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCalParMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalParMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_575_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalParMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_575_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofCalParMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofCalParMod(*(HTofCalParMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCalParMod G__THTofCalParMod;
static int G__TofDict_575_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCalParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCalParMod*) (soff+(sizeof(HTofCalParMod)*i)))->~G__THTofCalParMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCalParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCalParMod*) (soff))->~G__THTofCalParMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_575_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalParMod* dest = (HTofCalParMod*) G__getstructoffset();
   *dest = *(HTofCalParMod*) libp->para[0].ref;
   const HTofCalParMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofCalParSec */
static int G__TofDict_576_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalParSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalParSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofCalParSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalParSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofCalParSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofCalParSec[n];
       } else {
         p = new((void*) gvp) HTofCalParSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofCalParSec;
       } else {
         p = new((void*) gvp) HTofCalParSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofCalParMod& obj = ((HTofCalParSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofCalParSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCalParSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCalParSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCalParSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalParSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalParSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalParSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_576_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalParSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_576_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofCalParSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofCalParSec(*(HTofCalParSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCalParSec G__THTofCalParSec;
static int G__TofDict_576_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCalParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCalParSec*) (soff+(sizeof(HTofCalParSec)*i)))->~G__THTofCalParSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCalParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCalParSec*) (soff))->~G__THTofCalParSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_576_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalParSec* dest = (HTofCalParSec*) G__getstructoffset();
   *dest = *(HTofCalParSec*) libp->para[0].ref;
   const HTofCalParSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofDigiParCell */
static int G__TofDict_577_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiParCell[n];
     } else {
       p = new((void*) gvp) HTofDigiParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiParCell;
     } else {
       p = new((void*) gvp) HTofDigiParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofDigiParCell*) G__getstructoffset())->getHalfLen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofDigiParCell*) G__getstructoffset())->getAngleRef());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofDigiParCell*) G__getstructoffset())->getAttenLen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofDigiParCell*) G__getstructoffset())->getGroupVel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofDigiParCell*) G__getstructoffset())->getLeftTDCSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofDigiParCell*) G__getstructoffset())->getRightTDCSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigiParCell*) G__getstructoffset())->getLeftCFDThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigiParCell*) G__getstructoffset())->getRightCFDThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigiParCell*) G__getstructoffset())->getLeftADCThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigiParCell*) G__getstructoffset())->getRightADCThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->fill(*(HTofDigiParCell*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setHalfLen((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setAngleRef((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setAttenLen((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setGroupVel((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setLeftTDCSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setRightTDCSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setLeftCFDThreshold((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setRightCFDThreshold((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setLeftADCThreshold((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setRightADCThreshold((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->setDefaults((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofDigiParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofDigiParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofDigiParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_577_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_577_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofDigiParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofDigiParCell(*(HTofDigiParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofDigiParCell G__THTofDigiParCell;
static int G__TofDict_577_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofDigiParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofDigiParCell*) (soff+(sizeof(HTofDigiParCell)*i)))->~G__THTofDigiParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofDigiParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofDigiParCell*) (soff))->~G__THTofDigiParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_577_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiParCell* dest = (HTofDigiParCell*) G__getstructoffset();
   *dest = *(HTofDigiParCell*) libp->para[0].ref;
   const HTofDigiParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofDigiParMod */
static int G__TofDict_578_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiParMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofDigiParMod((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiParMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofDigiParMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigiParMod[n];
       } else {
         p = new((void*) gvp) HTofDigiParMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigiParMod;
       } else {
         p = new((void*) gvp) HTofDigiParMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofDigiParCell& obj = ((HTofDigiParMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigiParMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofDigiParMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofDigiParMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofDigiParMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiParMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_578_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiParMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_578_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofDigiParMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofDigiParMod(*(HTofDigiParMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofDigiParMod G__THTofDigiParMod;
static int G__TofDict_578_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofDigiParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofDigiParMod*) (soff+(sizeof(HTofDigiParMod)*i)))->~G__THTofDigiParMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofDigiParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofDigiParMod*) (soff))->~G__THTofDigiParMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_578_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiParMod* dest = (HTofDigiParMod*) G__getstructoffset();
   *dest = *(HTofDigiParMod*) libp->para[0].ref;
   const HTofDigiParMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofDigiParSec */
static int G__TofDict_579_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiParSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiParSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofDigiParSec((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDigiParSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofDigiParSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigiParSec[n];
       } else {
         p = new((void*) gvp) HTofDigiParSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofDigiParSec;
       } else {
         p = new((void*) gvp) HTofDigiParSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofDigiParMod& obj = ((HTofDigiParSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofDigiParSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofDigiParSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofDigiParSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofDigiParSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDigiParSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiParSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDigiParSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_579_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDigiParSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_579_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofDigiParSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofDigiParSec(*(HTofDigiParSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofDigiParSec G__THTofDigiParSec;
static int G__TofDict_579_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofDigiParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofDigiParSec*) (soff+(sizeof(HTofDigiParSec)*i)))->~G__THTofDigiParSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofDigiParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofDigiParSec*) (soff))->~G__THTofDigiParSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_579_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDigiParSec* dest = (HTofDigiParSec*) G__getstructoffset();
   *dest = *(HTofDigiParSec*) libp->para[0].ref;
   const HTofDigiParSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofLookupChan */
static int G__TofDict_580_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookupChan[n];
     } else {
       p = new((void*) gvp) HTofLookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookupChan;
     } else {
       p = new((void*) gvp) HTofLookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookupChan*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookupChan*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofLookupChan*) G__getstructoffset())->getSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Char_t*) G__Charref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->fill((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Char_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->fill(*(HTofLookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->setSide((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofLookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofLookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofLookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_580_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_580_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofLookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofLookupChan(*(HTofLookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofLookupChan G__THTofLookupChan;
static int G__TofDict_580_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofLookupChan*) (soff+(sizeof(HTofLookupChan)*i)))->~G__THTofLookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofLookupChan*) (soff))->~G__THTofLookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_580_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookupChan* dest = (HTofLookupChan*) G__getstructoffset();
   *dest = *(HTofLookupChan*) libp->para[0].ref;
   const HTofLookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofLookupSlot */
static int G__TofDict_581_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookupSlot* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookupSlot((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofLookupSlot((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofLookupSlot[n];
       } else {
         p = new((void*) gvp) HTofLookupSlot[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofLookupSlot;
       } else {
         p = new((void*) gvp) HTofLookupSlot;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofLookupChan& obj = ((HTofLookupSlot*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofLookupSlot*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookupSlot*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookupSlot*) G__getstructoffset())->getMaxSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofLookupSlot*) G__getstructoffset())->getType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupSlot*) G__getstructoffset())->fill((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Char_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupSlot*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofLookupSlot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupSlot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofLookupSlot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofLookupSlot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupSlot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupSlot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookupSlot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupSlot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_581_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookupSlot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_581_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofLookupSlot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofLookupSlot(*(HTofLookupSlot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofLookupSlot G__THTofLookupSlot;
static int G__TofDict_581_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofLookupSlot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofLookupSlot*) (soff+(sizeof(HTofLookupSlot)*i)))->~G__THTofLookupSlot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofLookupSlot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofLookupSlot*) (soff))->~G__THTofLookupSlot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_581_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookupSlot* dest = (HTofLookupSlot*) G__getstructoffset();
   *dest = *(HTofLookupSlot*) libp->para[0].ref;
   const HTofLookupSlot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofLookupCrate */
static int G__TofDict_582_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookupCrate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofLookupCrate((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofLookupCrate((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofLookupCrate[n];
       } else {
         p = new((void*) gvp) HTofLookupCrate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofLookupCrate;
       } else {
         p = new((void*) gvp) HTofLookupCrate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofLookupSlot& obj = ((HTofLookupCrate*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofLookupCrate*) G__getstructoffset())->getSlot((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookupCrate*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofLookupCrate*) G__getstructoffset())->getMaxSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupCrate*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Char_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofLookupCrate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupCrate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofLookupCrate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofLookupCrate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofLookupCrate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupCrate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookupCrate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofLookupCrate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_582_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofLookupCrate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_582_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofLookupCrate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofLookupCrate(*(HTofLookupCrate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofLookupCrate G__THTofLookupCrate;
static int G__TofDict_582_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofLookupCrate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofLookupCrate*) (soff+(sizeof(HTofLookupCrate)*i)))->~G__THTofLookupCrate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofLookupCrate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofLookupCrate*) (soff))->~G__THTofLookupCrate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_582_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofLookupCrate* dest = (HTofLookupCrate*) G__getstructoffset();
   *dest = *(HTofLookupCrate*) libp->para[0].ref;
   const HTofLookupCrate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofTrb2LookupChan */
static int G__TofDict_585_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2LookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2LookupChan[n];
     } else {
       p = new((void*) gvp) HTofTrb2LookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2LookupChan;
     } else {
       p = new((void*) gvp) HTofTrb2LookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofTrb2LookupChan*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofTrb2LookupChan*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofTrb2LookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTofTrb2LookupChan*) G__getstructoffset())->getSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Char_t*) G__Charref(&libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Char_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->fill(*(HTofTrb2LookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->setSide((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofTrb2LookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2LookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofTrb2LookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofTrb2LookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2LookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2LookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2LookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_585_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2LookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_585_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofTrb2LookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofTrb2LookupChan(*(HTofTrb2LookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofTrb2LookupChan G__THTofTrb2LookupChan;
static int G__TofDict_585_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofTrb2LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofTrb2LookupChan*) (soff+(sizeof(HTofTrb2LookupChan)*i)))->~G__THTofTrb2LookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofTrb2LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofTrb2LookupChan*) (soff))->~G__THTofTrb2LookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_585_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2LookupChan* dest = (HTofTrb2LookupChan*) G__getstructoffset();
   *dest = *(HTofTrb2LookupChan*) libp->para[0].ref;
   const HTofTrb2LookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofTrb2LookupBoard */
static int G__TofDict_586_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2LookupBoard* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2LookupBoard[n];
     } else {
       p = new((void*) gvp) HTofTrb2LookupBoard[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2LookupBoard;
     } else {
       p = new((void*) gvp) HTofTrb2LookupBoard;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofTrb2LookupBoard*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTofTrb2LookupChan& obj = ((HTofTrb2LookupBoard*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofTrb2LookupBoard*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupBoard*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofTrb2LookupBoard::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2LookupBoard::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofTrb2LookupBoard::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofTrb2LookupBoard::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2LookupBoard*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2LookupBoard::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2LookupBoard::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2LookupBoard::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_586_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2LookupBoard::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_586_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofTrb2LookupBoard* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofTrb2LookupBoard(*(HTofTrb2LookupBoard*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofTrb2LookupBoard G__THTofTrb2LookupBoard;
static int G__TofDict_586_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofTrb2LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofTrb2LookupBoard*) (soff+(sizeof(HTofTrb2LookupBoard)*i)))->~G__THTofTrb2LookupBoard();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofTrb2LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofTrb2LookupBoard*) (soff))->~G__THTofTrb2LookupBoard();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_586_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2LookupBoard* dest = (HTofTrb2LookupBoard*) G__getstructoffset();
   *dest = *(HTofTrb2LookupBoard*) libp->para[0].ref;
   const HTofTrb2LookupBoard& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofTrb2Lookup */
static int G__TofDict_587_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2Lookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HTofTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HTofTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTofTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofTrb2Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2Lookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofTrb2Lookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofTrb2Lookup[n];
       } else {
         p = new((void*) gvp) HTofTrb2Lookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofTrb2Lookup;
       } else {
         p = new((void*) gvp) HTofTrb2Lookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofTrb2Lookup*) G__getstructoffset())->getBoard((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofTrb2Lookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofTrb2Lookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofTrb2Lookup*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Lookup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofTrb2Lookup*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Char_t) G__int(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofTrb2Lookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Lookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Lookup*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofTrb2Lookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2Lookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofTrb2Lookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofTrb2Lookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Lookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2Lookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2Lookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2Lookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_587_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2Lookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_587_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofTrb2Lookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofTrb2Lookup(*(HTofTrb2Lookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofTrb2Lookup G__THTofTrb2Lookup;
static int G__TofDict_587_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofTrb2Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofTrb2Lookup*) (soff+(sizeof(HTofTrb2Lookup)*i)))->~G__THTofTrb2Lookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofTrb2Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofTrb2Lookup*) (soff))->~G__THTofTrb2Lookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_587_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2Lookup* dest = (HTofTrb2Lookup*) G__getstructoffset();
   *dest = *(HTofTrb2Lookup*) libp->para[0].ref;
   const HTofTrb2Lookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofDetector */
static int G__TofDict_589_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDetector[n];
     } else {
       p = new((void*) gvp) HTofDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofDetector;
     } else {
       p = new((void*) gvp) HTofDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HTofDetector*) G__getstructoffset())->buildTask((const Text_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HTofDetector*) G__getstructoffset())->buildTask((const Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofDetector*) G__getstructoffset())->buildMatrixCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_589_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_589_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofDetector(*(HTofDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofDetector G__THTofDetector;
static int G__TofDict_589_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofDetector*) (soff+(sizeof(HTofDetector)*i)))->~G__THTofDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofDetector*) (soff))->~G__THTofDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_589_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofDetector* dest = (HTofDetector*) G__getstructoffset();
   *dest = *(HTofDetector*) libp->para[0].ref;
   const HTofDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofRawSim */
static int G__TofDict_591_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRawSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRawSim[n];
     } else {
       p = new((void*) gvp) HTofRawSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRawSim;
     } else {
       p = new((void*) gvp) HTofRawSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRawSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSim*) G__getstructoffset())->setNTrack1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSim*) G__getstructoffset())->setNTrack2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSim*) G__getstructoffset())->setLeftNTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSim*) G__getstructoffset())->setRightNTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSim*) G__getstructoffset())->setNTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofRawSim*) G__getstructoffset())->getNTrack1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofRawSim*) G__getstructoffset())->getNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofRawSim*) G__getstructoffset())->getLeftNTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofRawSim*) G__getstructoffset())->getRightNTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofRawSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofRawSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofRawSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRawSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_591_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRawSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_591_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofRawSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofRawSim(*(HTofRawSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRawSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofRawSim G__THTofRawSim;
static int G__TofDict_591_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofRawSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofRawSim*) (soff+(sizeof(HTofRawSim)*i)))->~G__THTofRawSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofRawSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofRawSim*) (soff))->~G__THTofRawSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_591_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRawSim* dest = (HTofRawSim*) G__getstructoffset();
   *dest = *(HTofRawSim*) libp->para[0].ref;
   const HTofRawSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofRawSimTmp */
static int G__TofDict_592_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofRawSimTmp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSimTmp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofRawSimTmp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofRawSimTmp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSimTmp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSimTmp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRawSimTmp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSimTmp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_592_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRawSimTmp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__TofDict_592_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRawSimTmp *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRawSimTmp[n];
     } else {
       p = new((void*) gvp) HTofRawSimTmp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRawSimTmp;
     } else {
       p = new((void*) gvp) HTofRawSimTmp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_592_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofRawSimTmp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofRawSimTmp(*(HTofRawSimTmp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofRawSimTmp G__THTofRawSimTmp;
static int G__TofDict_592_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofRawSimTmp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofRawSimTmp*) (soff+(sizeof(HTofRawSimTmp)*i)))->~G__THTofRawSimTmp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofRawSimTmp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofRawSimTmp*) (soff))->~G__THTofRawSimTmp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_592_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRawSimTmp* dest = (HTofRawSimTmp*) G__getstructoffset();
   *dest = *(HTofRawSimTmp*) libp->para[0].ref;
   const HTofRawSimTmp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofRawSimFilter */
static int G__TofDict_593_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRawSimFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRawSimFilter[n];
     } else {
       p = new((void*) gvp) HTofRawSimFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofRawSimFilter;
     } else {
       p = new((void*) gvp) HTofRawSimFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofRawSimFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSimFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofRawSimFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofRawSimFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofRawSimFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSimFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRawSimFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofRawSimFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_593_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofRawSimFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_593_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofRawSimFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofRawSimFilter(*(HTofRawSimFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofRawSimFilter G__THTofRawSimFilter;
static int G__TofDict_593_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofRawSimFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofRawSimFilter*) (soff+(sizeof(HTofRawSimFilter)*i)))->~G__THTofRawSimFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofRawSimFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofRawSimFilter*) (soff))->~G__THTofRawSimFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_593_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofRawSimFilter* dest = (HTofRawSimFilter*) G__getstructoffset();
   *dest = *(HTofRawSimFilter*) libp->para[0].ref;
   const HTofRawSimFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofGeantReader */
static int G__TofDict_600_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofGeantReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofGeantReader[n];
     } else {
       p = new((void*) gvp) HTofGeantReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofGeantReader;
     } else {
       p = new((void*) gvp) HTofGeantReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofGeantReader*) G__getstructoffset())->getGeantTofCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTofGeantReader*) G__getstructoffset())->getGeantTof(*((HLocation*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofGeantReader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofGeantReader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofGeantReader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofGeantReader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofGeantReader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofGeantReader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofGeantReader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofGeantReader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_600_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofGeantReader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_600_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofGeantReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofGeantReader(*(HTofGeantReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofGeantReader G__THTofGeantReader;
static int G__TofDict_600_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofGeantReader*) (soff+(sizeof(HTofGeantReader)*i)))->~G__THTofGeantReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofGeantReader*) (soff))->~G__THTofGeantReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_600_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofGeantReader* dest = (HTofGeantReader*) G__getstructoffset();
   *dest = *(HTofGeantReader*) libp->para[0].ref;
   const HTofGeantReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofCalSim */
static int G__TofDict_601_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalSim[n];
     } else {
       p = new((void*) gvp) HTofCalSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCalSim;
     } else {
       p = new((void*) gvp) HTofCalSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalSim*) G__getstructoffset())->setNTrack1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalSim*) G__getstructoffset())->setNTrack2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofCalSim*) G__getstructoffset())->getNTrack1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofCalSim*) G__getstructoffset())->getNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalSim*) G__getstructoffset())->setLeftNTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalSim*) G__getstructoffset())->setRightNTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofCalSim*) G__getstructoffset())->getLeftNTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofCalSim*) G__getstructoffset())->getRightNTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCalSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCalSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCalSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCalSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCalSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_601_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCalSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_601_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofCalSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofCalSim(*(HTofCalSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCalSim G__THTofCalSim;
static int G__TofDict_601_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCalSim*) (soff+(sizeof(HTofCalSim)*i)))->~G__THTofCalSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCalSim*) (soff))->~G__THTofCalSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_601_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCalSim* dest = (HTofCalSim*) G__getstructoffset();
   *dest = *(HTofCalSim*) libp->para[0].ref;
   const HTofCalSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofHitSim */
static int G__TofDict_602_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitSim[n];
     } else {
       p = new((void*) gvp) HTofHitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitSim;
     } else {
       p = new((void*) gvp) HTofHitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitSim*) G__getstructoffset())->setNTrack1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitSim*) G__getstructoffset())->setNTrack2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitSim*) G__getstructoffset())->setLeftNTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitSim*) G__getstructoffset())->setRightNTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofHitSim*) G__getstructoffset())->getNTrack1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofHitSim*) G__getstructoffset())->getNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofHitSim*) G__getstructoffset())->getLeftNTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTofHitSim*) G__getstructoffset())->getRightNTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofHitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofHitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofHitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_602_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_602_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofHitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofHitSim(*(HTofHitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofHitSim G__THTofHitSim;
static int G__TofDict_602_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofHitSim*) (soff+(sizeof(HTofHitSim)*i)))->~G__THTofHitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofHitSim*) (soff))->~G__THTofHitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_602_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitSim* dest = (HTofHitSim*) G__getstructoffset();
   *dest = *(HTofHitSim*) libp->para[0].ref;
   const HTofHitSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofHitSimTmp */
static int G__TofDict_603_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofHitSimTmp::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitSimTmp::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofHitSimTmp::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofHitSimTmp::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitSimTmp*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitSimTmp::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitSimTmp::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitSimTmp::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_603_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitSimTmp::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__TofDict_603_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitSimTmp *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitSimTmp[n];
     } else {
       p = new((void*) gvp) HTofHitSimTmp[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitSimTmp;
     } else {
       p = new((void*) gvp) HTofHitSimTmp;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_603_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofHitSimTmp* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofHitSimTmp(*(HTofHitSimTmp*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofHitSimTmp G__THTofHitSimTmp;
static int G__TofDict_603_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofHitSimTmp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofHitSimTmp*) (soff+(sizeof(HTofHitSimTmp)*i)))->~G__THTofHitSimTmp();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofHitSimTmp*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofHitSimTmp*) (soff))->~G__THTofHitSimTmp();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_603_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitSimTmp* dest = (HTofHitSimTmp*) G__getstructoffset();
   *dest = *(HTofHitSimTmp*) libp->para[0].ref;
   const HTofHitSimTmp& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofHitFSim */
static int G__TofDict_604_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitFSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitFSim[n];
     } else {
       p = new((void*) gvp) HTofHitFSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofHitFSim;
     } else {
       p = new((void*) gvp) HTofHitFSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofHitFSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofHitFSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HTofHitFSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofHitFSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitFSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofHitFSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofHitFSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofHitFSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitFSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitFSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofHitFSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_604_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofHitFSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofHitFSim G__THTofHitFSim;
static int G__TofDict_604_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofHitFSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofHitFSim*) (soff+(sizeof(HTofHitFSim)*i)))->~G__THTofHitFSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofHitFSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofHitFSim*) (soff))->~G__THTofHitFSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofTrigger */
static int G__TofDict_608_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrigger[n];
     } else {
       p = new((void*) gvp) HTofTrigger[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrigger;
     } else {
       p = new((void*) gvp) HTofTrigger;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrigger* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofTrigger(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HTofTrigger(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrigger));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrigger*) G__getstructoffset())->checkTofHit((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofTrigger*) G__getstructoffset())->checkTofMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofTrigger::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrigger::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofTrigger::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofTrigger::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrigger*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrigger::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrigger::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrigger::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_608_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrigger::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofTrigger G__THTofTrigger;
static int G__TofDict_608_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofTrigger*) (soff+(sizeof(HTofTrigger)*i)))->~G__THTofTrigger();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofTrigger*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofTrigger*) (soff))->~G__THTofTrigger();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofUnpacker99 */
static int G__TofDict_612_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofUnpacker99* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofUnpacker99[n];
     } else {
       p = new((void*) gvp) HTofUnpacker99[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofUnpacker99;
     } else {
       p = new((void*) gvp) HTofUnpacker99;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofUnpacker99*) G__getstructoffset())->byte((Int_t) G__int(libp->para[0]), (UInt4) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofUnpacker99::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofUnpacker99::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofUnpacker99::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofUnpacker99::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofUnpacker99*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofUnpacker99::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofUnpacker99::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofUnpacker99::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_612_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofUnpacker99::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_612_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofUnpacker99* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofUnpacker99(*(HTofUnpacker99*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofUnpacker99 G__THTofUnpacker99;
static int G__TofDict_612_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofUnpacker99*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofUnpacker99*) (soff+(sizeof(HTofUnpacker99)*i)))->~G__THTofUnpacker99();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofUnpacker99*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofUnpacker99*) (soff))->~G__THTofUnpacker99();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_612_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofUnpacker99* dest = (HTofUnpacker99*) G__getstructoffset();
   *dest = *(HTofUnpacker99*) libp->para[0].ref;
   const HTofUnpacker99& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofTrb2Unpacker */
static int G__TofDict_644_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2Unpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTrb2Unpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofTrb2Unpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofTrb2Unpacker[n];
       } else {
         p = new((void*) gvp) HTofTrb2Unpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofTrb2Unpacker;
       } else {
         p = new((void*) gvp) HTofTrb2Unpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Unpacker*) G__getstructoffset())->disableTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Unpacker*) G__getstructoffset())->removeTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Unpacker*) G__getstructoffset())->shiftTimes((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofTrb2Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofTrb2Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofTrb2Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTrb2Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTrb2Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_644_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTrb2Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_644_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofTrb2Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofTrb2Unpacker(*(HTofTrb2Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofTrb2Unpacker G__THTofTrb2Unpacker;
static int G__TofDict_644_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofTrb2Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofTrb2Unpacker*) (soff+(sizeof(HTofTrb2Unpacker)*i)))->~G__THTofTrb2Unpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofTrb2Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofTrb2Unpacker*) (soff))->~G__THTofTrb2Unpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_644_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTrb2Unpacker* dest = (HTofTrb2Unpacker*) G__getstructoffset();
   *dest = *(HTofTrb2Unpacker*) libp->para[0].ref;
   const HTofTrb2Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofParRootFileIo */
static int G__TofDict_649_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HTofParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofParRootFileIo*) G__getstructoffset())->read((HTofCalPar*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofParRootFileIo*) G__getstructoffset())->read((HTofDigiPar*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTofParRootFileIo*) G__getstructoffset())->read((HTofLookup*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_649_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_649_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofParRootFileIo(*(HTofParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofParRootFileIo G__THTofParRootFileIo;
static int G__TofDict_649_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofParRootFileIo*) (soff+(sizeof(HTofParRootFileIo)*i)))->~G__THTofParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofParRootFileIo*) (soff))->~G__THTofParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_649_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofParRootFileIo* dest = (HTofParRootFileIo*) G__getstructoffset();
   *dest = *(HTofParRootFileIo*) libp->para[0].ref;
   const HTofParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofParAsciiFileIo */
static int G__TofDict_659_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HTofParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_659_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_659_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofParAsciiFileIo(*(HTofParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofParAsciiFileIo G__THTofParAsciiFileIo;
static int G__TofDict_659_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofParAsciiFileIo*) (soff+(sizeof(HTofParAsciiFileIo)*i)))->~G__THTofParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofParAsciiFileIo*) (soff))->~G__THTofParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_659_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofParAsciiFileIo* dest = (HTofParAsciiFileIo*) G__getstructoffset();
   *dest = *(HTofParAsciiFileIo*) libp->para[0].ref;
   const HTofParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofClusterFPar */
static int G__TofDict_662_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterFPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTofClusterFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTofClusterFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterFPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTofClusterFPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofClusterFPar[n];
       } else {
         p = new((void*) gvp) HTofClusterFPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTofClusterFPar;
       } else {
         p = new((void*) gvp) HTofClusterFPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMaxTDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMaxXDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMIPLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMPV1((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMPV1());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getSigma1((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getSigma1());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMPV2((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMPV2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getSigma2((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getSigma2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getConstRatio((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getConstRatio());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMaxPDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofClusterFPar*) G__getstructoffset())->getMaxELoss());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterFPar*) G__getstructoffset())->readFrom(*(HTofClusterFPar*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofClusterFPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterFPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofClusterFPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofClusterFPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterFPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterFPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterFPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterFPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_662_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterFPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_662_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofClusterFPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofClusterFPar(*(HTofClusterFPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofClusterFPar G__THTofClusterFPar;
static int G__TofDict_662_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofClusterFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofClusterFPar*) (soff+(sizeof(HTofClusterFPar)*i)))->~G__THTofClusterFPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofClusterFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofClusterFPar*) (soff))->~G__THTofClusterFPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_662_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterFPar* dest = (HTofClusterFPar*) G__getstructoffset();
   *dest = *(HTofClusterFPar*) libp->para[0].ref;
   const HTofClusterFPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofCluster */
static int G__TofDict_663_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCluster[n];
     } else {
       p = new((void*) gvp) HTofCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofCluster;
     } else {
       p = new((void*) gvp) HTofCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofCluster((HTofHit*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HTofCluster((HTofHit*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofCluster(
(HTofHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) HTofCluster(
(HTofHit*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofCluster*) G__getstructoffset())->getClusterSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCluster*) G__getstructoffset())->getClusterProbAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTofCluster*) G__getstructoffset())->getClusterProbLep());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofCluster*) G__getstructoffset())->getIndexHit2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCluster*) G__getstructoffset())->setClusterSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCluster*) G__getstructoffset())->setClusterProbAll((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCluster*) G__getstructoffset())->setClusterProbLep((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCluster*) G__getstructoffset())->setIndexHit2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_663_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_663_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofCluster(*(HTofCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofCluster G__THTofCluster;
static int G__TofDict_663_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofCluster*) (soff+(sizeof(HTofCluster)*i)))->~G__THTofCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofCluster*) (soff))->~G__THTofCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_663_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofCluster* dest = (HTofCluster*) G__getstructoffset();
   *dest = *(HTofCluster*) libp->para[0].ref;
   const HTofCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofClusterF */
static int G__TofDict_664_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterF[n];
     } else {
       p = new((void*) gvp) HTofClusterF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterF;
     } else {
       p = new((void*) gvp) HTofClusterF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofClusterF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HTofClusterF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterF*) G__getstructoffset())->initParContainer((HSpectrometer*) G__int(libp->para[0]), (HRuntimeDb*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofClusterF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofClusterF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofClusterF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_664_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofClusterF G__THTofClusterF;
static int G__TofDict_664_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofClusterF*) (soff+(sizeof(HTofClusterF)*i)))->~G__THTofClusterF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofClusterF*) (soff))->~G__THTofClusterF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofClusterFSim */
static int G__TofDict_665_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterFSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterFSim[n];
     } else {
       p = new((void*) gvp) HTofClusterFSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterFSim;
     } else {
       p = new((void*) gvp) HTofClusterFSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterFSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofClusterFSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HTofClusterFSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofClusterFSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterFSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofClusterFSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofClusterFSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterFSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterFSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterFSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterFSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_665_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterFSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofClusterFSim G__THTofClusterFSim;
static int G__TofDict_665_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofClusterFSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofClusterFSim*) (soff+(sizeof(HTofClusterFSim)*i)))->~G__THTofClusterFSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofClusterFSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofClusterFSim*) (soff))->~G__THTofClusterFSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofClusterSim */
static int G__TofDict_666_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterSim[n];
     } else {
       p = new((void*) gvp) HTofClusterSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofClusterSim;
     } else {
       p = new((void*) gvp) HTofClusterSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofClusterSim((HTofHitSim*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HTofClusterSim((HTofHitSim*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofClusterSim(
(HTofHitSim*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) HTofClusterSim(
(HTofHitSim*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterSim*) G__getstructoffset())->incNParticipants();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterSim*) G__getstructoffset())->setNParticipants((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTofClusterSim*) G__getstructoffset())->getNParticipants());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterSim*) G__getstructoffset())->setNTrack1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterSim*) G__getstructoffset())->setNTrack2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HTofClusterSim*) G__getstructoffset())->getNTrack1((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HTofClusterSim*) G__getstructoffset())->getNTrack1());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HTofClusterSim*) G__getstructoffset())->getNTrack2((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HTofClusterSim*) G__getstructoffset())->getNTrack2());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofClusterSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofClusterSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofClusterSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofClusterSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofClusterSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_666_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofClusterSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__TofDict_666_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTofClusterSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTofClusterSim(*(HTofClusterSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofClusterSim G__THTofClusterSim;
static int G__TofDict_666_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofClusterSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofClusterSim*) (soff+(sizeof(HTofClusterSim)*i)))->~G__THTofClusterSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofClusterSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofClusterSim*) (soff))->~G__THTofClusterSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__TofDict_666_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofClusterSim* dest = (HTofClusterSim*) G__getstructoffset();
   *dest = *(HTofClusterSim*) libp->para[0].ref;
   const HTofClusterSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTofTaskSet */
static int G__TofDict_686_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTaskSet[n];
     } else {
       p = new((void*) gvp) HTofTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTofTaskSet;
     } else {
       p = new((void*) gvp) HTofTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTofTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTofTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HTofTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HTofTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HTofTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HTofTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTofTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTofTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTofTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTofTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTofTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__TofDict_686_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTofTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTofTaskSet G__THTofTaskSet;
static int G__TofDict_686_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTofTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTofTaskSet*) (soff+(sizeof(HTofTaskSet)*i)))->~G__THTofTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTofTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTofTaskSet*) (soff))->~G__THTofTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HTofCal */

/* HTofCalPar */

/* HTofCalibrater */

/* HTofDigiPar */

/* HTofWalkPar */

/* HTofDigitizer */

/* HTofHit */

/* HTofGeomPar */

/* HTofRaw */

/* HTofHitF */

/* HTofHitF2 */

/* HTofLookup */

/* HTofUnpacker */

/* HTofContFact */

/* HTofCalParCell */

/* HTofCalParMod */

/* HTofCalParSec */

/* HTofDigiParCell */

/* HTofDigiParMod */

/* HTofDigiParSec */

/* HTofLookupChan */

/* HTofLookupSlot */

/* HTofLookupCrate */

/* HTofTrb2LookupChan */

/* HTofTrb2LookupBoard */

/* HTofTrb2Lookup */

/* HTofDetector */

/* HTofRawSim */

/* HTofRawSimTmp */

/* HTofRawSimFilter */

/* HTofGeantReader */

/* HTofCalSim */

/* HTofHitSim */

/* HTofHitSimTmp */

/* HTofHitFSim */

/* HTofTrigger */

/* HTofUnpacker99 */

/* HTofTrb2Unpacker */

/* HTofParRootFileIo */

/* HTofParAsciiFileIo */

/* HTofClusterFPar */

/* HTofCluster */

/* HTofClusterF */

/* HTofClusterFSim */

/* HTofClusterSim */

/* HTofTaskSet */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncTofDict {
 public:
  G__Sizep2memfuncTofDict(): p(&G__Sizep2memfuncTofDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncTofDict::*p)();
};

size_t G__get_sizep2memfuncTofDict()
{
  G__Sizep2memfuncTofDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceTofDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCal))) {
     HTofCal *G__Lderived;
     G__Lderived=(HTofCal*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCal),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCalPar))) {
     HTofCalPar *G__Lderived;
     G__Lderived=(HTofCalPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater))) {
     HTofCalibrater *G__Lderived;
     G__Lderived=(HTofCalibrater*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar))) {
     HTofDigiPar *G__Lderived;
     G__Lderived=(HTofDigiPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar))) {
     HTofWalkPar *G__Lderived;
     G__Lderived=(HTofWalkPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar),G__get_linked_tagnum(&G__TofDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer))) {
     HTofDigitizer *G__Lderived;
     G__Lderived=(HTofDigitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofHit))) {
     HTofHit *G__Lderived;
     G__Lderived=(HTofHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHit),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar))) {
     HTofGeomPar *G__Lderived;
     G__Lderived=(HTofGeomPar*)0x1000;
     {
       HDetGeomPar *G__Lpbase=(HDetGeomPar*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),G__get_linked_tagnum(&G__TofDictLN_HDetGeomPar),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofRaw))) {
     HTofRaw *G__Lderived;
     G__Lderived=(HTofRaw*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRaw),G__get_linked_tagnum(&G__TofDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRaw),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofHitF))) {
     HTofHitF *G__Lderived;
     G__Lderived=(HTofHitF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofHitF2))) {
     HTofHitF2 *G__Lderived;
     G__Lderived=(HTofHitF2*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF2),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF2),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF2),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF2),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofLookup))) {
     HTofLookup *G__Lderived;
     G__Lderived=(HTofLookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookup),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookup),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookup),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker))) {
     HTofUnpacker *G__Lderived;
     G__Lderived=(HTofUnpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker),G__get_linked_tagnum(&G__TofDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HParSet))) {
     HParSet *G__Lderived;
     G__Lderived=(HParSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HParSet),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HParSet),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofContFact))) {
     HTofContFact *G__Lderived;
     G__Lderived=(HTofContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofContFact),G__get_linked_tagnum(&G__TofDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofContFact),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofContFact),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell))) {
     HTofCalParCell *G__Lderived;
     G__Lderived=(HTofCalParCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod))) {
     HTofCalParMod *G__Lderived;
     G__Lderived=(HTofCalParMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec))) {
     HTofCalParSec *G__Lderived;
     G__Lderived=(HTofCalParSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell))) {
     HTofDigiParCell *G__Lderived;
     G__Lderived=(HTofDigiParCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod))) {
     HTofDigiParMod *G__Lderived;
     G__Lderived=(HTofDigiParMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec))) {
     HTofDigiParSec *G__Lderived;
     G__Lderived=(HTofDigiParSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan))) {
     HTofLookupChan *G__Lderived;
     G__Lderived=(HTofLookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot))) {
     HTofLookupSlot *G__Lderived;
     G__Lderived=(HTofLookupSlot*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate))) {
     HTofLookupCrate *G__Lderived;
     G__Lderived=(HTofLookupCrate*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan))) {
     HTofTrb2LookupChan *G__Lderived;
     G__Lderived=(HTofTrb2LookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard))) {
     HTofTrb2LookupBoard *G__Lderived;
     G__Lderived=(HTofTrb2LookupBoard*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup))) {
     HTofTrb2Lookup *G__Lderived;
     G__Lderived=(HTofTrb2Lookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofDetector))) {
     HTofDetector *G__Lderived;
     G__Lderived=(HTofDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDetector),G__get_linked_tagnum(&G__TofDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDetector),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDetector),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofRawSim))) {
     HTofRawSim *G__Lderived;
     G__Lderived=(HTofRawSim*)0x1000;
     {
       HTofRaw *G__Lpbase=(HTofRaw*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSim),G__get_linked_tagnum(&G__TofDictLN_HTofRaw),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSim),G__get_linked_tagnum(&G__TofDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSim),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp))) {
     HTofRawSimTmp *G__Lderived;
     G__Lderived=(HTofRawSimTmp*)0x1000;
     {
       HTofRawSim *G__Lpbase=(HTofRawSim*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp),G__get_linked_tagnum(&G__TofDictLN_HTofRawSim),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTofRaw *G__Lpbase=(HTofRaw*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp),G__get_linked_tagnum(&G__TofDictLN_HTofRaw),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp),G__get_linked_tagnum(&G__TofDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter))) {
     HTofRawSimFilter *G__Lderived;
     G__Lderived=(HTofRawSimFilter*)0x1000;
     {
       HFilter *G__Lpbase=(HFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter),G__get_linked_tagnum(&G__TofDictLN_HFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader))) {
     HTofGeantReader *G__Lderived;
     G__Lderived=(HTofGeantReader*)0x1000;
     {
       HGeantReader *G__Lpbase=(HGeantReader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader),G__get_linked_tagnum(&G__TofDictLN_HGeantReader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCalSim))) {
     HTofCalSim *G__Lderived;
     G__Lderived=(HTofCalSim*)0x1000;
     {
       HTofCal *G__Lpbase=(HTofCal*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalSim),G__get_linked_tagnum(&G__TofDictLN_HTofCal),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalSim),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofHitSim))) {
     HTofHitSim *G__Lderived;
     G__Lderived=(HTofHitSim*)0x1000;
     {
       HTofHit *G__Lpbase=(HTofHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSim),G__get_linked_tagnum(&G__TofDictLN_HTofHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSim),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp))) {
     HTofHitSimTmp *G__Lderived;
     G__Lderived=(HTofHitSimTmp*)0x1000;
     {
       HTofHitSim *G__Lpbase=(HTofHitSim*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp),G__get_linked_tagnum(&G__TofDictLN_HTofHitSim),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTofHit *G__Lpbase=(HTofHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp),G__get_linked_tagnum(&G__TofDictLN_HTofHit),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim))) {
     HTofHitFSim *G__Lderived;
     G__Lderived=(HTofHitFSim*)0x1000;
     {
       HTofHitF *G__Lpbase=(HTofHitF*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim),G__get_linked_tagnum(&G__TofDictLN_HTofHitF),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofTrigger))) {
     HTofTrigger *G__Lderived;
     G__Lderived=(HTofTrigger*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrigger),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrigger),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrigger),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrigger),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99))) {
     HTofUnpacker99 *G__Lderived;
     G__Lderived=(HTofUnpacker99*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99),G__get_linked_tagnum(&G__TofDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker))) {
     HTofTrb2Unpacker *G__Lderived;
     G__Lderived=(HTofTrb2Unpacker*)0x1000;
     {
       HTrb2Unpacker *G__Lpbase=(HTrb2Unpacker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker),G__get_linked_tagnum(&G__TofDictLN_HTrb2Unpacker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker),G__get_linked_tagnum(&G__TofDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HDetGeomPar))) {
     HDetGeomPar *G__Lderived;
     G__Lderived=(HDetGeomPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HDetGeomPar),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HDetGeomPar),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HDetGeomPar),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo))) {
     HTofParRootFileIo *G__Lderived;
     G__Lderived=(HTofParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo),G__get_linked_tagnum(&G__TofDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo),G__get_linked_tagnum(&G__TofDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo))) {
     HTofParAsciiFileIo *G__Lderived;
     G__Lderived=(HTofParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo),G__get_linked_tagnum(&G__TofDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo),G__get_linked_tagnum(&G__TofDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar))) {
     HTofClusterFPar *G__Lderived;
     G__Lderived=(HTofClusterFPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar),G__get_linked_tagnum(&G__TofDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofCluster))) {
     HTofCluster *G__Lderived;
     G__Lderived=(HTofCluster*)0x1000;
     {
       HTofHit *G__Lpbase=(HTofHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCluster),G__get_linked_tagnum(&G__TofDictLN_HTofHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCluster),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofClusterF))) {
     HTofClusterF *G__Lderived;
     G__Lderived=(HTofClusterF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterF),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterF),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterF),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterF),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim))) {
     HTofClusterFSim *G__Lderived;
     G__Lderived=(HTofClusterFSim*)0x1000;
     {
       HTofClusterF *G__Lpbase=(HTofClusterF*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim),G__get_linked_tagnum(&G__TofDictLN_HTofClusterF),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim),G__get_linked_tagnum(&G__TofDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim))) {
     HTofClusterSim *G__Lderived;
     G__Lderived=(HTofClusterSim*)0x1000;
     {
       HTofCluster *G__Lpbase=(HTofCluster*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim),G__get_linked_tagnum(&G__TofDictLN_HTofCluster),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTofHit *G__Lpbase=(HTofHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim),G__get_linked_tagnum(&G__TofDictLN_HTofHit),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HParCond),G__get_linked_tagnum(&G__TofDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HParCond),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HParCond),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet))) {
     HTofTaskSet *G__Lderived;
     G__Lderived=(HTofTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet),G__get_linked_tagnum(&G__TofDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet),G__get_linked_tagnum(&G__TofDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet),G__get_linked_tagnum(&G__TofDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet),G__get_linked_tagnum(&G__TofDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableTofDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__TofDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TofDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TofDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TofDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TofDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__TofDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__TofDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TofDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__TofDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__TofDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__TofDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__TofDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__TofDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__TofDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("UInt4",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__TofDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__TofDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__TofDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__TofDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HTofCal */
static void G__setup_memvarHTofCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCal));
   { HTofCal *p; p=(HTofCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"timeR=",0,"TDC: right hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"timeL=",0,"TDC: left hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chargeR=",0,"QDC: right hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"chargeL=",0,"QDC: left hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"nHit=",0,"number of hits");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"address=",0,"sector,module and cell numbers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofCalPar */
static void G__setup_memvarHTofCalPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalPar));
   { HTofCalPar *p; p=(HTofCalPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,4,"array=",0,"array of pointers of type HTofCalParMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofCalibrater */
static void G__setup_memvarHTofCalibrater(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater));
   { HTofCalibrater *p; p=(HTofCalibrater*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"fLoc=",0,"Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"fIter=",0,"!Iterator on raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fRawCat=",0,"!Pointer to the raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fCalCat=",0,"!Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),-1,-1,2,"fCalPar=",0,"!Calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofDigiPar */
static void G__setup_memvarHTofDigiPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar));
   { HTofDigiPar *p; p=(HTofDigiPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,4,"array=",0,"array of pointers of type HTofDigiParMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofWalkPar */
static void G__setup_memvarHTofWalkPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar));
   { HTofWalkPar *p; p=(HTofWalkPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayF),-1,-1,2,"fWPars=",0,"Parameters for the walking effect correction.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayF),-1,-1,2,"fWErrors=",0,"Parameters for the errors for each cell and side.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayI),-1,-1,2,"fSideIsUsed=",0,"Array for the working or not properly PMT+FEE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayD),-1,-1,2,"fParsSX=",0,"linearized sec*mod*cell*3");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayD),-1,-1,2,"fParsDX=",0,"linearized sec*mod*cell*5");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayD),-1,-1,2,"fParsGeantToData=",0,"slope + offset to align geant charge with data charge");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayD),-1,-1,2,"fParsGroupVelocityData=",0,"vgroup real data (used to scale sigmaX to take care about other vgroup in sim)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_TArrayD),-1,-1,2,"fParsGroupVelocityScale=",0,"vgroup global scaleing");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar),-1,-1,2,"fDigiPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),-1,-1,2,"fCalPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),-1,-1,2,"fTofGeometry=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TF1),-1,-1,2,"func=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TF1),-1,-1,2,"fdxsigma=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TF1),-1,-1,2,"fdxoffset=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TF1),-1,-1,2,"fscaleDxSigma=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofDigitizer */
static void G__setup_memvarHTofDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer));
   { HTofDigitizer *p; p=(HTofDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,4,"fLoc=",0,"! Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,4,"fGeantCat=",0,"! Pointer to Geant data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HLinearCategory),-1,-1,4,"fGeantKineCat=",0,"! Pointer to GeantKine data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,4,"fRawCat=",0,"! Pointer to raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,4,"fRawCatTmp=",0,"! Pointer to tmp raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar),-1,-1,4,"fDigiPar=",0,"! Digitization parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar),-1,-1,4,"fTofWalkPar=",0,"! walk correction parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),-1,-1,4,"fTofCalPar=",0,"! cal parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,4,"iterGeant=",0,"! Iterator over GeantCell category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,4,"iterTofRaw=",0,"! Iterator over HTofRawSim category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,4,"iterTofRawTmp=",0,"! Iterator over tmp HTofRawSim category");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"timeResZero=",0,"! hardwired resolotion of tof (240 ps)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"storeFirstTrack=",0,"! flag:");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"debug=",0,"! change stored tracknumbers (when storeFirstTrack!=0)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TNtuple),-1,-1,4,"out=",0,"! ntuple pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TFile),-1,-1,4,"outFile=",0,"! output file pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer),-1,-2,4,"pTofDigi=",0,"! pointer to this");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useOld=",0,"! flag: kTRUE:use old execute function (before embedding)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofHit */
static void G__setup_memvarHTofHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHit));
   { HTofHit *p; p=(HTofHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"index=",0,"Index");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tof=",0,"time-of-flight (ns)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xpos=",0,"X coordinate in the scint. rod reference system (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xposAdc=",0,"X coordinate calculated from ADC data (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep=",0,"energy deposited in scint. rod by particle");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"lAmp=",0,"amplitude of the signal registered by left PMT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rAmp=",0,"amplitude of the signal registered by right PMT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xlab=",0,"X in the lab system (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ylab=",0,"Y in the lab system (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zlab=",0,"Z in the lab system (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dist=",0,"distance of the hit from the target (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"theta=",0,"theta angle of the hit (in deg)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"phi=",0,"phi angle of the hit (in deg)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"cell=",0,"Location");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"flagAdc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofGeomPar */
static void G__setup_memvarHTofGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar));
   { HTofGeomPar *p; p=(HTofGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofRaw */
static void G__setup_memvarHTofRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRaw));
   { HTofRaw *p; p=(HTofRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightT=",0,"TDC: right hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftT=",0,"TDC: left hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightQ=",0,"QDC: right hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftQ=",0,"QDC: left hit");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nHit=",0,"number of hit");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"cell=",0,"Location");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofHitF */
static void G__setup_memvarHTofHitF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF));
   { HTofHitF *p; p=(HTofHitF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fRawCat=",0,"!Raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fRawCatTmp=",0,"!Raw tmp data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fHitCat=",0,"!Pointer to the hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fHitCatTmp=",0,"!Pointer to the tmp hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fStartHitCat=",0,"! Category with start hits");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),-1,-1,2,"fCalPar=",0,"!Calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),-1,-1,2,"fCalParSim=",0,"!Calibration parameters of sim for embedding");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"fLoc=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"iter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"iterTmp=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),-1,-1,2,"fTofGeometry=",0,"!Container for TOF geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTofSimulation=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofHitF2 */
static void G__setup_memvarHTofHitF2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF2));
   { HTofHitF2 *p; p=(HTofHitF2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fRawCat=",0,"!Raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fRawCatTmp=",0,"!Raw tmp data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fHitCat=",0,"!Pointer to the hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fHitCatTmp=",0,"!Pointer to the tmp hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fStartHitCat=",0,"! Category with start hits");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),-1,-1,2,"fCalPar=",0,"!Calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCalPar),-1,-1,2,"fCalParSim=",0,"!Calibration parameters of sim for embedding");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar),-1,-1,2,"fDigiPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"fLoc=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"iter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"iterTmp=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),-1,-1,2,"fTofGeometry=",0,"!Container for TOF geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fTofSimulation=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar),-1,-1,2,"fTofWalkPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"bforceKeepGeant=",0,"! overwrite embedding mode from 1 to 2 if true (default : false)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofLookup */
static void G__setup_memvarHTofLookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookup));
   { HTofLookup *p; p=(HTofLookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HTofLookupCrate");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxCrate=",0,"actual maximum index of crates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofUnpacker */
static void G__setup_memvarHTofUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker));
   { HTofUnpacker *p; p=(HTofUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->evCounter)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"evCounter=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->errorCounter)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"errorCounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"subEvtId=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofLookup),-1,-1,2,"lookup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofContFact */
static void G__setup_memvarHTofContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofContFact));
   { HTofContFact *p; p=(HTofContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofCalParCell */
static void G__setup_memvarHTofCalParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell));
   { HTofCalParCell *p; p=(HTofCalParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"leftK=",0,"left side TDC width channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rightK=",0,"right side TDC width channel");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"vGroup=",0,"group velocity");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"posK=",0,"position offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"timK=",0,"timing offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"pedestalL=",0,"ADC left pedestal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"pedestalR=",0,"ADC right pedestal");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"attLen=",0,"Attenuation length");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"gainAsym=",0,"Gain asymmetry");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edepK=",0,"amplitude to ADC channel conversion factor");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"twC1=",0,"time walk correction (left)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"twC2=",0,"time walk correction (right)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"twC3=",0,"time walk correction of time offset");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofCalParMod */
static void G__setup_memvarHTofCalParMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod));
   { HTofCalParMod *p; p=(HTofCalParMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,4,"array=",0,"pointer array containing HStartCalParChan objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofCalParSec */
static void G__setup_memvarHTofCalParSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec));
   { HTofCalParSec *p; p=(HTofCalParSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,4,"array=",0,"pointer array containing HStartCalParMod objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofDigiParCell */
static void G__setup_memvarHTofDigiParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell));
   { HTofDigiParCell *p; p=(HTofDigiParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"halfLen=",0,"half length of the strip (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"angleRef=",0,"total internal reflection angle (deg)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"attenLen=",0,"attenuation length (mm)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"groupVel=",0,"group velocity (mm/ns)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"slopeLeftTDC=",0,"left TDC slope (ns/ch)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"slopeRightTDC=",0,"right TDC slope (ns/ch)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"thrLeftCFD=",0,"left CFD threshold (ch)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"thrRightCFD=",0,"right CFD threshold (ch)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"thrLeftADC=",0,"left ADC threshold (ch)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"thrRightADC=",0,"right ADC threshold (ch)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofDigiParMod */
static void G__setup_memvarHTofDigiParMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod));
   { HTofDigiParMod *p; p=(HTofDigiParMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,4,"array=",0,"pointer array containing HTofDigiParCell objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofDigiParSec */
static void G__setup_memvarHTofDigiParSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec));
   { HTofDigiParSec *p; p=(HTofDigiParSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,4,"array=",0,"pointer array containing HTofDigiParMod objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofLookupChan */
static void G__setup_memvarHTofLookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan));
   { HTofLookupChan *p; p=(HTofLookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number (0..5)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number (0..21)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"rod number (0..8)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"side=",0,"side of rod (L=left, R=right)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofLookupSlot */
static void G__setup_memvarHTofLookupSlot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot));
   { HTofLookupSlot *p; p=(HTofLookupSlot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HTofLookupChan objects");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modType=",0,"type of digital converter (A=ADC, T=TDC, U=undefined)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxChannel=",0,"actual maximum index of channel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nChannels=",0,"maximum number of channels in a slot");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofLookupCrate */
static void G__setup_memvarHTofLookupCrate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate));
   { HTofLookupCrate *p; p=(HTofLookupCrate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HTofLookupSlot objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxSlot=",0,"actual maximum index of slots");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSlots=",0,"maximum number of slots in a crate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofTrb2LookupChan */
static void G__setup_memvarHTofTrb2LookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan));
   { HTofTrb2LookupChan *p; p=(HTofTrb2LookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"side=",0,"side of cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofTrb2LookupBoard */
static void G__setup_memvarHTofTrb2LookupBoard(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard));
   { HTofTrb2LookupBoard *p; p=(HTofTrb2LookupBoard*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HTofTrb2LookupChan objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofTrb2Lookup */
static void G__setup_memvarHTofTrb2Lookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup));
   { HTofTrb2Lookup *p; p=(HTofTrb2Lookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HTofTrb2LookupBoard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofDetector */
static void G__setup_memvarHTofDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDetector));
   { HTofDetector *p; p=(HTofDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofRawSim */
static void G__setup_memvarHTofRawSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSim));
   { HTofRawSim *p; p=(HTofRawSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1=",0,"number of Track for first hit in cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2=",0,"number of Track for second hit in cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofRawSimTmp */
static void G__setup_memvarHTofRawSimTmp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp));
   { HTofRawSimTmp *p; p=(HTofRawSimTmp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofRawSimFilter */
static void G__setup_memvarHTofRawSimFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter));
   { HTofRawSimFilter *p; p=(HTofRawSimFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofGeantReader */
static void G__setup_memvarHTofGeantReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader));
   { HTofGeantReader *p; p=(HTofGeantReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TTree),-1,-1,4,"t=",0,"Pointer to the root tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HMatrixCategory),-1,-1,4,"fGeantTofCat=",0,"! TOF HGeant input data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventId=",0,"! event counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofCalSim */
static void G__setup_memvarHTofCalSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalSim));
   { HTofCalSim *p; p=(HTofCalSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1=",0,"number of Track for first hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2=",0,"number of Track for second hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofHitSim */
static void G__setup_memvarHTofHitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSim));
   { HTofHitSim *p; p=(HTofHitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1=",0,"number of Track for first hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2=",0,"number of Track for second hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofHitSimTmp */
static void G__setup_memvarHTofHitSimTmp(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp));
   { HTofHitSimTmp *p; p=(HTofHitSimTmp*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofHitFSim */
static void G__setup_memvarHTofHitFSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim));
   { HTofHitFSim *p; p=(HTofHitFSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofTrigger */
static void G__setup_memvarHTofTrigger(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrigger));
   { HTofTrigger *p; p=(HTofTrigger*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fHitCat=",0,"! Pointer to the hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"iterator=",0,"! Iterator on raw data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->kineGeant)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__TofDictLN_HKineSim),-1,-1,1,"kineGeant=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nSec2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nSec2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nSec5)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nSec5=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nMult)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nMult=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->nEvCounter)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nEvCounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofUnpacker99 */
static void G__setup_memvarHTofUnpacker99(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99));
   { HTofUnpacker99 *p; p=(HTofUnpacker99*)0x1000; if (p) { }
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,2,"pTofData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofTrb2Unpacker */
static void G__setup_memvarHTofTrb2Unpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker));
   { HTofTrb2Unpacker *p; p=(HTofTrb2Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup),-1,-1,2,"lookup=",0,"TRB lookup table");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"timeRef=",0,"use reference time ?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"timeRefRemove=",0,"remove reference times from data?");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeShift=",0,"shift all times by a constant (to positive)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofParRootFileIo */
static void G__setup_memvarHTofParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo));
   { HTofParRootFileIo *p; p=(HTofParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofParAsciiFileIo */
static void G__setup_memvarHTofParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo));
   { HTofParAsciiFileIo *p; p=(HTofParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"setSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofClusterFPar */
static void G__setup_memvarHTofClusterFPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar));
   { HTofClusterFPar *p; p=(HTofClusterFPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"diffTmax=",0,"Maximal time distance of two hits.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"diffXmax=",0,"Maximal x position distance of two hits.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mipLimit=",0,"Time interval limit for probability calculation.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mL1all=",0,"Most probable value of 1st Landau (all).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sL1all=",0,"Sigma of 1st Landau (all).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mL2all=",0,"Most probable value of 2nd Landau (all).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sL2all=",0,"Sigma of 2nd Landau (all).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ratCall1=",0,"Constant ratio of Landau functions (all).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mL1lep=",0,"Most probable value of 1st Landau (lep).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sL1lep=",0,"Sigma of 1st Landau (lep).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mL2lep=",0,"Most probable value of 2nd Landau (lep).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sL2lep=",0,"Sigma of 2nd Landau (lep).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ratClep1=",0,"Constant ratio of Landau functions (lep).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"diffPmax=",0,"Maximal momentum difference between tracks (for kick-plane part).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"lossEmax=",0,"Maximal energy loss for cluster of size = 2 (for kick-plane part).");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofCluster */
static void G__setup_memvarHTofCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCluster));
   { HTofCluster *p; p=(HTofCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"clustSize=",0,"number of hits in the cluster.");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"clustProbAll=",0,"cluster probability (all found clusters).");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"clustProbLep=",0,"cluster probability (lepton found clusters).");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"indexhit2=",0,"linear index of second hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofClusterF */
static void G__setup_memvarHTofClusterF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterF));
   { HTofClusterF *p; p=(HTofClusterF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofHit),-1,-1,4,"hit=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofCluster),-1,-1,4,"cluster=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tof_ph=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xposMod_ph=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tof_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xposMod_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xposModAdc_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"lAmp_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rAmp_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xlab_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ylab_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zlab_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"flagAdc_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"absTd_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"absXd_h=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tof_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xposMod_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"edep_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xposModAdc_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"lAmp_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rAmp_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xlab_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ylab_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"zlab_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"flagAdc_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"size_c=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fHitCat=",0,"Pointer to the hit category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HCategory),-1,-1,2,"fClusterCat=",0,"Pointer to the cluster category");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"fLoc=",0,"Location of hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"fpLoc=",0,"Location of previous hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__TofDictLN_HLocation),-1,-1,2,"fCLoc=",0,"Location of cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"iterh=",0,"Iterator through hit category.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HIterator),-1,-1,2,"iterc=",0,"Iterator through cluster category.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar),-1,-1,2,"fTofGeometry=",0,"Container for TOF geometry.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HSpecGeomPar),-1,-1,2,"fSpecGeometry=",0,"Container for Spectrometer geometry.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar),-1,-1,2,"fClusterFPar=",0,"Clusterfinder parameter container.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexHit1=",0,"! linear index of first tofhit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexHit2=",0,"! linear index of second tofhit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofClusterFSim */
static void G__setup_memvarHTofClusterFSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim));
   { HTofClusterFSim *p; p=(HTofClusterFSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofClusterSim */
static void G__setup_memvarHTofClusterSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim));
   { HTofClusterSim *p; p=(HTofClusterSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nParticipants=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1[3]=",0,"number of first Track in cluster participant");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2[3]=",0,"number of second Track in cluster participant");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTofTaskSet */
static void G__setup_memvarHTofTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet));
   { HTofTaskSet *p; p=(HTofTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fhitfinderVersion=",0,"! switch version 1 (old) and 2 new  (default)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fdoCluster=",0,"! run cluster finder , default kTRUE");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__TofDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarTofDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHTofCal(void) {
   /* HTofCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCal));
   G__memfunc_setup("HTofCal",641,G__TofDict_168_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__TofDict_168_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__TofDict_168_0_3, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__TofDict_168_0_4, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__TofDict_168_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__TofDict_168_0_6, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_168_0_7, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeLeft",1114,G__TofDict_168_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeRight",1229,G__TofDict_168_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeLeft",1301,G__TofDict_168_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCargeRight",1312,G__TofDict_168_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeLeft",1126,G__TofDict_168_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeRight",1241,G__TofDict_168_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeLeft",1313,G__TofDict_168_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeRight",1428,G__TofDict_168_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHit",703,G__TofDict_168_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - nhit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__TofDict_168_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__TofDict_168_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__TofDict_168_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__TofDict_168_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_168_0_21, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_168_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_168_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_168_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_168_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_168_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_168_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_168_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_168_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofCal", 641, G__TofDict_168_0_33, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofCal), -1, 0, 1, 1, 1, 0, "u 'HTofCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofCal", 767, G__TofDict_168_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_168_0_35, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofCal), -1, 1, 1, 1, 1, 0, "u 'HTofCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofCalPar(void) {
   /* HTofCalPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalPar));
   G__memfunc_setup("printPause",1067,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofCalPar",932,G__TofDict_206_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCalPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"TofCalPar\"' name C - 'Char_t' 10 '\"Calibration parameters for Tof\"' title "
"C - 'Char_t' 10 '\"TofCalProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_206_0_3, 117, G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_206_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__TofDict_206_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__TofDict_206_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__TofDict_206_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__TofDict_206_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_206_0_12, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCalPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_206_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_206_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCalPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_206_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCalPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_206_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_206_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_206_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_206_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_206_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofCalPar", 932, G__TofDict_206_0_24, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofCalPar), -1, 0, 1, 1, 1, 0, "u 'HTofCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofCalPar", 1058, G__TofDict_206_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_206_0_26, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofCalPar), -1, 1, 1, 1, 1, 0, "u 'HTofCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofCalibrater(void) {
   /* HTofCalibrater */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater));
   G__memfunc_setup("HTofCalibrater",1386,G__TofDict_207_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofCalibrater",1386,G__TofDict_207_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParContainer",1658,G__TofDict_207_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__TofDict_207_0_7, 117, G__get_linked_tagnum(&G__TofDictLN_HTofCalibrater), -1, 1, 1, 1, 1, 0, "u 'HTofCalibrater' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_207_0_8, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCalibrater::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_207_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalibrater::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_207_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCalibrater::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_207_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCalibrater::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_207_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_207_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalibrater::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_207_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalibrater::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_207_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalibrater::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_207_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalibrater::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofCalibrater", 1512, G__TofDict_207_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofDigiPar(void) {
   /* HTofDigiPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar));
   G__memfunc_setup("printPause",1067,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofDigiPar",1041,G__TofDict_553_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"TofDigiPar\"' name C - 'Char_t' 10 '\"TOF digitization parameters\"' title "
"C - 'Char_t' 10 '\"TofDigiProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_553_0_3, 117, G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_553_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__TofDict_553_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__TofDict_553_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__TofDict_553_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__TofDict_553_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_553_0_12, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofDigiPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_553_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_553_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofDigiPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_553_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofDigiPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_553_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_553_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_553_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_553_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_553_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofDigiPar", 1041, G__TofDict_553_0_24, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar), -1, 0, 1, 1, 1, 0, "u 'HTofDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofDigiPar", 1167, G__TofDict_553_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_553_0_26, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiPar), -1, 1, 1, 1, 1, 0, "u 'HTofDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofWalkPar(void) {
   /* HTofWalkPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar));
   G__memfunc_setup("ffunc",530,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 2, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofWalkPar",1059,G__TofDict_554_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"TofWalkPar\"' name C - 'Char_t' 10 '\"Walking correciton parameters for the TOF Detector\"' title "
"C - 'Char_t' 10 '\"TofWalkParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPars",726,G__TofDict_554_0_3, 70, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - side "
"i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getError",842,G__TofDict_554_0_4, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - side "
"i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsUsed",909,G__TofDict_554_0_5, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - side", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParsSX",897,G__TofDict_554_0_6, 68, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParsDX",882,G__TofDict_554_0_7, 68, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParsGeantToData",1794,G__TofDict_554_0_8, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGroupVelocity",1692,G__TofDict_554_0_9, 100, -1, G__defined_typename("Double_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGroupVelocityScale",2180,G__TofDict_554_0_10, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPars",738,G__TofDict_554_0_11, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - side "
"i - 'Int_t' 0 - bin i - 'Int_t' 0 - npar "
"F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErrors",969,G__TofDict_554_0_12, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - side "
"i - 'Int_t' 0 - bin f - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsUsed",921,G__TofDict_554_0_13, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - side "
"f - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParsSX",909,G__TofDict_554_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell D - 'Double_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParsDX",894,G__TofDict_554_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell D - 'Double_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParsGeantToData",1806,G__TofDict_554_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroupVelocity",1704,G__TofDict_554_0_17, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - cell d - 'Double_t' 0 - vel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroupVelocityScale",2192,G__TofDict_554_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getContainers",1366,G__TofDict_554_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__TofDict_554_0_23, 102, -1, G__defined_typename("Float_t"), 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - x i - 'Int_t' 0 - side "
"f - 'Float_t' 0 - q i - 'Int_t' 0 - sector "
"i - 'Int_t' 0 - module i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsets",1050,G__TofDict_554_0_24, 121, -1, -1, 0, 10, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - ql "
"f - 'Float_t' 0 - qr i - 'Int_t' 0 - sector "
"i - 'Int_t' 0 - module i - 'Int_t' 0 - cell "
"f - 'Float_t' 1 - const1 f - 'Float_t' 1 - const2 "
"f - 'Float_t' 1 - const3 f - 'Float_t' 1 - const4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErrors",957,G__TofDict_554_0_25, 121, -1, -1, 0, 10, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - ql "
"f - 'Float_t' 0 - qr i - 'Int_t' 0 - sector "
"i - 'Int_t' 0 - module i - 'Int_t' 0 - cell "
"f - 'Float_t' 1 - const1 f - 'Float_t' 1 - const2 "
"f - 'Float_t' 1 - const3 f - 'Float_t' 1 - const4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofPos",923,G__TofDict_554_0_26, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HTofRaw' - 0 - tofraw f - 'Float_t' 1 - tof "
"f - 'Float_t' 1 - pos f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - startTMP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDxSigma",1005,G__TofDict_554_0_27, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - c d - 'Double_t' 0 - eloss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDxSigmaDigi",1386,G__TofDict_554_0_28, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - c d - 'Double_t' 0 - eloss "
"d - 'Double_t' 0 - vgroup d - 'Double_t' 0 - beta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDxOffset",1123,G__TofDict_554_0_29, 100, -1, G__defined_typename("Double_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - c d - 'Double_t' 0 - eloss", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNormedDX",1089,G__TofDict_554_0_30, 100, -1, G__defined_typename("Double_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - c d - 'Double_t' 0 - eloss "
"d - 'Double_t' 0 - rkDX g - 'Bool_t' 0 - sim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scaleGeantToData",1588,G__TofDict_554_0_31, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_554_0_32, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofWalkPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_554_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofWalkPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_554_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofWalkPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_554_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofWalkPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_554_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_554_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofWalkPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_554_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofWalkPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_554_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofWalkPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_554_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofWalkPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofWalkPar", 1059, G__TofDict_554_0_44, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar), -1, 0, 1, 1, 1, 0, "u 'HTofWalkPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofWalkPar", 1185, G__TofDict_554_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_554_0_46, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofWalkPar), -1, 1, 1, 1, 1, 0, "u 'HTofWalkPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofDigitizer(void) {
   /* HTofDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer));
   G__memfunc_setup("findFirstHitInTof",1710,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"U 'HGeantTof' - 0 - pOld U 'HGeantTof' - 2 - pNew "
"I - 'Int_t' 0 - count", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNtuple",1055,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HGeantTof' - 0 - pOld U 'HGeantTof' - 0 - pNew "
"i - 'Int_t' 0 - count", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillArray",934,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doFinalCheckOnArray",1879,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillOutput",1080,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofDigitizer",1308,G__TofDict_555_0_6, 105, G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"HTofDigitizer\"' name C - 'Text_t' 10 '\"HTofDigitizer\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,G__TofDict_555_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("executeOld",1042,G__TofDict_555_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTofDigtizer",1451,G__TofDict_555_0_12, 85, G__get_linked_tagnum(&G__TofDictLN_HTofDigitizer), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HTofDigitizer* (*)())(&HTofDigitizer::getTofDigtizer) ), 0);
   G__memfunc_setup("setStoreFirstTrack",1878,G__TofDict_555_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebug",819,G__TofDict_555_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputFile",1373,G__TofDict_555_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' outname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseOld",920,G__TofDict_555_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeResolution",1807,G__TofDict_555_0_17, 121, -1, -1, 0, 1, 3, 1, 0, "f - 'Float_t' 0 '0.240' res", (char*)NULL, (void*) G__func2void( (void (*)(Float_t))(&HTofDigitizer::setTimeResolution) ), 0);
   G__memfunc_setup("Class",502,G__TofDict_555_0_18, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_555_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_555_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_555_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_555_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_555_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_555_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_555_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_555_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofDigitizer", 1434, G__TofDict_555_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofHit(void) {
   /* HTofHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHit));
   G__memfunc_setup("HTofHit",662,G__TofDict_556_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__TofDict_556_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__TofDict_556_0_3, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__TofDict_556_0_4, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__TofDict_556_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof",617,G__TofDict_556_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXpos",746,G__TofDict_556_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXposAdc",1010,G__TofDict_556_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdep",702,G__TofDict_556_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftAmp",1001,G__TofDict_556_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightAmp",1116,G__TofDict_556_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYZLab",858,G__TofDict_556_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistance",1131,G__TofDict_556_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 1 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__TofDict_556_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 1 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__TofDict_556_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 1 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAdcFlag",962,G__TofDict_556_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__TofDict_556_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__TofDict_556_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__TofDict_556_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__TofDict_556_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTof",629,G__TofDict_556_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - atof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXpos",758,G__TofDict_556_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - axpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXposAdc",1022,G__TofDict_556_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - axposAdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdep",714,G__TofDict_556_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aedep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftAmp",1013,G__TofDict_556_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - alAmp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightAmp",1128,G__TofDict_556_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arAmp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZLab",870,G__TofDict_556_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistance",1143,G__TofDict_556_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__TofDict_556_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__TofDict_556_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ph", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAdcFlag",974,G__TofDict_556_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - af", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setValues",956,G__TofDict_556_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - atof f - 'Float_t' 0 - axpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator<",936,G__TofDict_556_0_33, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HTofHit' - 11 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator>",938,G__TofDict_556_0_34, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HTofHit' - 11 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator!=",970,G__TofDict_556_0_35, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HTofHit' - 11 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__TofDict_556_0_36, 117, G__get_linked_tagnum(&G__TofDictLN_HTofHit), -1, 1, 1, 1, 1, 0, "u 'HTofHit' - 11 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_556_0_37, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_556_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_556_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_556_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_556_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_556_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_556_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_556_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_556_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofHit", 662, G__TofDict_556_0_49, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofHit), -1, 0, 1, 1, 1, 0, "u 'HTofHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofHit", 788, G__TofDict_556_0_50, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofGeomPar(void) {
   /* HTofGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar));
   G__memfunc_setup("HTofGeomPar",1052,G__TofDict_557_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"TofGeomPar\"' name C - 'Char_t' 10 '\"Tof geometry parameters\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNum",907,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInComp",1494,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompNum",1023,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_557_0_8, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_557_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_557_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_557_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_557_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_557_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_557_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_557_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_557_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofGeomPar", 1052, G__TofDict_557_0_20, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar), -1, 0, 1, 1, 1, 0, "u 'HTofGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofGeomPar", 1178, G__TofDict_557_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_557_0_22, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofGeomPar), -1, 1, 1, 1, 1, 0, "u 'HTofGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofRaw(void) {
   /* HTofRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRaw));
   G__memfunc_setup("HTofRaw",667,G__TofDict_561_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTime",1229,G__TofDict_561_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTime",1114,G__TofDict_561_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightCharge",1416,G__TofDict_561_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftCharge",1301,G__TofDict_561_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHit",691,G__TofDict_561_0_6, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__TofDict_561_0_7, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__TofDict_561_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__TofDict_561_0_9, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__TofDict_561_0_10, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTime",1241,G__TofDict_561_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTime",1126,G__TofDict_561_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightCharge",1428,G__TofDict_561_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightQ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftCharge",1313,G__TofDict_561_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftQ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHit",703,G__TofDict_561_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - anHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incNHit",685,G__TofDict_561_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocationIndex",1649,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSector",956,G__TofDict_561_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__TofDict_561_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__TofDict_561_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__TofDict_561_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("doit",432,G__TofDict_561_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_561_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_561_0_25, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_561_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_561_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_561_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_561_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_561_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_561_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_561_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_561_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofRaw", 667, G__TofDict_561_0_37, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofRaw), -1, 0, 1, 1, 1, 0, "u 'HTofRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofRaw", 793, G__TofDict_561_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_561_0_39, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofRaw), -1, 1, 1, 1, 1, 0, "u 'HTofRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofHitF(void) {
   /* HTofHitF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF));
   G__memfunc_setup("fillGeometry",1267,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HTofHit' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitCat",996,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"g - 'Bool_t' 0 'kFALSE' sim g - 'Bool_t' 0 'kFALSE' embed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeHitCats",1216,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"g - 'Bool_t' 0 - sim g - 'Bool_t' 0 - emb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeHit",707,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__TofDictLN_HTofHit), -1, 0, 1, 1, 2, 0, "U 'TObject' - 0 - address", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillHit",716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'HTofHit' - 0 - - U 'HTofRaw' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("tot2amp",711,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "f - 'Float_t' 0 - tot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofHitF",732,G__TofDict_562_0_7, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHitF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofHitF",732,G__TofDict_562_0_8, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHitF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParContainer",1658,G__TofDict_562_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HSpectrometer' - 0 - - U 'HRuntimeDb' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_562_0_13, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofHitF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_562_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_562_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofHitF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_562_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofHitF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_562_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_562_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_562_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_562_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_562_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofHitF", 858, G__TofDict_562_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofHitF2(void) {
   /* HTofHitF2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitF2));
   G__memfunc_setup("fillGeometry",1267,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HTofHit' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHitCat",996,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"g - 'Bool_t' 0 'kFALSE' sim g - 'Bool_t' 0 'kFALSE' embed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("mergeHitCats",1216,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"g - 'Bool_t' 0 - sim g - 'Bool_t' 0 - emb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tot2amp",711,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "f - 'Float_t' 0 - tot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofHitF2",782,G__TofDict_563_0_5, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHitF2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofHitF2",782,G__TofDict_563_0_6, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHitF2), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setForceKeepGeant",1711,G__TofDict_563_0_7, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - force", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HTofHitF2::setForceKeepGeant) ), 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParContainer",1658,G__TofDict_563_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HSpectrometer' - 0 - - U 'HRuntimeDb' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_563_0_12, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofHitF2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_563_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitF2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_563_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofHitF2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_563_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofHitF2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_563_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_563_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitF2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_563_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitF2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_563_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitF2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_563_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitF2::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofHitF2", 908, G__TofDict_563_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofLookup(void) {
   /* HTofLookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookup));
   G__memfunc_setup("HTofLookup",1003,G__TofDict_567_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofLookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"TofLookup\"' name C - 'Char_t' 10 '\"Lookup table for Tof unpacker\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '1' nCrates "
"i - 'Int_t' 0 '1' nSlots", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_567_0_2, 117, G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlot",738,G__TofDict_567_0_3, 85, G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - c i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_567_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__TofDict_567_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_567_0_9, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__TofDict_567_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__TofDict_567_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__TofDict_567_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_567_0_13, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofLookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_567_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_567_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofLookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_567_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofLookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_567_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_567_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_567_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_567_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_567_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofLookup", 1003, G__TofDict_567_0_25, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofLookup), -1, 0, 1, 1, 1, 0, "u 'HTofLookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofLookup", 1129, G__TofDict_567_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_567_0_27, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofLookup), -1, 1, 1, 1, 1, 0, "u 'HTofLookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofUnpacker(void) {
   /* HTofUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker));
   G__memfunc_setup("HTofUnpacker",1194,G__TofDict_568_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '411' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_568_0_5, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_568_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_568_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_568_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_568_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_568_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_568_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_568_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_568_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofUnpacker", 1194, G__TofDict_568_0_17, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker), -1, 0, 1, 1, 1, 0, "u 'HTofUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofUnpacker", 1320, G__TofDict_568_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_568_0_19, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker), -1, 1, 1, 1, 1, 0, "u 'HTofUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofContFact(void) {
   /* HTofContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofContFact",1155,G__TofDict_572_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_572_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_572_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_572_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_572_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_572_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_572_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_572_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_572_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_572_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofContFact", 1155, G__TofDict_572_0_16, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofContFact), -1, 0, 1, 1, 1, 0, "u 'HTofContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofContFact", 1281, G__TofDict_572_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_572_0_18, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofContFact), -1, 1, 1, 1, 1, 0, "u 'HTofContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofCalParCell(void) {
   /* HTofCalParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell));
   G__memfunc_setup("HTofCalParCell",1316,G__TofDict_574_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftK",790,G__TofDict_574_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightK",905,G__TofDict_574_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVGroup",931,G__TofDict_574_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosK",701,G__TofDict_574_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimK",693,G__TofDict_574_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedestalL",1214,G__TofDict_574_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedestalR",1220,G__TofDict_574_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAttLen",904,G__TofDict_574_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainAsym",1113,G__TofDict_574_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdepK",777,G__TofDict_574_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeWalkC1",1234,G__TofDict_574_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeWalkC2",1235,G__TofDict_574_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeWalkC3",1236,G__TofDict_574_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_574_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HTofCalParCell' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftK",802,G__TofDict_574_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightK",917,G__TofDict_574_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVGroup",943,G__TofDict_574_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosK",713,G__TofDict_574_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimK",705,G__TofDict_574_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedestalL",1226,G__TofDict_574_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPedestalR",1232,G__TofDict_574_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAttLen",916,G__TofDict_574_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGainAsym",1125,G__TofDict_574_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEdepK",789,G__TofDict_574_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeWalkC1",1246,G__TofDict_574_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeWalkC2",1247,G__TofDict_574_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeWalkC3",1248,G__TofDict_574_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaults",1156,G__TofDict_574_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_574_0_30, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCalParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_574_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_574_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCalParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_574_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCalParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_574_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_574_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_574_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_574_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_574_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofCalParCell", 1316, G__TofDict_574_0_42, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell), -1, 0, 1, 1, 1, 0, "u 'HTofCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofCalParCell", 1442, G__TofDict_574_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_574_0_44, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell), -1, 1, 1, 1, 1, 0, "u 'HTofCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofCalParMod(void) {
   /* HTofCalParMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod));
   G__memfunc_setup("HTofCalParMod",1220,G__TofDict_575_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' s i - 'Int_t' 0 '0' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_575_0_2, 117, G__get_linked_tagnum(&G__TofDictLN_HTofCalParCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_575_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_575_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCalParMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_575_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_575_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCalParMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_575_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCalParMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_575_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_575_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_575_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalParMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_575_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_575_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalParMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofCalParMod", 1220, G__TofDict_575_0_16, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod), -1, 0, 1, 1, 1, 0, "u 'HTofCalParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofCalParMod", 1346, G__TofDict_575_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_575_0_18, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod), -1, 1, 1, 1, 1, 0, "u 'HTofCalParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofCalParSec(void) {
   /* HTofCalParSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec));
   G__memfunc_setup("HTofCalParSec",1215,G__TofDict_576_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' s i - 'Int_t' 0 '22' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_576_0_2, 117, G__get_linked_tagnum(&G__TofDictLN_HTofCalParMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_576_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_576_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCalParSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_576_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_576_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCalParSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_576_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCalParSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_576_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_576_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_576_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalParSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_576_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalParSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_576_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalParSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofCalParSec", 1215, G__TofDict_576_0_16, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec), -1, 0, 1, 1, 1, 0, "u 'HTofCalParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofCalParSec", 1341, G__TofDict_576_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_576_0_18, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofCalParSec), -1, 1, 1, 1, 1, 0, "u 'HTofCalParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofDigiParCell(void) {
   /* HTofDigiParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell));
   G__memfunc_setup("HTofDigiParCell",1425,G__TofDict_577_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHalfLen",986,G__TofDict_577_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngleRef",1092,G__TofDict_577_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAttenLen",1115,G__TofDict_577_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGroupVel",1140,G__TofDict_577_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTDCSlope",1449,G__TofDict_577_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTDCSlope",1564,G__TofDict_577_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftCFDThreshold",1861,G__TofDict_577_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightCFDThreshold",1976,G__TofDict_577_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftADCThreshold",1856,G__TofDict_577_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightADCThreshold",1971,G__TofDict_577_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_577_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HTofDigiParCell' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHalfLen",998,G__TofDict_577_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAngleRef",1104,G__TofDict_577_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAttenLen",1127,G__TofDict_577_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroupVel",1152,G__TofDict_577_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTDCSlope",1461,G__TofDict_577_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTDCSlope",1576,G__TofDict_577_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftCFDThreshold",1873,G__TofDict_577_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightCFDThreshold",1988,G__TofDict_577_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftADCThreshold",1868,G__TofDict_577_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightADCThreshold",1983,G__TofDict_577_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaults",1156,G__TofDict_577_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_577_0_24, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_577_0_25, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofDigiParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_577_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_577_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofDigiParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_577_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofDigiParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_577_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_577_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_577_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_577_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_577_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofDigiParCell", 1425, G__TofDict_577_0_37, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell), -1, 0, 1, 1, 1, 0, "u 'HTofDigiParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofDigiParCell", 1551, G__TofDict_577_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_577_0_39, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell), -1, 1, 1, 1, 1, 0, "u 'HTofDigiParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofDigiParMod(void) {
   /* HTofDigiParMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod));
   G__memfunc_setup("HTofDigiParMod",1329,G__TofDict_578_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' s i - 'Int_t' 0 '0' m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_578_0_2, 117, G__get_linked_tagnum(&G__TofDictLN_HTofDigiParCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_578_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_578_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofDigiParMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_578_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_578_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofDigiParMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_578_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofDigiParMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_578_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_578_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_578_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiParMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_578_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_578_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiParMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofDigiParMod", 1329, G__TofDict_578_0_16, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod), -1, 0, 1, 1, 1, 0, "u 'HTofDigiParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofDigiParMod", 1455, G__TofDict_578_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_578_0_18, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod), -1, 1, 1, 1, 1, 0, "u 'HTofDigiParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofDigiParSec(void) {
   /* HTofDigiParSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec));
   G__memfunc_setup("HTofDigiParSec",1324,G__TofDict_579_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' s i - 'Int_t' 0 '22' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_579_0_2, 117, G__get_linked_tagnum(&G__TofDictLN_HTofDigiParMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_579_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_579_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofDigiParSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_579_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_579_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofDigiParSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_579_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofDigiParSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_579_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_579_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_579_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiParSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_579_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDigiParSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_579_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDigiParSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofDigiParSec", 1324, G__TofDict_579_0_16, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec), -1, 0, 1, 1, 1, 0, "u 'HTofDigiParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofDigiParSec", 1450, G__TofDict_579_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_579_0_18, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofDigiParSec), -1, 1, 1, 1, 1, 0, "u 'HTofDigiParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofLookupChan(void) {
   /* HTofLookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan));
   G__memfunc_setup("HTofLookupChan",1381,G__TofDict_580_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__TofDict_580_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__TofDict_580_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__TofDict_580_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSide",709,G__TofDict_580_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__TofDict_580_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - c c - 'Char_t' 1 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_580_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - s i - 'Int_t' 10 - m "
"i - 'Int_t' 10 - c c - 'Char_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_580_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HTofLookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__TofDict_580_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__TofDict_580_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__TofDict_580_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSide",721,G__TofDict_580_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_580_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_580_0_14, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofLookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_580_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_580_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofLookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_580_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofLookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_580_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_580_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_580_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_580_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_580_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofLookupChan", 1381, G__TofDict_580_0_26, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan), -1, 0, 1, 1, 1, 0, "u 'HTofLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofLookupChan", 1507, G__TofDict_580_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_580_0_28, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan), -1, 1, 1, 1, 1, 0, "u 'HTofLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofLookupSlot(void) {
   /* HTofLookupSlot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot));
   G__memfunc_setup("HTofLookupSlot",1421,G__TofDict_581_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' numChannels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_581_0_2, 117, G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__TofDict_581_0_3, 85, G__get_linked_tagnum(&G__TofDictLN_HTofLookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_581_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSize",1025,G__TofDict_581_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getType",738,G__TofDict_581_0_6, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_581_0_7, 121, -1, -1, 0, 6, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_581_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_581_0_9, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofLookupSlot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_581_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupSlot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_581_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofLookupSlot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_581_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofLookupSlot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_581_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_581_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupSlot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_581_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookupSlot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_581_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupSlot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_581_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookupSlot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofLookupSlot", 1421, G__TofDict_581_0_21, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot), -1, 0, 1, 1, 1, 0, "u 'HTofLookupSlot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofLookupSlot", 1547, G__TofDict_581_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_581_0_23, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot), -1, 1, 1, 1, 1, 0, "u 'HTofLookupSlot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofLookupCrate(void) {
   /* HTofLookupCrate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate));
   G__memfunc_setup("HTofLookupCrate",1498,G__TofDict_582_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' numSlots", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_582_0_2, 117, G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlot",738,G__TofDict_582_0_3, 85, G__get_linked_tagnum(&G__TofDictLN_HTofLookupSlot), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_582_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSize",1025,G__TofDict_582_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_582_0_6, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - - c - 'Char_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_582_0_7, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofLookupCrate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_582_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupCrate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_582_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofLookupCrate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_582_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofLookupCrate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_582_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_582_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupCrate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_582_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookupCrate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_582_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofLookupCrate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_582_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofLookupCrate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofLookupCrate", 1498, G__TofDict_582_0_19, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate), -1, 0, 1, 1, 1, 0, "u 'HTofLookupCrate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofLookupCrate", 1624, G__TofDict_582_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_582_0_21, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofLookupCrate), -1, 1, 1, 1, 1, 0, "u 'HTofLookupCrate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofTrb2LookupChan(void) {
   /* HTofTrb2LookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan));
   G__memfunc_setup("HTofTrb2LookupChan",1727,G__TofDict_585_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__TofDict_585_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__TofDict_585_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__TofDict_585_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSide",709,G__TofDict_585_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__TofDict_585_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - m "
"i - 'Int_t' 1 - c c - 'Char_t' 1 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_585_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - c c - 'Char_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_585_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HTofTrb2LookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__TofDict_585_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__TofDict_585_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__TofDict_585_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSide",721,G__TofDict_585_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_585_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_585_0_14, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofTrb2LookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_585_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2LookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_585_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofTrb2LookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_585_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofTrb2LookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_585_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_585_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2LookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_585_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2LookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_585_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2LookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_585_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2LookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofTrb2LookupChan", 1727, G__TofDict_585_0_26, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan), -1, 0, 1, 1, 1, 0, "u 'HTofTrb2LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofTrb2LookupChan", 1853, G__TofDict_585_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_585_0_28, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan), -1, 1, 1, 1, 1, 0, "u 'HTofTrb2LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofTrb2LookupBoard(void) {
   /* HTofTrb2LookupBoard */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard));
   G__memfunc_setup("HTofTrb2LookupBoard",1837,G__TofDict_586_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__TofDict_586_0_2, 85, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_586_0_3, 117, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_586_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_586_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_586_0_6, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofTrb2LookupBoard::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_586_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2LookupBoard::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_586_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofTrb2LookupBoard::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_586_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofTrb2LookupBoard::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_586_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_586_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2LookupBoard::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_586_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2LookupBoard::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_586_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2LookupBoard::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_586_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2LookupBoard::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofTrb2LookupBoard", 1837, G__TofDict_586_0_18, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "u 'HTofTrb2LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofTrb2LookupBoard", 1963, G__TofDict_586_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_586_0_20, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard), -1, 1, 1, 1, 1, 0, "u 'HTofTrb2LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofTrb2Lookup(void) {
   /* HTofTrb2Lookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup));
   G__memfunc_setup("HTofTrb2Lookup",1349,G__TofDict_587_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"TofTrb2Lookup\"' name C - 'Char_t' 10 '\"Lookup table for the TRB2 unpacker of the TOF detector\"' title "
"C - 'Char_t' 10 '\"TofTrb2LookupProduction\"' context i - 'Int_t' 0 'Trbnet::kTofMinTrbnetAddress' minTrbnetAddress "
"i - 'Int_t' 0 'Trbnet::kTofMaxTrbnetAddress' maxTrbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__TofDict_587_0_2, 85, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__TofDict_587_0_3, 85, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__TofDict_587_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__TofDict_587_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__TofDict_587_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__TofDict_587_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__TofDict_587_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__TofDict_587_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__TofDict_587_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_587_0_14, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofTrb2Lookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_587_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2Lookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_587_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofTrb2Lookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_587_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofTrb2Lookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_587_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_587_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2Lookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_587_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2Lookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_587_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2Lookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_587_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2Lookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofTrb2Lookup", 1349, G__TofDict_587_0_26, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup), -1, 0, 1, 1, 1, 0, "u 'HTofTrb2Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofTrb2Lookup", 1475, G__TofDict_587_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_587_0_28, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Lookup), -1, 1, 1, 1, 1, 0, "u 'HTofTrb2Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofDetector(void) {
   /* HTofDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofDetector));
   G__memfunc_setup("HTofDetector",1195,G__TofDict_589_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildTask",931,G__TofDict_589_0_2, 85, G__get_linked_tagnum(&G__TofDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - cat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildMatrixCategory",1987,G__TofDict_589_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - classname f - 'Float_t' 0 - fillRate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_589_0_8, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_589_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_589_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_589_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_589_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_589_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_589_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_589_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_589_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofDetector", 1195, G__TofDict_589_0_20, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofDetector), -1, 0, 1, 1, 1, 0, "u 'HTofDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofDetector", 1321, G__TofDict_589_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_589_0_22, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofDetector), -1, 1, 1, 1, 1, 0, "u 'HTofDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofRawSim(void) {
   /* HTofRawSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSim));
   G__memfunc_setup("HTofRawSim",964,G__TofDict_591_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofRawSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setNTrack1",960,G__TofDict_591_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__TofDict_591_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftNTrack",1306,G__TofDict_591_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightNTrack",1421,G__TofDict_591_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack",911,G__TofDict_591_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__TofDict_591_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__TofDict_591_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftNTrack",1294,G__TofDict_591_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightNTrack",1409,G__TofDict_591_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_591_0_12, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofRawSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_591_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_591_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofRawSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_591_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofRawSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_591_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_591_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_591_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRawSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_591_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_591_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRawSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofRawSim", 964, G__TofDict_591_0_24, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofRawSim), -1, 0, 1, 1, 1, 0, "u 'HTofRawSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofRawSim", 1090, G__TofDict_591_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_591_0_26, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofRawSim), -1, 1, 1, 1, 1, 0, "u 'HTofRawSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofRawSimTmp(void) {
   /* HTofRawSimTmp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp));
   G__memfunc_setup("Class",502,G__TofDict_592_0_1, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofRawSimTmp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_592_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSimTmp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_592_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofRawSimTmp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_592_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofRawSimTmp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_592_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_592_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSimTmp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_592_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRawSimTmp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_592_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSimTmp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_592_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRawSimTmp::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HTofRawSimTmp", 1269, G__TofDict_592_0_13, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HTofRawSimTmp", 1269, G__TofDict_592_0_14, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp), -1, 0, 1, 1, 1, 0, "u 'HTofRawSimTmp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofRawSimTmp", 1395, G__TofDict_592_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_592_0_16, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofRawSimTmp), -1, 1, 1, 1, 1, 0, "u 'HTofRawSimTmp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofRawSimFilter(void) {
   /* HTofRawSimFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter));
   G__memfunc_setup("HTofRawSimFilter",1578,G__TofDict_593_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - raw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_593_0_3, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofRawSimFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_593_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSimFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_593_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofRawSimFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_593_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofRawSimFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_593_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_593_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSimFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_593_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRawSimFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_593_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofRawSimFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_593_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofRawSimFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofRawSimFilter", 1578, G__TofDict_593_0_15, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter), -1, 0, 1, 1, 1, 0, "u 'HTofRawSimFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofRawSimFilter", 1704, G__TofDict_593_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_593_0_17, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofRawSimFilter), -1, 1, 1, 1, 1, 0, "u 'HTofRawSimFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofGeantReader(void) {
   /* HTofGeantReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader));
   G__memfunc_setup("HTofGeantReader",1459,G__TofDict_600_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getGeantTofCat",1392,G__TofDict_600_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_HMatrixCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantTof",1112,G__TofDict_600_0_5, 85, G__get_linked_tagnum(&G__TofDictLN_HGeantTof), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 0 - locate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_600_0_6, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofGeantReader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_600_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofGeantReader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_600_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofGeantReader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_600_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofGeantReader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_600_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_600_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofGeantReader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_600_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofGeantReader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_600_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofGeantReader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_600_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofGeantReader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofGeantReader", 1459, G__TofDict_600_0_18, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader), -1, 0, 1, 1, 1, 0, "u 'HTofGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofGeantReader", 1585, G__TofDict_600_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_600_0_20, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofGeantReader), -1, 1, 1, 1, 1, 0, "u 'HTofGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofCalSim(void) {
   /* HTofCalSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCalSim));
   G__memfunc_setup("HTofCalSim",938,G__TofDict_601_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCalSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_601_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack1",960,G__TofDict_601_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__TofDict_601_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__TofDict_601_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__TofDict_601_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 2 ", (void*) NULL, 0);
   G__memfunc_setup("setLeftNTrack",1306,G__TofDict_601_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("setRightNTrack",1421,G__TofDict_601_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("getLeftNTrack",1294,G__TofDict_601_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("getRightNTrack",1409,G__TofDict_601_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_601_0_11, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCalSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_601_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_601_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCalSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_601_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCalSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_601_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_601_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_601_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_601_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCalSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_601_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCalSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofCalSim", 938, G__TofDict_601_0_23, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofCalSim), -1, 0, 1, 1, 1, 0, "u 'HTofCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofCalSim", 1064, G__TofDict_601_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_601_0_25, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofCalSim), -1, 1, 1, 1, 1, 0, "u 'HTofCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofHitSim(void) {
   /* HTofHitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSim));
   G__memfunc_setup("HTofHitSim",959,G__TofDict_602_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_602_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack1",960,G__TofDict_602_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__TofDict_602_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("setLeftNTrack",1306,G__TofDict_602_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("setRightNTrack",1421,G__TofDict_602_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__TofDict_602_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__TofDict_602_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 2 ", (void*) NULL, 0);
   G__memfunc_setup("getLeftNTrack",1294,G__TofDict_602_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("getRightNTrack",1409,G__TofDict_602_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_602_0_11, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofHitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_602_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_602_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofHitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_602_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofHitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_602_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_602_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_602_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_602_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_602_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofHitSim", 959, G__TofDict_602_0_23, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofHitSim), -1, 0, 1, 1, 1, 0, "u 'HTofHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofHitSim", 1085, G__TofDict_602_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_602_0_25, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofHitSim), -1, 1, 1, 1, 1, 0, "u 'HTofHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofHitSimTmp(void) {
   /* HTofHitSimTmp */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp));
   G__memfunc_setup("Class",502,G__TofDict_603_0_1, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofHitSimTmp::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_603_0_2, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitSimTmp::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_603_0_3, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofHitSimTmp::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_603_0_4, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofHitSimTmp::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_603_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_603_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitSimTmp::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_603_0_10, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitSimTmp::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_603_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitSimTmp::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_603_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitSimTmp::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HTofHitSimTmp", 1264, G__TofDict_603_0_13, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HTofHitSimTmp", 1264, G__TofDict_603_0_14, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp), -1, 0, 1, 1, 1, 0, "u 'HTofHitSimTmp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofHitSimTmp", 1390, G__TofDict_603_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_603_0_16, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofHitSimTmp), -1, 1, 1, 1, 1, 0, "u 'HTofHitSimTmp' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofHitFSim(void) {
   /* HTofHitFSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim));
   G__memfunc_setup("makeHit",707,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__TofDictLN_HTofHit), -1, 0, 1, 1, 2, 0, "U 'TObject' - 0 - address", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillHit",716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'HTofHit' - 0 - - U 'HTofRaw' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HTofHitFSim",1029,G__TofDict_604_0_3, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofHitFSim",1029,G__TofDict_604_0_4, 105, G__get_linked_tagnum(&G__TofDictLN_HTofHitFSim), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_604_0_6, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofHitFSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_604_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitFSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_604_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofHitFSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_604_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofHitFSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_604_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_604_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitFSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_604_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitFSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_604_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofHitFSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_604_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofHitFSim::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofHitFSim", 1155, G__TofDict_604_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofTrigger(void) {
   /* HTofTrigger */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrigger));
   G__memfunc_setup("HTofTrigger",1093,G__TofDict_608_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTrigger), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofTrigger",1093,G__TofDict_608_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTrigger), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 - multi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkTofHit",1100,G__TofDict_608_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nTrack i - 'Int_t' 0 - nSecTof", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkTofMult",1225,G__TofDict_608_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_608_0_8, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofTrigger::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_608_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrigger::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_608_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofTrigger::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_608_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofTrigger::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_608_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_608_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrigger::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_608_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrigger::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_608_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrigger::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_608_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrigger::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofTrigger", 1219, G__TofDict_608_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofUnpacker99(void) {
   /* HTofUnpacker99 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99));
   G__memfunc_setup("HTofUnpacker99",1308,G__TofDict_612_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("byte",436,G__TofDict_612_0_3, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - b h - 'UInt4' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fill",423,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_612_0_7, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofUnpacker99::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_612_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofUnpacker99::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_612_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofUnpacker99::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_612_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofUnpacker99::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_612_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_612_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofUnpacker99::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_612_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofUnpacker99::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_612_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofUnpacker99::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_612_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofUnpacker99::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofUnpacker99", 1308, G__TofDict_612_0_19, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99), -1, 0, 1, 1, 1, 0, "u 'HTofUnpacker99' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofUnpacker99", 1434, G__TofDict_612_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_612_0_21, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofUnpacker99), -1, 1, 1, 1, 1, 0, "u 'HTofUnpacker99' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofTrb2Unpacker(void) {
   /* HTofTrb2Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker));
   G__memfunc_setup("HTofTrb2Unpacker",1540,G__TofDict_644_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("disableTimeRef",1408,G__TofDict_644_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeTimeRef",1338,G__TofDict_644_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("shiftTimes",1056,G__TofDict_644_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_644_0_8, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofTrb2Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_644_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_644_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofTrb2Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_644_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofTrb2Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_644_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_644_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_644_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_644_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTrb2Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_644_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTrb2Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofTrb2Unpacker", 1540, G__TofDict_644_0_20, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker), -1, 0, 1, 1, 1, 0, "u 'HTofTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofTrb2Unpacker", 1666, G__TofDict_644_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_644_0_22, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofTrb2Unpacker), -1, 1, 1, 1, 1, 0, "u 'HTofTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofParRootFileIo(void) {
   /* HTofParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo));
   G__memfunc_setup("HTofParRootFileIo",1648,G__TofDict_649_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__TofDict_649_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HTofCalPar' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__TofDict_649_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HTofDigiPar' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__TofDict_649_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HTofLookup' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_649_0_6, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_649_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_649_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_649_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_649_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_649_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_649_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_649_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_649_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofParRootFileIo", 1648, G__TofDict_649_0_18, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HTofParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofParRootFileIo", 1774, G__TofDict_649_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_649_0_20, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HTofParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofParAsciiFileIo(void) {
   /* HTofParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo));
   G__memfunc_setup("HTofParAsciiFileIo",1717,G__TofDict_659_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_659_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_659_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_659_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_659_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_659_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_659_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_659_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_659_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_659_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofParAsciiFileIo", 1717, G__TofDict_659_0_16, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HTofParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofParAsciiFileIo", 1843, G__TofDict_659_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_659_0_18, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HTofParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofClusterFPar(void) {
   /* HTofClusterFPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar));
   G__memfunc_setup("HTofClusterFPar",1468,G__TofDict_662_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"TofClusterFPar\"' name C - 'Char_t' 10 '\"Parameter container for the cluster finder\"' title "
"C - 'Char_t' 10 '\"TofCluNormalBias\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxTDiff",1075,G__TofDict_662_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxXDiff",1079,G__TofDict_662_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMIPLimit",1061,G__TofDict_662_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMPV1",612,G__TofDict_662_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"all\"' aset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma1",866,G__TofDict_662_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"all\"' aset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMPV2",613,G__TofDict_662_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"all\"' aset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma2",867,G__TofDict_662_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"all\"' aset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getConstRatio",1350,G__TofDict_662_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"all\"' aset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxPDiff",1071,G__TofDict_662_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxELoss",1100,G__TofDict_662_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readFrom",816,G__TofDict_662_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HTofClusterFPar' - 11 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_662_0_16, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofClusterFPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_662_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterFPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_662_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofClusterFPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_662_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofClusterFPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_662_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_662_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterFPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_662_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterFPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_662_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterFPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_662_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterFPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofClusterFPar", 1468, G__TofDict_662_0_28, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar), -1, 0, 1, 1, 1, 0, "u 'HTofClusterFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofClusterFPar", 1594, G__TofDict_662_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_662_0_30, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofClusterFPar), -1, 1, 1, 1, 1, 0, "u 'HTofClusterFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofCluster(void) {
   /* HTofCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofCluster));
   G__memfunc_setup("HTofCluster",1107,G__TofDict_663_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofCluster",1107,G__TofDict_663_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCluster), -1, 0, 1, 1, 1, 0, "U 'HTofHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofCluster",1107,G__TofDict_663_0_3, 105, G__get_linked_tagnum(&G__TofDictLN_HTofCluster), -1, 0, 4, 1, 1, 0, 
"U 'HTofHit' - 0 - hit i - 'Int_t' 0 - cls "
"f - 'Float_t' 0 - clpa f - 'Float_t' 0 - clpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterSize",1469,G__TofDict_663_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterProbAll",1742,G__TofDict_663_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterProbLep",1750,G__TofDict_663_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndexHit2",1167,G__TofDict_663_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterSize",1481,G__TofDict_663_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - clustsize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterProbAll",1754,G__TofDict_663_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - clustproball", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterProbLep",1762,G__TofDict_663_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - clustproblep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndexHit2",1179,G__TofDict_663_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_663_0_12, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_663_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_663_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_663_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_663_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_663_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_663_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_663_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_663_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofCluster", 1107, G__TofDict_663_0_24, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofCluster), -1, 0, 1, 1, 1, 0, "u 'HTofCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofCluster", 1233, G__TofDict_663_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_663_0_26, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofCluster), -1, 1, 1, 1, 1, 0, "u 'HTofCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofClusterF(void) {
   /* HTofClusterF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterF));
   G__memfunc_setup("writeProb",958,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcProb",806,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 0, 
"f - 'Float_t' 0 - edep C - 'Char_t' 10 '\"all\"' aset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillPreviousData",1662,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillClusterData",1539,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readHit",705,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeCluster",1293,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcWeightedMean",1605,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofClusterF",1177,G__TofDict_664_0_8, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofClusterF",1177,G__TofDict_664_0_9, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParContainer",1658,G__TofDict_664_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HSpectrometer' - 0 - - U 'HRuntimeDb' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_664_0_14, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofClusterF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_664_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_664_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofClusterF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_664_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofClusterF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_664_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_664_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_664_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_664_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_664_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofClusterF", 1303, G__TofDict_664_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofClusterFSim(void) {
   /* HTofClusterFSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim));
   G__memfunc_setup("HTofClusterFSim",1474,G__TofDict_665_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofClusterFSim",1474,G__TofDict_665_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterFSim), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__TofDict_665_0_5, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofClusterFSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_665_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterFSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_665_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofClusterFSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_665_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofClusterFSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_665_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_665_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterFSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_665_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterFSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_665_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterFSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_665_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterFSim::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofClusterFSim", 1600, G__TofDict_665_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofClusterSim(void) {
   /* HTofClusterSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim));
   G__memfunc_setup("HTofClusterSim",1404,G__TofDict_666_0_1, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofClusterSim",1404,G__TofDict_666_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim), -1, 0, 1, 1, 1, 0, "U 'HTofHitSim' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofClusterSim",1404,G__TofDict_666_0_3, 105, G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim), -1, 0, 4, 1, 1, 0, 
"U 'HTofHitSim' - 0 - hit i - 'Int_t' 0 - cls "
"f - 'Float_t' 0 - clpa f - 'Float_t' 0 - clpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__TofDict_666_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incNParticipants",1658,G__TofDict_666_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNParticipants",1676,G__TofDict_666_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNParticipants",1664,G__TofDict_666_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack1",960,G__TofDict_666_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", "set first trk nb of participant", (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__TofDict_666_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", "set second trk nb of participant", (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__TofDict_666_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' i", "get first trk nb of participant", (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__TofDict_666_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' i", "get second trk nb of participant", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_666_0_12, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofClusterSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_666_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_666_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofClusterSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_666_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofClusterSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_666_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_666_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_666_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_666_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofClusterSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_666_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofClusterSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTofClusterSim", 1404, G__TofDict_666_0_24, (int) ('i'), G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim), -1, 0, 1, 1, 1, 0, "u 'HTofClusterSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTofClusterSim", 1530, G__TofDict_666_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__TofDict_666_0_26, (int) ('u'), G__get_linked_tagnum(&G__TofDictLN_HTofClusterSim), -1, 1, 1, 1, 1, 0, "u 'HTofClusterSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTofTaskSet(void) {
   /* HTofTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet));
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofTaskSet",1072,G__TofDict_686_0_2, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTofTaskSet",1072,G__TofDict_686_0_3, 105, G__get_linked_tagnum(&G__TofDictLN_HTofTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__TofDict_686_0_4, 85, G__get_linked_tagnum(&G__TofDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__TofDict_686_0_5, 85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTofTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__TofDict_686_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__TofDict_686_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTofTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__TofDict_686_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTofTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__TofDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__TofDict_686_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__TofDict_686_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__TofDict_686_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__TofDict_686_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTofTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__TofDict_686_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTofTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTofTaskSet", 1198, G__TofDict_686_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncTofDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
   G__memvar_setup((void*)(&catTofRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTofHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTofCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTofCluster),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofCluster=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTofRawTmp),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofRawTmp=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTofHitTmp),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofHitTmp=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalTofDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcTofDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__TofDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__TofDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__TofDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__TofDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__TofDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__TofDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCal = { "HTofCal" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__TofDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCalPar = { "HTofCalPar" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCalibrater = { "HTofCalibrater" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HLocatedDataObject = { "HLocatedDataObject" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HGeantTof = { "HGeantTof" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__TofDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HLinearCategory = { "HLinearCategory" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofDigiPar = { "HTofDigiPar" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofWalkPar = { "HTofWalkPar" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofDigitizer = { "HTofDigitizer" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofHit = { "HTofHit" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofGeomPar = { "HTofGeomPar" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HSpectrometer = { "HSpectrometer" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HRuntimeDb = { "HRuntimeDb" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofRaw = { "HTofRaw" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofHitF = { "HTofHitF" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofHitF2 = { "HTofHitF2" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofLookup = { "HTofLookup" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofUnpacker = { "HTofUnpacker" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofContFact = { "HTofContFact" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCalParCell = { "HTofCalParCell" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCalParMod = { "HTofCalParMod" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCalParSec = { "HTofCalParSec" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofDigiParCell = { "HTofDigiParCell" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofDigiParMod = { "HTofDigiParMod" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofDigiParSec = { "HTofDigiParSec" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofLookupChan = { "HTofLookupChan" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofLookupSlot = { "HTofLookupSlot" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofLookupCrate = { "HTofLookupCrate" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofTrb2LookupChan = { "HTofTrb2LookupChan" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofTrb2LookupBoard = { "HTofTrb2LookupBoard" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofTrb2Lookup = { "HTofTrb2Lookup" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofDetector = { "HTofDetector" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HFilter = { "HFilter" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofRawSim = { "HTofRawSim" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofRawSimTmp = { "HTofRawSimTmp" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofRawSimFilter = { "HTofRawSimFilter" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HGeantReader = { "HGeantReader" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HMatrixCategory = { "HMatrixCategory" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofGeantReader = { "HTofGeantReader" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCalSim = { "HTofCalSim" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofHitSim = { "HTofHitSim" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofHitSimTmp = { "HTofHitSimTmp" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofHitFSim = { "HTofHitFSim" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HKineSim = { "HKineSim" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofTrigger = { "HTofTrigger" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofUnpacker99 = { "HTofUnpacker99" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTrb2Unpacker = { "HTrb2Unpacker" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__TofDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofTrb2Unpacker = { "HTofTrb2Unpacker" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofParRootFileIo = { "HTofParRootFileIo" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofParAsciiFileIo = { "HTofParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofClusterFPar = { "HTofClusterFPar" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofCluster = { "HTofCluster" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofClusterF = { "HTofClusterF" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofClusterFSim = { "HTofClusterFSim" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofClusterSim = { "HTofClusterSim" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__TofDictLN_HTofTaskSet = { "HTofTaskSet" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableTofDict() {
  G__TofDictLN_TClass.tagnum = -1 ;
  G__TofDictLN_TBuffer.tagnum = -1 ;
  G__TofDictLN_TMemberInspector.tagnum = -1 ;
  G__TofDictLN_TObject.tagnum = -1 ;
  G__TofDictLN_TNamed.tagnum = -1 ;
  G__TofDictLN_TString.tagnum = -1 ;
  G__TofDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__TofDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__TofDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TofDictLN_TObjArray.tagnum = -1 ;
  G__TofDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__TofDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__TofDictLN_HTofCal.tagnum = -1 ;
  G__TofDictLN_HTask.tagnum = -1 ;
  G__TofDictLN_TArrayI.tagnum = -1 ;
  G__TofDictLN_HLocation.tagnum = -1 ;
  G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__TofDictLN_HReconstructor.tagnum = -1 ;
  G__TofDictLN_HCategory.tagnum = -1 ;
  G__TofDictLN_HIterator.tagnum = -1 ;
  G__TofDictLN_HTofCalPar.tagnum = -1 ;
  G__TofDictLN_HTofCalibrater.tagnum = -1 ;
  G__TofDictLN_HLocatedDataObject.tagnum = -1 ;
  G__TofDictLN_HGeantTof.tagnum = -1 ;
  G__TofDictLN_TTree.tagnum = -1 ;
  G__TofDictLN_TFile.tagnum = -1 ;
  G__TofDictLN_TArrayD.tagnum = -1 ;
  G__TofDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__TofDictLN_TNtuple.tagnum = -1 ;
  G__TofDictLN_TF1.tagnum = -1 ;
  G__TofDictLN_HLinearCategory.tagnum = -1 ;
  G__TofDictLN_HTofDigiPar.tagnum = -1 ;
  G__TofDictLN_HTofWalkPar.tagnum = -1 ;
  G__TofDictLN_HTofDigitizer.tagnum = -1 ;
  G__TofDictLN_HTofHit.tagnum = -1 ;
  G__TofDictLN_HTofGeomPar.tagnum = -1 ;
  G__TofDictLN_HSpecGeomPar.tagnum = -1 ;
  G__TofDictLN_HSpectrometer.tagnum = -1 ;
  G__TofDictLN_HRuntimeDb.tagnum = -1 ;
  G__TofDictLN_HTofRaw.tagnum = -1 ;
  G__TofDictLN_HTofHitF.tagnum = -1 ;
  G__TofDictLN_HTofHitF2.tagnum = -1 ;
  G__TofDictLN_HldUnpack.tagnum = -1 ;
  G__TofDictLN_HTofLookup.tagnum = -1 ;
  G__TofDictLN_HTofUnpacker.tagnum = -1 ;
  G__TofDictLN_HParSet.tagnum = -1 ;
  G__TofDictLN_HContainer.tagnum = -1 ;
  G__TofDictLN_HContFact.tagnum = -1 ;
  G__TofDictLN_HTofContFact.tagnum = -1 ;
  G__TofDictLN_HParIo.tagnum = -1 ;
  G__TofDictLN_HTofCalParCell.tagnum = -1 ;
  G__TofDictLN_HTofCalParMod.tagnum = -1 ;
  G__TofDictLN_HTofCalParSec.tagnum = -1 ;
  G__TofDictLN_HTofDigiParCell.tagnum = -1 ;
  G__TofDictLN_HTofDigiParMod.tagnum = -1 ;
  G__TofDictLN_HTofDigiParSec.tagnum = -1 ;
  G__TofDictLN_HTofLookupChan.tagnum = -1 ;
  G__TofDictLN_HTofLookupSlot.tagnum = -1 ;
  G__TofDictLN_HTofLookupCrate.tagnum = -1 ;
  G__TofDictLN_HTofTrb2LookupChan.tagnum = -1 ;
  G__TofDictLN_HTofTrb2LookupBoard.tagnum = -1 ;
  G__TofDictLN_HTofTrb2Lookup.tagnum = -1 ;
  G__TofDictLN_HDetector.tagnum = -1 ;
  G__TofDictLN_HTofDetector.tagnum = -1 ;
  G__TofDictLN_HFilter.tagnum = -1 ;
  G__TofDictLN_HTofRawSim.tagnum = -1 ;
  G__TofDictLN_HTofRawSimTmp.tagnum = -1 ;
  G__TofDictLN_HTofRawSimFilter.tagnum = -1 ;
  G__TofDictLN_HGeantReader.tagnum = -1 ;
  G__TofDictLN_HMatrixCategory.tagnum = -1 ;
  G__TofDictLN_HTofGeantReader.tagnum = -1 ;
  G__TofDictLN_HTofCalSim.tagnum = -1 ;
  G__TofDictLN_HTofHitSim.tagnum = -1 ;
  G__TofDictLN_HTofHitSimTmp.tagnum = -1 ;
  G__TofDictLN_HTofHitFSim.tagnum = -1 ;
  G__TofDictLN_HKineSim.tagnum = -1 ;
  G__TofDictLN_HTofTrigger.tagnum = -1 ;
  G__TofDictLN_HTofUnpacker99.tagnum = -1 ;
  G__TofDictLN_HTrb2Unpacker.tagnum = -1 ;
  G__TofDictLN_TArrayF.tagnum = -1 ;
  G__TofDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__TofDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__TofDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__TofDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__TofDictLN_HTofTrb2Unpacker.tagnum = -1 ;
  G__TofDictLN_HDetParIo.tagnum = -1 ;
  G__TofDictLN_HParRootFile.tagnum = -1 ;
  G__TofDictLN_HDetGeomPar.tagnum = -1 ;
  G__TofDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__TofDictLN_HTofParRootFileIo.tagnum = -1 ;
  G__TofDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__TofDictLN_HTofParAsciiFileIo.tagnum = -1 ;
  G__TofDictLN_HTofClusterFPar.tagnum = -1 ;
  G__TofDictLN_HTofCluster.tagnum = -1 ;
  G__TofDictLN_HTofClusterF.tagnum = -1 ;
  G__TofDictLN_HTofClusterFSim.tagnum = -1 ;
  G__TofDictLN_HTofClusterSim.tagnum = -1 ;
  G__TofDictLN_HParamList.tagnum = -1 ;
  G__TofDictLN_HParCond.tagnum = -1 ;
  G__TofDictLN_HTaskSet.tagnum = -1 ;
  G__TofDictLN_HTofTaskSet.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableTofDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__TofDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TString);
   G__get_linked_tagnum_fwd(&G__TofDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__TofDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCal),sizeof(HTofCal),-1,29952,"HTof cal data",G__setup_memvarHTofCal,G__setup_memfuncHTofCal);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__TofDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCalPar),sizeof(HTofCalPar),-1,62720,"Container for the TOF calibration parameters",G__setup_memvarHTofCalPar,G__setup_memfuncHTofCalPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCalibrater),sizeof(HTofCalibrater),-1,64768,"Calibrater of Tof data.",G__setup_memvarHTofCalibrater,G__setup_memfuncHTofCalibrater);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HLocatedDataObject);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HGeantTof);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__TofDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TNtuple);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HLinearCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofDigiPar),sizeof(HTofDigiPar),-1,62720,"Container for the TOF digitization parameters",G__setup_memvarHTofDigiPar,G__setup_memfuncHTofDigiPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofWalkPar),sizeof(HTofWalkPar),-1,128256,"Container for the TOF hit finder 2 parameters",G__setup_memvarHTofWalkPar,G__setup_memfuncHTofWalkPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofDigitizer),sizeof(HTofDigitizer),-1,62720,"Digitizer of TOF data.",G__setup_memvarHTofDigitizer,G__setup_memfuncHTofDigitizer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofHit),sizeof(HTofHit),-1,97536,"Class with data for a TOF hit",G__setup_memvarHTofHit,G__setup_memfuncHTofHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofGeomPar),sizeof(HTofGeomPar),-1,62720,"Container for the Tof geometry parameters",G__setup_memvarHTofGeomPar,G__setup_memfuncHTofGeomPar);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HSpecGeomPar);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HSpectrometer);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HRuntimeDb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofRaw),sizeof(HTofRaw),-1,29952,"TOF raw data class",G__setup_memvarHTofRaw,G__setup_memfuncHTofRaw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofHitF),sizeof(HTofHitF),-1,62720,"Finds TOF hits",G__setup_memvarHTofHitF,G__setup_memfuncHTofHitF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofHitF2),sizeof(HTofHitF2),-1,62720,"Finds TOF hits",G__setup_memvarHTofHitF2,G__setup_memfuncHTofHitF2);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HldUnpack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofLookup),sizeof(HTofLookup),-1,62720,"Lookup table for the TOF unpacker",G__setup_memvarHTofLookup,G__setup_memfuncHTofLookup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofUnpacker),sizeof(HTofUnpacker),-1,29952,"unpack TOF data",G__setup_memvarHTofUnpacker,G__setup_memfuncHTofUnpacker);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofContFact),sizeof(HTofContFact),-1,62720,"Factory for parameter containers in libTof",G__setup_memvarHTofContFact,G__setup_memfuncHTofContFact);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HParIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCalParCell),sizeof(HTofCalParCell),-1,95488,"Cell level of the TOF calibration parameters",G__setup_memvarHTofCalParCell,G__setup_memfuncHTofCalParCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCalParMod),sizeof(HTofCalParMod),-1,29952,"Module level of the Tof Calibration parameters",G__setup_memvarHTofCalParMod,G__setup_memfuncHTofCalParMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCalParSec),sizeof(HTofCalParSec),-1,29952,"Sector level of the Tof Calibration parameters",G__setup_memvarHTofCalParSec,G__setup_memfuncHTofCalParSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofDigiParCell),sizeof(HTofDigiParCell),-1,29952,"Cell level of the TOF digitization parameters",G__setup_memvarHTofDigiParCell,G__setup_memfuncHTofDigiParCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofDigiParMod),sizeof(HTofDigiParMod),-1,29952,"Module level of the Tof digitization parameters",G__setup_memvarHTofDigiParMod,G__setup_memfuncHTofDigiParMod);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofDigiParSec),sizeof(HTofDigiParSec),-1,29952,"Sector level of the Tof digitizaton parameters",G__setup_memvarHTofDigiParSec,G__setup_memfuncHTofDigiParSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofLookupChan),sizeof(HTofLookupChan),-1,29952,"Channel level of the lookup table for the TOF unpacker ",G__setup_memvarHTofLookupChan,G__setup_memfuncHTofLookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofLookupSlot),sizeof(HTofLookupSlot),-1,29952,"ADC/TDC level of  the lookup table for the TOF unpacker",G__setup_memvarHTofLookupSlot,G__setup_memfuncHTofLookupSlot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofLookupCrate),sizeof(HTofLookupCrate),-1,29952,"Crate level of the lookup table for the TOF unpacker",G__setup_memvarHTofLookupCrate,G__setup_memfuncHTofLookupCrate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofTrb2LookupChan),sizeof(HTofTrb2LookupChan),-1,29952,"Channel level of the lookup table for the TOF TRB2 unpacker",G__setup_memvarHTofTrb2LookupChan,G__setup_memfuncHTofTrb2LookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofTrb2LookupBoard),sizeof(HTofTrb2LookupBoard),-1,29952,"Board level of  the lookup table for the TOF TRB2 unpacker",G__setup_memvarHTofTrb2LookupBoard,G__setup_memfuncHTofTrb2LookupBoard);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofTrb2Lookup),sizeof(HTofTrb2Lookup),-1,62720,"Lookup table for the TRB2 unpacker of the TOF detector",G__setup_memvarHTofTrb2Lookup,G__setup_memfuncHTofTrb2Lookup);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofDetector),sizeof(HTofDetector),-1,62720,"TOF detector class",G__setup_memvarHTofDetector,G__setup_memfuncHTofDetector);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofRawSim),sizeof(HTofRawSim),-1,29952,"simulated raw data level of Tof",G__setup_memvarHTofRawSim,G__setup_memfuncHTofRawSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofRawSimTmp),sizeof(HTofRawSimTmp),-1,28672,"temporalily simulated raw data level of Tof",G__setup_memvarHTofRawSimTmp,G__setup_memfuncHTofRawSimTmp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofRawSimFilter),sizeof(HTofRawSimFilter),-1,29952,"Filter class for Tof digitizer",G__setup_memvarHTofRawSimFilter,G__setup_memfuncHTofRawSimFilter);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HGeantReader);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HMatrixCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofGeantReader),sizeof(HTofGeantReader),-1,29952,"TOF reader for HGeant Root file",G__setup_memvarHTofGeantReader,G__setup_memfuncHTofGeantReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCalSim),sizeof(HTofCalSim),-1,29952,"simulated cal data level of TOF",G__setup_memvarHTofCalSim,G__setup_memfuncHTofCalSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofHitSim),sizeof(HTofHitSim),-1,29952,"simulated hit data level of TOF",G__setup_memvarHTofHitSim,G__setup_memfuncHTofHitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofHitSimTmp),sizeof(HTofHitSimTmp),-1,28672,"simulated hit data level of TOF",G__setup_memvarHTofHitSimTmp,G__setup_memfuncHTofHitSimTmp);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofHitFSim),sizeof(HTofHitFSim),-1,62720,"Tof hit finder for simulated data.",G__setup_memvarHTofHitFSim,G__setup_memfuncHTofHitFSim);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HKineSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofTrigger),sizeof(HTofTrigger),-1,62720,"Select simulated TOF hits",G__setup_memvarHTofTrigger,G__setup_memfuncHTofTrigger);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofUnpacker99),sizeof(HTofUnpacker99),-1,29952,"unpack TOF November 1999 data",G__setup_memvarHTofUnpacker99,G__setup_memfuncHTofUnpacker99);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HTrb2Unpacker);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__TofDictLN_TMatrixTBaselEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofTrb2Unpacker),sizeof(HTofTrb2Unpacker),-1,29952,"Unpacker for TOF data",G__setup_memvarHTofTrb2Unpacker,G__setup_memfuncHTofTrb2Unpacker);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HDetGeomPar);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofParRootFileIo),sizeof(HTofParRootFileIo),-1,62464,"Class for TOF parameter I/O from ROOT file",G__setup_memvarHTofParRootFileIo,G__setup_memfuncHTofParRootFileIo);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofParAsciiFileIo),sizeof(HTofParAsciiFileIo),-1,62464,"Class for Tof parameter I/O from Ascii files",G__setup_memvarHTofParAsciiFileIo,G__setup_memfuncHTofParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofClusterFPar),sizeof(HTofClusterFPar),-1,128256,(char*)NULL,G__setup_memvarHTofClusterFPar,G__setup_memfuncHTofClusterFPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofCluster),sizeof(HTofCluster),-1,128256,"Class with data for a TOF cluster",G__setup_memvarHTofCluster,G__setup_memfuncHTofCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofClusterF),sizeof(HTofClusterF),-1,62720,"Finds TOF clusters.",G__setup_memvarHTofClusterF,G__setup_memfuncHTofClusterF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofClusterFSim),sizeof(HTofClusterFSim),-1,62720,"Tof cluster finder for simulated data.",G__setup_memvarHTofClusterFSim,G__setup_memfuncHTofClusterFSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofClusterSim),sizeof(HTofClusterSim),-1,62720,"simulated cluster data level of TOF",G__setup_memvarHTofClusterSim,G__setup_memfuncHTofClusterSim);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HParCond);
   G__get_linked_tagnum_fwd(&G__TofDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__TofDictLN_HTofTaskSet),sizeof(HTofTaskSet),-1,62720,"Set of tasks",G__setup_memvarHTofTaskSet,G__setup_memfuncHTofTaskSet);
}
extern "C" void G__cpp_setupTofDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupTofDict()");
  G__set_cpp_environmentTofDict();
  G__cpp_setup_tagtableTofDict();

  G__cpp_setup_inheritanceTofDict();

  G__cpp_setup_typetableTofDict();

  G__cpp_setup_memvarTofDict();

  G__cpp_setup_memfuncTofDict();
  G__cpp_setup_globalTofDict();
  G__cpp_setup_funcTofDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncTofDict();
  return;
}
class G__cpp_setup_initTofDict {
  public:
    G__cpp_setup_initTofDict() { G__add_setup_func("TofDict",(G__incsetup)(&G__cpp_setupTofDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initTofDict() { G__remove_setup_func("TofDict"); }
};
G__cpp_setup_initTofDict G__cpp_setup_initializerTofDict;


//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:44:45 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIDataSourceDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DataSourceDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HDataSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HDataSource(void *p);
   static void deleteArray_HDataSource(void *p);
   static void destruct_HDataSource(void *p);
   static void streamer_HDataSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDataSource*)
   {
      ::HDataSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDataSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDataSource", ::HDataSource::Class_Version(), "./datasource/hdatasource.h", 10,
                  typeid(::HDataSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDataSource::Dictionary, isa_proxy, 0,
                  sizeof(::HDataSource) );
      instance.SetDelete(&delete_HDataSource);
      instance.SetDeleteArray(&deleteArray_HDataSource);
      instance.SetDestructor(&destruct_HDataSource);
      instance.SetStreamerFunc(&streamer_HDataSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDataSource*)
   {
      return GenerateInitInstanceLocal((::HDataSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDataSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeantReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeantReader(void *p = 0);
   static void *newArray_HGeantReader(Long_t size, void *p);
   static void delete_HGeantReader(void *p);
   static void deleteArray_HGeantReader(void *p);
   static void destruct_HGeantReader(void *p);
   static void streamer_HGeantReader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeantReader*)
   {
      ::HGeantReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeantReader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeantReader", ::HGeantReader::Class_Version(), "./datasource/hgeantreader.h", 8,
                  typeid(::HGeantReader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeantReader::Dictionary, isa_proxy, 0,
                  sizeof(::HGeantReader) );
      instance.SetNew(&new_HGeantReader);
      instance.SetNewArray(&newArray_HGeantReader);
      instance.SetDelete(&delete_HGeantReader);
      instance.SetDeleteArray(&deleteArray_HGeantReader);
      instance.SetDestructor(&destruct_HGeantReader);
      instance.SetStreamerFunc(&streamer_HGeantReader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeantReader*)
   {
      return GenerateInitInstanceLocal((::HGeantReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeantReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeantSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HGeantSource(void *p);
   static void deleteArray_HGeantSource(void *p);
   static void destruct_HGeantSource(void *p);
   static void streamer_HGeantSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeantSource*)
   {
      ::HGeantSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeantSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeantSource", ::HGeantSource::Class_Version(), "./datasource/hgeantsource.h", 10,
                  typeid(::HGeantSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeantSource::Dictionary, isa_proxy, 0,
                  sizeof(::HGeantSource) );
      instance.SetDelete(&delete_HGeantSource);
      instance.SetDeleteArray(&deleteArray_HGeantSource);
      instance.SetDestructor(&destruct_HGeantSource);
      instance.SetStreamerFunc(&streamer_HGeantSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeantSource*)
   {
      return GenerateInitInstanceLocal((::HGeantSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeantSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRootSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRootSource(void *p = 0);
   static void *newArray_HRootSource(Long_t size, void *p);
   static void delete_HRootSource(void *p);
   static void deleteArray_HRootSource(void *p);
   static void destruct_HRootSource(void *p);
   static void streamer_HRootSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRootSource*)
   {
      ::HRootSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRootSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRootSource", ::HRootSource::Class_Version(), "./datasource/hrootsource.h", 14,
                  typeid(::HRootSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRootSource::Dictionary, isa_proxy, 0,
                  sizeof(::HRootSource) );
      instance.SetNew(&new_HRootSource);
      instance.SetNewArray(&newArray_HRootSource);
      instance.SetDelete(&delete_HRootSource);
      instance.SetDeleteArray(&deleteArray_HRootSource);
      instance.SetDestructor(&destruct_HRootSource);
      instance.SetStreamerFunc(&streamer_HRootSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRootSource*)
   {
      return GenerateInitInstanceLocal((::HRootSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRootSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeantMergeSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeantMergeSource(void *p = 0);
   static void *newArray_HGeantMergeSource(Long_t size, void *p);
   static void delete_HGeantMergeSource(void *p);
   static void deleteArray_HGeantMergeSource(void *p);
   static void destruct_HGeantMergeSource(void *p);
   static void streamer_HGeantMergeSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeantMergeSource*)
   {
      ::HGeantMergeSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeantMergeSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeantMergeSource", ::HGeantMergeSource::Class_Version(), "./datasource/hgeantmergesource.h", 19,
                  typeid(::HGeantMergeSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeantMergeSource::Dictionary, isa_proxy, 0,
                  sizeof(::HGeantMergeSource) );
      instance.SetNew(&new_HGeantMergeSource);
      instance.SetNewArray(&newArray_HGeantMergeSource);
      instance.SetDelete(&delete_HGeantMergeSource);
      instance.SetDeleteArray(&deleteArray_HGeantMergeSource);
      instance.SetDestructor(&destruct_HGeantMergeSource);
      instance.SetStreamerFunc(&streamer_HGeantMergeSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeantMergeSource*)
   {
      return GenerateInitInstanceLocal((::HGeantMergeSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeantMergeSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrbNetUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrbNetUnpacker(void *p = 0);
   static void *newArray_HTrbNetUnpacker(Long_t size, void *p);
   static void delete_HTrbNetUnpacker(void *p);
   static void deleteArray_HTrbNetUnpacker(void *p);
   static void destruct_HTrbNetUnpacker(void *p);
   static void streamer_HTrbNetUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrbNetUnpacker*)
   {
      ::HTrbNetUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrbNetUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrbNetUnpacker", ::HTrbNetUnpacker::Class_Version(), "./datasource/htrbnetunpacker.h", 17,
                  typeid(::HTrbNetUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrbNetUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HTrbNetUnpacker) );
      instance.SetNew(&new_HTrbNetUnpacker);
      instance.SetNewArray(&newArray_HTrbNetUnpacker);
      instance.SetDelete(&delete_HTrbNetUnpacker);
      instance.SetDeleteArray(&deleteArray_HTrbNetUnpacker);
      instance.SetDestructor(&destruct_HTrbNetUnpacker);
      instance.SetStreamerFunc(&streamer_HTrbNetUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrbNetUnpacker*)
   {
      return GenerateInitInstanceLocal((::HTrbNetUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrbNetUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldUnpack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HldUnpack(void *p);
   static void deleteArray_HldUnpack(void *p);
   static void destruct_HldUnpack(void *p);
   static void streamer_HldUnpack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldUnpack*)
   {
      ::HldUnpack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldUnpack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldUnpack", ::HldUnpack::Class_Version(), "./datasource/hldunpack.h", 18,
                  typeid(::HldUnpack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldUnpack::Dictionary, isa_proxy, 0,
                  sizeof(::HldUnpack) );
      instance.SetDelete(&delete_HldUnpack);
      instance.SetDeleteArray(&deleteArray_HldUnpack);
      instance.SetDestructor(&destruct_HldUnpack);
      instance.SetStreamerFunc(&streamer_HldUnpack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldUnpack*)
   {
      return GenerateInitInstanceLocal((::HldUnpack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldUnpack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HldSource(void *p);
   static void deleteArray_HldSource(void *p);
   static void destruct_HldSource(void *p);
   static void streamer_HldSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldSource*)
   {
      ::HldSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldSource", ::HldSource::Class_Version(), "./datasource/hldsource.h", 12,
                  typeid(::HldSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldSource::Dictionary, isa_proxy, 0,
                  sizeof(::HldSource) );
      instance.SetDelete(&delete_HldSource);
      instance.SetDeleteArray(&deleteArray_HldSource);
      instance.SetDestructor(&destruct_HldSource);
      instance.SetStreamerFunc(&streamer_HldSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldSource*)
   {
      return GenerateInitInstanceLocal((::HldSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldFileOutput_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HldFileOutput(void *p);
   static void deleteArray_HldFileOutput(void *p);
   static void destruct_HldFileOutput(void *p);
   static void streamer_HldFileOutput(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldFileOutput*)
   {
      ::HldFileOutput *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldFileOutput >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldFileOutput", ::HldFileOutput::Class_Version(), "./datasource/hldfileoutput.h", 12,
                  typeid(::HldFileOutput), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldFileOutput::Dictionary, isa_proxy, 0,
                  sizeof(::HldFileOutput) );
      instance.SetDelete(&delete_HldFileOutput);
      instance.SetDeleteArray(&deleteArray_HldFileOutput);
      instance.SetDestructor(&destruct_HldFileOutput);
      instance.SetStreamerFunc(&streamer_HldFileOutput);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldFileOutput*)
   {
      return GenerateInitInstanceLocal((::HldFileOutput*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldFileOutput*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldFileDesc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HldFileDesc(void *p);
   static void deleteArray_HldFileDesc(void *p);
   static void destruct_HldFileDesc(void *p);
   static void streamer_HldFileDesc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldFileDesc*)
   {
      ::HldFileDesc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldFileDesc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldFileDesc", ::HldFileDesc::Class_Version(), "./datasource/hldfilesourcebase.h", 8,
                  typeid(::HldFileDesc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldFileDesc::Dictionary, isa_proxy, 0,
                  sizeof(::HldFileDesc) );
      instance.SetDelete(&delete_HldFileDesc);
      instance.SetDeleteArray(&deleteArray_HldFileDesc);
      instance.SetDestructor(&destruct_HldFileDesc);
      instance.SetStreamerFunc(&streamer_HldFileDesc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldFileDesc*)
   {
      return GenerateInitInstanceLocal((::HldFileDesc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldFileDesc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldFileSourceBase_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HldFileSourceBase(void *p);
   static void deleteArray_HldFileSourceBase(void *p);
   static void destruct_HldFileSourceBase(void *p);
   static void streamer_HldFileSourceBase(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldFileSourceBase*)
   {
      ::HldFileSourceBase *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldFileSourceBase >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldFileSourceBase", ::HldFileSourceBase::Class_Version(), "./datasource/hldfilesourcebase.h", 25,
                  typeid(::HldFileSourceBase), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldFileSourceBase::Dictionary, isa_proxy, 0,
                  sizeof(::HldFileSourceBase) );
      instance.SetDelete(&delete_HldFileSourceBase);
      instance.SetDeleteArray(&deleteArray_HldFileSourceBase);
      instance.SetDestructor(&destruct_HldFileSourceBase);
      instance.SetStreamerFunc(&streamer_HldFileSourceBase);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldFileSourceBase*)
   {
      return GenerateInitInstanceLocal((::HldFileSourceBase*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldFileSourceBase*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldFileSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HldFileSource(void *p = 0);
   static void *newArray_HldFileSource(Long_t size, void *p);
   static void delete_HldFileSource(void *p);
   static void deleteArray_HldFileSource(void *p);
   static void destruct_HldFileSource(void *p);
   static void streamer_HldFileSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldFileSource*)
   {
      ::HldFileSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldFileSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldFileSource", ::HldFileSource::Class_Version(), "./datasource/hldfilesource.h", 8,
                  typeid(::HldFileSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldFileSource::Dictionary, isa_proxy, 0,
                  sizeof(::HldFileSource) );
      instance.SetNew(&new_HldFileSource);
      instance.SetNewArray(&newArray_HldFileSource);
      instance.SetDelete(&delete_HldFileSource);
      instance.SetDeleteArray(&deleteArray_HldFileSource);
      instance.SetDestructor(&destruct_HldFileSource);
      instance.SetStreamerFunc(&streamer_HldFileSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldFileSource*)
   {
      return GenerateInitInstanceLocal((::HldFileSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldFileSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HKineGeantReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HKineGeantReader(void *p = 0);
   static void *newArray_HKineGeantReader(Long_t size, void *p);
   static void delete_HKineGeantReader(void *p);
   static void deleteArray_HKineGeantReader(void *p);
   static void destruct_HKineGeantReader(void *p);
   static void streamer_HKineGeantReader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HKineGeantReader*)
   {
      ::HKineGeantReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HKineGeantReader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HKineGeantReader", ::HKineGeantReader::Class_Version(), "./datasource/hkinegeantreader.h", 10,
                  typeid(::HKineGeantReader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HKineGeantReader::Dictionary, isa_proxy, 0,
                  sizeof(::HKineGeantReader) );
      instance.SetNew(&new_HKineGeantReader);
      instance.SetNewArray(&newArray_HKineGeantReader);
      instance.SetDelete(&delete_HKineGeantReader);
      instance.SetDeleteArray(&deleteArray_HKineGeantReader);
      instance.SetDestructor(&destruct_HKineGeantReader);
      instance.SetStreamerFunc(&streamer_HKineGeantReader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HKineGeantReader*)
   {
      return GenerateInitInstanceLocal((::HKineGeantReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HKineGeantReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSimulGeantReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSimulGeantReader(void *p = 0);
   static void *newArray_HSimulGeantReader(Long_t size, void *p);
   static void delete_HSimulGeantReader(void *p);
   static void deleteArray_HSimulGeantReader(void *p);
   static void destruct_HSimulGeantReader(void *p);
   static void streamer_HSimulGeantReader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSimulGeantReader*)
   {
      ::HSimulGeantReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSimulGeantReader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSimulGeantReader", ::HSimulGeantReader::Class_Version(), "./datasource/hsimulgeantreader.h", 9,
                  typeid(::HSimulGeantReader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSimulGeantReader::Dictionary, isa_proxy, 0,
                  sizeof(::HSimulGeantReader) );
      instance.SetNew(&new_HSimulGeantReader);
      instance.SetNewArray(&newArray_HSimulGeantReader);
      instance.SetDelete(&delete_HSimulGeantReader);
      instance.SetDeleteArray(&deleteArray_HSimulGeantReader);
      instance.SetDestructor(&destruct_HSimulGeantReader);
      instance.SetStreamerFunc(&streamer_HSimulGeantReader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSimulGeantReader*)
   {
      return GenerateInitInstanceLocal((::HSimulGeantReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSimulGeantReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HDirectSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HDirectSource(void *p);
   static void deleteArray_HDirectSource(void *p);
   static void destruct_HDirectSource(void *p);
   static void streamer_HDirectSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDirectSource*)
   {
      ::HDirectSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDirectSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDirectSource", ::HDirectSource::Class_Version(), "./datasource/hdirectsource.h", 9,
                  typeid(::HDirectSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDirectSource::Dictionary, isa_proxy, 0,
                  sizeof(::HDirectSource) );
      instance.SetDelete(&delete_HDirectSource);
      instance.SetDeleteArray(&deleteArray_HDirectSource);
      instance.SetDestructor(&destruct_HDirectSource);
      instance.SetStreamerFunc(&streamer_HDirectSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDirectSource*)
   {
      return GenerateInitInstanceLocal((::HDirectSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDirectSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldRemoteSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HldRemoteSource(void *p = 0);
   static void *newArray_HldRemoteSource(Long_t size, void *p);
   static void delete_HldRemoteSource(void *p);
   static void deleteArray_HldRemoteSource(void *p);
   static void destruct_HldRemoteSource(void *p);
   static void streamer_HldRemoteSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldRemoteSource*)
   {
      ::HldRemoteSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldRemoteSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldRemoteSource", ::HldRemoteSource::Class_Version(), "./datasource/hldremotesource.h", 8,
                  typeid(::HldRemoteSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldRemoteSource::Dictionary, isa_proxy, 0,
                  sizeof(::HldRemoteSource) );
      instance.SetNew(&new_HldRemoteSource);
      instance.SetNewArray(&newArray_HldRemoteSource);
      instance.SetDelete(&delete_HldRemoteSource);
      instance.SetDeleteArray(&deleteArray_HldRemoteSource);
      instance.SetDestructor(&destruct_HldRemoteSource);
      instance.SetStreamerFunc(&streamer_HldRemoteSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldRemoteSource*)
   {
      return GenerateInitInstanceLocal((::HldRemoteSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldRemoteSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HldGrepFileSource_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HldGrepFileSource(void *p = 0);
   static void *newArray_HldGrepFileSource(Long_t size, void *p);
   static void delete_HldGrepFileSource(void *p);
   static void deleteArray_HldGrepFileSource(void *p);
   static void destruct_HldGrepFileSource(void *p);
   static void streamer_HldGrepFileSource(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HldGrepFileSource*)
   {
      ::HldGrepFileSource *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HldGrepFileSource >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HldGrepFileSource", ::HldGrepFileSource::Class_Version(), "./datasource/hldgrepfilesource.h", 14,
                  typeid(::HldGrepFileSource), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HldGrepFileSource::Dictionary, isa_proxy, 0,
                  sizeof(::HldGrepFileSource) );
      instance.SetNew(&new_HldGrepFileSource);
      instance.SetNewArray(&newArray_HldGrepFileSource);
      instance.SetDelete(&delete_HldGrepFileSource);
      instance.SetDeleteArray(&deleteArray_HldGrepFileSource);
      instance.SetDestructor(&destruct_HldGrepFileSource);
      instance.SetStreamerFunc(&streamer_HldGrepFileSource);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HldGrepFileSource*)
   {
      return GenerateInitInstanceLocal((::HldGrepFileSource*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HldGrepFileSource*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrbLookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrbLookup(void *p = 0);
   static void *newArray_HTrbLookup(Long_t size, void *p);
   static void delete_HTrbLookup(void *p);
   static void deleteArray_HTrbLookup(void *p);
   static void destruct_HTrbLookup(void *p);
   static void streamer_HTrbLookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrbLookup*)
   {
      ::HTrbLookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrbLookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrbLookup", ::HTrbLookup::Class_Version(), "./datasource/htrblookup.h", 90,
                  typeid(::HTrbLookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrbLookup::Dictionary, isa_proxy, 0,
                  sizeof(::HTrbLookup) );
      instance.SetNew(&new_HTrbLookup);
      instance.SetNewArray(&newArray_HTrbLookup);
      instance.SetDelete(&delete_HTrbLookup);
      instance.SetDeleteArray(&deleteArray_HTrbLookup);
      instance.SetDestructor(&destruct_HTrbLookup);
      instance.SetStreamerFunc(&streamer_HTrbLookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrbLookup*)
   {
      return GenerateInitInstanceLocal((::HTrbLookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrbLookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrbBaseUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HTrbBaseUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrbBaseUnpacker*)
   {
      ::HTrbBaseUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrbBaseUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrbBaseUnpacker", ::HTrbBaseUnpacker::Class_Version(), "./datasource/htrbbaseunpacker.h", 20,
                  typeid(::HTrbBaseUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrbBaseUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HTrbBaseUnpacker) );
      instance.SetStreamerFunc(&streamer_HTrbBaseUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrbBaseUnpacker*)
   {
      return GenerateInitInstanceLocal((::HTrbBaseUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrbBaseUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb2Correction_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrb2Correction(void *p = 0);
   static void *newArray_HTrb2Correction(Long_t size, void *p);
   static void delete_HTrb2Correction(void *p);
   static void deleteArray_HTrb2Correction(void *p);
   static void destruct_HTrb2Correction(void *p);
   static void streamer_HTrb2Correction(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb2Correction*)
   {
      ::HTrb2Correction *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrb2Correction >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb2Correction", ::HTrb2Correction::Class_Version(), "./datasource/htrb2correction.h", 10,
                  typeid(::HTrb2Correction), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrb2Correction::Dictionary, isa_proxy, 0,
                  sizeof(::HTrb2Correction) );
      instance.SetNew(&new_HTrb2Correction);
      instance.SetNewArray(&newArray_HTrb2Correction);
      instance.SetDelete(&delete_HTrb2Correction);
      instance.SetDeleteArray(&deleteArray_HTrb2Correction);
      instance.SetDestructor(&destruct_HTrb2Correction);
      instance.SetStreamerFunc(&streamer_HTrb2Correction);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb2Correction*)
   {
      return GenerateInitInstanceLocal((::HTrb2Correction*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb2Correction*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrbnetAddressMapping_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrbnetAddressMapping(void *p = 0);
   static void *newArray_HTrbnetAddressMapping(Long_t size, void *p);
   static void delete_HTrbnetAddressMapping(void *p);
   static void deleteArray_HTrbnetAddressMapping(void *p);
   static void destruct_HTrbnetAddressMapping(void *p);
   static void streamer_HTrbnetAddressMapping(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrbnetAddressMapping*)
   {
      ::HTrbnetAddressMapping *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrbnetAddressMapping >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrbnetAddressMapping", ::HTrbnetAddressMapping::Class_Version(), "./datasource/htrbnetaddressmapping.h", 14,
                  typeid(::HTrbnetAddressMapping), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrbnetAddressMapping::Dictionary, isa_proxy, 0,
                  sizeof(::HTrbnetAddressMapping) );
      instance.SetNew(&new_HTrbnetAddressMapping);
      instance.SetNewArray(&newArray_HTrbnetAddressMapping);
      instance.SetDelete(&delete_HTrbnetAddressMapping);
      instance.SetDeleteArray(&deleteArray_HTrbnetAddressMapping);
      instance.SetDestructor(&destruct_HTrbnetAddressMapping);
      instance.SetStreamerFunc(&streamer_HTrbnetAddressMapping);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrbnetAddressMapping*)
   {
      return GenerateInitInstanceLocal((::HTrbnetAddressMapping*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrbnetAddressMapping*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb2Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HTrb2Unpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb2Unpacker*)
   {
      ::HTrb2Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrb2Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb2Unpacker", ::HTrb2Unpacker::Class_Version(), "./datasource/htrb2unpacker.h", 22,
                  typeid(::HTrb2Unpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrb2Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HTrb2Unpacker) );
      instance.SetStreamerFunc(&streamer_HTrb2Unpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb2Unpacker*)
   {
      return GenerateInitInstanceLocal((::HTrb2Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb2Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb3Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void streamer_HTrb3Unpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb3Unpacker*)
   {
      ::HTrb3Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrb3Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb3Unpacker", ::HTrb3Unpacker::Class_Version(), "./datasource/htrb3unpacker.h", 22,
                  typeid(::HTrb3Unpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrb3Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HTrb3Unpacker) );
      instance.SetStreamerFunc(&streamer_HTrb3Unpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb3Unpacker*)
   {
      return GenerateInitInstanceLocal((::HTrb3Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb3Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb3CalparTdc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrb3CalparTdc(void *p = 0);
   static void *newArray_HTrb3CalparTdc(Long_t size, void *p);
   static void delete_HTrb3CalparTdc(void *p);
   static void deleteArray_HTrb3CalparTdc(void *p);
   static void destruct_HTrb3CalparTdc(void *p);
   static void streamer_HTrb3CalparTdc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb3CalparTdc*)
   {
      ::HTrb3CalparTdc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrb3CalparTdc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb3CalparTdc", ::HTrb3CalparTdc::Class_Version(), "./datasource/htrb3calpar.h", 16,
                  typeid(::HTrb3CalparTdc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrb3CalparTdc::Dictionary, isa_proxy, 0,
                  sizeof(::HTrb3CalparTdc) );
      instance.SetNew(&new_HTrb3CalparTdc);
      instance.SetNewArray(&newArray_HTrb3CalparTdc);
      instance.SetDelete(&delete_HTrb3CalparTdc);
      instance.SetDeleteArray(&deleteArray_HTrb3CalparTdc);
      instance.SetDestructor(&destruct_HTrb3CalparTdc);
      instance.SetStreamerFunc(&streamer_HTrb3CalparTdc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb3CalparTdc*)
   {
      return GenerateInitInstanceLocal((::HTrb3CalparTdc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb3CalparTdc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb3TdcUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrb3TdcUnpacker(void *p = 0);
   static void *newArray_HTrb3TdcUnpacker(Long_t size, void *p);
   static void delete_HTrb3TdcUnpacker(void *p);
   static void deleteArray_HTrb3TdcUnpacker(void *p);
   static void destruct_HTrb3TdcUnpacker(void *p);
   static void streamer_HTrb3TdcUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb3TdcUnpacker*)
   {
      ::HTrb3TdcUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrb3TdcUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb3TdcUnpacker", ::HTrb3TdcUnpacker::Class_Version(), "./datasource/htrb3tdcunpacker.h", 19,
                  typeid(::HTrb3TdcUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrb3TdcUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HTrb3TdcUnpacker) );
      instance.SetNew(&new_HTrb3TdcUnpacker);
      instance.SetNewArray(&newArray_HTrb3TdcUnpacker);
      instance.SetDelete(&delete_HTrb3TdcUnpacker);
      instance.SetDeleteArray(&deleteArray_HTrb3TdcUnpacker);
      instance.SetDestructor(&destruct_HTrb3TdcUnpacker);
      instance.SetStreamerFunc(&streamer_HTrb3TdcUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb3TdcUnpacker*)
   {
      return GenerateInitInstanceLocal((::HTrb3TdcUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb3TdcUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb3Calpar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrb3Calpar(void *p = 0);
   static void *newArray_HTrb3Calpar(Long_t size, void *p);
   static void delete_HTrb3Calpar(void *p);
   static void deleteArray_HTrb3Calpar(void *p);
   static void destruct_HTrb3Calpar(void *p);
   static void streamer_HTrb3Calpar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb3Calpar*)
   {
      ::HTrb3Calpar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrb3Calpar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb3Calpar", ::HTrb3Calpar::Class_Version(), "./datasource/htrb3calpar.h", 69,
                  typeid(::HTrb3Calpar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrb3Calpar::Dictionary, isa_proxy, 0,
                  sizeof(::HTrb3Calpar) );
      instance.SetNew(&new_HTrb3Calpar);
      instance.SetNewArray(&newArray_HTrb3Calpar);
      instance.SetDelete(&delete_HTrb3Calpar);
      instance.SetDeleteArray(&deleteArray_HTrb3Calpar);
      instance.SetDestructor(&destruct_HTrb3Calpar);
      instance.SetStreamerFunc(&streamer_HTrb3Calpar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb3Calpar*)
   {
      return GenerateInitInstanceLocal((::HTrb3Calpar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb3Calpar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb3TdcMessage_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HTrb3TdcMessage_Dictionary();
   static void *new_HTrb3TdcMessage(void *p = 0);
   static void *newArray_HTrb3TdcMessage(Long_t size, void *p);
   static void delete_HTrb3TdcMessage(void *p);
   static void deleteArray_HTrb3TdcMessage(void *p);
   static void destruct_HTrb3TdcMessage(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb3TdcMessage*)
   {
      ::HTrb3TdcMessage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HTrb3TdcMessage),0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb3TdcMessage", "./datasource/htrb3tdcmessage.h", 26,
                  typeid(::HTrb3TdcMessage), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &HTrb3TdcMessage_Dictionary, isa_proxy, 0,
                  sizeof(::HTrb3TdcMessage) );
      instance.SetNew(&new_HTrb3TdcMessage);
      instance.SetNewArray(&newArray_HTrb3TdcMessage);
      instance.SetDelete(&delete_HTrb3TdcMessage);
      instance.SetDeleteArray(&deleteArray_HTrb3TdcMessage);
      instance.SetDestructor(&destruct_HTrb3TdcMessage);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb3TdcMessage*)
   {
      return GenerateInitInstanceLocal((::HTrb3TdcMessage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb3TdcMessage*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HTrb3TdcMessage_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3TdcMessage*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrb3TdcIterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HTrb3TdcIterator_Dictionary();
   static void *new_HTrb3TdcIterator(void *p = 0);
   static void *newArray_HTrb3TdcIterator(Long_t size, void *p);
   static void delete_HTrb3TdcIterator(void *p);
   static void deleteArray_HTrb3TdcIterator(void *p);
   static void destruct_HTrb3TdcIterator(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrb3TdcIterator*)
   {
      ::HTrb3TdcIterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HTrb3TdcIterator),0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrb3TdcIterator", "./datasource/htrb3tdciterator.h", 6,
                  typeid(::HTrb3TdcIterator), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &HTrb3TdcIterator_Dictionary, isa_proxy, 0,
                  sizeof(::HTrb3TdcIterator) );
      instance.SetNew(&new_HTrb3TdcIterator);
      instance.SetNewArray(&newArray_HTrb3TdcIterator);
      instance.SetDelete(&delete_HTrb3TdcIterator);
      instance.SetDeleteArray(&deleteArray_HTrb3TdcIterator);
      instance.SetDestructor(&destruct_HTrb3TdcIterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrb3TdcIterator*)
   {
      return GenerateInitInstanceLocal((::HTrb3TdcIterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrb3TdcIterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HTrb3TdcIterator_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3TdcIterator*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrbLookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrbLookupChan(void *p = 0);
   static void *newArray_HTrbLookupChan(Long_t size, void *p);
   static void delete_HTrbLookupChan(void *p);
   static void deleteArray_HTrbLookupChan(void *p);
   static void destruct_HTrbLookupChan(void *p);
   static void streamer_HTrbLookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrbLookupChan*)
   {
      ::HTrbLookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrbLookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrbLookupChan", ::HTrbLookupChan::Class_Version(), "./datasource/htrblookup.h", 11,
                  typeid(::HTrbLookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrbLookupChan::Dictionary, isa_proxy, 1,
                  sizeof(::HTrbLookupChan) );
      instance.SetNew(&new_HTrbLookupChan);
      instance.SetNewArray(&newArray_HTrbLookupChan);
      instance.SetDelete(&delete_HTrbLookupChan);
      instance.SetDeleteArray(&deleteArray_HTrbLookupChan);
      instance.SetDestructor(&destruct_HTrbLookupChan);
      instance.SetStreamerFunc(&streamer_HTrbLookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrbLookupChan*)
   {
      return GenerateInitInstanceLocal((::HTrbLookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrbLookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrbLookupBoard_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrbLookupBoard(void *p = 0);
   static void *newArray_HTrbLookupBoard(Long_t size, void *p);
   static void delete_HTrbLookupBoard(void *p);
   static void deleteArray_HTrbLookupBoard(void *p);
   static void destruct_HTrbLookupBoard(void *p);
   static void streamer_HTrbLookupBoard(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrbLookupBoard*)
   {
      ::HTrbLookupBoard *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrbLookupBoard >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrbLookupBoard", ::HTrbLookupBoard::Class_Version(), "./datasource/htrblookup.h", 70,
                  typeid(::HTrbLookupBoard), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrbLookupBoard::Dictionary, isa_proxy, 0,
                  sizeof(::HTrbLookupBoard) );
      instance.SetNew(&new_HTrbLookupBoard);
      instance.SetNewArray(&newArray_HTrbLookupBoard);
      instance.SetDelete(&delete_HTrbLookupBoard);
      instance.SetDeleteArray(&deleteArray_HTrbLookupBoard);
      instance.SetDestructor(&destruct_HTrbLookupBoard);
      instance.SetStreamerFunc(&streamer_HTrbLookupBoard);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrbLookupBoard*)
   {
      return GenerateInitInstanceLocal((::HTrbLookupBoard*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrbLookupBoard*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace Trbnet {
   namespace ROOTDict {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static void Trbnet_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("Trbnet", 0 /*version*/, "./datasource/htrbnetdef.h", 4,
                     ::ROOT::DefineBehavior((void*)0,(void*)0),
                     &Trbnet_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_(Init));

      // Dictionary for non-ClassDef classes
      static void Trbnet_Dictionary() {
         GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOTDict {
   void HTrbNetDebugInfo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrbNetDebugInfo(void *p = 0);
   static void *newArray_HTrbNetDebugInfo(Long_t size, void *p);
   static void delete_HTrbNetDebugInfo(void *p);
   static void deleteArray_HTrbNetDebugInfo(void *p);
   static void destruct_HTrbNetDebugInfo(void *p);
   static void streamer_HTrbNetDebugInfo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrbNetDebugInfo*)
   {
      ::HTrbNetDebugInfo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrbNetDebugInfo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrbNetDebugInfo", ::HTrbNetDebugInfo::Class_Version(), "./datasource/htrbnetdebuginfo.h", 14,
                  typeid(::HTrbNetDebugInfo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrbNetDebugInfo::Dictionary, isa_proxy, 0,
                  sizeof(::HTrbNetDebugInfo) );
      instance.SetNew(&new_HTrbNetDebugInfo);
      instance.SetNewArray(&newArray_HTrbNetDebugInfo);
      instance.SetDelete(&delete_HTrbNetDebugInfo);
      instance.SetDeleteArray(&deleteArray_HTrbNetDebugInfo);
      instance.SetDestructor(&destruct_HTrbNetDebugInfo);
      instance.SetStreamerFunc(&streamer_HTrbNetDebugInfo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrbNetDebugInfo*)
   {
      return GenerateInitInstanceLocal((::HTrbNetDebugInfo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrbNetDebugInfo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HDataSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDataSource::Class_Name()
{
   return "HDataSource";
}

//______________________________________________________________________________
const char *HDataSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDataSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDataSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDataSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDataSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDataSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDataSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDataSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeantReader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeantReader::Class_Name()
{
   return "HGeantReader";
}

//______________________________________________________________________________
const char *HGeantReader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantReader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeantReader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantReader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeantReader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantReader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeantReader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantReader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeantSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeantSource::Class_Name()
{
   return "HGeantSource";
}

//______________________________________________________________________________
const char *HGeantSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeantSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeantSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeantSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRootSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRootSource::Class_Name()
{
   return "HRootSource";
}

//______________________________________________________________________________
const char *HRootSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRootSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRootSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRootSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRootSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRootSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRootSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRootSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeantMergeSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeantMergeSource::Class_Name()
{
   return "HGeantMergeSource";
}

//______________________________________________________________________________
const char *HGeantMergeSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantMergeSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeantMergeSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantMergeSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeantMergeSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantMergeSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeantMergeSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantMergeSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrbNetUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrbNetUnpacker::Class_Name()
{
   return "HTrbNetUnpacker";
}

//______________________________________________________________________________
const char *HTrbNetUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrbNetUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrbNetUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrbNetUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldUnpack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldUnpack::Class_Name()
{
   return "HldUnpack";
}

//______________________________________________________________________________
const char *HldUnpack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldUnpack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldUnpack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldUnpack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldUnpack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldUnpack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldUnpack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldUnpack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldSource::Class_Name()
{
   return "HldSource";
}

//______________________________________________________________________________
const char *HldSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldFileOutput::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldFileOutput::Class_Name()
{
   return "HldFileOutput";
}

//______________________________________________________________________________
const char *HldFileOutput::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileOutput*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldFileOutput::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileOutput*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldFileOutput::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileOutput*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldFileOutput::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileOutput*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldFileDesc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldFileDesc::Class_Name()
{
   return "HldFileDesc";
}

//______________________________________________________________________________
const char *HldFileDesc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileDesc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldFileDesc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileDesc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldFileDesc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileDesc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldFileDesc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileDesc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldFileSourceBase::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldFileSourceBase::Class_Name()
{
   return "HldFileSourceBase";
}

//______________________________________________________________________________
const char *HldFileSourceBase::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSourceBase*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldFileSourceBase::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSourceBase*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldFileSourceBase::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSourceBase*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldFileSourceBase::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSourceBase*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldFileSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldFileSource::Class_Name()
{
   return "HldFileSource";
}

//______________________________________________________________________________
const char *HldFileSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldFileSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldFileSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldFileSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldFileSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HKineGeantReader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HKineGeantReader::Class_Name()
{
   return "HKineGeantReader";
}

//______________________________________________________________________________
const char *HKineGeantReader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HKineGeantReader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HKineGeantReader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HKineGeantReader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HKineGeantReader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HKineGeantReader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HKineGeantReader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HKineGeantReader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSimulGeantReader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSimulGeantReader::Class_Name()
{
   return "HSimulGeantReader";
}

//______________________________________________________________________________
const char *HSimulGeantReader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSimulGeantReader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSimulGeantReader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSimulGeantReader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSimulGeantReader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSimulGeantReader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSimulGeantReader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSimulGeantReader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HDirectSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDirectSource::Class_Name()
{
   return "HDirectSource";
}

//______________________________________________________________________________
const char *HDirectSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDirectSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDirectSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDirectSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDirectSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDirectSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDirectSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDirectSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldRemoteSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldRemoteSource::Class_Name()
{
   return "HldRemoteSource";
}

//______________________________________________________________________________
const char *HldRemoteSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldRemoteSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldRemoteSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldRemoteSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldRemoteSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldRemoteSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldRemoteSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldRemoteSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HldGrepFileSource::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HldGrepFileSource::Class_Name()
{
   return "HldGrepFileSource";
}

//______________________________________________________________________________
const char *HldGrepFileSource::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldGrepFileSource*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HldGrepFileSource::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HldGrepFileSource*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HldGrepFileSource::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldGrepFileSource*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HldGrepFileSource::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HldGrepFileSource*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrbLookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrbLookup::Class_Name()
{
   return "HTrbLookup";
}

//______________________________________________________________________________
const char *HTrbLookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrbLookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrbLookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrbLookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrbBaseUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrbBaseUnpacker::Class_Name()
{
   return "HTrbBaseUnpacker";
}

//______________________________________________________________________________
const char *HTrbBaseUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbBaseUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrbBaseUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbBaseUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrbBaseUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbBaseUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrbBaseUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbBaseUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrb2Correction::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrb2Correction::Class_Name()
{
   return "HTrb2Correction";
}

//______________________________________________________________________________
const char *HTrb2Correction::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Correction*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrb2Correction::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Correction*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrb2Correction::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Correction*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrb2Correction::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Correction*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrbnetAddressMapping::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrbnetAddressMapping::Class_Name()
{
   return "HTrbnetAddressMapping";
}

//______________________________________________________________________________
const char *HTrbnetAddressMapping::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbnetAddressMapping*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrbnetAddressMapping::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbnetAddressMapping*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrbnetAddressMapping::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbnetAddressMapping*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrbnetAddressMapping::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbnetAddressMapping*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrb2Unpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrb2Unpacker::Class_Name()
{
   return "HTrb2Unpacker";
}

//______________________________________________________________________________
const char *HTrb2Unpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrb2Unpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrb2Unpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrb2Unpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb2Unpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrb3Unpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrb3Unpacker::Class_Name()
{
   return "HTrb3Unpacker";
}

//______________________________________________________________________________
const char *HTrb3Unpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrb3Unpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrb3Unpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrb3Unpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Unpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrb3CalparTdc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrb3CalparTdc::Class_Name()
{
   return "HTrb3CalparTdc";
}

//______________________________________________________________________________
const char *HTrb3CalparTdc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3CalparTdc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrb3CalparTdc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3CalparTdc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrb3CalparTdc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3CalparTdc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrb3CalparTdc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3CalparTdc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrb3TdcUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrb3TdcUnpacker::Class_Name()
{
   return "HTrb3TdcUnpacker";
}

//______________________________________________________________________________
const char *HTrb3TdcUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3TdcUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrb3TdcUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3TdcUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrb3TdcUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3TdcUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrb3TdcUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3TdcUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrb3Calpar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrb3Calpar::Class_Name()
{
   return "HTrb3Calpar";
}

//______________________________________________________________________________
const char *HTrb3Calpar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Calpar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrb3Calpar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Calpar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrb3Calpar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Calpar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrb3Calpar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrb3Calpar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrbLookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrbLookupChan::Class_Name()
{
   return "HTrbLookupChan";
}

//______________________________________________________________________________
const char *HTrbLookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrbLookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrbLookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrbLookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrbLookupBoard::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrbLookupBoard::Class_Name()
{
   return "HTrbLookupBoard";
}

//______________________________________________________________________________
const char *HTrbLookupBoard::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupBoard*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrbLookupBoard::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupBoard*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrbLookupBoard::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupBoard*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrbLookupBoard::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbLookupBoard*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrbNetDebugInfo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrbNetDebugInfo::Class_Name()
{
   return "HTrbNetDebugInfo";
}

//______________________________________________________________________________
const char *HTrbNetDebugInfo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetDebugInfo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrbNetDebugInfo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetDebugInfo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrbNetDebugInfo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetDebugInfo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrbNetDebugInfo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrbNetDebugInfo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HldSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldSource.

   HDataSource::Streamer(R__b);
}

//______________________________________________________________________________
void HldSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldSource.
      TClass *R__cl = ::HldSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hubUnpacker", &hubUnpacker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isDumped", &isDumped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isScanned", &isScanned);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "oldDecodingStyle", &oldDecodingStyle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUnpackerList", &fUnpackerList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fReadEvent", &fReadEvent);
      HDataSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HldSource(void *p) {
      delete ((::HldSource*)p);
   }
   static void deleteArray_HldSource(void *p) {
      delete [] ((::HldSource*)p);
   }
   static void destruct_HldSource(void *p) {
      typedef ::HldSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldSource(TBuffer &buf, void *obj) {
      ((::HldSource*)obj)->::HldSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldSource

//______________________________________________________________________________
void HDataSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDataSource.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HDataSource::IsA());
   } else {
      R__c = R__b.WriteVersion(HDataSource::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDataSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDataSource.
      TClass *R__cl = ::HDataSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventAddr", &fEventAddr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fForcedID", &fForcedID);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HDataSource(void *p) {
      delete ((::HDataSource*)p);
   }
   static void deleteArray_HDataSource(void *p) {
      delete [] ((::HDataSource*)p);
   }
   static void destruct_HDataSource(void *p) {
      typedef ::HDataSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDataSource(TBuffer &buf, void *obj) {
      ((::HDataSource*)obj)->::HDataSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDataSource

//______________________________________________________________________________
void HRootSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRootSource.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDataSource::Streamer(R__b);
      R__b >> fInput;
      fDirectory.Streamer(R__b);
      R__b >> fEntries;
      R__b >> fPersistency;
      R__b >> fMerge;
      R__b >> fCursor;
      R__b >> fSplitLevel;
      R__b >> fCurrentRunId;
      R__b >> fCurrentRefId;
      R__b >> fGlobalRefId;
      R__b >> fEventList;
      R__b.CheckByteCount(R__s, R__c, HRootSource::IsA());
   } else {
      R__c = R__b.WriteVersion(HRootSource::IsA(), kTRUE);
      HDataSource::Streamer(R__b);
      R__b << fInput;
      fDirectory.Streamer(R__b);
      R__b << fEntries;
      R__b << fPersistency;
      R__b << fMerge;
      R__b << fCursor;
      R__b << fSplitLevel;
      R__b << fCurrentRunId;
      R__b << fCurrentRefId;
      R__b << fGlobalRefId;
      R__b << fEventList;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRootSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRootSource.
      TClass *R__cl = ::HRootSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInput", &fInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDirectory", &fDirectory);
      R__insp.InspectMember(fDirectory, "fDirectory.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEntries", &fEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPersistency", &fPersistency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMerge", &fMerge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCursor", &fCursor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSplitLevel", &fSplitLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentRunId", &fCurrentRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentRefId", &fCurrentRefId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGlobalRefId", &fGlobalRefId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefIds", (void*)&fRefIds);
      R__insp.InspectMember("map<Int_t,Int_t>", (void*)&fRefIds, "fRefIds.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventInFile", &fEventInFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventList", &fEventList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLastRunId", &fLastRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "overwriteVersion", &overwriteVersion);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "replaceVersion", &replaceVersion);
      HDataSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRootSource(void *p) {
      return  p ? new(p) ::HRootSource : new ::HRootSource;
   }
   static void *newArray_HRootSource(Long_t nElements, void *p) {
      return p ? new(p) ::HRootSource[nElements] : new ::HRootSource[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRootSource(void *p) {
      delete ((::HRootSource*)p);
   }
   static void deleteArray_HRootSource(void *p) {
      delete [] ((::HRootSource*)p);
   }
   static void destruct_HRootSource(void *p) {
      typedef ::HRootSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRootSource(TBuffer &buf, void *obj) {
      ((::HRootSource*)obj)->::HRootSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRootSource

//______________________________________________________________________________
void HGeantMergeSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeantMergeSource.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HRootSource::Streamer(R__b);
      {
         vector<HParallelEvent*> &R__stl =  fAdditionalInputs;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(HParallelEvent));
         if (R__tcl1==0) {
            Error("fAdditionalInputs streamer","Missing the TClass object for HParallelEvent!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            HParallelEvent* R__t;
            R__t = (HParallelEvent*)R__b.ReadObjectAny(R__tcl1);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HGeantMergeSource::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeantMergeSource::IsA(), kTRUE);
      HRootSource::Streamer(R__b);
      {
         vector<HParallelEvent*> &R__stl =  fAdditionalInputs;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<HParallelEvent*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeantMergeSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeantMergeSource.
      TClass *R__cl = ::HGeantMergeSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAdditionalInputs", (void*)&fAdditionalInputs);
      R__insp.InspectMember("vector<HParallelEvent*>", (void*)&fAdditionalInputs, "fAdditionalInputs.", false);
      HRootSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeantMergeSource(void *p) {
      return  p ? new(p) ::HGeantMergeSource : new ::HGeantMergeSource;
   }
   static void *newArray_HGeantMergeSource(Long_t nElements, void *p) {
      return p ? new(p) ::HGeantMergeSource[nElements] : new ::HGeantMergeSource[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeantMergeSource(void *p) {
      delete ((::HGeantMergeSource*)p);
   }
   static void deleteArray_HGeantMergeSource(void *p) {
      delete [] ((::HGeantMergeSource*)p);
   }
   static void destruct_HGeantMergeSource(void *p) {
      typedef ::HGeantMergeSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeantMergeSource(TBuffer &buf, void *obj) {
      ((::HGeantMergeSource*)obj)->::HGeantMergeSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeantMergeSource

//______________________________________________________________________________
void HldFileSourceBase::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldFileSourceBase.

   HldSource::Streamer(R__b);
}

//______________________________________________________________________________
void HldFileSourceBase::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldFileSourceBase.
      TClass *R__cl = ::HldFileSourceBase::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileList", &fFileList);
      R__insp.InspectMember(fFileList, "fFileList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrentFile", &fCurrentFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentDir", &fCurrentDir);
      R__insp.InspectMember(fCurrentDir, "fCurrentDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNr", &fEventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventLimit", &fEventLimit);
      HldSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HldFileSourceBase(void *p) {
      delete ((::HldFileSourceBase*)p);
   }
   static void deleteArray_HldFileSourceBase(void *p) {
      delete [] ((::HldFileSourceBase*)p);
   }
   static void destruct_HldFileSourceBase(void *p) {
      typedef ::HldFileSourceBase current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldFileSourceBase(TBuffer &buf, void *obj) {
      ((::HldFileSourceBase*)obj)->::HldFileSourceBase::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldFileSourceBase

//______________________________________________________________________________
void HldFileDesc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldFileDesc.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HldFileDesc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldFileDesc.
      TClass *R__cl = ::HldFileDesc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fName", &fName);
      R__insp.InspectMember(fName, "fName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunId", &fRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefId", &fRefId);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HldFileDesc(void *p) {
      delete ((::HldFileDesc*)p);
   }
   static void deleteArray_HldFileDesc(void *p) {
      delete [] ((::HldFileDesc*)p);
   }
   static void destruct_HldFileDesc(void *p) {
      typedef ::HldFileDesc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldFileDesc(TBuffer &buf, void *obj) {
      ((::HldFileDesc*)obj)->::HldFileDesc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldFileDesc

//______________________________________________________________________________
void HldFileSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldFileSource.

   HldFileSourceBase::Streamer(R__b);
}

//______________________________________________________________________________
void HldFileSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldFileSource.
      TClass *R__cl = ::HldFileSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      HldFileSourceBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HldFileSource(void *p) {
      return  p ? new(p) ::HldFileSource : new ::HldFileSource;
   }
   static void *newArray_HldFileSource(Long_t nElements, void *p) {
      return p ? new(p) ::HldFileSource[nElements] : new ::HldFileSource[nElements];
   }
   // Wrapper around operator delete
   static void delete_HldFileSource(void *p) {
      delete ((::HldFileSource*)p);
   }
   static void deleteArray_HldFileSource(void *p) {
      delete [] ((::HldFileSource*)p);
   }
   static void destruct_HldFileSource(void *p) {
      typedef ::HldFileSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldFileSource(TBuffer &buf, void *obj) {
      ((::HldFileSource*)obj)->::HldFileSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldFileSource

//______________________________________________________________________________
void HldGrepFileSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldGrepFileSource.

   HldFileSourceBase::Streamer(R__b);
}

//______________________________________________________________________________
void HldGrepFileSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldGrepFileSource.
      TClass *R__cl = ::HldGrepFileSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "first", &first);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mode", &mode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "interval", &interval);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timer", &timer);
      R__insp.InspectMember(timer, "timer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "referenceId", &referenceId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dostop", &dostop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distanceToLast", &distanceToLast);
      HldFileSourceBase::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HldGrepFileSource(void *p) {
      return  p ? new(p) ::HldGrepFileSource : new ::HldGrepFileSource;
   }
   static void *newArray_HldGrepFileSource(Long_t nElements, void *p) {
      return p ? new(p) ::HldGrepFileSource[nElements] : new ::HldGrepFileSource[nElements];
   }
   // Wrapper around operator delete
   static void delete_HldGrepFileSource(void *p) {
      delete ((::HldGrepFileSource*)p);
   }
   static void deleteArray_HldGrepFileSource(void *p) {
      delete [] ((::HldGrepFileSource*)p);
   }
   static void destruct_HldGrepFileSource(void *p) {
      typedef ::HldGrepFileSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldGrepFileSource(TBuffer &buf, void *obj) {
      ((::HldGrepFileSource*)obj)->::HldGrepFileSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldGrepFileSource

//______________________________________________________________________________
void HldRemoteSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldRemoteSource.

   HldSource::Streamer(R__b);
}

//______________________________________________________________________________
void HldRemoteSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldRemoteSource.
      TClass *R__cl = ::HldRemoteSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "refId", &refId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "currNodeName", &currNodeName);
      R__insp.InspectMember(currNodeName, "currNodeName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileName", &fileName);
      R__insp.InspectMember(fileName, "fileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "runId", &runId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      HldSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HldRemoteSource(void *p) {
      return  p ? new(p) ::HldRemoteSource : new ::HldRemoteSource;
   }
   static void *newArray_HldRemoteSource(Long_t nElements, void *p) {
      return p ? new(p) ::HldRemoteSource[nElements] : new ::HldRemoteSource[nElements];
   }
   // Wrapper around operator delete
   static void delete_HldRemoteSource(void *p) {
      delete ((::HldRemoteSource*)p);
   }
   static void deleteArray_HldRemoteSource(void *p) {
      delete [] ((::HldRemoteSource*)p);
   }
   static void destruct_HldRemoteSource(void *p) {
      typedef ::HldRemoteSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldRemoteSource(TBuffer &buf, void *obj) {
      ((::HldRemoteSource*)obj)->::HldRemoteSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldRemoteSource

//______________________________________________________________________________
void HldFileOutput::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldFileOutput.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HldFileOutput::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldFileOutput.
      TClass *R__cl = ::HldFileOutput::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*evt", &evt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numTotal", &numTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numFiltered", &numFiltered);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fout", &fout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDir", &fDir);
      R__insp.InspectMember(fDir, "fDir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fileSuffix", &fileSuffix);
      R__insp.InspectMember(fileSuffix, "fileSuffix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOption", &fOption);
      R__insp.InspectMember(fOption, "fOption.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padding[64]", padding);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HldFileOutput(void *p) {
      delete ((::HldFileOutput*)p);
   }
   static void deleteArray_HldFileOutput(void *p) {
      delete [] ((::HldFileOutput*)p);
   }
   static void destruct_HldFileOutput(void *p) {
      typedef ::HldFileOutput current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldFileOutput(TBuffer &buf, void *obj) {
      ((::HldFileOutput*)obj)->::HldFileOutput::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldFileOutput

//______________________________________________________________________________
void HGeantSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeantSource.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDataSource::Streamer(R__b);
      fReaderList.Streamer(R__b);
      fFileTable.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HGeantSource::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeantSource::IsA(), kTRUE);
      HDataSource::Streamer(R__b);
      fReaderList.Streamer(R__b);
      fFileTable.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeantSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeantSource.
      TClass *R__cl = ::HGeantSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReaderList", &fReaderList);
      R__insp.InspectMember(fReaderList, "fReaderList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileTable", &fFileTable);
      R__insp.InspectMember(fFileTable, "fFileTable.");
      HDataSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HGeantSource(void *p) {
      delete ((::HGeantSource*)p);
   }
   static void deleteArray_HGeantSource(void *p) {
      delete [] ((::HGeantSource*)p);
   }
   static void destruct_HGeantSource(void *p) {
      typedef ::HGeantSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeantSource(TBuffer &buf, void *obj) {
      ((::HGeantSource*)obj)->::HGeantSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeantSource

//______________________________________________________________________________
void HDirectSource::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDirectSource.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDataSource::Streamer(R__b);
      fReaderList.Streamer(R__b);
      R__b >> fCurrentRunId;
      R__b.CheckByteCount(R__s, R__c, HDirectSource::IsA());
   } else {
      R__c = R__b.WriteVersion(HDirectSource::IsA(), kTRUE);
      HDataSource::Streamer(R__b);
      fReaderList.Streamer(R__b);
      R__b << fCurrentRunId;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDirectSource::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDirectSource.
      TClass *R__cl = ::HDirectSource::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fReaderList", &fReaderList);
      R__insp.InspectMember(fReaderList, "fReaderList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentRunId", &fCurrentRunId);
      HDataSource::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HDirectSource(void *p) {
      delete ((::HDirectSource*)p);
   }
   static void deleteArray_HDirectSource(void *p) {
      delete [] ((::HDirectSource*)p);
   }
   static void destruct_HDirectSource(void *p) {
      typedef ::HDirectSource current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDirectSource(TBuffer &buf, void *obj) {
      ((::HDirectSource*)obj)->::HDirectSource::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDirectSource

//______________________________________________________________________________
void HldUnpack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HldUnpack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HldUnpack::IsA());
   } else {
      R__c = R__b.WriteVersion(HldUnpack::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HldUnpack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HldUnpack.
      TClass *R__cl = ::HldUnpack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSubEvt", &pSubEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRawCat", &pRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trbNetUnpacker", &trbNetUnpacker);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HldUnpack(void *p) {
      delete ((::HldUnpack*)p);
   }
   static void deleteArray_HldUnpack(void *p) {
      delete [] ((::HldUnpack*)p);
   }
   static void destruct_HldUnpack(void *p) {
      typedef ::HldUnpack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HldUnpack(TBuffer &buf, void *obj) {
      ((::HldUnpack*)obj)->::HldUnpack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HldUnpack

//______________________________________________________________________________
void HTrbLookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrbLookupChan.
      TClass *R__cl = ::HTrbLookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detector", &detector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "feAddress", &feAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrbLookupChan(void *p) {
      return  p ? new(p) ::HTrbLookupChan : new ::HTrbLookupChan;
   }
   static void *newArray_HTrbLookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HTrbLookupChan[nElements] : new ::HTrbLookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrbLookupChan(void *p) {
      delete ((::HTrbLookupChan*)p);
   }
   static void deleteArray_HTrbLookupChan(void *p) {
      delete [] ((::HTrbLookupChan*)p);
   }
   static void destruct_HTrbLookupChan(void *p) {
      typedef ::HTrbLookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrbLookupChan(TBuffer &buf, void *obj) {
      ((::HTrbLookupChan*)obj)->::HTrbLookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrbLookupChan

//______________________________________________________________________________
void HTrbLookupBoard::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrbLookupBoard.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HTrbLookupBoard::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrbLookupBoard::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrbLookupBoard::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrbLookupBoard.
      TClass *R__cl = ::HTrbLookupBoard::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrbLookupBoard(void *p) {
      return  p ? new(p) ::HTrbLookupBoard : new ::HTrbLookupBoard;
   }
   static void *newArray_HTrbLookupBoard(Long_t nElements, void *p) {
      return p ? new(p) ::HTrbLookupBoard[nElements] : new ::HTrbLookupBoard[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrbLookupBoard(void *p) {
      delete ((::HTrbLookupBoard*)p);
   }
   static void deleteArray_HTrbLookupBoard(void *p) {
      delete [] ((::HTrbLookupBoard*)p);
   }
   static void destruct_HTrbLookupBoard(void *p) {
      typedef ::HTrbLookupBoard current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrbLookupBoard(TBuffer &buf, void *obj) {
      ((::HTrbLookupBoard*)obj)->::HTrbLookupBoard::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrbLookupBoard

//______________________________________________________________________________
void HTrbLookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrbLookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HTrbLookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrbLookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrbLookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrbLookup.
      TClass *R__cl = ::HTrbLookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrbLookup(void *p) {
      return  p ? new(p) ::HTrbLookup : new ::HTrbLookup;
   }
   static void *newArray_HTrbLookup(Long_t nElements, void *p) {
      return p ? new(p) ::HTrbLookup[nElements] : new ::HTrbLookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrbLookup(void *p) {
      delete ((::HTrbLookup*)p);
   }
   static void deleteArray_HTrbLookup(void *p) {
      delete [] ((::HTrbLookup*)p);
   }
   static void destruct_HTrbLookup(void *p) {
      typedef ::HTrbLookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrbLookup(TBuffer &buf, void *obj) {
      ((::HTrbLookup*)obj)->::HTrbLookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrbLookup

//______________________________________________________________________________
void HTrbnetAddressMapping::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrbnetAddressMapping.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HTrbnetAddressMapping::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrbnetAddressMapping::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrbnetAddressMapping::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrbnetAddressMapping.
      TClass *R__cl = ::HTrbnetAddressMapping::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrbnetAddressMapping(void *p) {
      return  p ? new(p) ::HTrbnetAddressMapping : new ::HTrbnetAddressMapping;
   }
   static void *newArray_HTrbnetAddressMapping(Long_t nElements, void *p) {
      return p ? new(p) ::HTrbnetAddressMapping[nElements] : new ::HTrbnetAddressMapping[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrbnetAddressMapping(void *p) {
      delete ((::HTrbnetAddressMapping*)p);
   }
   static void deleteArray_HTrbnetAddressMapping(void *p) {
      delete [] ((::HTrbnetAddressMapping*)p);
   }
   static void destruct_HTrbnetAddressMapping(void *p) {
      typedef ::HTrbnetAddressMapping current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrbnetAddressMapping(TBuffer &buf, void *obj) {
      ((::HTrbnetAddressMapping*)obj)->::HTrbnetAddressMapping::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrbnetAddressMapping

//______________________________________________________________________________
void HTrb2Correction::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrb2Correction.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> const_cast<  Int_t &>( nValuesPerChannel );
      boardType.Streamer(R__b);
      R__b >> subeventId;
      R__b >> nChannels;
      R__b >> highResolutionFlag;
      corrData.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTrb2Correction::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrb2Correction::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << const_cast<  Int_t &>( nValuesPerChannel );
      boardType.Streamer(R__b);
      R__b << subeventId;
      R__b << nChannels;
      R__b << highResolutionFlag;
      corrData.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrb2Correction::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrb2Correction.
      TClass *R__cl = ::HTrb2Correction::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nValuesPerChannel", &nValuesPerChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "boardType", &boardType);
      R__insp.InspectMember(boardType, "boardType.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subeventId", &subeventId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChannels", &nChannels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "highResolutionFlag", &highResolutionFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrData", &corrData);
      R__insp.InspectMember(corrData, "corrData.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrb2Correction(void *p) {
      return  p ? new(p) ::HTrb2Correction : new ::HTrb2Correction;
   }
   static void *newArray_HTrb2Correction(Long_t nElements, void *p) {
      return p ? new(p) ::HTrb2Correction[nElements] : new ::HTrb2Correction[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrb2Correction(void *p) {
      delete ((::HTrb2Correction*)p);
   }
   static void deleteArray_HTrb2Correction(void *p) {
      delete [] ((::HTrb2Correction*)p);
   }
   static void destruct_HTrb2Correction(void *p) {
      typedef ::HTrb2Correction current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrb2Correction(TBuffer &buf, void *obj) {
      ((::HTrb2Correction*)obj)->::HTrb2Correction::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrb2Correction

//______________________________________________________________________________
void HTrb3CalparTdc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrb3CalparTdc.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> subEvtId;
      R__b >> nChannels;
      R__b >> nBinsPerChannel;
      R__b >> nEdgesMask;
      binsPar.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTrb3CalparTdc::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrb3CalparTdc::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << subEvtId;
      R__b << nChannels;
      R__b << nBinsPerChannel;
      R__b << nEdgesMask;
      binsPar.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrb3CalparTdc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrb3CalparTdc.
      TClass *R__cl = ::HTrb3CalparTdc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChannels", &nChannels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinsPerChannel", &nBinsPerChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEdgesMask", &nEdgesMask);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "binsPar", &binsPar);
      R__insp.InspectMember(binsPar, "binsPar.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrb3CalparTdc(void *p) {
      return  p ? new(p) ::HTrb3CalparTdc : new ::HTrb3CalparTdc;
   }
   static void *newArray_HTrb3CalparTdc(Long_t nElements, void *p) {
      return p ? new(p) ::HTrb3CalparTdc[nElements] : new ::HTrb3CalparTdc[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrb3CalparTdc(void *p) {
      delete ((::HTrb3CalparTdc*)p);
   }
   static void deleteArray_HTrb3CalparTdc(void *p) {
      delete [] ((::HTrb3CalparTdc*)p);
   }
   static void destruct_HTrb3CalparTdc(void *p) {
      typedef ::HTrb3CalparTdc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrb3CalparTdc(TBuffer &buf, void *obj) {
      ((::HTrb3CalparTdc*)obj)->::HTrb3CalparTdc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrb3CalparTdc

//______________________________________________________________________________
void HTrb3Calpar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrb3Calpar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HTrb3Calpar::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrb3Calpar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrb3Calpar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrb3Calpar.
      TClass *R__cl = ::HTrb3Calpar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrb3Calpar(void *p) {
      return  p ? new(p) ::HTrb3Calpar : new ::HTrb3Calpar;
   }
   static void *newArray_HTrb3Calpar(Long_t nElements, void *p) {
      return p ? new(p) ::HTrb3Calpar[nElements] : new ::HTrb3Calpar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrb3Calpar(void *p) {
      delete ((::HTrb3Calpar*)p);
   }
   static void deleteArray_HTrb3Calpar(void *p) {
      delete [] ((::HTrb3Calpar*)p);
   }
   static void destruct_HTrb3Calpar(void *p) {
      typedef ::HTrb3Calpar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrb3Calpar(TBuffer &buf, void *obj) {
      ((::HTrb3Calpar*)obj)->::HTrb3Calpar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrb3Calpar

//______________________________________________________________________________
void HTrbBaseUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrbBaseUnpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HTrbBaseUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrbBaseUnpacker.
      TClass *R__cl = ::HTrbBaseUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbDataVer", &trbDataVer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbLeadingTime[128][10]", trbLeadingTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbTrailingTime[128][10]", trbTrailingTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbADC[128][10]", trbADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbLeadingMult[128]", trbLeadingMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbTrailingMult[128]", trbTrailingMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbTrailingTotalMult[128]", trbTrailingTotalMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbDataExtension[128]", trbDataExtension);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbExtensionSize", &trbExtensionSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbDataPairFlag", &trbDataPairFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugFlag", &debugFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quietMode", &quietMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reportCritical", &reportCritical);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HTrbBaseUnpacker(TBuffer &buf, void *obj) {
      ((::HTrbBaseUnpacker*)obj)->::HTrbBaseUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrbBaseUnpacker

//______________________________________________________________________________
void HTrb2Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrb2Unpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HTrb2Unpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrb2Unpacker.
      TClass *R__cl = ::HTrb2Unpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trbinlcorr", &trbinlcorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*trbaddressmap", &trbaddressmap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uStartPosition", &uStartPosition);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uTrbNetAdress", &uTrbNetAdress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uSubBlockSize", &uSubBlockSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCountWords", &nCountWords);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbDataVer", &trbDataVer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugFlag", &debugFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quietMode", &quietMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reportCritical", &reportCritical);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "correctINL", &correctINL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "correctINLboard", &correctINLboard);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "highResModeOn", &highResModeOn);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbDataPairFlag", &trbDataPairFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbLeadingTime[128][10]", trbLeadingTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbTrailingTime[128][10]", trbTrailingTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbADC[128][10]", trbADC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbExtensionSize", &trbExtensionSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbLeadingMult[128]", trbLeadingMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbTrailingMult[128]", trbTrailingMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbTrailingTotalMult[128]", trbTrailingTotalMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trbDataExtension[128]", trbDataExtension);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tryRecover_1", &tryRecover_1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tryRecover_2", &tryRecover_2);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HTrb2Unpacker(TBuffer &buf, void *obj) {
      ((::HTrb2Unpacker*)obj)->::HTrb2Unpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrb2Unpacker

//______________________________________________________________________________
void HTrb3Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrb3Unpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HTrb3Unpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrb3Unpacker.
      TClass *R__cl = ::HTrb3Unpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uHUBId", &uHUBId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uCTSId", &uCTSId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugFlag", &debugFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quietMode", &quietMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reportCritical", &reportCritical);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calpar", &calpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTDCs", (void*)&fTDCs);
      R__insp.InspectMember("vector<HTrb3TdcUnpacker*>", (void*)&fTDCs, "fTDCs.", true);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around a custom streamer member function.
   static void streamer_HTrb3Unpacker(TBuffer &buf, void *obj) {
      ((::HTrb3Unpacker*)obj)->::HTrb3Unpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrb3Unpacker

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrb3TdcMessage(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HTrb3TdcMessage : new ::HTrb3TdcMessage;
   }
   static void *newArray_HTrb3TdcMessage(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HTrb3TdcMessage[nElements] : new ::HTrb3TdcMessage[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrb3TdcMessage(void *p) {
      delete ((::HTrb3TdcMessage*)p);
   }
   static void deleteArray_HTrb3TdcMessage(void *p) {
      delete [] ((::HTrb3TdcMessage*)p);
   }
   static void destruct_HTrb3TdcMessage(void *p) {
      typedef ::HTrb3TdcMessage current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::HTrb3TdcMessage

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrb3TdcIterator(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HTrb3TdcIterator : new ::HTrb3TdcIterator;
   }
   static void *newArray_HTrb3TdcIterator(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HTrb3TdcIterator[nElements] : new ::HTrb3TdcIterator[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrb3TdcIterator(void *p) {
      delete ((::HTrb3TdcIterator*)p);
   }
   static void deleteArray_HTrb3TdcIterator(void *p) {
      delete [] ((::HTrb3TdcIterator*)p);
   }
   static void destruct_HTrb3TdcIterator(void *p) {
      typedef ::HTrb3TdcIterator current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::HTrb3TdcIterator

//______________________________________________________________________________
void HTrb3TdcUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrb3TdcUnpacker.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HTrb3TdcUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrb3TdcUnpacker.
      TClass *R__cl = ::HTrb3TdcUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fUnpacker", &fUnpacker);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTdcId", &fTdcId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*tdcpar", &tdcpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCh", (void*)&fCh);
      R__insp.InspectMember("vector<ChannelRec>", (void*)&fCh, "fCh.", true);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrb3TdcUnpacker(void *p) {
      return  p ? new(p) ::HTrb3TdcUnpacker : new ::HTrb3TdcUnpacker;
   }
   static void *newArray_HTrb3TdcUnpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HTrb3TdcUnpacker[nElements] : new ::HTrb3TdcUnpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrb3TdcUnpacker(void *p) {
      delete ((::HTrb3TdcUnpacker*)p);
   }
   static void deleteArray_HTrb3TdcUnpacker(void *p) {
      delete [] ((::HTrb3TdcUnpacker*)p);
   }
   static void destruct_HTrb3TdcUnpacker(void *p) {
      typedef ::HTrb3TdcUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrb3TdcUnpacker(TBuffer &buf, void *obj) {
      ((::HTrb3TdcUnpacker*)obj)->::HTrb3TdcUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrb3TdcUnpacker

//______________________________________________________________________________
void HGeantReader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeantReader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fInputFile;
      R__b.CheckByteCount(R__s, R__c, HGeantReader::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeantReader::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fInputFile;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeantReader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeantReader.
      TClass *R__cl = ::HGeantReader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fInputFile", &fInputFile);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeantReader(void *p) {
      return  p ? new(p) ::HGeantReader : new ::HGeantReader;
   }
   static void *newArray_HGeantReader(Long_t nElements, void *p) {
      return p ? new(p) ::HGeantReader[nElements] : new ::HGeantReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeantReader(void *p) {
      delete ((::HGeantReader*)p);
   }
   static void deleteArray_HGeantReader(void *p) {
      delete [] ((::HGeantReader*)p);
   }
   static void destruct_HGeantReader(void *p) {
      typedef ::HGeantReader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeantReader(TBuffer &buf, void *obj) {
      ((::HGeantReader*)obj)->::HGeantReader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeantReader

//______________________________________________________________________________
void HKineGeantReader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HKineGeantReader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HGeantReader::Streamer(R__b);
      R__b >> fEventId;
      R__b >> t;
      R__b.CheckByteCount(R__s, R__c, HKineGeantReader::IsA());
   } else {
      R__c = R__b.WriteVersion(HKineGeantReader::IsA(), kTRUE);
      HGeantReader::Streamer(R__b);
      R__b << fEventId;
      R__b << t;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HKineGeantReader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HKineGeantReader.
      TClass *R__cl = ::HKineGeantReader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantKineCat", &fGeantKineCat);
      HGeantReader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HKineGeantReader(void *p) {
      return  p ? new(p) ::HKineGeantReader : new ::HKineGeantReader;
   }
   static void *newArray_HKineGeantReader(Long_t nElements, void *p) {
      return p ? new(p) ::HKineGeantReader[nElements] : new ::HKineGeantReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HKineGeantReader(void *p) {
      delete ((::HKineGeantReader*)p);
   }
   static void deleteArray_HKineGeantReader(void *p) {
      delete [] ((::HKineGeantReader*)p);
   }
   static void destruct_HKineGeantReader(void *p) {
      typedef ::HKineGeantReader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HKineGeantReader(TBuffer &buf, void *obj) {
      ((::HKineGeantReader*)obj)->::HKineGeantReader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HKineGeantReader

//______________________________________________________________________________
void HSimulGeantReader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSimulGeantReader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HGeantReader::Streamer(R__b);
      R__b >> fEventId;
      R__b >> t;
      R__b.CheckByteCount(R__s, R__c, HSimulGeantReader::IsA());
   } else {
      R__c = R__b.WriteVersion(HSimulGeantReader::IsA(), kTRUE);
      HGeantReader::Streamer(R__b);
      R__b << fEventId;
      R__b << t;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSimulGeantReader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSimulGeantReader.
      TClass *R__cl = ::HSimulGeantReader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSimEv", &fSimEv);
      HGeantReader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSimulGeantReader(void *p) {
      return  p ? new(p) ::HSimulGeantReader : new ::HSimulGeantReader;
   }
   static void *newArray_HSimulGeantReader(Long_t nElements, void *p) {
      return p ? new(p) ::HSimulGeantReader[nElements] : new ::HSimulGeantReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSimulGeantReader(void *p) {
      delete ((::HSimulGeantReader*)p);
   }
   static void deleteArray_HSimulGeantReader(void *p) {
      delete [] ((::HSimulGeantReader*)p);
   }
   static void destruct_HSimulGeantReader(void *p) {
      typedef ::HSimulGeantReader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSimulGeantReader(TBuffer &buf, void *obj) {
      ((::HSimulGeantReader*)obj)->::HSimulGeantReader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSimulGeantReader

//______________________________________________________________________________
void HTrbNetUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrbNetUnpacker.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HTrbNetUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrbNetUnpacker.
      TClass *R__cl = ::HTrbNetUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "initialized", &initialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rtdb", &rtdb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*debugInfo", &debugInfo);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrbNetUnpacker(void *p) {
      return  p ? new(p) ::HTrbNetUnpacker : new ::HTrbNetUnpacker;
   }
   static void *newArray_HTrbNetUnpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HTrbNetUnpacker[nElements] : new ::HTrbNetUnpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrbNetUnpacker(void *p) {
      delete ((::HTrbNetUnpacker*)p);
   }
   static void deleteArray_HTrbNetUnpacker(void *p) {
      delete [] ((::HTrbNetUnpacker*)p);
   }
   static void destruct_HTrbNetUnpacker(void *p) {
      typedef ::HTrbNetUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrbNetUnpacker(TBuffer &buf, void *obj) {
      ((::HTrbNetUnpacker*)obj)->::HTrbNetUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrbNetUnpacker

//______________________________________________________________________________
void HTrbNetDebugInfo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrbNetDebugInfo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> address;
      R__b >> statusWord;
      R__b.CheckByteCount(R__s, R__c, HTrbNetDebugInfo::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrbNetDebugInfo::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << address;
      R__b << statusWord;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrbNetDebugInfo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrbNetDebugInfo.
      TClass *R__cl = ::HTrbNetDebugInfo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusWord", &statusWord);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrbNetDebugInfo(void *p) {
      return  p ? new(p) ::HTrbNetDebugInfo : new ::HTrbNetDebugInfo;
   }
   static void *newArray_HTrbNetDebugInfo(Long_t nElements, void *p) {
      return p ? new(p) ::HTrbNetDebugInfo[nElements] : new ::HTrbNetDebugInfo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrbNetDebugInfo(void *p) {
      delete ((::HTrbNetDebugInfo*)p);
   }
   static void deleteArray_HTrbNetDebugInfo(void *p) {
      delete [] ((::HTrbNetDebugInfo*)p);
   }
   static void destruct_HTrbNetDebugInfo(void *p) {
      typedef ::HTrbNetDebugInfo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrbNetDebugInfo(TBuffer &buf, void *obj) {
      ((::HTrbNetDebugInfo*)obj)->::HTrbNetDebugInfo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrbNetDebugInfo

namespace ROOTDict {
   void vectorlEHParallelEventmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEHParallelEventmUgR_Dictionary();
   static void *new_vectorlEHParallelEventmUgR(void *p = 0);
   static void *newArray_vectorlEHParallelEventmUgR(Long_t size, void *p);
   static void delete_vectorlEHParallelEventmUgR(void *p);
   static void deleteArray_vectorlEHParallelEventmUgR(void *p);
   static void destruct_vectorlEHParallelEventmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<HParallelEvent*>*)
   {
      vector<HParallelEvent*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<HParallelEvent*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<HParallelEvent*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<HParallelEvent*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEHParallelEventmUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<HParallelEvent*>) );
      instance.SetNew(&new_vectorlEHParallelEventmUgR);
      instance.SetNewArray(&newArray_vectorlEHParallelEventmUgR);
      instance.SetDelete(&delete_vectorlEHParallelEventmUgR);
      instance.SetDeleteArray(&deleteArray_vectorlEHParallelEventmUgR);
      instance.SetDestructor(&destruct_vectorlEHParallelEventmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<HParallelEvent*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<HParallelEvent*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEHParallelEventmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<HParallelEvent*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEHParallelEventmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HParallelEvent*> : new vector<HParallelEvent*>;
   }
   static void *newArray_vectorlEHParallelEventmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HParallelEvent*>[nElements] : new vector<HParallelEvent*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEHParallelEventmUgR(void *p) {
      delete ((vector<HParallelEvent*>*)p);
   }
   static void deleteArray_vectorlEHParallelEventmUgR(void *p) {
      delete [] ((vector<HParallelEvent*>*)p);
   }
   static void destruct_vectorlEHParallelEventmUgR(void *p) {
      typedef vector<HParallelEvent*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<HParallelEvent*>

/********************************************************
* ../build/pc/DataSourceDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDataSourceDict();

extern "C" void G__set_cpp_environmentDataSourceDict() {
  G__cpp_reset_tagtableDataSourceDict();
}
#include <new>
extern "C" int G__cpp_dllrevDataSourceDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HDataSource */
static int G__DataSourceDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDataSource*) G__getstructoffset())->setEventAddress((HEvent**) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDataSource*) G__getstructoffset())->forceID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDataSource*) G__getstructoffset())->skipEvents((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HDataSource*) G__getstructoffset())->getNextEvent((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HDataSource*) G__getstructoffset())->getNextEvent());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDataSource*) G__getstructoffset())->setCursorToPreviousEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDataSource*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDataSource*) G__getstructoffset())->reinit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDataSource*) G__getstructoffset())->finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDataSource*) G__getstructoffset())->rewind());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDataSource*) G__getstructoffset())->getCurrentRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDataSource*) G__getstructoffset())->getCurrentRefId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HDataSource*) G__getstructoffset())->getCurrentFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDataSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDataSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDataSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDataSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDataSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDataSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDataSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDataSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDataSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDataSource G__THDataSource;
static int G__DataSourceDict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDataSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDataSource*) (soff+(sizeof(HDataSource)*i)))->~G__THDataSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDataSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDataSource*) (soff))->~G__THDataSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_170_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDataSource* dest = (HDataSource*) G__getstructoffset();
   *dest = *(HDataSource*) libp->para[0].ref;
   const HDataSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeantReader */
static int G__DataSourceDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeantReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeantReader[n];
     } else {
       p = new((void*) gvp) HGeantReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeantReader;
     } else {
       p = new((void*) gvp) HGeantReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeantReader*) G__getstructoffset())->execute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeantReader*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeantReader*) G__getstructoffset())->finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeantReader*) G__getstructoffset())->setInput((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeantReader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantReader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeantReader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeantReader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeantReader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantReader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantReader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantReader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_230_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantReader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_230_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeantReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeantReader(*(HGeantReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeantReader G__THGeantReader;
static int G__DataSourceDict_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeantReader*) (soff+(sizeof(HGeantReader)*i)))->~G__THGeantReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeantReader*) (soff))->~G__THGeantReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeantReader* dest = (HGeantReader*) G__getstructoffset();
   *dest = *(HGeantReader*) libp->para[0].ref;
   const HGeantReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeantSource */
static int G__DataSourceDict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeantSource*) G__getstructoffset())->addGeantReader((HGeantReader*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeantSource*) G__getstructoffset())->getNextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeantSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeantSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeantSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeantSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_231_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeantSource G__THGeantSource;
static int G__DataSourceDict_231_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeantSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeantSource*) (soff+(sizeof(HGeantSource)*i)))->~G__THGeantSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeantSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeantSource*) (soff))->~G__THGeantSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRootSource */
static int G__DataSourceDict_540_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRootSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRootSource((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRootSource((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRootSource((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRootSource((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRootSource[n];
       } else {
         p = new((void*) gvp) HRootSource[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRootSource;
       } else {
         p = new((void*) gvp) HRootSource;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->setEventList((TEventList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRootSource*) G__getstructoffset())->getGlobalRefId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->setCurrentRunId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->setRefId((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->setGlobalRefId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRootSource*) G__getstructoffset())->getEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->setDirectory((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRootSource*) G__getstructoffset())->addFile((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRootSource*) G__getstructoffset())->setInput((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRootSource*) G__getstructoffset())->disableCategory((Cat_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->deactivateBranch((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRootSource*) G__getstructoffset())->disablePartialEvent((Cat_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRootSource*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRootSource*) G__getstructoffset())->getChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRootSource*) G__getstructoffset())->getSplitLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->Print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HRootSource*) G__getstructoffset())->replaceHeaderVersion((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HRootSource*) G__getstructoffset())->replaceHeaderVersion((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRootSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRootSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRootSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRootSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRootSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRootSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRootSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRootSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_540_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRootSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_540_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRootSource* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRootSource(*(HRootSource*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRootSource G__THRootSource;
static int G__DataSourceDict_540_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRootSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRootSource*) (soff+(sizeof(HRootSource)*i)))->~G__THRootSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRootSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRootSource*) (soff))->~G__THRootSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_540_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRootSource* dest = (HRootSource*) G__getstructoffset();
   *dest = *(HRootSource*) libp->para[0].ref;
   const HRootSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeantMergeSource */
static int G__DataSourceDict_561_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeantMergeSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeantMergeSource((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HGeantMergeSource((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeantMergeSource((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeantMergeSource((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeantMergeSource[n];
       } else {
         p = new((void*) gvp) HGeantMergeSource[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeantMergeSource;
       } else {
         p = new((void*) gvp) HGeantMergeSource;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HGeantMergeSource*) G__getstructoffset())->addFile((const Text_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HGeantMergeSource*) G__getstructoffset())->addFile((const Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeantMergeSource*) G__getstructoffset())->addMultFiles(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HGeantMergeSource*) G__getstructoffset())->addAdditionalInput(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HGeantMergeSource*) G__getstructoffset())->addAdditionalInput(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeantMergeSource*) G__getstructoffset())->createGeantEvent((HRecEvent*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeantMergeSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantMergeSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeantMergeSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeantMergeSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeantMergeSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantMergeSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantMergeSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantMergeSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_561_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantMergeSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_561_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeantMergeSource* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeantMergeSource(*(HGeantMergeSource*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeantMergeSource G__THGeantMergeSource;
static int G__DataSourceDict_561_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeantMergeSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeantMergeSource*) (soff+(sizeof(HGeantMergeSource)*i)))->~G__THGeantMergeSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeantMergeSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeantMergeSource*) (soff))->~G__THGeantMergeSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_561_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeantMergeSource* dest = (HGeantMergeSource*) G__getstructoffset();
   *dest = *(HGeantMergeSource*) libp->para[0].ref;
   const HGeantMergeSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrbNetUnpacker */
static int G__DataSourceDict_570_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbNetUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbNetUnpacker[n];
     } else {
       p = new((void*) gvp) HTrbNetUnpacker[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbNetUnpacker;
     } else {
       p = new((void*) gvp) HTrbNetUnpacker;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbNetUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTrbNetUnpacker(*(HTrbNetUnpacker*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HTrbNetUnpacker(*(HTrbNetUnpacker*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbNetUnpacker*) G__getstructoffset())->execute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbNetUnpacker*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbNetUnpacker*) G__getstructoffset())->reinit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbNetUnpacker*) G__getstructoffset())->finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HTrbNetUnpacker*) G__getstructoffset())->unpackData((UInt_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HTrbNetUnpacker*) G__getstructoffset())->unpackData((UInt_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrbNetUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbNetUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrbNetUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrbNetUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbNetUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbNetUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbNetUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbNetUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_570_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbNetUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrbNetUnpacker G__THTrbNetUnpacker;
static int G__DataSourceDict_570_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrbNetUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrbNetUnpacker*) (soff+(sizeof(HTrbNetUnpacker)*i)))->~G__THTrbNetUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrbNetUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrbNetUnpacker*) (soff))->~G__THTrbNetUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_570_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbNetUnpacker* dest = (HTrbNetUnpacker*) G__getstructoffset();
   *dest = *(HTrbNetUnpacker*) libp->para[0].ref;
   const HTrbNetUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldUnpack */
static int G__DataSourceDict_571_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HldUnpack*) G__getstructoffset())->getSubEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HldUnpack*) G__getstructoffset())->getpSubEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldUnpack*) G__getstructoffset())->execute());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldUnpack*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldUnpack*) G__getstructoffset())->reinit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldUnpack*) G__getstructoffset())->finalize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldUnpack*) G__getstructoffset())->setCategory((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HldUnpack*) G__getstructoffset())->decodeTrbNet((UInt_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HldUnpack*) G__getstructoffset())->decodeTrbNet((UInt_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldUnpack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldUnpack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldUnpack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldUnpack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldUnpack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldUnpack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldUnpack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldUnpack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_571_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldUnpack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldUnpack G__THldUnpack;
static int G__DataSourceDict_571_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldUnpack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldUnpack*) (soff+(sizeof(HldUnpack)*i)))->~G__THldUnpack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldUnpack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldUnpack*) (soff))->~G__THldUnpack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_571_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldUnpack* dest = (HldUnpack*) G__getstructoffset();
   *dest = *(HldUnpack*) libp->para[0].ref;
   const HldUnpack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldSource */
static int G__DataSourceDict_580_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldSource*) G__getstructoffset())->initUnpacker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldSource*) G__getstructoffset())->finalizeUnpacker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldSource*) G__getstructoffset())->addUnpacker((HldUnpack*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldSource*) G__getstructoffset())->showIt((HldEvt*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldSource*) G__getstructoffset())->dumpEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldSource*) G__getstructoffset())->scanIt((HldEvt*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldSource*) G__getstructoffset())->scanEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldSource*) G__getstructoffset())->getDecodingStyle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HldSource*) G__getstructoffset())->setOldDecodingStyle((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HldSource*) G__getstructoffset())->setOldDecodingStyle();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HldSource*) G__getstructoffset())->setScanned((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HldSource*) G__getstructoffset())->setScanned();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HldSource*) G__getstructoffset())->getTrbNetUnpacker());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldSource*) G__getstructoffset())->setDump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_580_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldSource G__THldSource;
static int G__DataSourceDict_580_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldSource*) (soff+(sizeof(HldSource)*i)))->~G__THldSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldSource*) (soff))->~G__THldSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_580_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldSource* dest = (HldSource*) G__getstructoffset();
   *dest = *(HldSource*) libp->para[0].ref;
   const HldSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldFileOutput */
static int G__DataSourceDict_581_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldFileOutput* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldFileOutput(
(HldSource*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HldFileOutput(
(HldSource*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Option_t*) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldFileOutput(
(HldSource*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HldFileOutput(
(HldSource*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileOutput*) G__getstructoffset())->setHldSource((HldSource*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileOutput*) G__getstructoffset())->setDirectory((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileOutput*) G__getstructoffset())->setFileSuffix((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HldFileOutput*) G__getstructoffset())->setFileOption((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HldFileOutput*) G__getstructoffset())->setFileOption();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldFileOutput*) G__getstructoffset())->open((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileOutput*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileOutput*) G__getstructoffset())->writeEvent();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HldFileOutput*) G__getstructoffset())->getNumTotalEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HldFileOutput*) G__getstructoffset())->getNumFilteredEvt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldFileOutput::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileOutput::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldFileOutput::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldFileOutput::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileOutput*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileOutput::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileOutput::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileOutput::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_581_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileOutput::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_581_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HldFileOutput* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HldFileOutput(*(HldFileOutput*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldFileOutput G__THldFileOutput;
static int G__DataSourceDict_581_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldFileOutput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldFileOutput*) (soff+(sizeof(HldFileOutput)*i)))->~G__THldFileOutput();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldFileOutput*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldFileOutput*) (soff))->~G__THldFileOutput();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_581_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldFileOutput* dest = (HldFileOutput*) G__getstructoffset();
   *dest = *(HldFileOutput*) libp->para[0].ref;
   const HldFileOutput& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldFileDesc */
static int G__DataSourceDict_582_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldFileDesc* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldFileDesc(
(const Text_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HldFileDesc(
(const Text_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldFileDesc((const Text_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HldFileDesc((const Text_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldFileDesc*) G__getstructoffset())->getRunId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldFileDesc*) G__getstructoffset())->getRefId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileDesc*) G__getstructoffset())->setRefId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldFileDesc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileDesc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldFileDesc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldFileDesc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileDesc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileDesc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileDesc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileDesc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_582_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileDesc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_582_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HldFileDesc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HldFileDesc(*(HldFileDesc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldFileDesc G__THldFileDesc;
static int G__DataSourceDict_582_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldFileDesc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldFileDesc*) (soff+(sizeof(HldFileDesc)*i)))->~G__THldFileDesc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldFileDesc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldFileDesc*) (soff))->~G__THldFileDesc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_582_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldFileDesc* dest = (HldFileDesc*) G__getstructoffset();
   *dest = *(HldFileDesc*) libp->para[0].ref;
   const HldFileDesc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldFileSourceBase */
static int G__DataSourceDict_583_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileSourceBase*) G__getstructoffset())->setMaxEventPerFile((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HldFileSourceBase*) G__getstructoffset())->getNextFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HldFileSourceBase*) G__getstructoffset())->getListOfFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HldFileSourceBase*) G__getstructoffset())->getRunId((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileSourceBase*) G__getstructoffset())->addFile((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HldFileSourceBase*) G__getstructoffset())->addFile((const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HldFileSourceBase*) G__getstructoffset())->addFile((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileSourceBase*) G__getstructoffset())->setDirectory((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldFileSourceBase::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileSourceBase::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldFileSourceBase::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldFileSourceBase::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileSourceBase*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileSourceBase::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileSourceBase::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileSourceBase::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_583_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileSourceBase::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldFileSourceBase G__THldFileSourceBase;
static int G__DataSourceDict_583_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldFileSourceBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldFileSourceBase*) (soff+(sizeof(HldFileSourceBase)*i)))->~G__THldFileSourceBase();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldFileSourceBase*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldFileSourceBase*) (soff))->~G__THldFileSourceBase();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldFileSource */
static int G__DataSourceDict_584_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldFileSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldFileSource[n];
     } else {
       p = new((void*) gvp) HldFileSource[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldFileSource;
     } else {
       p = new((void*) gvp) HldFileSource;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldFileSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HldFileSource(*(HldFileSource*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HldFileSource(*(HldFileSource*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileSource*) G__getstructoffset())->setMaxEventPerFile((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldFileSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldFileSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldFileSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldFileSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldFileSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_584_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldFileSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldFileSource G__THldFileSource;
static int G__DataSourceDict_584_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldFileSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldFileSource*) (soff+(sizeof(HldFileSource)*i)))->~G__THldFileSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldFileSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldFileSource*) (soff))->~G__THldFileSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HKineGeantReader */
static int G__DataSourceDict_588_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HKineGeantReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HKineGeantReader[n];
     } else {
       p = new((void*) gvp) HKineGeantReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HKineGeantReader;
     } else {
       p = new((void*) gvp) HKineGeantReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HKineGeantReader*) G__getstructoffset())->getGeantKineCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HKineGeantReader*) G__getstructoffset())->getGeantKine(*((HLocation*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HKineGeantReader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HKineGeantReader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HKineGeantReader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HKineGeantReader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HKineGeantReader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HKineGeantReader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HKineGeantReader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HKineGeantReader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_588_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HKineGeantReader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_588_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HKineGeantReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HKineGeantReader(*(HKineGeantReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HKineGeantReader G__THKineGeantReader;
static int G__DataSourceDict_588_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HKineGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HKineGeantReader*) (soff+(sizeof(HKineGeantReader)*i)))->~G__THKineGeantReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HKineGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HKineGeantReader*) (soff))->~G__THKineGeantReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_588_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HKineGeantReader* dest = (HKineGeantReader*) G__getstructoffset();
   *dest = *(HKineGeantReader*) libp->para[0].ref;
   const HKineGeantReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSimulGeantReader */
static int G__DataSourceDict_589_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSimulGeantReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSimulGeantReader[n];
     } else {
       p = new((void*) gvp) HSimulGeantReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSimulGeantReader;
     } else {
       p = new((void*) gvp) HSimulGeantReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSimulGeantReader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSimulGeantReader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSimulGeantReader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSimulGeantReader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSimulGeantReader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSimulGeantReader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSimulGeantReader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSimulGeantReader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_589_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSimulGeantReader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_589_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSimulGeantReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSimulGeantReader(*(HSimulGeantReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSimulGeantReader G__THSimulGeantReader;
static int G__DataSourceDict_589_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSimulGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSimulGeantReader*) (soff+(sizeof(HSimulGeantReader)*i)))->~G__THSimulGeantReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSimulGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSimulGeantReader*) (soff))->~G__THSimulGeantReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_589_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSimulGeantReader* dest = (HSimulGeantReader*) G__getstructoffset();
   *dest = *(HSimulGeantReader*) libp->para[0].ref;
   const HSimulGeantReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HDirectSource */
static int G__DataSourceDict_590_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDirectSource*) G__getstructoffset())->addGeantReader((HGeantReader*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDirectSource*) G__getstructoffset())->getNextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDirectSource*) G__getstructoffset())->setCurrentRunId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDirectSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDirectSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDirectSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDirectSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDirectSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDirectSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDirectSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDirectSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_590_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDirectSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDirectSource G__THDirectSource;
static int G__DataSourceDict_590_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDirectSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDirectSource*) (soff+(sizeof(HDirectSource)*i)))->~G__THDirectSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDirectSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDirectSource*) (soff))->~G__THDirectSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldRemoteSource */
static int G__DataSourceDict_591_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldRemoteSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldRemoteSource[n];
     } else {
       p = new((void*) gvp) HldRemoteSource[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldRemoteSource;
     } else {
       p = new((void*) gvp) HldRemoteSource;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldRemoteSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HldRemoteSource((const Text_t*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HldRemoteSource((const Text_t*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldRemoteSource*) G__getstructoffset())->setRefId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HldRemoteSource*) G__getstructoffset())->getNodeName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldRemoteSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldRemoteSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldRemoteSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldRemoteSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldRemoteSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldRemoteSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldRemoteSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldRemoteSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_591_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldRemoteSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_591_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HldRemoteSource* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HldRemoteSource(*(HldRemoteSource*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldRemoteSource G__THldRemoteSource;
static int G__DataSourceDict_591_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldRemoteSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldRemoteSource*) (soff+(sizeof(HldRemoteSource)*i)))->~G__THldRemoteSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldRemoteSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldRemoteSource*) (soff))->~G__THldRemoteSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_591_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldRemoteSource* dest = (HldRemoteSource*) G__getstructoffset();
   *dest = *(HldRemoteSource*) libp->para[0].ref;
   const HldRemoteSource& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HldGrepFileSource */
static int G__DataSourceDict_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HldGrepFileSource* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     } else {
       p = new((void*) gvp) HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HldGrepFileSource(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldGrepFileSource(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) HldGrepFileSource(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HldGrepFileSource(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HldGrepFileSource(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HldGrepFileSource[n];
       } else {
         p = new((void*) gvp) HldGrepFileSource[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HldGrepFileSource;
       } else {
         p = new((void*) gvp) HldGrepFileSource;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldGrepFileSource*) G__getstructoffset())->setMaxEventPerFile((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HldGrepFileSource*) G__getstructoffset())->setRefId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HldGrepFileSource*) G__getstructoffset())->setRefId();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldGrepFileSource*) G__getstructoffset())->stop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HldGrepFileSource::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldGrepFileSource::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HldGrepFileSource::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HldGrepFileSource::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HldGrepFileSource*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldGrepFileSource::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldGrepFileSource::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HldGrepFileSource::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_594_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HldGrepFileSource::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HldGrepFileSource G__THldGrepFileSource;
static int G__DataSourceDict_594_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HldGrepFileSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HldGrepFileSource*) (soff+(sizeof(HldGrepFileSource)*i)))->~G__THldGrepFileSource();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HldGrepFileSource*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HldGrepFileSource*) (soff))->~G__THldGrepFileSource();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrbLookup */
static int G__DataSourceDict_595_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbLookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HTrbLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HTrbLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTrbLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTrbLookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTrbLookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrbLookup[n];
       } else {
         p = new((void*) gvp) HTrbLookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrbLookup;
       } else {
         p = new((void*) gvp) HTrbLookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrbLookup*) G__getstructoffset())->getBoard((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrbLookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbLookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbLookup*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbLookup*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Char_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbLookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookup*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrbLookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrbLookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrbLookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbLookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_595_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbLookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_595_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrbLookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrbLookup(*(HTrbLookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrbLookup G__THTrbLookup;
static int G__DataSourceDict_595_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrbLookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrbLookup*) (soff+(sizeof(HTrbLookup)*i)))->~G__THTrbLookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrbLookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrbLookup*) (soff))->~G__THTrbLookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_595_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbLookup* dest = (HTrbLookup*) G__getstructoffset();
   *dest = *(HTrbLookup*) libp->para[0].ref;
   const HTrbLookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrbBaseUnpacker */
static int G__DataSourceDict_596_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTrbBaseUnpacker*) G__getstructoffset())->getTrbDataVer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->decode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->correctOverflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->correctRefTimeCh31());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->correctRefTimeCh127());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbBaseUnpacker*) G__getstructoffset())->clearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbBaseUnpacker*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbBaseUnpacker*) G__getstructoffset())->setReportCritical();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbBaseUnpacker*) G__getstructoffset())->setDebugFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->getDebugFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbBaseUnpacker*) G__getstructoffset())->PrintTdcError((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->fill_trail((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->fill_lead((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbBaseUnpacker*) G__getstructoffset())->fill_pair((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrbBaseUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbBaseUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrbBaseUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrbBaseUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbBaseUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbBaseUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbBaseUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbBaseUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_596_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbBaseUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_596_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrbBaseUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrbBaseUnpacker(*(HTrbBaseUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_596_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbBaseUnpacker* dest = (HTrbBaseUnpacker*) G__getstructoffset();
   *dest = *(HTrbBaseUnpacker*) libp->para[0].ref;
   const HTrbBaseUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb2Correction */
static int G__DataSourceDict_597_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb2Correction* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb2Correction((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTrb2Correction((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrb2Correction[n];
       } else {
         p = new((void*) gvp) HTrb2Correction[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrb2Correction;
       } else {
         p = new((void*) gvp) HTrb2Correction;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Correction*) G__getstructoffset())->getNChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Correction*) G__getstructoffset())->getHighResolutionFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrb2Correction*) G__getstructoffset())->isHighResolution());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HTrb2Correction*) G__getstructoffset())->getBoardType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Correction*) G__getstructoffset())->getSubeventId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Correction*) G__getstructoffset())->getNValuesPerChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Correction*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTrb2Correction*) G__getstructoffset())->getCorrection((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->setBoardType((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->setHighResolutionFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->setSubeventId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HTrb2Correction*) G__getstructoffset())->makeArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->deleteArray();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->setCorrection((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrb2Correction*) G__getstructoffset())->fillArray((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->clearArray();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTrb2Correction*) G__getstructoffset())->compare(*(HTrb2Correction*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HTrb2Correction*) G__getstructoffset())->getCorrections());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrb2Correction::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb2Correction::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrb2Correction::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrb2Correction::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Correction*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb2Correction::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb2Correction::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb2Correction::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_597_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb2Correction::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_597_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb2Correction* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb2Correction(*(HTrb2Correction*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrb2Correction G__THTrb2Correction;
static int G__DataSourceDict_597_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrb2Correction*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrb2Correction*) (soff+(sizeof(HTrb2Correction)*i)))->~G__THTrb2Correction();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrb2Correction*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrb2Correction*) (soff))->~G__THTrb2Correction();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrbnetAddressMapping */
static int G__DataSourceDict_598_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbnetAddressMapping* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbnetAddressMapping(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HTrbnetAddressMapping(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbnetAddressMapping(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HTrbnetAddressMapping(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbnetAddressMapping(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTrbnetAddressMapping(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbnetAddressMapping((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTrbnetAddressMapping((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbnetAddressMapping((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTrbnetAddressMapping((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrbnetAddressMapping[n];
       } else {
         p = new((void*) gvp) HTrbnetAddressMapping[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrbnetAddressMapping;
       } else {
         p = new((void*) gvp) HTrbnetAddressMapping;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrbnetAddressMapping*) G__getstructoffset())->getBoard((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrbnetAddressMapping*) G__getstructoffset())->getBoard((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrbnetAddressMapping*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbnetAddressMapping*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbnetAddressMapping*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbnetAddressMapping*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrbnetAddressMapping*) G__getstructoffset())->addBoard((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrbnetAddressMapping*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbnetAddressMapping*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbnetAddressMapping*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrbnetAddressMapping::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbnetAddressMapping::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrbnetAddressMapping::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrbnetAddressMapping::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbnetAddressMapping*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbnetAddressMapping::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbnetAddressMapping::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbnetAddressMapping::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_598_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbnetAddressMapping::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_598_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrbnetAddressMapping* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrbnetAddressMapping(*(HTrbnetAddressMapping*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrbnetAddressMapping G__THTrbnetAddressMapping;
static int G__DataSourceDict_598_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrbnetAddressMapping*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrbnetAddressMapping*) (soff+(sizeof(HTrbnetAddressMapping)*i)))->~G__THTrbnetAddressMapping();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrbnetAddressMapping*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrbnetAddressMapping*) (soff))->~G__THTrbnetAddressMapping();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_598_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbnetAddressMapping* dest = (HTrbnetAddressMapping*) G__getstructoffset();
   *dest = *(HTrbnetAddressMapping*) libp->para[0].ref;
   const HTrbnetAddressMapping& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb2Unpacker */
static int G__DataSourceDict_599_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HTrb2Unpacker*) G__getstructoffset())->getTrbDataVer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Unpacker*) G__getstructoffset())->decode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Unpacker*) G__getstructoffset())->correctOverflow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Unpacker*) G__getstructoffset())->correctRefTimeCh((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Unpacker*) G__getstructoffset())->correctRefTimeCh31());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Unpacker*) G__getstructoffset())->correctRefTimeCh127());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Unpacker*) G__getstructoffset())->correctRefTimeStartDet23());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HTrb2Unpacker*) G__getstructoffset())->doINLCorrection((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Unpacker*) G__getstructoffset())->clearAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Unpacker*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Unpacker*) G__getstructoffset())->setReportCritical();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Unpacker*) G__getstructoffset())->setcorrectINL();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Unpacker*) G__getstructoffset())->setDebugFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb2Unpacker*) G__getstructoffset())->getDebugFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Unpacker*) G__getstructoffset())->printTdcError((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrb2Unpacker*) G__getstructoffset())->fill_trail((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrb2Unpacker*) G__getstructoffset())->fill_lead((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrb2Unpacker*) G__getstructoffset())->fill_pair((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HTrb2Unpacker*) G__getstructoffset())->tryRecover((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HTrb2Unpacker*) G__getstructoffset())->tryRecover((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HTrb2Unpacker*) G__getstructoffset())->tryRecover();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrb2Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb2Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrb2Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrb2Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb2Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb2Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb2Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb2Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_599_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb2Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_599_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb2Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb2Unpacker(*(HTrb2Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_599_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb2Unpacker* dest = (HTrb2Unpacker*) G__getstructoffset();
   *dest = *(HTrb2Unpacker*) libp->para[0].ref;
   const HTrb2Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb3Unpacker */
static int G__DataSourceDict_600_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->setHUBId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->setCTSId((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->setDebugFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3Unpacker*) G__getstructoffset())->getDebugFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->setReportCritical();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3Unpacker*) G__getstructoffset())->isQuietMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3Unpacker*) G__getstructoffset())->isReportCritical());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->createTDC((UInt_t) G__int(libp->para[0]), (HTrb3CalparTdc*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->addTDC((HTrb3TdcUnpacker*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3Unpacker*) G__getstructoffset())->numTDC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HTrb3Unpacker*) G__getstructoffset())->getTDC((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrb3Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrb3Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrb3Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_600_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_600_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb3Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb3Unpacker(*(HTrb3Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_600_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3Unpacker* dest = (HTrb3Unpacker*) G__getstructoffset();
   *dest = *(HTrb3Unpacker*) libp->para[0].ref;
   const HTrb3Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb3CalparTdc */
static int G__DataSourceDict_601_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3CalparTdc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3CalparTdc[n];
     } else {
       p = new((void*) gvp) HTrb3CalparTdc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3CalparTdc;
     } else {
       p = new((void*) gvp) HTrb3CalparTdc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getSubEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getEdgesMask());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getNChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getNBinsPerChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getBinsPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getArraySize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getRisingArr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HTrb3CalparTdc*) G__getstructoffset())->getFallingArr((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HTrb3CalparTdc*) G__getstructoffset())->getRisingPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HTrb3CalparTdc*) G__getstructoffset())->getFallingPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3CalparTdc*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3CalparTdc*) G__getstructoffset())->makeArray((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrb3CalparTdc*) G__getstructoffset())->fillArray((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HTrb3CalparTdc*) G__getstructoffset())->loadFromBinaryFile((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HTrb3CalparTdc*) G__getstructoffset())->loadFromBinaryFile((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HTrb3CalparTdc*) G__getstructoffset())->loadFromBinaryFile((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3CalparTdc*) G__getstructoffset())->setSimpleFineCalibration((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3CalparTdc*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3CalparTdc*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrb3CalparTdc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3CalparTdc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrb3CalparTdc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrb3CalparTdc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3CalparTdc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3CalparTdc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3CalparTdc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3CalparTdc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_601_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3CalparTdc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_601_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb3CalparTdc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb3CalparTdc(*(HTrb3CalparTdc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrb3CalparTdc G__THTrb3CalparTdc;
static int G__DataSourceDict_601_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrb3CalparTdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrb3CalparTdc*) (soff+(sizeof(HTrb3CalparTdc)*i)))->~G__THTrb3CalparTdc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrb3CalparTdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrb3CalparTdc*) (soff))->~G__THTrb3CalparTdc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_601_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3CalparTdc* dest = (HTrb3CalparTdc*) G__getstructoffset();
   *dest = *(HTrb3CalparTdc*) libp->para[0].ref;
   const HTrb3CalparTdc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb3TdcUnpacker */
static int G__DataSourceDict_602_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3TdcUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3TdcUnpacker((UInt_t) G__int(libp->para[0]), (HTrb3CalparTdc*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTrb3TdcUnpacker((UInt_t) G__int(libp->para[0]), (HTrb3CalparTdc*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3TdcUnpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTrb3TdcUnpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrb3TdcUnpacker[n];
       } else {
         p = new((void*) gvp) HTrb3TdcUnpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrb3TdcUnpacker;
       } else {
         p = new((void*) gvp) HTrb3TdcUnpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcUnpacker*) G__getstructoffset())->getTrbAddr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcUnpacker*) G__getstructoffset())->setParent((HTrb3Unpacker*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcUnpacker*) G__getstructoffset())->numChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTrb3TdcUnpacker::ChannelRec& obj = ((HTrb3TdcUnpacker*) G__getstructoffset())->getCh((unsigned int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcUnpacker*) G__getstructoffset())->clearHits();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcUnpacker*) G__getstructoffset())->scanTdcData((UInt_t*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HTrb3TdcUnpacker*) G__getstructoffset())->correctRefTimeCh((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HTrb3TdcUnpacker*) G__getstructoffset())->correctRefTimeCh());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrb3TdcUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3TdcUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrb3TdcUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrb3TdcUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3TdcUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3TdcUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3TdcUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_602_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3TdcUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_602_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb3TdcUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb3TdcUnpacker(*(HTrb3TdcUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrb3TdcUnpacker G__THTrb3TdcUnpacker;
static int G__DataSourceDict_602_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrb3TdcUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrb3TdcUnpacker*) (soff+(sizeof(HTrb3TdcUnpacker)*i)))->~G__THTrb3TdcUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrb3TdcUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrb3TdcUnpacker*) (soff))->~G__THTrb3TdcUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_602_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3TdcUnpacker* dest = (HTrb3TdcUnpacker*) G__getstructoffset();
   *dest = *(HTrb3TdcUnpacker*) libp->para[0].ref;
   const HTrb3TdcUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb3Calpar */
static int G__DataSourceDict_608_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3Calpar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3Calpar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HTrb3Calpar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3Calpar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HTrb3Calpar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3Calpar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HTrb3Calpar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3Calpar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTrb3Calpar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3Calpar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTrb3Calpar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrb3Calpar[n];
       } else {
         p = new((void*) gvp) HTrb3Calpar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTrb3Calpar;
       } else {
         p = new((void*) gvp) HTrb3Calpar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrb3Calpar*) G__getstructoffset())->getTdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrb3Calpar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3Calpar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrb3Calpar*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrb3Calpar*) G__getstructoffset())->addTdc((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Calpar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Calpar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Calpar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HTrb3Calpar*) G__getstructoffset())->loadFromBinaryFiles((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HTrb3Calpar*) G__getstructoffset())->loadFromBinaryFiles((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HTrb3Calpar*) G__getstructoffset())->loadFromBinaryFiles((const char*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrb3Calpar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3Calpar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrb3Calpar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrb3Calpar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3Calpar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3Calpar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3Calpar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrb3Calpar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_608_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrb3Calpar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_608_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb3Calpar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb3Calpar(*(HTrb3Calpar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrb3Calpar G__THTrb3Calpar;
static int G__DataSourceDict_608_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrb3Calpar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrb3Calpar*) (soff+(sizeof(HTrb3Calpar)*i)))->~G__THTrb3Calpar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrb3Calpar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrb3Calpar*) (soff))->~G__THTrb3Calpar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_608_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3Calpar* dest = (HTrb3Calpar*) G__getstructoffset();
   *dest = *(HTrb3Calpar*) libp->para[0].ref;
   const HTrb3Calpar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb3TdcMessage */
static int G__DataSourceDict_615_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3TdcMessage* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3TdcMessage[n];
     } else {
       p = new((void*) gvp) HTrb3TdcMessage[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3TdcMessage;
     } else {
       p = new((void*) gvp) HTrb3TdcMessage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3TdcMessage* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTrb3TdcMessage((uint32_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HTrb3TdcMessage((uint32_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcMessage*) G__getstructoffset())->assign((uint32_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getKind());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->isHitMsg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->isEpochMsg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->isDebugMsg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->isHeaderMsg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->isReservedMsg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getEpochValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getEpochRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHitChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHitTmCoarse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHitTmFine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHitTmStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHitEdge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->isHitRisingEdge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->isHitFallingEdge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHitReserved());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHeaderErr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcMessage*) G__getstructoffset())->getHeaderRes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HTrb3TdcMessage*) G__getstructoffset())->print((double) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HTrb3TdcMessage*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTrb3TdcMessage::coarseUnit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTrb3TdcMessage::simpleFineCalibr((unsigned int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_615_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrb3TdcMessage::setFineLimits((unsigned int) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_615_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb3TdcMessage* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb3TdcMessage(*(HTrb3TdcMessage*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrb3TdcMessage G__THTrb3TdcMessage;
static int G__DataSourceDict_615_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrb3TdcMessage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrb3TdcMessage*) (soff+(sizeof(HTrb3TdcMessage)*i)))->~G__THTrb3TdcMessage();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrb3TdcMessage*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrb3TdcMessage*) (soff))->~G__THTrb3TdcMessage();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_615_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3TdcMessage* dest = (HTrb3TdcMessage*) G__getstructoffset();
   *dest = *(HTrb3TdcMessage*) libp->para[0].ref;
   const HTrb3TdcMessage& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrb3TdcIterator */
static int G__DataSourceDict_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3TdcIterator* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3TdcIterator[n];
     } else {
       p = new((void*) gvp) HTrb3TdcIterator[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrb3TdcIterator;
     } else {
       p = new((void*) gvp) HTrb3TdcIterator;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HTrb3TdcIterator*) G__getstructoffset())->assign((uint32_t*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1])
, (bool) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HTrb3TdcIterator*) G__getstructoffset())->assign((uint32_t*) G__int(libp->para[0]), (unsigned int) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcIterator*) G__getstructoffset())->setRefEpoch((uint32_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HTrb3TdcIterator*) G__getstructoffset())->next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((const HTrb3TdcIterator*) G__getstructoffset())->getMsgStamp());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HTrb3TdcIterator*) G__getstructoffset())->getMsgTimeCoarse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HTrb3TdcIterator*) G__getstructoffset())->getMsgTimeFine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTrb3TdcMessage& obj = ((HTrb3TdcIterator*) G__getstructoffset())->msg();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HTrb3TdcIterator*) G__getstructoffset())->isCurEpoch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcIterator*) G__getstructoffset())->clearCurEpoch();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((const HTrb3TdcIterator*) G__getstructoffset())->getCurEpoch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrb3TdcIterator*) G__getstructoffset())->printmsg();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_616_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrb3TdcIterator* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrb3TdcIterator(*(HTrb3TdcIterator*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIterator));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrb3TdcIterator G__THTrb3TdcIterator;
static int G__DataSourceDict_616_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrb3TdcIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrb3TdcIterator*) (soff+(sizeof(HTrb3TdcIterator)*i)))->~G__THTrb3TdcIterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrb3TdcIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrb3TdcIterator*) (soff))->~G__THTrb3TdcIterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_616_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrb3TdcIterator* dest = (HTrb3TdcIterator*) G__getstructoffset();
   *dest = *(HTrb3TdcIterator*) libp->para[0].ref;
   const HTrb3TdcIterator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrbLookupChan */
static int G__DataSourceDict_620_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbLookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookupChan[n];
     } else {
       p = new((void*) gvp) HTrbLookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookupChan;
     } else {
       p = new((void*) gvp) HTrbLookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTrbLookupChan*) G__getstructoffset())->getDetector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbLookupChan*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbLookupChan*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbLookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HTrbLookupChan*) G__getstructoffset())->getSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbLookupChan*) G__getstructoffset())->getFeAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->getAddress(*(Char_t*) G__Charref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Char_t*) G__Charref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->fill((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Char_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->fill(*(HTrbLookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->setDetector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->setSide((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->setFeAddress((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrbLookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrbLookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrbLookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbLookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_620_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbLookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_620_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrbLookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrbLookupChan(*(HTrbLookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrbLookupChan G__THTrbLookupChan;
static int G__DataSourceDict_620_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrbLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrbLookupChan*) (soff+(sizeof(HTrbLookupChan)*i)))->~G__THTrbLookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrbLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrbLookupChan*) (soff))->~G__THTrbLookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_620_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbLookupChan* dest = (HTrbLookupChan*) G__getstructoffset();
   *dest = *(HTrbLookupChan*) libp->para[0].ref;
   const HTrbLookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrbLookupBoard */
static int G__DataSourceDict_621_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbLookupBoard* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookupBoard[n];
     } else {
       p = new((void*) gvp) HTrbLookupBoard[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbLookupBoard;
     } else {
       p = new((void*) gvp) HTrbLookupBoard;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HTrbLookupBoard*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HTrbLookupChan& obj = ((HTrbLookupBoard*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HTrbLookupBoard*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupBoard*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrbLookupBoard::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookupBoard::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrbLookupBoard::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrbLookupBoard::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbLookupBoard*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookupBoard::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbLookupBoard::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbLookupBoard::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_621_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbLookupBoard::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_621_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrbLookupBoard* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrbLookupBoard(*(HTrbLookupBoard*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrbLookupBoard G__THTrbLookupBoard;
static int G__DataSourceDict_621_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrbLookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrbLookupBoard*) (soff+(sizeof(HTrbLookupBoard)*i)))->~G__THTrbLookupBoard();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrbLookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrbLookupBoard*) (soff))->~G__THTrbLookupBoard();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_621_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbLookupBoard* dest = (HTrbLookupBoard*) G__getstructoffset();
   *dest = *(HTrbLookupBoard*) libp->para[0].ref;
   const HTrbLookupBoard& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Trbnet */

/* HTrbNetDebugInfo */
static int G__DataSourceDict_626_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbNetDebugInfo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbNetDebugInfo[n];
     } else {
       p = new((void*) gvp) HTrbNetDebugInfo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrbNetDebugInfo;
     } else {
       p = new((void*) gvp) HTrbNetDebugInfo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HTrbNetDebugInfo*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HTrbNetDebugInfo*) G__getstructoffset())->getStatusWord());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HTrbNetDebugInfo*) G__getstructoffset())->getStatusBit((char) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbNetDebugInfo*) G__getstructoffset())->setAddress((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbNetDebugInfo*) G__getstructoffset())->setStatus((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrbNetDebugInfo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbNetDebugInfo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrbNetDebugInfo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrbNetDebugInfo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrbNetDebugInfo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbNetDebugInfo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbNetDebugInfo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrbNetDebugInfo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataSourceDict_626_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrbNetDebugInfo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataSourceDict_626_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTrbNetDebugInfo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTrbNetDebugInfo(*(HTrbNetDebugInfo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrbNetDebugInfo G__THTrbNetDebugInfo;
static int G__DataSourceDict_626_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrbNetDebugInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrbNetDebugInfo*) (soff+(sizeof(HTrbNetDebugInfo)*i)))->~G__THTrbNetDebugInfo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrbNetDebugInfo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrbNetDebugInfo*) (soff))->~G__THTrbNetDebugInfo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataSourceDict_626_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrbNetDebugInfo* dest = (HTrbNetDebugInfo*) G__getstructoffset();
   *dest = *(HTrbNetDebugInfo*) libp->para[0].ref;
   const HTrbNetDebugInfo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HDataSource */

/* HGeantReader */

/* HGeantSource */

/* HRootSource */

/* HGeantMergeSource */

/* HTrbNetUnpacker */

/* HldUnpack */

/* HldSource */

/* HldFileOutput */

/* HldFileDesc */

/* HldFileSourceBase */

/* HldFileSource */

/* HKineGeantReader */

/* HSimulGeantReader */

/* HDirectSource */

/* HldRemoteSource */

/* HldGrepFileSource */

/* HTrbLookup */

/* HTrbBaseUnpacker */

/* HTrb2Correction */

/* HTrbnetAddressMapping */

/* HTrb2Unpacker */

/* HTrb3Unpacker */

/* HTrb3CalparTdc */

/* HTrb3TdcUnpacker */

/* HTrb3Calpar */

/* HTrb3TdcMessage */

/* HTrb3TdcIterator */

/* HTrbLookupChan */

/* HTrbLookupBoard */

/* Trbnet */

/* HTrbNetDebugInfo */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDataSourceDict {
 public:
  G__Sizep2memfuncDataSourceDict(): p(&G__Sizep2memfuncDataSourceDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDataSourceDict::*p)();
};

size_t G__get_sizep2memfuncDataSourceDict()
{
  G__Sizep2memfuncDataSourceDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDataSourceDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource))) {
     HDataSource *G__Lderived;
     G__Lderived=(HDataSource*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader))) {
     HGeantReader *G__Lderived;
     G__Lderived=(HGeantReader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantSource))) {
     HGeantSource *G__Lderived;
     G__Lderived=(HGeantSource*)0x1000;
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource))) {
     HRootSource *G__Lderived;
     G__Lderived=(HRootSource*)0x1000;
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource))) {
     HGeantMergeSource *G__Lderived;
     G__Lderived=(HGeantMergeSource*)0x1000;
     {
       HRootSource *G__Lpbase=(HRootSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource),G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker))) {
     HTrbNetUnpacker *G__Lderived;
     G__Lderived=(HTrbNetUnpacker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack))) {
     HldUnpack *G__Lderived;
     G__Lderived=(HldUnpack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldSource))) {
     HldSource *G__Lderived;
     G__Lderived=(HldSource*)0x1000;
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput))) {
     HldFileOutput *G__Lderived;
     G__Lderived=(HldFileOutput*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc))) {
     HldFileDesc *G__Lderived;
     G__Lderived=(HldFileDesc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase))) {
     HldFileSourceBase *G__Lderived;
     G__Lderived=(HldFileSourceBase*)0x1000;
     {
       HldSource *G__Lpbase=(HldSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase),G__get_linked_tagnum(&G__DataSourceDictLN_HldSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource))) {
     HldFileSource *G__Lderived;
     G__Lderived=(HldFileSource*)0x1000;
     {
       HldFileSourceBase *G__Lpbase=(HldFileSourceBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldSource *G__Lpbase=(HldSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_HldSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader))) {
     HKineGeantReader *G__Lderived;
     G__Lderived=(HKineGeantReader*)0x1000;
     {
       HGeantReader *G__Lpbase=(HGeantReader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader),G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader))) {
     HSimulGeantReader *G__Lderived;
     G__Lderived=(HSimulGeantReader*)0x1000;
     {
       HGeantReader *G__Lpbase=(HGeantReader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader),G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HDirectSource))) {
     HDirectSource *G__Lderived;
     G__Lderived=(HDirectSource*)0x1000;
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HDirectSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HDirectSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource))) {
     HldRemoteSource *G__Lderived;
     G__Lderived=(HldRemoteSource*)0x1000;
     {
       HldSource *G__Lpbase=(HldSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource),G__get_linked_tagnum(&G__DataSourceDictLN_HldSource),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource))) {
     HldGrepFileSource *G__Lderived;
     G__Lderived=(HldGrepFileSource*)0x1000;
     {
       HldFileSourceBase *G__Lpbase=(HldFileSourceBase*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldSource *G__Lpbase=(HldSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_HldSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HDataSource *G__Lpbase=(HDataSource*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup))) {
     HTrbLookup *G__Lderived;
     G__Lderived=(HTrbLookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup),G__get_linked_tagnum(&G__DataSourceDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup),G__get_linked_tagnum(&G__DataSourceDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker))) {
     HTrbBaseUnpacker *G__Lderived;
     G__Lderived=(HTrbBaseUnpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker),G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction))) {
     HTrb2Correction *G__Lderived;
     G__Lderived=(HTrb2Correction*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction),G__get_linked_tagnum(&G__DataSourceDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping))) {
     HTrbnetAddressMapping *G__Lderived;
     G__Lderived=(HTrbnetAddressMapping*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping),G__get_linked_tagnum(&G__DataSourceDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping),G__get_linked_tagnum(&G__DataSourceDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker))) {
     HTrb2Unpacker *G__Lderived;
     G__Lderived=(HTrb2Unpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker),G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker))) {
     HTrb3Unpacker *G__Lderived;
     G__Lderived=(HTrb3Unpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker),G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc))) {
     HTrb3CalparTdc *G__Lderived;
     G__Lderived=(HTrb3CalparTdc*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker))) {
     HTrb3TdcUnpacker *G__Lderived;
     G__Lderived=(HTrb3TdcUnpacker*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar))) {
     HTrb3Calpar *G__Lderived;
     G__Lderived=(HTrb3Calpar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar),G__get_linked_tagnum(&G__DataSourceDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar),G__get_linked_tagnum(&G__DataSourceDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HParSet))) {
     HParSet *G__Lderived;
     G__Lderived=(HParSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HParSet),G__get_linked_tagnum(&G__DataSourceDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HParSet),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan))) {
     HTrbLookupChan *G__Lderived;
     G__Lderived=(HTrbLookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard))) {
     HTrbLookupBoard *G__Lderived;
     G__Lderived=(HTrbLookupBoard*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo))) {
     HTrbNetDebugInfo *G__Lderived;
     G__Lderived=(HTrbNetDebugInfo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo),G__get_linked_tagnum(&G__DataSourceDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDataSourceDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Cat_t",115,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__DataSourceDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DataSourceDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__DataSourceDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__DataSourceDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Int_t>",117,G__get_linked_tagnum(&G__DataSourceDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HParallelEvent*>",117,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint64_t",109,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ChannelRec>",117,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTrb3TdcUnpacker::ChannelRec>",117,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTrb3TdcUnpacker*>",117,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uint32_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HDataSource */
static void G__setup_memvarHDataSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource));
   { HDataSource *p; p=(HDataSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,2,0,G__get_linked_tagnum(&G__DataSourceDictLN_HEvent),-1,-1,2,"fEventAddr=",0,"! Address of the event to fill");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fForcedID=",0,"! (default =-1, not used, any other value between 1-15 will replace the ID in the eventheader!)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeantReader */
static void G__setup_memvarHGeantReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader));
   { HGeantReader *p; p=(HGeantReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TFile),-1,-1,2,"fInputFile=",0,"Pointer to the input file.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeantSource */
static void G__setup_memvarHGeantSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantSource));
   { HGeantSource *p; p=(HGeantSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TList),-1,-1,4,"fReaderList=",0,"List of active geant readers.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_THashTable),-1,-1,4,"fFileTable=",0,"Hash table with input files");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRootSource */
static void G__setup_memvarHRootSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource));
   { HRootSource *p; p=(HRootSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TChain),-1,-1,2,"fInput=",0,"TTree to be read.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"fDirectory=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Stat_t"),-1,2,"fEntries=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fPersistency=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fMerge=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCursor=",0,"Number of next event.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fSplitLevel=",0,"Split level of input tree");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrentRunId=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrentRefId=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fGlobalRefId=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,2,"fRefIds=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HEvent),-1,-1,2,"fEventInFile=",0,"! Pointer to the event structure in file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TEventList),-1,-1,2,"fEventList=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLastRunId=",0,"! last run number (needed to detect switch to new run)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"overwriteVersion=",0,"! flag for modifying version");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"replaceVersion=",0,"! value for replacing version is overwriteVersion=kTRUE");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeantMergeSource */
static void G__setup_memvarHGeantMergeSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource));
   { HGeantMergeSource *p; p=(HGeantMergeSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgR),G__defined_typename("vector<HParallelEvent*>"),-1,2,"fAdditionalInputs=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrbNetUnpacker */
static void G__setup_memvarHTrbNetUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker));
   { HTrbNetUnpacker *p; p=(HTrbNetUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"initialized=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HRuntimeDb),-1,-1,2,"rtdb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HLinearCategory),-1,-1,2,"debugInfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldUnpack */
static void G__setup_memvarHldUnpack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack));
   { HldUnpack *p; p=(HldUnpack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HldSubEvt),-1,-1,2,"pSubEvt=",0,"! pointer to subevent where data are read from");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HCategory),-1,-1,2,"pRawCat=",0,"! pointer to category where data will be stored;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker),-1,-1,2,"trbNetUnpacker=",0,"! Poinetr to unpacker for TRB Net data structures");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldSource */
static void G__setup_memvarHldSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldSource));
   { HldSource *p; p=(HldSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker),-1,-1,2,"hubUnpacker=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isDumped=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isScanned=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"oldDecodingStyle=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TList),-1,-1,2,"fUnpackerList=",0,"! List of the unpackers used to extract data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HldEvt),-1,-1,2,"fReadEvent=",0,"! Buffer where the data is first read.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldFileOutput */
static void G__setup_memvarHldFileOutput(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput));
   { HldFileOutput *p; p=(HldFileOutput*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HldEvt),-1,-1,2,"evt=",0,"Pointer to the HLD event");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"numTotal=",0,"Total number of events written");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"numFiltered=",0,"Number of filtered events written");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,2,"fout=",0,"File output");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"fDir=",0,"File directory");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"fileSuffix=",0,"File suffix (default f_)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"fOption=",0,"File option");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"padding[64]=",0,"Byte array for padding");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldFileDesc */
static void G__setup_memvarHldFileDesc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc));
   { HldFileDesc *p; p=(HldFileDesc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,4,"fName=",0,"File name");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRunId=",0,"RunId");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRefId=",0,"Reference run Id for initialization");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldFileSourceBase */
static void G__setup_memvarHldFileSourceBase(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase));
   { HldFileSourceBase *p; p=(HldFileSourceBase*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TList),-1,-1,2,"fFileList=",0,"List with all files to be analyzed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc),-1,-1,2,"fCurrentFile=",0,"Pointer to current file.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"fCurrentDir=",0,"Current directory for addFile");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TIterator),-1,-1,2,"iter=",0,"Iterator over list of files");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventLimit=",0,"Event counter and maximun event nr per file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldFileSource */
static void G__setup_memvarHldFileSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource));
   { HldFileSource *p; p=(HldFileSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HKineGeantReader */
static void G__setup_memvarHKineGeantReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader));
   { HKineGeantReader *p; p=(HKineGeantReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventId=",0,"Current event number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TTree),-1,-1,4,"t=",0,"Pointer to the root tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HLinearCategory),-1,-1,4,"fGeantKineCat=",0,"! KINE HGeant input data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSimulGeantReader */
static void G__setup_memvarHSimulGeantReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader));
   { HSimulGeantReader *p; p=(HSimulGeantReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventId=",0,"Current event number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TTree),-1,-1,4,"t=",0,"Pointer to the root tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HRecEvent),-1,-1,4,"fSimEv=",0,"! HGeant input data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HDirectSource */
static void G__setup_memvarHDirectSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HDirectSource));
   { HDirectSource *p; p=(HDirectSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TList),-1,-1,4,"fReaderList=",0,"List of active Geant readers.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCurrentRunId=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldRemoteSource */
static void G__setup_memvarHldRemoteSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource));
   { HldRemoteSource *p; p=(HldRemoteSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"refId=",0,"Reference run id for initialization");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"currNodeName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"fileName=",0,"dummy filename composed from time");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"runId=",0,"store runId to compare in next event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TIterator),-1,-1,2,"iter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HldGrepFileSource */
static void G__setup_memvarHldGrepFileSource(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource));
   { HldGrepFileSource *p; p=(HldGrepFileSource*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-2,2,"lastfile=",0,"! last modification time of last used file");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-2,2,"timelimit=",0,"! time stamp for the search of new files (files should be newer)");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-2,2,"tcurrent=",0,"! current time");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"timeoffset=",0,"! offset in seconds required to t_current");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-2,2,"fullname=",0,"! full filename: path/file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-2,2,"fullnamesort=",0,"! full filename for sorting: path/modtime_file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-2,2,"path=",0,"! path to directory used for grep of new hld files");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"first=",0,"! flag : 0 if no file has be selected");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mode=",0,"! flag : 1 take newest file , 1: start from given file/time than take the next in list");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"interval=",0,"! time interval in seconds for grep on dir");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TStopwatch),-1,-1,2,"timer=",0,"! timer for grep interval");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"referenceId=",0,"! referrence ID for files");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"dostop=",0,"! flag to stop the source from file reading (ckecked each event)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"distanceToLast=",0,"! distance to last file : last - distanceToLast");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrbLookup */
static void G__setup_memvarHTrbLookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup));
   { HTrbLookup *p; p=(HTrbLookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HTrbLookupBoard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrbBaseUnpacker */
static void G__setup_memvarHTrbBaseUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker));
   { HTrbBaseUnpacker *p; p=(HTrbBaseUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup),-1,-1,2,"lookup=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"subEvtId=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbDataVer=",0,"data structure version:");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbLeadingTime[128][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbTrailingTime[128][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbADC[128][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbLeadingMult[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbTrailingMult[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbTrailingTotalMult[128]=",0,"FIXME: Pablos private version; total multiplicity for trailings        ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbDataExtension[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbExtensionSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"trbDataPairFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"debugFlag=",0,"! allows to print subevent information");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"quietMode=",0,"! do not print errors!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"reportCritical=",0,"! report critical errors!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb2Correction */
static void G__setup_memvarHTrb2Correction(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction));
   { HTrb2Correction *p; p=(HTrb2Correction*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,1,-1,G__defined_typename("Int_t"),-1,2,"nValuesPerChannel=",0,"number of values per channel");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TString),-1,-1,2,"boardType=",0,"type of board");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"subeventId=",0,"related subevent id");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nChannels=",0,"number of channels with corrections");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"highResolutionFlag=",0,"0 = low resolution, 1 = high resolution ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TArrayF),-1,-1,2,"corrData=",0,"correction data for the tdc channels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrbnetAddressMapping */
static void G__setup_memvarHTrbnetAddressMapping(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping));
   { HTrbnetAddressMapping *p; p=(HTrbnetAddressMapping*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HTrb2Correction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb2Unpacker */
static void G__setup_memvarHTrb2Unpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker));
   { HTrb2Unpacker *p; p=(HTrb2Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction),-1,-1,2,"trbinlcorr=",0,"TDC correctirons for the TRB boards");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping),-1,-1,2,"trbaddressmap=",0,"mapping table trbnet-address to TRB board");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"subEvtId=",0,"subevent id");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"uStartPosition=",0,"position at which to start decoding.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"uTrbNetAdress=",0,"TrbNetAdress");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"uSubBlockSize=",0,"BlockSize of SubSubEvent (one TRB)");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"nCountWords=",0,"at which data to start decoding");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbDataVer=",0,"data structure version:");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"debugFlag=",0,"! allows to print subevent information to the STDOUT");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"quietMode=",0,"! do not print errors!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"reportCritical=",0,"! report critical errors!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"correctINL=",0,"! if > 0 performs the INL correction");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"correctINLboard=",0,"! if > 0 performs the INL correction for this TRB");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"highResModeOn=",0,"! is set the data are collected in High Res. Mode - 25ps binning");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"trbDataPairFlag=",0,"! data in pair mode (leading and width in one word)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"trbLeadingTime[128][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"trbTrailingTime[128][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"trbADC[128][10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"trbExtensionSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbLeadingMult[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbTrailingMult[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbTrailingTotalMult[128]=",0,"FIXME: Pablos private version; total multiplicity for trailings        ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trbDataExtension[128]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"tryRecover_1=",0,"! try to recover broken data format (blocksize out of subevent)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"tryRecover_2=",0,"! try to recover broken data format (trbnet subsub size not equal subsubsize)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb3Unpacker */
static void G__setup_memvarHTrb3Unpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker));
   { HTrb3Unpacker *p; p=(HTrb3Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"subEvtId=",0,"! subevent id - main identifier");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"uHUBId=",0,"! number like 0x9000 which works as envelope for external TDCs");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"uCTSId=",0,"! number like 0x8000 which indicates CTS block in data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"debugFlag=",0,"! allows to print subevent information to the STDOUT");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"quietMode=",0,"! do not print errors!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"reportCritical=",0,"! report critical errors!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar),-1,-1,2,"calpar=",0,"! TDC calibration parameters ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR),G__defined_typename("vector<HTrb3TdcUnpacker*>"),-1,2,"fTDCs=",0,"! vector of TDC unpackers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb3CalparTdc */
static void G__setup_memvarHTrb3CalparTdc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc));
   { HTrb3CalparTdc *p; p=(HTrb3CalparTdc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"subEvtId=",0,"subevent id the TDC belongs to");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nChannels=",0,"number of channels");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBinsPerChannel=",0,"number of bins per channel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nEdgesMask=",0,"1 - only rising edges, 2 - only falling edges, 3 - both edges");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TArrayF),-1,-1,2,"binsPar=",0,"all bins");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb3TdcUnpacker */
static void G__setup_memvarHTrb3TdcUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker));
   { HTrb3TdcUnpacker *p; p=(HTrb3TdcUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker),-1,-1,2,"fUnpacker=",0,"! pointer on unpacker");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fTdcId=",0,"! TRB address, placed in sub-sub event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc),-1,-1,2,"tdcpar=",0,"! pointer to TDC calibration parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR),G__defined_typename("vector<ChannelRec>"),-1,2,"fCh=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb3Calpar */
static void G__setup_memvarHTrb3Calpar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar));
   { HTrb3Calpar *p; p=(HTrb3Calpar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HTrb3CalparTdc");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb3TdcMessage */
static void G__setup_memvarHTrb3TdcMessage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage));
   { HTrb3TdcMessage *p; p=(HTrb3TdcMessage*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("uint32_t"),-1,2,"fData=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-2,2,"gFineMinValue=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,-1,-2,2,"gFineMaxValue=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrb3TdcIterator */
static void G__setup_memvarHTrb3TdcIterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIterator));
   { HTrb3TdcIterator *p; p=(HTrb3TdcIterator*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIteratorcLcLdA),-1,-2,2,"DummyEpoch=-1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("uint32_t"),-1,2,"fBuf=",0,"! pointer on raw data");
   G__memvar_setup((void*)0,104,0,0,-1,-1,-1,2,"fBuflen=",0,"! length of raw data");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,2,"fSwapped=",0,"! true if raw data are swapped");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage),-1,-1,2,"fMsg=",0,"! current message");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("uint32_t"),-1,2,"fCurEpoch=",0,"! current epoch");
   }
   G__tag_memvar_reset();
}


   /* HTrbLookupChan */
static void G__setup_memvarHTrbLookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan));
   { HTrbLookupChan *p; p=(HTrbLookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"detector=",0,"identifier for detector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"side=",0,"side of cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"feAddress=",0,"front end address");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrbLookupBoard */
static void G__setup_memvarHTrbLookupBoard(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard));
   { HTrbLookupBoard *p; p=(HTrbLookupBoard*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HTrbLookupChan objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Trbnet */
static void G__setup_memvarTrbnet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_Trbnet));
   {
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kTrb2MinTrbnetAddress=%lldLL",(long long)Trbnet::kTrb2MinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kTrb2MaxTrbnetAddress=%lldLL",(long long)Trbnet::kTrb2MaxTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kStartMinTrbnetAddress=%lldLL",(long long)Trbnet::kStartMinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kStartMaxTrbnetAddress=%lldLL",(long long)Trbnet::kStartMaxTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kWallMinTrbnetAddress=%lldLL",(long long)Trbnet::kWallMinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kWallMaxTrbnetAddress=%lldLL",(long long)Trbnet::kWallMaxTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kRpcMinTrbnetAddress=%lldLL",(long long)Trbnet::kRpcMinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kRpcMaxTrbnetAddress=%lldLL",(long long)Trbnet::kRpcMaxTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kTofMinTrbnetAddress=%lldLL",(long long)Trbnet::kTofMinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kTofMaxTrbnetAddress=%lldLL",(long long)Trbnet::kTofMaxTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kPionTrackerTrb3MinTrbnetAddress=%lldLL",(long long)Trbnet::kPionTrackerTrb3MinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kPionTrackerTrb3MaxTrbnetAddress=%lldLL",(long long)Trbnet::kPionTrackerTrb3MaxTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kStartTrb3MinTrbnetAddress=%lldLL",(long long)Trbnet::kStartTrb3MinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kStartTrb3MaxTrbnetAddress=%lldLL",(long long)Trbnet::kStartTrb3MaxTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kEmcTrb3MinTrbnetAddress=%lldLL",(long long)Trbnet::kEmcTrb3MinTrbnetAddress).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),-1,-2,1,G__FastAllocString(2048).Format("kEmcTrb3MaxTrbnetAddress=%lldLL",(long long)Trbnet::kEmcTrb3MaxTrbnetAddress).data(),0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrbNetDebugInfo */
static void G__setup_memvarHTrbNetDebugInfo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo));
   { HTrbNetDebugInfo *p; p=(HTrbNetDebugInfo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"address=",0,"< Address of TrbNet entity");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"statusWord=",0,"< Status of TrbNet entity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataSourceDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDataSourceDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHDataSource(void) {
   /* HDataSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource));
   G__memfunc_setup("setEventAddress",1556,G__DataSourceDict_170_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HEvent' - 2 - ev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("forceID",668,G__DataSourceDict_170_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("skipEvents",1068,G__DataSourceDict_170_0_4, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nEv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNextEvent",1249,G__DataSourceDict_170_0_5, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setCursorToPreviousEvent",2540,G__DataSourceDict_170_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,G__DataSourceDict_170_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("reinit",651,G__DataSourceDict_170_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("finalize",850,G__DataSourceDict_170_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("rewind",649,G__DataSourceDict_170_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getCurrentRunId",1541,G__DataSourceDict_170_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getCurrentRefId",1517,G__DataSourceDict_170_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "Run Id used for initialization", (void*) NULL, 3);
   G__memfunc_setup("getCurrentFileName",1828,G__DataSourceDict_170_0_13, 67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__DataSourceDict_170_0_14, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDataSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_170_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDataSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_170_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDataSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_170_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDataSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_170_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_170_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDataSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_170_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDataSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_170_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDataSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_170_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDataSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HDataSource", 1201, G__DataSourceDict_170_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_170_0_27, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HDataSource), -1, 1, 1, 1, 1, 0, "u 'HDataSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeantReader(void) {
   /* HGeantReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader));
   G__memfunc_setup("HGeantReader",1162,G__DataSourceDict_230_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,G__DataSourceDict_230_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,G__DataSourceDict_230_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,G__DataSourceDict_230_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setInput",860,G__DataSourceDict_230_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataSourceDict_230_0_6, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeantReader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_230_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantReader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_230_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeantReader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_230_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeantReader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_230_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_230_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantReader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_230_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantReader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_230_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantReader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_230_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantReader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeantReader", 1162, G__DataSourceDict_230_0_18, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader), -1, 0, 1, 1, 1, 0, "u 'HGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeantReader", 1288, G__DataSourceDict_230_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_230_0_20, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HGeantReader), -1, 1, 1, 1, 1, 0, "u 'HGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeantSource(void) {
   /* HGeantSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantSource));
   G__memfunc_setup("addGeantReader",1387,G__DataSourceDict_231_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeantReader' - 0 - r C - 'Text_t' 10 - inputFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,G__DataSourceDict_231_0_4, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRunId",1541,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRefId",1517,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentFileName",1828,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataSourceDict_231_0_11, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeantSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_231_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_231_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeantSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_231_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeantSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_231_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_231_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_231_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_231_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_231_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeantSource", 1318, G__DataSourceDict_231_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRootSource(void) {
   /* HRootSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource));
   G__memfunc_setup("fileExists",1056,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFile",704,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TFile), -1, 0, 1, 1, 2, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getFileName",1089,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__DataSourceDictLN_TString), -1, 0, 1, 1, 2, 0, "C - 'Text_t' 10 - file", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HRootSource",1117,G__DataSourceDict_540_0_4, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource), -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' fPersistent g - 'Bool_t' 0 'kFALSE' fMerge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventList",1258,G__DataSourceDict_540_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TEventList' - 0 - el", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setCursorToPreviousEvent",2540,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("skipEvents",1068,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nEv", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rewind",649,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRunId",1541,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRefId",1517,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getGlobalRefId",1371,G__DataSourceDict_540_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentRunId",1553,G__DataSourceDict_540_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefId",790,G__DataSourceDict_540_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - runId i - 'Int_t' 0 - refId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGlobalRefId",1383,G__DataSourceDict_540_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - refId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCurrentFileName",1828,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEvent",834,G__DataSourceDict_540_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - eventN", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDirectory",1281,G__DataSourceDict_540_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - dirName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFile",681,G__DataSourceDict_540_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInput",860,G__DataSourceDict_540_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - fileName C - 'Text_t' 10 - treeName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("disableCategory",1554,G__DataSourceDict_540_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - aCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deactivateBranch",1640,G__DataSourceDict_540_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - branchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("disablePartialEvent",1955,G__DataSourceDict_540_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - aCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__DataSourceDict_540_0_27, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChain",803,G__DataSourceDict_540_0_28, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TChain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSplitLevel",1348,G__DataSourceDict_540_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__DataSourceDict_540_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Print",525,G__DataSourceDict_540_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("replaceHeaderVersion",2059,G__DataSourceDict_540_0_32, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - vers g - 'Bool_t' 0 'kTRUE' replace", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_540_0_33, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRootSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_540_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRootSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_540_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRootSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_540_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRootSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_540_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_540_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRootSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_540_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRootSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_540_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRootSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_540_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRootSource::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRootSource", 1117, G__DataSourceDict_540_0_45, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource), -1, 0, 1, 1, 1, 0, "u 'HRootSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRootSource", 1243, G__DataSourceDict_540_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_540_0_47, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HRootSource), -1, 1, 1, 1, 1, 0, "u 'HRootSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeantMergeSource(void) {
   /* HGeantMergeSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource));
   G__memfunc_setup("HGeantMergeSource",1688,G__DataSourceDict_561_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource), -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' fPersistent g - 'Bool_t' 0 'kFALSE' fMerge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", "hdatasource", (void*) NULL, 1);
   G__memfunc_setup("getEvent",834,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - eventN", "hrootsource", (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", "hrootsource", (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "hdatasource", (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "hdatasource", (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", "hdatasource", (void*) NULL, 1);
   G__memfunc_setup("addFile",681,G__DataSourceDict_561_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - file g - 'Bool_t' 0 'kTRUE' print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMultFiles",1214,G__DataSourceDict_561_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - commaSeparatedList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addAdditionalInput",1842,G__DataSourceDict_561_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - filename g - 'Bool_t' 0 'kTRUE' print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createGeantEvent",1637,G__DataSourceDict_561_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HRecEvent' - 0 - fCurrentEvent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_561_0_12, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeantMergeSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_561_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantMergeSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_561_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeantMergeSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_561_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeantMergeSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_561_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_561_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantMergeSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_561_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantMergeSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_561_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantMergeSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_561_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantMergeSource::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeantMergeSource", 1688, G__DataSourceDict_561_0_24, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource), -1, 0, 1, 1, 1, 0, "u 'HGeantMergeSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeantMergeSource", 1814, G__DataSourceDict_561_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_561_0_26, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HGeantMergeSource), -1, 1, 1, 1, 1, 0, "u 'HGeantMergeSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrbNetUnpacker(void) {
   /* HTrbNetUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker));
   G__memfunc_setup("HTrbNetUnpacker",1488,G__DataSourceDict_570_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTrbNetUnpacker",1488,G__DataSourceDict_570_0_2, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker), -1, 0, 1, 1, 1, 0, "u 'HTrbNetUnpacker' - 1 - unp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,G__DataSourceDict_570_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__DataSourceDict_570_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinit",651,G__DataSourceDict_570_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,G__DataSourceDict_570_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unpackData",1020,G__DataSourceDict_570_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"H - 'UInt_t' 0 - data i - 'Int_t' 0 '0' subEventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_570_0_8, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrbNetUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_570_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbNetUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_570_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrbNetUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_570_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrbNetUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_570_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_570_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbNetUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_570_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbNetUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_570_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbNetUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_570_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbNetUnpacker::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTrbNetUnpacker", 1614, G__DataSourceDict_570_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_570_0_21, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker), -1, 1, 1, 1, 1, 0, "u 'HTrbNetUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldUnpack(void) {
   /* HldUnpack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack));
   G__memfunc_setup("getSubEvtId",1094,G__DataSourceDict_571_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getpSubEvt",1033,G__DataSourceDict_571_0_3, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HldSubEvt), -1, 2, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,G__DataSourceDict_571_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,G__DataSourceDict_571_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("reinit",651,G__DataSourceDict_571_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,G__DataSourceDict_571_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setCategory",1162,G__DataSourceDict_571_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - aCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decodeTrbNet",1203,G__DataSourceDict_571_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"H - 'UInt_t' 0 - data i - 'Int_t' 0 '0' subEventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_571_0_10, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldUnpack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_571_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldUnpack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_571_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldUnpack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_571_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldUnpack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_571_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_571_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldUnpack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_571_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldUnpack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_571_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldUnpack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_571_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldUnpack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HldUnpack", 1016, G__DataSourceDict_571_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_571_0_23, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HldUnpack), -1, 1, 1, 1, 1, 0, "u 'HldUnpack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldSource(void) {
   /* HldSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldSource));
   G__memfunc_setup("getNextEvent",1249,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("initUnpacker",1261,G__DataSourceDict_580_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalizeUnpacker",1675,G__DataSourceDict_580_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rewind",649,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addUnpacker",1122,G__DataSourceDict_580_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HldUnpack' - 0 - unpacker", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("showIt",638,G__DataSourceDict_580_0_9, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "U 'HldEvt' - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dumpEvt",741,G__DataSourceDict_580_0_10, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanIt",610,G__DataSourceDict_580_0_11, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "U 'HldEvt' - 0 - evt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanEvt",724,G__DataSourceDict_580_0_12, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDecodingStyle",1646,G__DataSourceDict_580_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOldDecodingStyle",1945,G__DataSourceDict_580_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' decodingStyle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScanned",1032,G__DataSourceDict_580_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' scanned", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrbNetUnpacker",1736,G__DataSourceDict_580_0_16, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetUnpacker), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decodeHeader",1197,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HEventHeader' - 0 - dest", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDump",738,G__DataSourceDict_580_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_580_0_19, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_580_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_580_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_580_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_580_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_580_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_580_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_580_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_580_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HldSource", 1031, G__DataSourceDict_580_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_580_0_32, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HldSource), -1, 1, 1, 1, 1, 0, "u 'HldSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldFileOutput(void) {
   /* HldFileOutput */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput));
   G__memfunc_setup("HldFileOutput",1321,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HldFileOutput",1321,G__DataSourceDict_581_0_2, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput), -1, 0, 4, 1, 1, 0, 
"U 'HldSource' - 0 - - C - 'Text_t' 10 - - "
"C - 'Text_t' 10 - - C - 'Option_t' 10 '\"NEW\"' pOption", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHldSource",1237,G__DataSourceDict_581_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HldSource' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDirectory",1281,G__DataSourceDict_581_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFileSuffix",1345,G__DataSourceDict_581_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFileOption",1349,G__DataSourceDict_581_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"NEW\"' pOption", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__DataSourceDict_581_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__DataSourceDict_581_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeEvent",1069,G__DataSourceDict_581_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumTotalEvt",1443,G__DataSourceDict_581_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumFilteredEvt",1742,G__DataSourceDict_581_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_581_0_12, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldFileOutput::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_581_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileOutput::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_581_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldFileOutput::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_581_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldFileOutput::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_581_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_581_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileOutput::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_581_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileOutput::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_581_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileOutput::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_581_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileOutput::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HldFileOutput", 1321, G__DataSourceDict_581_0_24, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput), -1, 0, 1, 1, 1, 0, "u 'HldFileOutput' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HldFileOutput", 1447, G__DataSourceDict_581_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_581_0_26, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HldFileOutput), -1, 1, 1, 1, 1, 0, "u 'HldFileOutput' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldFileDesc(void) {
   /* HldFileDesc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc));
   G__memfunc_setup("HldFileDesc",1047,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HldFileDesc",1047,G__DataSourceDict_582_0_2, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name i - 'Int_t' 10 - runId "
"i - 'Int_t' 10 '-1' refId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getRunId",802,G__DataSourceDict_582_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefId",778,G__DataSourceDict_582_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefId",790,G__DataSourceDict_582_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_582_0_7, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldFileDesc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_582_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileDesc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_582_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldFileDesc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_582_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldFileDesc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_582_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_582_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileDesc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_582_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileDesc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_582_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileDesc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_582_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileDesc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HldFileDesc", 1047, G__DataSourceDict_582_0_19, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc), -1, 0, 1, 1, 1, 0, "u 'HldFileDesc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HldFileDesc", 1173, G__DataSourceDict_582_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_582_0_21, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HldFileDesc), -1, 1, 1, 1, 1, 0, "u 'HldFileDesc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldFileSourceBase(void) {
   /* HldFileSourceBase */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSourceBase));
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rewind",649,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setMaxEventPerFile",1819,G__DataSourceDict_583_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNextFile",1119,G__DataSourceDict_583_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getCurrentRunId",1541,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRefId",1517,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getListOfFiles",1412,G__DataSourceDict_583_0_10, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunId",802,G__DataSourceDict_583_0_11, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - fileName", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getCurrentFileName",1828,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addFile",681,G__DataSourceDict_583_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - fileName C - 'Text_t' 10 - refFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFile",681,G__DataSourceDict_583_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - fileName i - 'Int_t' 0 '-1' refId", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setDirectory",1281,G__DataSourceDict_583_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - direc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_583_0_16, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldFileSourceBase::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_583_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileSourceBase::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_583_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldFileSourceBase::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_583_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldFileSourceBase::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_583_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_583_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileSourceBase::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_583_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileSourceBase::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_583_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileSourceBase::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_583_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileSourceBase::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HldFileSourceBase", 1794, G__DataSourceDict_583_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldFileSource(void) {
   /* HldFileSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource));
   G__memfunc_setup("HldFileSource",1289,G__DataSourceDict_584_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HldFileSource",1289,G__DataSourceDict_584_0_2, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldFileSource), -1, 0, 1, 1, 1, 0, "u 'HldFileSource' - 1 - so", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rewind",649,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setMaxEventPerFile",1819,G__DataSourceDict_584_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNextFile",1119,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getRunId",802,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - fileName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addFile",681,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - fileName i - 'Int_t' 0 '-1' refId", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataSourceDict_584_0_9, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldFileSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_584_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_584_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldFileSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_584_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldFileSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_584_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_584_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_584_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_584_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldFileSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_584_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldFileSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HldFileSource", 1415, G__DataSourceDict_584_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHKineGeantReader(void) {
   /* HKineGeantReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader));
   G__memfunc_setup("HKineGeantReader",1553,G__DataSourceDict_588_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getGeantKineCat",1486,G__DataSourceDict_588_0_4, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HLinearCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantKine",1206,G__DataSourceDict_588_0_5, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HGeantKine), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 0 - locate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_588_0_6, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HKineGeantReader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_588_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HKineGeantReader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_588_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HKineGeantReader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_588_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HKineGeantReader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_588_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_588_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HKineGeantReader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_588_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HKineGeantReader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_588_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HKineGeantReader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_588_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HKineGeantReader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HKineGeantReader", 1553, G__DataSourceDict_588_0_18, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader), -1, 0, 1, 1, 1, 0, "u 'HKineGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HKineGeantReader", 1679, G__DataSourceDict_588_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_588_0_20, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HKineGeantReader), -1, 1, 1, 1, 1, 0, "u 'HKineGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSimulGeantReader(void) {
   /* HSimulGeantReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader));
   G__memfunc_setup("HSimulGeantReader",1684,G__DataSourceDict_589_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataSourceDict_589_0_4, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSimulGeantReader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_589_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSimulGeantReader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_589_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSimulGeantReader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_589_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSimulGeantReader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_589_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_589_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSimulGeantReader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_589_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSimulGeantReader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_589_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSimulGeantReader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_589_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSimulGeantReader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSimulGeantReader", 1684, G__DataSourceDict_589_0_16, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader), -1, 0, 1, 1, 1, 0, "u 'HSimulGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSimulGeantReader", 1810, G__DataSourceDict_589_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_589_0_18, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HSimulGeantReader), -1, 1, 1, 1, 1, 0, "u 'HSimulGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHDirectSource(void) {
   /* HDirectSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HDirectSource));
   G__memfunc_setup("addGeantReader",1387,G__DataSourceDict_590_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeantReader' - 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,G__DataSourceDict_590_0_4, 105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setCurrentRunId",1553,G__DataSourceDict_590_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - Id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCurrentRunId",1541,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRefId",1517,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentFileName",1828,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataSourceDict_590_0_11, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDirectSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_590_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDirectSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_590_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDirectSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_590_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDirectSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_590_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_590_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDirectSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_590_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDirectSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_590_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDirectSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_590_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDirectSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HDirectSource", 1426, G__DataSourceDict_590_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldRemoteSource(void) {
   /* HldRemoteSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource));
   G__memfunc_setup("HldRemoteSource",1525,G__DataSourceDict_591_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HldRemoteSource",1525,G__DataSourceDict_591_0_2, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource), -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - nodeName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRunId",1541,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentRefId",1517,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setRefId",790,G__DataSourceDict_591_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCurrentFileName",1828,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNodeName",1095,G__DataSourceDict_591_0_9, 67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_591_0_10, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldRemoteSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_591_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldRemoteSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_591_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldRemoteSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_591_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldRemoteSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_591_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_591_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldRemoteSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_591_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldRemoteSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_591_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldRemoteSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_591_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldRemoteSource::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HldRemoteSource", 1525, G__DataSourceDict_591_0_22, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource), -1, 0, 1, 1, 1, 0, "u 'HldRemoteSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HldRemoteSource", 1651, G__DataSourceDict_591_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_591_0_24, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HldRemoteSource), -1, 1, 1, 1, 1, 0, "u 'HldRemoteSource' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHldGrepFileSource(void) {
   /* HldGrepFileSource */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource));
   G__memfunc_setup("getNewFile",1002,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkDir",797,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TString' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decodeOption",1245,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "u 'TString' - 0 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectFiles",1139,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 2, 0, "U 'dirent' - 10 - entry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loopForNewFile",1419,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HldGrepFileSource",1687,G__DataSourceDict_594_0_6, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HldGrepFileSource), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 0 '\"\"' dir u 'TString' - 0 '\"Grep\"' opt "
"i - 'Int_t' 0 '5' grepInterval i - 'Int_t' 0 '-1' refId "
"i - 'Int_t' 0 '5' off i - 'Int_t' 0 '1' fileoffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextEvent",1249,(G__InterfaceMethod) NULL,105, G__get_linked_tagnum(&G__DataSourceDictLN_EDsState), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' doUnpack", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getRunId",802,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 - fileName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setMaxEventPerFile",1819,G__DataSourceDict_594_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefId",790,G__DataSourceDict_594_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("stop",454,G__DataSourceDict_594_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFile",681,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - fileName i - 'Int_t' 0 '-1' refId", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNextFile",1119,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("rewind",649,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataSourceDict_594_0_15, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HldGrepFileSource::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_594_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldGrepFileSource::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_594_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HldGrepFileSource::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_594_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HldGrepFileSource::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_594_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_594_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldGrepFileSource::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_594_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldGrepFileSource::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_594_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HldGrepFileSource::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_594_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HldGrepFileSource::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HldGrepFileSource", 1813, G__DataSourceDict_594_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrbLookup(void) {
   /* HTrbLookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup));
   G__memfunc_setup("HTrbLookup",1002,G__DataSourceDict_595_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"TrbLookup\"' name C - 'Char_t' 10 '\"Lookup table for TRB unpacker\"' title "
"C - 'Char_t' 10 '\"TrbLookupProduction\"' context i - 'Int_t' 0 '800' minSubeventId "
"i - 'Int_t' 0 '100' nBoards", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__DataSourceDict_595_0_2, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - subeventId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataSourceDict_595_0_3, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__DataSourceDict_595_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__DataSourceDict_595_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__DataSourceDict_595_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__DataSourceDict_595_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"c - 'Char_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__DataSourceDict_595_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__DataSourceDict_595_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__DataSourceDict_595_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_595_0_14, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrbLookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_595_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_595_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrbLookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_595_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrbLookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_595_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_595_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_595_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbLookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_595_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_595_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbLookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrbLookup", 1002, G__DataSourceDict_595_0_26, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup), -1, 0, 1, 1, 1, 0, "u 'HTrbLookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrbLookup", 1128, G__DataSourceDict_595_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_595_0_28, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookup), -1, 1, 1, 1, 1, 0, "u 'HTrbLookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrbBaseUnpacker(void) {
   /* HTrbBaseUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker));
   G__memfunc_setup("HTrbBaseUnpacker",1572,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker), -1, 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTrbDataVer",1295,G__DataSourceDict_596_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode",612,G__DataSourceDict_596_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctOverflow",1606,G__DataSourceDict_596_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctRefTimeCh31",1709,G__DataSourceDict_596_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctRefTimeCh127",1763,G__DataSourceDict_596_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearAll",800,G__DataSourceDict_596_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__DataSourceDict_596_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReportCritical",1779,G__DataSourceDict_596_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugFlag",1197,G__DataSourceDict_596_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDebugFlag",1185,G__DataSourceDict_596_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("PrintTdcError",1330,G__DataSourceDict_596_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - e h - 'UInt_t' 0 - trbId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_trail",1058,G__DataSourceDict_596_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_lead",924,G__DataSourceDict_596_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_pair",946,G__DataSourceDict_596_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ch i - 'Int_t' 0 - time "
"i - 'Int_t' 0 - length", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_596_0_19, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrbBaseUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_596_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbBaseUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_596_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrbBaseUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_596_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrbBaseUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_596_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_596_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbBaseUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_596_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbBaseUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_596_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbBaseUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_596_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbBaseUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrbBaseUnpacker", 1572, G__DataSourceDict_596_0_31, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker), -1, 0, 1, 1, 1, 0, "u 'HTrbBaseUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_596_0_32, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbBaseUnpacker), -1, 1, 1, 1, 1, 0, "u 'HTrbBaseUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb2Correction(void) {
   /* HTrb2Correction */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction));
   G__memfunc_setup("HTrb2Correction",1466,G__DataSourceDict_597_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"\"' temperatureSensor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNChannels",1210,G__DataSourceDict_597_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHighResolutionFlag",2158,G__DataSourceDict_597_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isHighResolution",1680,G__DataSourceDict_597_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoardType",1226,G__DataSourceDict_597_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubeventId",1337,G__DataSourceDict_597_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNValuesPerChannel",2014,G__DataSourceDict_597_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__DataSourceDict_597_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrection",1368,G__DataSourceDict_597_0_9, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBoardType",1238,G__DataSourceDict_597_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHighResolutionFlag",2170,G__DataSourceDict_597_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSubeventId",1349,G__DataSourceDict_597_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeArray",925,G__DataSourceDict_597_0_13, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteArray",1138,G__DataSourceDict_597_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrection",1380,G__DataSourceDict_597_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - c i - 'Int_t' 0 - i "
"f - 'Float_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillArray",934,G__DataSourceDict_597_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearArray",1030,G__DataSourceDict_597_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__DataSourceDict_597_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__DataSourceDict_597_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__DataSourceDict_597_0_20, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HTrb2Correction' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrections",1483,G__DataSourceDict_597_0_21, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_597_0_22, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrb2Correction::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_597_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb2Correction::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_597_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrb2Correction::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_597_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrb2Correction::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_597_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_597_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb2Correction::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_597_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb2Correction::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_597_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb2Correction::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_597_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb2Correction::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb2Correction", 1466, G__DataSourceDict_597_0_34, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction), -1, 0, 1, 1, 1, 0, "u 'HTrb2Correction' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrb2Correction", 1592, G__DataSourceDict_597_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrbnetAddressMapping(void) {
   /* HTrbnetAddressMapping */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping));
   G__memfunc_setup("HTrbnetAddressMapping",2121,G__DataSourceDict_598_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"TrbnetAddressMapping\"' name C - 'Char_t' 10 '\"Mapping of trbnet addresses to boards\"' title "
"C - 'Char_t' 10 '\"Trb2Production\"' context i - 'Int_t' 0 'Trbnet::kTrb2MinTrbnetAddress' minTrbnetAddress "
"i - 'Int_t' 0 'Trbnet::kTrb2MaxTrbnetAddress' maxTrbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__DataSourceDict_598_0_2, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__DataSourceDict_598_0_3, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - temperaturSensor", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataSourceDict_598_0_4, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__DataSourceDict_598_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__DataSourceDict_598_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__DataSourceDict_598_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addBoard",785,G__DataSourceDict_598_0_11, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Correction), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - - C - 'Char_t' 10 - - "
"C - 'Char_t' 10 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__DataSourceDict_598_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__DataSourceDict_598_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__DataSourceDict_598_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_598_0_15, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrbnetAddressMapping::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_598_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbnetAddressMapping::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_598_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrbnetAddressMapping::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_598_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrbnetAddressMapping::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_598_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_598_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbnetAddressMapping::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_598_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbnetAddressMapping::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_598_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbnetAddressMapping::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_598_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbnetAddressMapping::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrbnetAddressMapping", 2121, G__DataSourceDict_598_0_27, (int) ('i'), 
G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping), -1, 0, 1, 1, 1, 0, "u 'HTrbnetAddressMapping' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrbnetAddressMapping", 2247, G__DataSourceDict_598_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_598_0_29, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbnetAddressMapping), -1, 1, 1, 1, 1, 0, "u 'HTrbnetAddressMapping' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb2Unpacker(void) {
   /* HTrb2Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker));
   G__memfunc_setup("HTrb2Unpacker",1243,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker), -1, 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTrbDataVer",1295,G__DataSourceDict_599_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decode",612,G__DataSourceDict_599_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctOverflow",1606,G__DataSourceDict_599_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctRefTimeCh",1609,G__DataSourceDict_599_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctRefTimeCh31",1709,G__DataSourceDict_599_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctRefTimeCh127",1763,G__DataSourceDict_599_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("correctRefTimeStartDet23",2350,G__DataSourceDict_599_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("doINLCorrection",1486,G__DataSourceDict_599_0_12, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nTrbCh i - 'Int_t' 0 - nRawTime", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearAll",800,G__DataSourceDict_599_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__DataSourceDict_599_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReportCritical",1779,G__DataSourceDict_599_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setcorrectINL",1313,G__DataSourceDict_599_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugFlag",1197,G__DataSourceDict_599_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDebugFlag",1185,G__DataSourceDict_599_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTdcError",1362,G__DataSourceDict_599_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - e h - 'UInt_t' 0 - trbId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_trail",1058,G__DataSourceDict_599_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_lead",924,G__DataSourceDict_599_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ch f - 'Float_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_pair",946,G__DataSourceDict_599_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - ch f - 'Float_t' 0 - time "
"f - 'Float_t' 0 - length", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("tryRecover",1077,G__DataSourceDict_599_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"g - 'Bool_t' 0 'kTRUE' trycase1 g - 'Bool_t' 0 'kTRUE' trycase2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_599_0_24, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrb2Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_599_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb2Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_599_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrb2Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_599_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrb2Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_599_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_599_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb2Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_599_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb2Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_599_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb2Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_599_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb2Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb2Unpacker", 1243, G__DataSourceDict_599_0_36, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker), -1, 0, 1, 1, 1, 0, "u 'HTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_599_0_37, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb2Unpacker), -1, 1, 1, 1, 1, 0, "u 'HTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb3Unpacker(void) {
   /* HTrb3Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker));
   G__memfunc_setup("HTrb3Unpacker",1244,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker), -1, 0, 1, 1, 2, 0, "h - 'UInt_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setHUBId",728,G__DataSourceDict_600_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCTSId",739,G__DataSourceDict_600_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugFlag",1197,G__DataSourceDict_600_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDebugFlag",1185,G__DataSourceDict_600_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__DataSourceDict_600_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReportCritical",1779,G__DataSourceDict_600_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isQuietMode",1129,G__DataSourceDict_600_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isReportCritical",1667,G__DataSourceDict_600_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createTDC",847,G__DataSourceDict_600_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - id1 U 'HTrb3CalparTdc' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTDC",516,G__DataSourceDict_600_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HTrb3TdcUnpacker' - 0 - tdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("numTDC",555,G__DataSourceDict_600_0_16, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC",539,G__DataSourceDict_600_0_17, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker), -1, 0, 1, 1, 1, 8, "h - 'UInt_t' 0 - indx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearAll",800,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decode",612,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_600_0_20, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrb3Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_600_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_600_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrb3Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_600_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrb3Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_600_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_600_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_600_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_600_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_600_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb3Unpacker", 1244, G__DataSourceDict_600_0_32, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker), -1, 0, 1, 1, 1, 0, "u 'HTrb3Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_600_0_33, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Unpacker), -1, 1, 1, 1, 1, 0, "u 'HTrb3Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb3CalparTdc(void) {
   /* HTrb3CalparTdc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc));
   G__memfunc_setup("HTrb3CalparTdc",1297,G__DataSourceDict_601_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,G__DataSourceDict_601_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEdgesMask",1204,G__DataSourceDict_601_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNChannels",1210,G__DataSourceDict_601_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBinsPerChannel",1786,G__DataSourceDict_601_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBinsPar",1007,G__DataSourceDict_601_0_6, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArraySize",1242,G__DataSourceDict_601_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRisingArr",1233,G__DataSourceDict_601_0_8, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - chan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFallingArr",1314,G__DataSourceDict_601_0_9, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - chan", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRisingPar",1231,G__DataSourceDict_601_0_10, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - chan i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFallingPar",1312,G__DataSourceDict_601_0_11, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - chan i - 'Int_t' 0 - bin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataSourceDict_601_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeArray",925,G__DataSourceDict_601_0_13, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillArray",934,G__DataSourceDict_601_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromBinaryFile",1817,G__DataSourceDict_601_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - filename i - 'Int_t' 0 - subevtid "
"i - 'Int_t' 0 '600' numBins i - 'Int_t' 0 '1' nEdgesMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSimpleFineCalibration",2464,G__DataSourceDict_601_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - - h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__DataSourceDict_601_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__DataSourceDict_601_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_601_0_19, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrb3CalparTdc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_601_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3CalparTdc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_601_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrb3CalparTdc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_601_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrb3CalparTdc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_601_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_601_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3CalparTdc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_601_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3CalparTdc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_601_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3CalparTdc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_601_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3CalparTdc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb3CalparTdc", 1297, G__DataSourceDict_601_0_31, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc), -1, 0, 1, 1, 1, 0, "u 'HTrb3CalparTdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrb3CalparTdc", 1423, G__DataSourceDict_601_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_601_0_33, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc), -1, 1, 1, 1, 1, 0, "u 'HTrb3CalparTdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb3TdcUnpacker(void) {
   /* HTrb3TdcUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker));
   G__memfunc_setup("isQuietMode",1129,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventSeqNumber",1748,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTrb3TdcUnpacker",1527,G__DataSourceDict_602_0_4, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 '0' id U 'HTrb3CalparTdc' - 0 '0' tdcpar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrbAddr",995,G__DataSourceDict_602_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParent",950,G__DataSourceDict_602_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HTrb3Unpacker' - 0 - prnt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("numChannels",1148,G__DataSourceDict_602_0_7, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCh",491,G__DataSourceDict_602_0_8, 117, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpackercLcLChannelRec), -1, 1, 1, 1, 1, 0, "h - - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearHits",927,G__DataSourceDict_602_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scanTdcData",1082,G__DataSourceDict_602_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"H - 'UInt_t' 0 - data h - 'UInt_t' 0 - datalen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("correctRefTimeCh",1609,G__DataSourceDict_602_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_602_0_12, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrb3TdcUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_602_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3TdcUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_602_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrb3TdcUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_602_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrb3TdcUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_602_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_602_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3TdcUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_602_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3TdcUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_602_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3TdcUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_602_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3TdcUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb3TdcUnpacker", 1527, G__DataSourceDict_602_0_24, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker), -1, 0, 1, 1, 1, 0, "u 'HTrb3TdcUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrb3TdcUnpacker", 1653, G__DataSourceDict_602_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_602_0_26, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcUnpacker), -1, 1, 1, 1, 1, 0, "u 'HTrb3TdcUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb3Calpar(void) {
   /* HTrb3Calpar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar));
   G__memfunc_setup("HTrb3Calpar",1014,G__DataSourceDict_608_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '-1' minTrbnetAddress "
"i - 'Int_t' 0 '-1' maxTrbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdc",603,G__DataSourceDict_608_0_2, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataSourceDict_608_0_3, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__DataSourceDict_608_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__DataSourceDict_608_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addTdc",580,G__DataSourceDict_608_0_9, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3CalparTdc), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__DataSourceDict_608_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__DataSourceDict_608_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,G__DataSourceDict_608_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadFromBinaryFiles",1932,G__DataSourceDict_608_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - - 10 - basefname i - 'Int_t' 0 - subevtid "
"i - 'Int_t' 0 '600' numBins i - 'Int_t' 0 '1' nEdgesMask", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_608_0_14, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrb3Calpar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_608_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3Calpar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_608_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrb3Calpar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_608_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrb3Calpar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_608_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_608_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3Calpar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_608_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3Calpar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_608_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrb3Calpar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_608_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrb3Calpar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb3Calpar", 1014, G__DataSourceDict_608_0_26, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar), -1, 0, 1, 1, 1, 0, "u 'HTrb3Calpar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrb3Calpar", 1140, G__DataSourceDict_608_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_608_0_28, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3Calpar), -1, 1, 1, 1, 1, 0, "u 'HTrb3Calpar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb3TdcMessage(void) {
   /* HTrb3TdcMessage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage));
   G__memfunc_setup("HTrb3TdcMessage",1411,G__DataSourceDict_615_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTrb3TdcMessage",1411,G__DataSourceDict_615_0_2, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage), -1, 0, 1, 1, 1, 0, "h - 'uint32_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__DataSourceDict_615_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'uint32_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKind",710,G__DataSourceDict_615_0_4, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isHitMsg",808,G__DataSourceDict_615_0_5, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEpochMsg",1010,G__DataSourceDict_615_0_6, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDebugMsg",1002,G__DataSourceDict_615_0_7, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isHeaderMsg",1100,G__DataSourceDict_615_0_8, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isReservedMsg",1347,G__DataSourceDict_615_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpochValue",1324,G__DataSourceDict_615_0_10, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpochRes",1113,G__DataSourceDict_615_0_11, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitChannel",1310,G__DataSourceDict_615_0_12, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitTmCoarse",1411,G__DataSourceDict_615_0_13, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitTmFine",1192,G__DataSourceDict_615_0_14, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitTmStamp",1323,G__DataSourceDict_615_0_15, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitEdge",986,G__DataSourceDict_615_0_16, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isHitRisingEdge",1506,G__DataSourceDict_615_0_17, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isHitFallingEdge",1587,G__DataSourceDict_615_0_18, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitReserved",1445,G__DataSourceDict_615_0_19, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeaderErr",1202,G__DataSourceDict_615_0_20, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHeaderRes",1203,G__DataSourceDict_615_0_21, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__DataSourceDict_615_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 '-1.' tm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("coarseUnit",1053,G__DataSourceDict_615_0_23, 100, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (double (*)())(&HTrb3TdcMessage::coarseUnit) ), 0);
   G__memfunc_setup("simpleFineCalibr",1625,G__DataSourceDict_615_0_24, 100, -1, -1, 0, 1, 3, 1, 0, "h - - 0 - -", (char*)NULL, (void*) G__func2void( (double (*)(unsigned int))(&HTrb3TdcMessage::simpleFineCalibr) ), 0);
   G__memfunc_setup("setFineLimits",1344,G__DataSourceDict_615_0_25, 121, -1, -1, 0, 2, 3, 1, 0, 
"h - - 0 - - h - - 0 - -", (char*)NULL, (void*) G__func2void( (void (*)(unsigned int, unsigned int))(&HTrb3TdcMessage::setFineLimits) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb3TdcMessage", 1411, G__DataSourceDict_615_0_26, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage), -1, 0, 1, 1, 1, 0, "u 'HTrb3TdcMessage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrb3TdcMessage", 1537, G__DataSourceDict_615_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_615_0_28, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage), -1, 1, 1, 1, 1, 0, "u 'HTrb3TdcMessage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrb3TdcIterator(void) {
   /* HTrb3TdcIterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIterator));
   G__memfunc_setup("HTrb3TdcIterator",1544,G__DataSourceDict_616_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("assign",645,G__DataSourceDict_616_0_2, 121, -1, -1, 0, 3, 1, 1, 0, 
"H - 'uint32_t' 0 - buf h - - 0 - - "
"g - - 0 'true' swapped", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefEpoch",1112,G__DataSourceDict_616_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'uint32_t' 0 - epoch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__DataSourceDict_616_0_4, 103, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMsgStamp",1132,G__DataSourceDict_616_0_5, 109, -1, G__defined_typename("uint64_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMsgTimeCoarse",1619,G__DataSourceDict_616_0_6, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMsgTimeFine",1400,G__DataSourceDict_616_0_7, 100, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("msg",327,G__DataSourceDict_616_0_8, 117, G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcMessage), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCurEpoch",1013,G__DataSourceDict_616_0_9, 103, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearCurEpoch",1312,G__DataSourceDict_616_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCurEpoch",1113,G__DataSourceDict_616_0_11, 104, -1, G__defined_typename("uint32_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printmsg",884,G__DataSourceDict_616_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HTrb3TdcIterator", 1544, G__DataSourceDict_616_0_13, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIterator), -1, 0, 1, 1, 1, 0, "u 'HTrb3TdcIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrb3TdcIterator", 1670, G__DataSourceDict_616_0_14, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_616_0_15, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrb3TdcIterator), -1, 1, 1, 1, 1, 0, "u 'HTrb3TdcIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrbLookupChan(void) {
   /* HTrbLookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan));
   G__memfunc_setup("HTrbLookupChan",1380,G__DataSourceDict_620_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDetector",1146,G__DataSourceDict_620_0_2, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__DataSourceDict_620_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__DataSourceDict_620_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__DataSourceDict_620_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSide",709,G__DataSourceDict_620_0_6, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFeAddress",1201,G__DataSourceDict_620_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__DataSourceDict_620_0_8, 121, -1, -1, 0, 6, 1, 1, 0, 
"c - 'Char_t' 1 - d i - 'Int_t' 1 - s "
"i - 'Int_t' 1 - m i - 'Int_t' 1 - c "
"c - 'Char_t' 1 - t i - 'Int_t' 1 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__DataSourceDict_620_0_9, 121, -1, -1, 0, 6, 1, 1, 0, 
"c - 'Char_t' 0 - d i - 'Int_t' 0 - s "
"i - 'Int_t' 0 - m i - 'Int_t' 0 - c "
"c - 'Char_t' 0 - t i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__DataSourceDict_620_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HTrbLookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDetector",1158,G__DataSourceDict_620_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__DataSourceDict_620_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__DataSourceDict_620_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__DataSourceDict_620_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSide",721,G__DataSourceDict_620_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFeAddress",1213,G__DataSourceDict_620_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataSourceDict_620_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_620_0_18, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrbLookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_620_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_620_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrbLookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_620_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrbLookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_620_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_620_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_620_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbLookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_620_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_620_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbLookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrbLookupChan", 1380, G__DataSourceDict_620_0_30, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan), -1, 0, 1, 1, 1, 0, "u 'HTrbLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrbLookupChan", 1506, G__DataSourceDict_620_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_620_0_32, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan), -1, 1, 1, 1, 1, 0, "u 'HTrbLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrbLookupBoard(void) {
   /* HTrbLookupBoard */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard));
   G__memfunc_setup("HTrbLookupBoard",1490,G__DataSourceDict_621_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__DataSourceDict_621_0_2, 85, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataSourceDict_621_0_3, 117, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__DataSourceDict_621_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataSourceDict_621_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_621_0_6, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrbLookupBoard::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_621_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookupBoard::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_621_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrbLookupBoard::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_621_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrbLookupBoard::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_621_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_621_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookupBoard::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_621_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbLookupBoard::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_621_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbLookupBoard::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_621_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbLookupBoard::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrbLookupBoard", 1490, G__DataSourceDict_621_0_18, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard), -1, 0, 1, 1, 1, 0, "u 'HTrbLookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrbLookupBoard", 1616, G__DataSourceDict_621_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_621_0_20, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbLookupBoard), -1, 1, 1, 1, 1, 0, "u 'HTrbLookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncTrbnet(void) {
   /* Trbnet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_Trbnet));
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrbNetDebugInfo(void) {
   /* HTrbNetDebugInfo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo));
   G__memfunc_setup("HTrbNetDebugInfo",1546,G__DataSourceDict_626_0_1, 105, G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__DataSourceDict_626_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusWord",1376,G__DataSourceDict_626_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatusBit",1251,G__DataSourceDict_626_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "c - - 0 - bit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__DataSourceDict_626_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus",976,G__DataSourceDict_626_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataSourceDict_626_0_7, 85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrbNetDebugInfo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataSourceDict_626_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbNetDebugInfo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataSourceDict_626_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrbNetDebugInfo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataSourceDict_626_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrbNetDebugInfo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataSourceDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataSourceDict_626_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataSourceDict_626_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbNetDebugInfo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataSourceDict_626_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbNetDebugInfo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataSourceDict_626_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrbNetDebugInfo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataSourceDict_626_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrbNetDebugInfo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTrbNetDebugInfo", 1546, G__DataSourceDict_626_0_19, (int) ('i'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo), -1, 0, 1, 1, 1, 0, "u 'HTrbNetDebugInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTrbNetDebugInfo", 1672, G__DataSourceDict_626_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataSourceDict_626_0_21, (int) ('u'), G__get_linked_tagnum(&G__DataSourceDictLN_HTrbNetDebugInfo), -1, 1, 1, 1, 1, 0, "u 'HTrbNetDebugInfo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDataSourceDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDataSourceDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDataSourceDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DataSourceDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HEvent = { "HEvent" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_EDsState = { "EDsState" , 101 , -1 };
G__linked_taginfo G__DataSourceDictLN_HDataSource = { "HDataSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DataSourceDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_THashTable = { "THashTable" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HGeantReader = { "HGeantReader" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HGeantSource = { "HGeantSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TEventList = { "TEventList" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HRootSource = { "HRootSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HEventHeader = { "HEventHeader" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HRecEvent = { "HRecEvent" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HGeantMergeSource = { "HGeantMergeSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_vectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgR = { "vector<HParallelEvent*,allocator<HParallelEvent*> >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_reverse_iteratorlEvectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HParallelEvent*,allocator<HParallelEvent*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldSubEvt = { "HldSubEvt" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrbNetUnpacker = { "HTrbNetUnpacker" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldEvt = { "HldEvt" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_dirent = { "dirent" , 115 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldSource = { "HldSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldFileOutput = { "HldFileOutput" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldFileDesc = { "HldFileDesc" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldFileSourceBase = { "HldFileSourceBase" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldFileSource = { "HldFileSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HLinearCategory = { "HLinearCategory" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HGeantKine = { "HGeantKine" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HKineGeantReader = { "HKineGeantReader" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HSimulGeantReader = { "HSimulGeantReader" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HDirectSource = { "HDirectSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldRemoteSource = { "HldRemoteSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HldGrepFileSource = { "HldGrepFileSource" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrbLookup = { "HTrbLookup" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrbBaseUnpacker = { "HTrbBaseUnpacker" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb2Correction = { "HTrb2Correction" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrbnetAddressMapping = { "HTrbnetAddressMapping" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb2Unpacker = { "HTrb2Unpacker" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3Unpacker = { "HTrb3Unpacker" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3CalparTdc = { "HTrb3CalparTdc" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3TdcUnpacker = { "HTrb3TdcUnpacker" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3TdcUnpackercLcLChannelRec = { "HTrb3TdcUnpacker::ChannelRec" , 115 , -1 };
G__linked_taginfo G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR = { "vector<HTrb3TdcUnpacker::ChannelRec,allocator<HTrb3TdcUnpacker::ChannelRec> >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTrb3TdcUnpacker::ChannelRec,allocator<HTrb3TdcUnpacker::ChannelRec> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3Calpar = { "HTrb3Calpar" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR = { "vector<HTrb3TdcUnpacker*,allocator<HTrb3TdcUnpacker*> >" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTrb3TdcUnpacker*,allocator<HTrb3TdcUnpacker*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3TdcMessage = { "HTrb3TdcMessage" , 115 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3TdcIterator = { "HTrb3TdcIterator" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrb3TdcIteratorcLcLdA = { "HTrb3TdcIterator::$" , 101 , -1 };
G__linked_taginfo G__DataSourceDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrbLookupChan = { "HTrbLookupChan" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrbLookupBoard = { "HTrbLookupBoard" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_Trbnet = { "Trbnet" , 110 , -1 };
G__linked_taginfo G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange = { "Trbnet::eTrbnetAddressRange" , 101 , -1 };
G__linked_taginfo G__DataSourceDictLN_HRuntimeDb = { "HRuntimeDb" , 99 , -1 };
G__linked_taginfo G__DataSourceDictLN_HTrbNetDebugInfo = { "HTrbNetDebugInfo" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDataSourceDict() {
  G__DataSourceDictLN_TClass.tagnum = -1 ;
  G__DataSourceDictLN_TBuffer.tagnum = -1 ;
  G__DataSourceDictLN_TMemberInspector.tagnum = -1 ;
  G__DataSourceDictLN_TObject.tagnum = -1 ;
  G__DataSourceDictLN_TNamed.tagnum = -1 ;
  G__DataSourceDictLN_TString.tagnum = -1 ;
  G__DataSourceDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataSourceDictLN_TList.tagnum = -1 ;
  G__DataSourceDictLN_TObjArray.tagnum = -1 ;
  G__DataSourceDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataSourceDictLN_HEvent.tagnum = -1 ;
  G__DataSourceDictLN_EDsState.tagnum = -1 ;
  G__DataSourceDictLN_HDataSource.tagnum = -1 ;
  G__DataSourceDictLN_TIterator.tagnum = -1 ;
  G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DataSourceDictLN_TFile.tagnum = -1 ;
  G__DataSourceDictLN_THashTable.tagnum = -1 ;
  G__DataSourceDictLN_TStopwatch.tagnum = -1 ;
  G__DataSourceDictLN_HGeantReader.tagnum = -1 ;
  G__DataSourceDictLN_HGeantSource.tagnum = -1 ;
  G__DataSourceDictLN_TTree.tagnum = -1 ;
  G__DataSourceDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_TEventList.tagnum = -1 ;
  G__DataSourceDictLN_TChain.tagnum = -1 ;
  G__DataSourceDictLN_HRootSource.tagnum = -1 ;
  G__DataSourceDictLN_HLocation.tagnum = -1 ;
  G__DataSourceDictLN_HCategory.tagnum = -1 ;
  G__DataSourceDictLN_HEventHeader.tagnum = -1 ;
  G__DataSourceDictLN_HRecEvent.tagnum = -1 ;
  G__DataSourceDictLN_HGeantMergeSource.tagnum = -1 ;
  G__DataSourceDictLN_vectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_reverse_iteratorlEvectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataSourceDictLN_HldSubEvt.tagnum = -1 ;
  G__DataSourceDictLN_HTrbNetUnpacker.tagnum = -1 ;
  G__DataSourceDictLN_HldUnpack.tagnum = -1 ;
  G__DataSourceDictLN_HldEvt.tagnum = -1 ;
  G__DataSourceDictLN_dirent.tagnum = -1 ;
  G__DataSourceDictLN_HldSource.tagnum = -1 ;
  G__DataSourceDictLN_HldFileOutput.tagnum = -1 ;
  G__DataSourceDictLN_HldFileDesc.tagnum = -1 ;
  G__DataSourceDictLN_HldFileSourceBase.tagnum = -1 ;
  G__DataSourceDictLN_HldFileSource.tagnum = -1 ;
  G__DataSourceDictLN_HLinearCategory.tagnum = -1 ;
  G__DataSourceDictLN_HGeantKine.tagnum = -1 ;
  G__DataSourceDictLN_HKineGeantReader.tagnum = -1 ;
  G__DataSourceDictLN_HSimulGeantReader.tagnum = -1 ;
  G__DataSourceDictLN_HDirectSource.tagnum = -1 ;
  G__DataSourceDictLN_HldRemoteSource.tagnum = -1 ;
  G__DataSourceDictLN_HldGrepFileSource.tagnum = -1 ;
  G__DataSourceDictLN_HTrbLookup.tagnum = -1 ;
  G__DataSourceDictLN_HTrbBaseUnpacker.tagnum = -1 ;
  G__DataSourceDictLN_HTrb2Correction.tagnum = -1 ;
  G__DataSourceDictLN_HTrbnetAddressMapping.tagnum = -1 ;
  G__DataSourceDictLN_HTrb2Unpacker.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3Unpacker.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3CalparTdc.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3TdcUnpacker.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3TdcUnpackercLcLChannelRec.tagnum = -1 ;
  G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3Calpar.tagnum = -1 ;
  G__DataSourceDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR.tagnum = -1 ;
  G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3TdcMessage.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3TdcIterator.tagnum = -1 ;
  G__DataSourceDictLN_HTrb3TdcIteratorcLcLdA.tagnum = -1 ;
  G__DataSourceDictLN_HParIo.tagnum = -1 ;
  G__DataSourceDictLN_HParSet.tagnum = -1 ;
  G__DataSourceDictLN_HTrbLookupChan.tagnum = -1 ;
  G__DataSourceDictLN_HTrbLookupBoard.tagnum = -1 ;
  G__DataSourceDictLN_TArrayF.tagnum = -1 ;
  G__DataSourceDictLN_Trbnet.tagnum = -1 ;
  G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange.tagnum = -1 ;
  G__DataSourceDictLN_HRuntimeDb.tagnum = -1 ;
  G__DataSourceDictLN_HTrbNetDebugInfo.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDataSourceDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TString);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TList);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HEvent);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_EDsState);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HDataSource),sizeof(HDataSource),-1,28936,"Event's input data manager.",G__setup_memvarHDataSource,G__setup_memfuncHDataSource);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_THashTable);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TStopwatch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HGeantReader),sizeof(HGeantReader),-1,29952,"Base class for the different GEANT readers",G__setup_memvarHGeantReader,G__setup_memfuncHGeantReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HGeantSource),sizeof(HGeantSource),-1,30466,"Data source to read GEANT ouput",G__setup_memvarHGeantSource,G__setup_memfuncHGeantSource);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TEventList);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TChain);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HRootSource),sizeof(HRootSource),-1,29952,"Data source to read Root files.",G__setup_memvarHRootSource,G__setup_memfuncHRootSource);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HEventHeader);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HRecEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HGeantMergeSource),sizeof(HGeantMergeSource),-1,29952,"Data source to read Root files.",G__setup_memvarHGeantMergeSource,G__setup_memfuncHGeantMergeSource);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_vectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHParallelEventmUcOallocatorlEHParallelEventmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldSubEvt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrbNetUnpacker),sizeof(HTrbNetUnpacker),-1,30464,(char*)NULL,G__setup_memvarHTrbNetUnpacker,G__setup_memfuncHTrbNetUnpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldUnpack),sizeof(HldUnpack),-1,29954,"base class for the raw data unpackers",G__setup_memvarHldUnpack,G__setup_memfuncHldUnpack);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldEvt);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_dirent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldSource),sizeof(HldSource),-1,29957,"Data source to read LMD data",G__setup_memvarHldSource,G__setup_memfuncHldSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldFileOutput),sizeof(HldFileOutput),-1,62720,"! Writes LMD files;",G__setup_memvarHldFileOutput,G__setup_memfuncHldFileOutput);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldFileDesc),sizeof(HldFileDesc),-1,62720,"File descriptor for Hld source",G__setup_memvarHldFileDesc,G__setup_memfuncHldFileDesc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldFileSourceBase),sizeof(HldFileSourceBase),-1,30468,"! Data source to read HLD files;",G__setup_memvarHldFileSourceBase,G__setup_memfuncHldFileSourceBase);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldFileSource),sizeof(HldFileSource),-1,30464,"! Data source to read LMD files;",G__setup_memvarHldFileSource,G__setup_memfuncHldFileSource);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HLinearCategory);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HGeantKine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HKineGeantReader),sizeof(HKineGeantReader),-1,29952,"KINE reader for HGeant root file",G__setup_memvarHKineGeantReader,G__setup_memfuncHKineGeantReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HSimulGeantReader),sizeof(HSimulGeantReader),-1,29952,"Simul reader for HGeant root file",G__setup_memvarHSimulGeantReader,G__setup_memfuncHSimulGeantReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HDirectSource),sizeof(HDirectSource),-1,30467,"Data source to operate under HGeant control",G__setup_memvarHDirectSource,G__setup_memfuncHDirectSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldRemoteSource),sizeof(HldRemoteSource),-1,62720,"Data source to read rpc buffers;",G__setup_memvarHldRemoteSource,G__setup_memfuncHldRemoteSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HldGrepFileSource),sizeof(HldGrepFileSource),-1,29952,"! Data source to read LMD files;",G__setup_memvarHldGrepFileSource,G__setup_memfuncHldGrepFileSource);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrbLookup),sizeof(HTrbLookup),-1,62720,"Lookup table for the TRB unpacker",G__setup_memvarHTrbLookup,G__setup_memfuncHTrbLookup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrbBaseUnpacker),sizeof(HTrbBaseUnpacker),-1,29952,"Base class for TRB unpacker",G__setup_memvarHTrbBaseUnpacker,G__setup_memfuncHTrbBaseUnpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb2Correction),sizeof(HTrb2Correction),-1,62720,"Correction table for the tdc channels of one TRB board",G__setup_memvarHTrb2Correction,G__setup_memfuncHTrb2Correction);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrbnetAddressMapping),sizeof(HTrbnetAddressMapping),-1,62720,"Mapping of trbnet addresses to boards",G__setup_memvarHTrbnetAddressMapping,G__setup_memfuncHTrbnetAddressMapping);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb2Unpacker),sizeof(HTrb2Unpacker),-1,29952,"Base class for TRB2 unpackers",G__setup_memvarHTrb2Unpacker,G__setup_memfuncHTrb2Unpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3Unpacker),sizeof(HTrb3Unpacker),-1,29952,"Base class for TRB3 unpackers",G__setup_memvarHTrb3Unpacker,G__setup_memfuncHTrb3Unpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3CalparTdc),sizeof(HTrb3CalparTdc),-1,29952,"TDC level of the TRB3 TDC calibration parameters",G__setup_memvarHTrb3CalparTdc,G__setup_memfuncHTrb3CalparTdc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3TdcUnpacker),sizeof(HTrb3TdcUnpacker),-1,29952,"Unpacker for TRB3 FPGA TDC",G__setup_memvarHTrb3TdcUnpacker,G__setup_memfuncHTrb3TdcUnpacker);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3TdcUnpackercLcLChannelRec);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3Calpar),sizeof(HTrb3Calpar),-1,62720,"Base class for the TRB3 TDC calibration parameters",G__setup_memvarHTrb3Calpar,G__setup_memfuncHTrb3Calpar);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3TdcMessage),sizeof(HTrb3TdcMessage),-1,33024,(char*)NULL,G__setup_memvarHTrb3TdcMessage,G__setup_memfuncHTrb3TdcMessage);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3TdcIterator),sizeof(HTrb3TdcIterator),-1,256,(char*)NULL,G__setup_memvarHTrb3TdcIterator,G__setup_memfuncHTrb3TdcIterator);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrb3TdcIteratorcLcLdA);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HParSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrbLookupChan),sizeof(HTrbLookupChan),-1,95488,"Channel level of the lookup table for the TRB unpacker",G__setup_memvarHTrbLookupChan,G__setup_memfuncHTrbLookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrbLookupBoard),sizeof(HTrbLookupBoard),-1,29952,"Board level of  the lookup table for the TRB unpacker",G__setup_memvarHTrbLookupBoard,G__setup_memfuncHTrbLookupBoard);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_Trbnet),0,-1,0,(char*)NULL,G__setup_memvarTrbnet,G__setup_memfuncTrbnet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_TrbnetcLcLeTrbnetAddressRange),sizeof(int),-1,0,(char*)NULL,NULL,NULL);
   G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HRuntimeDb);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataSourceDictLN_HTrbNetDebugInfo),sizeof(HTrbNetDebugInfo),-1,29952,(char*)NULL,G__setup_memvarHTrbNetDebugInfo,G__setup_memfuncHTrbNetDebugInfo);
}
extern "C" void G__cpp_setupDataSourceDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDataSourceDict()");
  G__set_cpp_environmentDataSourceDict();
  G__cpp_setup_tagtableDataSourceDict();

  G__cpp_setup_inheritanceDataSourceDict();

  G__cpp_setup_typetableDataSourceDict();

  G__cpp_setup_memvarDataSourceDict();

  G__cpp_setup_memfuncDataSourceDict();
  G__cpp_setup_globalDataSourceDict();
  G__cpp_setup_funcDataSourceDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDataSourceDict();
  return;
}
class G__cpp_setup_initDataSourceDict {
  public:
    G__cpp_setup_initDataSourceDict() { G__add_setup_func("DataSourceDict",(G__incsetup)(&G__cpp_setupDataSourceDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDataSourceDict() { G__remove_setup_func("DataSourceDict"); }
};
G__cpp_setup_initDataSourceDict G__cpp_setup_initializerDataSourceDict;


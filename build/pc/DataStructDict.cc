//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:44:42 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIDataStructDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "DataStructDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HLocation_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HLocation(void *p = 0);
   static void *newArray_HLocation(Long_t size, void *p);
   static void delete_HLocation(void *p);
   static void deleteArray_HLocation(void *p);
   static void destruct_HLocation(void *p);
   static void streamer_HLocation(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HLocation*)
   {
      ::HLocation *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HLocation >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HLocation", ::HLocation::Class_Version(), "./datastruct/hlocation.h", 8,
                  typeid(::HLocation), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HLocation::Dictionary, isa_proxy, 0,
                  sizeof(::HLocation) );
      instance.SetNew(&new_HLocation);
      instance.SetNewArray(&newArray_HLocation);
      instance.SetDelete(&delete_HLocation);
      instance.SetDeleteArray(&deleteArray_HLocation);
      instance.SetDestructor(&destruct_HLocation);
      instance.SetStreamerFunc(&streamer_HLocation);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HLocation*)
   {
      return GenerateInitInstanceLocal((::HLocation*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HLocation*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HFilter(void *p);
   static void deleteArray_HFilter(void *p);
   static void destruct_HFilter(void *p);
   static void streamer_HFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HFilter*)
   {
      ::HFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HFilter", ::HFilter::Class_Version(), "./datastruct/hfilter.h", 6,
                  typeid(::HFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HFilter) );
      instance.SetDelete(&delete_HFilter);
      instance.SetDeleteArray(&deleteArray_HFilter);
      instance.SetDestructor(&destruct_HFilter);
      instance.SetStreamerFunc(&streamer_HFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HFilter*)
   {
      return GenerateInitInstanceLocal((::HFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HCategory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HCategory(void *p);
   static void deleteArray_HCategory(void *p);
   static void destruct_HCategory(void *p);
   static void streamer_HCategory(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HCategory*)
   {
      ::HCategory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HCategory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HCategory", ::HCategory::Class_Version(), "./datastruct/hcategory.h", 18,
                  typeid(::HCategory), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HCategory::Dictionary, isa_proxy, 1,
                  sizeof(::HCategory) );
      instance.SetDelete(&delete_HCategory);
      instance.SetDeleteArray(&deleteArray_HCategory);
      instance.SetDestructor(&destruct_HCategory);
      instance.SetStreamerFunc(&streamer_HCategory);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HCategory*)
   {
      return GenerateInitInstanceLocal((::HCategory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HCategory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPairListI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPairListI(void *p = 0);
   static void *newArray_HPairListI(Long_t size, void *p);
   static void delete_HPairListI(void *p);
   static void deleteArray_HPairListI(void *p);
   static void destruct_HPairListI(void *p);
   static void streamer_HPairListI(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPairListI*)
   {
      ::HPairListI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPairListI >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPairListI", ::HPairListI::Class_Version(), "./datastruct/hindextable.h", 10,
                  typeid(::HPairListI), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPairListI::Dictionary, isa_proxy, 1,
                  sizeof(::HPairListI) );
      instance.SetNew(&new_HPairListI);
      instance.SetNewArray(&newArray_HPairListI);
      instance.SetDelete(&delete_HPairListI);
      instance.SetDeleteArray(&deleteArray_HPairListI);
      instance.SetDestructor(&destruct_HPairListI);
      instance.SetStreamerFunc(&streamer_HPairListI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPairListI*)
   {
      return GenerateInitInstanceLocal((::HPairListI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPairListI*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HIndexTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HIndexTable(void *p = 0);
   static void *newArray_HIndexTable(Long_t size, void *p);
   static void delete_HIndexTable(void *p);
   static void deleteArray_HIndexTable(void *p);
   static void destruct_HIndexTable(void *p);
   static void streamer_HIndexTable(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HIndexTable*)
   {
      ::HIndexTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HIndexTable >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HIndexTable", ::HIndexTable::Class_Version(), "./datastruct/hindextable.h", 42,
                  typeid(::HIndexTable), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HIndexTable::Dictionary, isa_proxy, 1,
                  sizeof(::HIndexTable) );
      instance.SetNew(&new_HIndexTable);
      instance.SetNewArray(&newArray_HIndexTable);
      instance.SetDelete(&delete_HIndexTable);
      instance.SetDeleteArray(&deleteArray_HIndexTable);
      instance.SetDestructor(&destruct_HIndexTable);
      instance.SetStreamerFunc(&streamer_HIndexTable);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HIndexTable*)
   {
      return GenerateInitInstanceLocal((::HIndexTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HIndexTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HIterator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HIterator(void *p);
   static void deleteArray_HIterator(void *p);
   static void destruct_HIterator(void *p);
   static void streamer_HIterator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HIterator*)
   {
      ::HIterator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HIterator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HIterator", ::HIterator::Class_Version(), "./datastruct/hiterator.h", 9,
                  typeid(::HIterator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HIterator::Dictionary, isa_proxy, 0,
                  sizeof(::HIterator) );
      instance.SetDelete(&delete_HIterator);
      instance.SetDeleteArray(&deleteArray_HIterator);
      instance.SetDestructor(&destruct_HIterator);
      instance.SetStreamerFunc(&streamer_HIterator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HIterator*)
   {
      return GenerateInitInstanceLocal((::HIterator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HIterator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HLinearCatIter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HLinearCatIter(void *p);
   static void deleteArray_HLinearCatIter(void *p);
   static void destruct_HLinearCatIter(void *p);
   static void streamer_HLinearCatIter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HLinearCatIter*)
   {
      ::HLinearCatIter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HLinearCatIter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HLinearCatIter", ::HLinearCatIter::Class_Version(), "./datastruct/hlinearcatiter.h", 7,
                  typeid(::HLinearCatIter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HLinearCatIter::Dictionary, isa_proxy, 0,
                  sizeof(::HLinearCatIter) );
      instance.SetDelete(&delete_HLinearCatIter);
      instance.SetDeleteArray(&deleteArray_HLinearCatIter);
      instance.SetDestructor(&destruct_HLinearCatIter);
      instance.SetStreamerFunc(&streamer_HLinearCatIter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HLinearCatIter*)
   {
      return GenerateInitInstanceLocal((::HLinearCatIter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HLinearCatIter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HLinearCategory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HLinearCategory(void *p = 0);
   static void *newArray_HLinearCategory(Long_t size, void *p);
   static void delete_HLinearCategory(void *p);
   static void deleteArray_HLinearCategory(void *p);
   static void destruct_HLinearCategory(void *p);
   static void streamer_HLinearCategory(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HLinearCategory*)
   {
      ::HLinearCategory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HLinearCategory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HLinearCategory", ::HLinearCategory::Class_Version(), "./datastruct/hlinearcategory.h", 8,
                  typeid(::HLinearCategory), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HLinearCategory::Dictionary, isa_proxy, 1,
                  sizeof(::HLinearCategory) );
      instance.SetNew(&new_HLinearCategory);
      instance.SetNewArray(&newArray_HLinearCategory);
      instance.SetDelete(&delete_HLinearCategory);
      instance.SetDeleteArray(&deleteArray_HLinearCategory);
      instance.SetDestructor(&destruct_HLinearCategory);
      instance.SetStreamerFunc(&streamer_HLinearCategory);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HLinearCategory*)
   {
      return GenerateInitInstanceLocal((::HLinearCategory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HLinearCategory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HLocatedDataObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HLocatedDataObject(void *p = 0);
   static void *newArray_HLocatedDataObject(Long_t size, void *p);
   static void delete_HLocatedDataObject(void *p);
   static void deleteArray_HLocatedDataObject(void *p);
   static void destruct_HLocatedDataObject(void *p);
   static void streamer_HLocatedDataObject(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HLocatedDataObject*)
   {
      ::HLocatedDataObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HLocatedDataObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HLocatedDataObject", ::HLocatedDataObject::Class_Version(), "./datastruct/hlocateddataobject.h", 7,
                  typeid(::HLocatedDataObject), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HLocatedDataObject::Dictionary, isa_proxy, 1,
                  sizeof(::HLocatedDataObject) );
      instance.SetNew(&new_HLocatedDataObject);
      instance.SetNewArray(&newArray_HLocatedDataObject);
      instance.SetDelete(&delete_HLocatedDataObject);
      instance.SetDeleteArray(&deleteArray_HLocatedDataObject);
      instance.SetDestructor(&destruct_HLocatedDataObject);
      instance.SetStreamerFunc(&streamer_HLocatedDataObject);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HLocatedDataObject*)
   {
      return GenerateInitInstanceLocal((::HLocatedDataObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HLocatedDataObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMatrixCatIter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMatrixCatIter(void *p);
   static void deleteArray_HMatrixCatIter(void *p);
   static void destruct_HMatrixCatIter(void *p);
   static void streamer_HMatrixCatIter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMatrixCatIter*)
   {
      ::HMatrixCatIter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMatrixCatIter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMatrixCatIter", ::HMatrixCatIter::Class_Version(), "./datastruct/hmatrixcatiter.h", 8,
                  typeid(::HMatrixCatIter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMatrixCatIter::Dictionary, isa_proxy, 0,
                  sizeof(::HMatrixCatIter) );
      instance.SetDelete(&delete_HMatrixCatIter);
      instance.SetDeleteArray(&deleteArray_HMatrixCatIter);
      instance.SetDestructor(&destruct_HMatrixCatIter);
      instance.SetStreamerFunc(&streamer_HMatrixCatIter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMatrixCatIter*)
   {
      return GenerateInitInstanceLocal((::HMatrixCatIter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMatrixCatIter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMatrixCategory_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMatrixCategory(void *p = 0);
   static void *newArray_HMatrixCategory(Long_t size, void *p);
   static void delete_HMatrixCategory(void *p);
   static void deleteArray_HMatrixCategory(void *p);
   static void destruct_HMatrixCategory(void *p);
   static void streamer_HMatrixCategory(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMatrixCategory*)
   {
      ::HMatrixCategory *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMatrixCategory >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMatrixCategory", ::HMatrixCategory::Class_Version(), "./datastruct/hmatrixcategory.h", 12,
                  typeid(::HMatrixCategory), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMatrixCategory::Dictionary, isa_proxy, 1,
                  sizeof(::HMatrixCategory) );
      instance.SetNew(&new_HMatrixCategory);
      instance.SetNewArray(&newArray_HMatrixCategory);
      instance.SetDelete(&delete_HMatrixCategory);
      instance.SetDeleteArray(&deleteArray_HMatrixCategory);
      instance.SetDestructor(&destruct_HMatrixCategory);
      instance.SetStreamerFunc(&streamer_HMatrixCategory);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMatrixCategory*)
   {
      return GenerateInitInstanceLocal((::HMatrixCategory*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMatrixCategory*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRecObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRecObject(void *p = 0);
   static void *newArray_HRecObject(Long_t size, void *p);
   static void delete_HRecObject(void *p);
   static void deleteArray_HRecObject(void *p);
   static void destruct_HRecObject(void *p);
   static void streamer_HRecObject(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRecObject*)
   {
      ::HRecObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRecObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRecObject", ::HRecObject::Class_Version(), "./datastruct/hrecobject.h", 11,
                  typeid(::HRecObject), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRecObject::Dictionary, isa_proxy, 0,
                  sizeof(::HRecObject) );
      instance.SetNew(&new_HRecObject);
      instance.SetNewArray(&newArray_HRecObject);
      instance.SetDelete(&delete_HRecObject);
      instance.SetDeleteArray(&deleteArray_HRecObject);
      instance.SetDestructor(&destruct_HRecObject);
      instance.SetStreamerFunc(&streamer_HRecObject);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRecObject*)
   {
      return GenerateInitInstanceLocal((::HRecObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRecObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTrack(void *p = 0);
   static void *newArray_HTrack(Long_t size, void *p);
   static void delete_HTrack(void *p);
   static void deleteArray_HTrack(void *p);
   static void destruct_HTrack(void *p);
   static void streamer_HTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTrack*)
   {
      ::HTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTrack", ::HTrack::Class_Version(), "./datastruct/htrack.h", 7,
                  typeid(::HTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTrack::Dictionary, isa_proxy, 0,
                  sizeof(::HTrack) );
      instance.SetNew(&new_HTrack);
      instance.SetNewArray(&newArray_HTrack);
      instance.SetDelete(&delete_HTrack);
      instance.SetDeleteArray(&deleteArray_HTrack);
      instance.SetDestructor(&destruct_HTrack);
      instance.SetStreamerFunc(&streamer_HTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTrack*)
   {
      return GenerateInitInstanceLocal((::HTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HLinkedDataObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HLinkedDataObject(void *p = 0);
   static void *newArray_HLinkedDataObject(Long_t size, void *p);
   static void delete_HLinkedDataObject(void *p);
   static void deleteArray_HLinkedDataObject(void *p);
   static void destruct_HLinkedDataObject(void *p);
   static void streamer_HLinkedDataObject(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HLinkedDataObject*)
   {
      ::HLinkedDataObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HLinkedDataObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HLinkedDataObject", ::HLinkedDataObject::Class_Version(), "./datastruct/hlinkeddataobject.h", 6,
                  typeid(::HLinkedDataObject), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HLinkedDataObject::Dictionary, isa_proxy, 0,
                  sizeof(::HLinkedDataObject) );
      instance.SetNew(&new_HLinkedDataObject);
      instance.SetNewArray(&newArray_HLinkedDataObject);
      instance.SetDelete(&delete_HLinkedDataObject);
      instance.SetDeleteArray(&deleteArray_HLinkedDataObject);
      instance.SetDestructor(&destruct_HLinkedDataObject);
      instance.SetStreamerFunc(&streamer_HLinkedDataObject);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HLinkedDataObject*)
   {
      return GenerateInitInstanceLocal((::HLinkedDataObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HLinkedDataObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRaNode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRaNode(void *p = 0);
   static void *newArray_HRaNode(Long_t size, void *p);
   static void delete_HRaNode(void *p);
   static void deleteArray_HRaNode(void *p);
   static void destruct_HRaNode(void *p);
   static void streamer_HRaNode(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRaNode*)
   {
      ::HRaNode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRaNode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRaNode", ::HRaNode::Class_Version(), "./datastruct/hratree.h", 13,
                  typeid(::HRaNode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRaNode::Dictionary, isa_proxy, 0,
                  sizeof(::HRaNode) );
      instance.SetNew(&new_HRaNode);
      instance.SetNewArray(&newArray_HRaNode);
      instance.SetDelete(&delete_HRaNode);
      instance.SetDeleteArray(&deleteArray_HRaNode);
      instance.SetDestructor(&destruct_HRaNode);
      instance.SetStreamerFunc(&streamer_HRaNode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRaNode*)
   {
      return GenerateInitInstanceLocal((::HRaNode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRaNode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRaIndexNode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRaIndexNode(void *p);
   static void deleteArray_HRaIndexNode(void *p);
   static void destruct_HRaIndexNode(void *p);
   static void streamer_HRaIndexNode(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRaIndexNode*)
   {
      ::HRaIndexNode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRaIndexNode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRaIndexNode", ::HRaIndexNode::Class_Version(), "./datastruct/hratree.h", 27,
                  typeid(::HRaIndexNode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRaIndexNode::Dictionary, isa_proxy, 0,
                  sizeof(::HRaIndexNode) );
      instance.SetDelete(&delete_HRaIndexNode);
      instance.SetDeleteArray(&deleteArray_HRaIndexNode);
      instance.SetDestructor(&destruct_HRaIndexNode);
      instance.SetStreamerFunc(&streamer_HRaIndexNode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRaIndexNode*)
   {
      return GenerateInitInstanceLocal((::HRaIndexNode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRaIndexNode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRaTree_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRaTree(void *p = 0);
   static void *newArray_HRaTree(Long_t size, void *p);
   static void delete_HRaTree(void *p);
   static void deleteArray_HRaTree(void *p);
   static void destruct_HRaTree(void *p);
   static void streamer_HRaTree(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRaTree*)
   {
      ::HRaTree *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRaTree >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRaTree", ::HRaTree::Class_Version(), "./datastruct/hratree.h", 40,
                  typeid(::HRaTree), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRaTree::Dictionary, isa_proxy, 0,
                  sizeof(::HRaTree) );
      instance.SetNew(&new_HRaTree);
      instance.SetNewArray(&newArray_HRaTree);
      instance.SetDelete(&delete_HRaTree);
      instance.SetDeleteArray(&deleteArray_HRaTree);
      instance.SetDestructor(&destruct_HRaTree);
      instance.SetStreamerFunc(&streamer_HRaTree);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRaTree*)
   {
      return GenerateInitInstanceLocal((::HRaTree*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRaTree*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRaTreeExt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRaTreeExt(void *p = 0);
   static void *newArray_HRaTreeExt(Long_t size, void *p);
   static void delete_HRaTreeExt(void *p);
   static void deleteArray_HRaTreeExt(void *p);
   static void destruct_HRaTreeExt(void *p);
   static void streamer_HRaTreeExt(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRaTreeExt*)
   {
      ::HRaTreeExt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRaTreeExt >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRaTreeExt", ::HRaTreeExt::Class_Version(), "./datastruct/hratreeext.h", 14,
                  typeid(::HRaTreeExt), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRaTreeExt::Dictionary, isa_proxy, 0,
                  sizeof(::HRaTreeExt) );
      instance.SetNew(&new_HRaTreeExt);
      instance.SetNewArray(&newArray_HRaTreeExt);
      instance.SetDelete(&delete_HRaTreeExt);
      instance.SetDeleteArray(&deleteArray_HRaTreeExt);
      instance.SetDestructor(&destruct_HRaTreeExt);
      instance.SetStreamerFunc(&streamer_HRaTreeExt);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRaTreeExt*)
   {
      return GenerateInitInstanceLocal((::HRaTreeExt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRaTreeExt*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HLocation::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HLocation::Class_Name()
{
   return "HLocation";
}

//______________________________________________________________________________
const char *HLocation::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLocation*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HLocation::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLocation*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HLocation::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLocation*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HLocation::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLocation*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HFilter::Class_Name()
{
   return "HFilter";
}

//______________________________________________________________________________
const char *HFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HCategory::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HCategory::Class_Name()
{
   return "HCategory";
}

//______________________________________________________________________________
const char *HCategory::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HCategory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HCategory::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HCategory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HCategory::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HCategory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HCategory::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HCategory*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPairListI::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPairListI::Class_Name()
{
   return "HPairListI";
}

//______________________________________________________________________________
const char *HPairListI::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPairListI*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPairListI::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPairListI*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPairListI::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPairListI*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPairListI::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPairListI*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HIndexTable::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HIndexTable::Class_Name()
{
   return "HIndexTable";
}

//______________________________________________________________________________
const char *HIndexTable::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HIndexTable*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HIndexTable::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HIndexTable*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HIndexTable::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HIndexTable*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HIndexTable::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HIndexTable*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HIterator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HIterator::Class_Name()
{
   return "HIterator";
}

//______________________________________________________________________________
const char *HIterator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HIterator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HIterator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HIterator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HIterator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HIterator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HIterator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HIterator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HLinearCatIter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HLinearCatIter::Class_Name()
{
   return "HLinearCatIter";
}

//______________________________________________________________________________
const char *HLinearCatIter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCatIter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HLinearCatIter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCatIter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HLinearCatIter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCatIter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HLinearCatIter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCatIter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HLinearCategory::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HLinearCategory::Class_Name()
{
   return "HLinearCategory";
}

//______________________________________________________________________________
const char *HLinearCategory::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCategory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HLinearCategory::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCategory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HLinearCategory::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCategory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HLinearCategory::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLinearCategory*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HLocatedDataObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HLocatedDataObject::Class_Name()
{
   return "HLocatedDataObject";
}

//______________________________________________________________________________
const char *HLocatedDataObject::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLocatedDataObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HLocatedDataObject::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLocatedDataObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HLocatedDataObject::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLocatedDataObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HLocatedDataObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLocatedDataObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMatrixCatIter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMatrixCatIter::Class_Name()
{
   return "HMatrixCatIter";
}

//______________________________________________________________________________
const char *HMatrixCatIter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCatIter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMatrixCatIter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCatIter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMatrixCatIter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCatIter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMatrixCatIter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCatIter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMatrixCategory::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMatrixCategory::Class_Name()
{
   return "HMatrixCategory";
}

//______________________________________________________________________________
const char *HMatrixCategory::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCategory*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMatrixCategory::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCategory*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMatrixCategory::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCategory*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMatrixCategory::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMatrixCategory*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRecObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRecObject::Class_Name()
{
   return "HRecObject";
}

//______________________________________________________________________________
const char *HRecObject::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRecObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRecObject::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRecObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRecObject::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRecObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRecObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRecObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTrack::Class_Name()
{
   return "HTrack";
}

//______________________________________________________________________________
const char *HTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HLinkedDataObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HLinkedDataObject::Class_Name()
{
   return "HLinkedDataObject";
}

//______________________________________________________________________________
const char *HLinkedDataObject::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLinkedDataObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HLinkedDataObject::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLinkedDataObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HLinkedDataObject::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLinkedDataObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HLinkedDataObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLinkedDataObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRaNode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRaNode::Class_Name()
{
   return "HRaNode";
}

//______________________________________________________________________________
const char *HRaNode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaNode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRaNode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaNode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRaNode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaNode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRaNode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaNode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRaIndexNode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRaIndexNode::Class_Name()
{
   return "HRaIndexNode";
}

//______________________________________________________________________________
const char *HRaIndexNode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaIndexNode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRaIndexNode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaIndexNode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRaIndexNode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaIndexNode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRaIndexNode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaIndexNode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRaTree::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRaTree::Class_Name()
{
   return "HRaTree";
}

//______________________________________________________________________________
const char *HRaTree::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTree*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRaTree::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTree*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRaTree::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTree*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRaTree::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTree*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRaTreeExt::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRaTreeExt::Class_Name()
{
   return "HRaTreeExt";
}

//______________________________________________________________________________
const char *HRaTreeExt::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTreeExt*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRaTreeExt::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTreeExt*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRaTreeExt::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTreeExt*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRaTreeExt::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRaTreeExt*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HLocation::Streamer(TBuffer &R__b)
{
   // Stream an object of class HLocation.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fIndexes.Streamer(R__b);
      R__b >> fOffset;
      R__b.CheckByteCount(R__s, R__c, HLocation::IsA());
   } else {
      R__c = R__b.WriteVersion(HLocation::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fIndexes.Streamer(R__b);
      R__b << fOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HLocation::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HLocation.
      TClass *R__cl = ::HLocation::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndexes", &fIndexes);
      R__insp.InspectMember(fIndexes, "fIndexes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffset", &fOffset);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HLocation(void *p) {
      return  p ? new(p) ::HLocation : new ::HLocation;
   }
   static void *newArray_HLocation(Long_t nElements, void *p) {
      return p ? new(p) ::HLocation[nElements] : new ::HLocation[nElements];
   }
   // Wrapper around operator delete
   static void delete_HLocation(void *p) {
      delete ((::HLocation*)p);
   }
   static void deleteArray_HLocation(void *p) {
      delete [] ((::HLocation*)p);
   }
   static void destruct_HLocation(void *p) {
      typedef ::HLocation current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HLocation(TBuffer &buf, void *obj) {
      ((::HLocation*)obj)->::HLocation::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HLocation

//______________________________________________________________________________
void HRecObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRecObject.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRecObject::IsA());
   } else {
      R__c = R__b.WriteVersion(HRecObject::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRecObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRecObject.
      TClass *R__cl = ::HRecObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRecObject(void *p) {
      return  p ? new(p) ::HRecObject : new ::HRecObject;
   }
   static void *newArray_HRecObject(Long_t nElements, void *p) {
      return p ? new(p) ::HRecObject[nElements] : new ::HRecObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRecObject(void *p) {
      delete ((::HRecObject*)p);
   }
   static void deleteArray_HRecObject(void *p) {
      delete [] ((::HRecObject*)p);
   }
   static void destruct_HRecObject(void *p) {
      typedef ::HRecObject current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRecObject(TBuffer &buf, void *obj) {
      ((::HRecObject*)obj)->::HRecObject::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRecObject

//______________________________________________________________________________
void HLocatedDataObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HLocatedDataObject.
      TClass *R__cl = ::HLocatedDataObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HLocatedDataObject(void *p) {
      return  p ? new(p) ::HLocatedDataObject : new ::HLocatedDataObject;
   }
   static void *newArray_HLocatedDataObject(Long_t nElements, void *p) {
      return p ? new(p) ::HLocatedDataObject[nElements] : new ::HLocatedDataObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_HLocatedDataObject(void *p) {
      delete ((::HLocatedDataObject*)p);
   }
   static void deleteArray_HLocatedDataObject(void *p) {
      delete [] ((::HLocatedDataObject*)p);
   }
   static void destruct_HLocatedDataObject(void *p) {
      typedef ::HLocatedDataObject current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HLocatedDataObject(TBuffer &buf, void *obj) {
      ((::HLocatedDataObject*)obj)->::HLocatedDataObject::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HLocatedDataObject

//______________________________________________________________________________
void HLinkedDataObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class HLinkedDataObject.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> nextHit;
      R__b.CheckByteCount(R__s, R__c, HLinkedDataObject::IsA());
   } else {
      R__c = R__b.WriteVersion(HLinkedDataObject::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << nextHit;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HLinkedDataObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HLinkedDataObject.
      TClass *R__cl = ::HLinkedDataObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sortVariable", &sortVariable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nextHit", &nextHit);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HLinkedDataObject(void *p) {
      return  p ? new(p) ::HLinkedDataObject : new ::HLinkedDataObject;
   }
   static void *newArray_HLinkedDataObject(Long_t nElements, void *p) {
      return p ? new(p) ::HLinkedDataObject[nElements] : new ::HLinkedDataObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_HLinkedDataObject(void *p) {
      delete ((::HLinkedDataObject*)p);
   }
   static void deleteArray_HLinkedDataObject(void *p) {
      delete [] ((::HLinkedDataObject*)p);
   }
   static void destruct_HLinkedDataObject(void *p) {
      typedef ::HLinkedDataObject current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HLinkedDataObject(TBuffer &buf, void *obj) {
      ((::HLinkedDataObject*)obj)->::HLinkedDataObject::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HLinkedDataObject

//______________________________________________________________________________
void HRaTree::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRaTree.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fRoot;
      R__b >> fDepth;
      fLoc.Streamer(R__b);
      R__b >> fLowerLevel;
      R__b.CheckByteCount(R__s, R__c, HRaTree::IsA());
   } else {
      R__c = R__b.WriteVersion(HRaTree::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fRoot;
      R__b << fDepth;
      fLoc.Streamer(R__b);
      R__b << fLowerLevel;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRaTree::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRaTree.
      TClass *R__cl = ::HRaTree::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRoot", &fRoot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSourceCategory", &fSourceCategory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDepth", &fDepth);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerLevel", &fLowerLevel);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRaTree(void *p) {
      return  p ? new(p) ::HRaTree : new ::HRaTree;
   }
   static void *newArray_HRaTree(Long_t nElements, void *p) {
      return p ? new(p) ::HRaTree[nElements] : new ::HRaTree[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRaTree(void *p) {
      delete ((::HRaTree*)p);
   }
   static void deleteArray_HRaTree(void *p) {
      delete [] ((::HRaTree*)p);
   }
   static void destruct_HRaTree(void *p) {
      typedef ::HRaTree current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRaTree(TBuffer &buf, void *obj) {
      ((::HRaTree*)obj)->::HRaTree::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRaTree

//______________________________________________________________________________
void HRaTreeExt::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRaTreeExt.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HRaTree::Streamer(R__b);
      R__b >> m_pNullObject;
      R__b.CheckByteCount(R__s, R__c, HRaTreeExt::IsA());
   } else {
      R__c = R__b.WriteVersion(HRaTreeExt::IsA(), kTRUE);
      HRaTree::Streamer(R__b);
      R__b << m_pNullObject;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRaTreeExt::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRaTreeExt.
      TClass *R__cl = ::HRaTreeExt::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pNullObject", &m_pNullObject);
      HRaTree::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRaTreeExt(void *p) {
      return  p ? new(p) ::HRaTreeExt : new ::HRaTreeExt;
   }
   static void *newArray_HRaTreeExt(Long_t nElements, void *p) {
      return p ? new(p) ::HRaTreeExt[nElements] : new ::HRaTreeExt[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRaTreeExt(void *p) {
      delete ((::HRaTreeExt*)p);
   }
   static void deleteArray_HRaTreeExt(void *p) {
      delete [] ((::HRaTreeExt*)p);
   }
   static void destruct_HRaTreeExt(void *p) {
      typedef ::HRaTreeExt current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRaTreeExt(TBuffer &buf, void *obj) {
      ((::HRaTreeExt*)obj)->::HRaTreeExt::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRaTreeExt

//______________________________________________________________________________
void HRaNode::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRaNode.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HRaNode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRaNode.
      TClass *R__cl = ::HRaNode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSubNodes", &fSubNodes);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRaNode(void *p) {
      return  p ? new(p) ::HRaNode : new ::HRaNode;
   }
   static void *newArray_HRaNode(Long_t nElements, void *p) {
      return p ? new(p) ::HRaNode[nElements] : new ::HRaNode[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRaNode(void *p) {
      delete ((::HRaNode*)p);
   }
   static void deleteArray_HRaNode(void *p) {
      delete [] ((::HRaNode*)p);
   }
   static void destruct_HRaNode(void *p) {
      typedef ::HRaNode current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRaNode(TBuffer &buf, void *obj) {
      ((::HRaNode*)obj)->::HRaNode::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRaNode

//______________________________________________________________________________
void HRaIndexNode::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRaIndexNode.

   HRaNode::Streamer(R__b);
}

//______________________________________________________________________________
void HRaIndexNode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRaIndexNode.
      TClass *R__cl = ::HRaIndexNode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCells", &fCells);
      R__insp.InspectMember(fCells, "fCells.");
      HRaNode::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRaIndexNode(void *p) {
      delete ((::HRaIndexNode*)p);
   }
   static void deleteArray_HRaIndexNode(void *p) {
      delete [] ((::HRaIndexNode*)p);
   }
   static void destruct_HRaIndexNode(void *p) {
      typedef ::HRaIndexNode current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRaIndexNode(TBuffer &buf, void *obj) {
      ((::HRaIndexNode*)obj)->::HRaIndexNode::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRaIndexNode

//______________________________________________________________________________
void HCategory::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HCategory.
      TClass *R__cl = ::HCategory::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPersistency", &fPersistency);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCat", &fCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBranchingLevel", &fBranchingLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHeader", &fHeader);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HCategory(void *p) {
      delete ((::HCategory*)p);
   }
   static void deleteArray_HCategory(void *p) {
      delete [] ((::HCategory*)p);
   }
   static void destruct_HCategory(void *p) {
      typedef ::HCategory current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HCategory(TBuffer &buf, void *obj) {
      ((::HCategory*)obj)->::HCategory::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HCategory

//______________________________________________________________________________
void HMatrixCategory::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMatrixCategory.
      TClass *R__cl = ::HMatrixCategory::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIndexTable", &fIndexTable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDataObjs", &fNDataObjs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      HCategory::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMatrixCategory(void *p) {
      return  p ? new(p) ::HMatrixCategory : new ::HMatrixCategory;
   }
   static void *newArray_HMatrixCategory(Long_t nElements, void *p) {
      return p ? new(p) ::HMatrixCategory[nElements] : new ::HMatrixCategory[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMatrixCategory(void *p) {
      delete ((::HMatrixCategory*)p);
   }
   static void deleteArray_HMatrixCategory(void *p) {
      delete [] ((::HMatrixCategory*)p);
   }
   static void destruct_HMatrixCategory(void *p) {
      typedef ::HMatrixCategory current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMatrixCategory(TBuffer &buf, void *obj) {
      ((::HMatrixCategory*)obj)->::HMatrixCategory::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMatrixCategory

//______________________________________________________________________________
void HMatrixCatIter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMatrixCatIter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HIterator::Streamer(R__b);
      fCurrentLoc.Streamer(R__b);
      R__b >> fCursor;
      R__b >> fAntCursor;
      R__b >> fDir;
      R__b >> fEnd;
      R__b >> fBegin;
      R__b.CheckByteCount(R__s, R__c, HMatrixCatIter::IsA());
   } else {
      R__c = R__b.WriteVersion(HMatrixCatIter::IsA(), kTRUE);
      HIterator::Streamer(R__b);
      fCurrentLoc.Streamer(R__b);
      R__b << fCursor;
      R__b << fAntCursor;
      R__b << fDir;
      R__b << fEnd;
      R__b << fBegin;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HMatrixCatIter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMatrixCatIter.
      TClass *R__cl = ::HMatrixCatIter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentLoc", &fCurrentLoc);
      R__insp.InspectMember(fCurrentLoc, "fCurrentLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCategory", &fCategory);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fSizes", &fSizes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCursor", &fCursor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAntCursor", &fAntCursor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDir", &fDir);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnd", &fEnd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBegin", &fBegin);
      HIterator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMatrixCatIter(void *p) {
      delete ((::HMatrixCatIter*)p);
   }
   static void deleteArray_HMatrixCatIter(void *p) {
      delete [] ((::HMatrixCatIter*)p);
   }
   static void destruct_HMatrixCatIter(void *p) {
      typedef ::HMatrixCatIter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMatrixCatIter(TBuffer &buf, void *obj) {
      ((::HMatrixCatIter*)obj)->::HMatrixCatIter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMatrixCatIter

//______________________________________________________________________________
void HLinearCategory::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HLinearCategory.
      TClass *R__cl = ::HLinearCategory::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fData", &fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNDataObjs", &fNDataObjs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hasDynamicObjects", &hasDynamicObjects);
      HCategory::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HLinearCategory(void *p) {
      return  p ? new(p) ::HLinearCategory : new ::HLinearCategory;
   }
   static void *newArray_HLinearCategory(Long_t nElements, void *p) {
      return p ? new(p) ::HLinearCategory[nElements] : new ::HLinearCategory[nElements];
   }
   // Wrapper around operator delete
   static void delete_HLinearCategory(void *p) {
      delete ((::HLinearCategory*)p);
   }
   static void deleteArray_HLinearCategory(void *p) {
      delete [] ((::HLinearCategory*)p);
   }
   static void destruct_HLinearCategory(void *p) {
      typedef ::HLinearCategory current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HLinearCategory(TBuffer &buf, void *obj) {
      ((::HLinearCategory*)obj)->::HLinearCategory::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HLinearCategory

//______________________________________________________________________________
void HLinearCatIter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HLinearCatIter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HIterator::Streamer(R__b);
      fCurrentLoc.Streamer(R__b);
      fArray->Streamer(R__b);
      R__b >> fCurrent;
      R__b >> fLast;
      R__b >> fLocated;
      R__b >> fDir;
      R__b.CheckByteCount(R__s, R__c, HLinearCatIter::IsA());
   } else {
      R__c = R__b.WriteVersion(HLinearCatIter::IsA(), kTRUE);
      HIterator::Streamer(R__b);
      fCurrentLoc.Streamer(R__b);
      fArray->Streamer(R__b);
      R__b << fCurrent;
      R__b << fLast;
      R__b << fLocated;
      R__b << fDir;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HLinearCatIter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HLinearCatIter.
      TClass *R__cl = ::HLinearCatIter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentLoc", &fCurrentLoc);
      R__insp.InspectMember(fCurrentLoc, "fCurrentLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIterator", &fIterator);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray", &fArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCurrent", &fCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLast", &fLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLocated", &fLocated);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDir", &fDir);
      HIterator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HLinearCatIter(void *p) {
      delete ((::HLinearCatIter*)p);
   }
   static void deleteArray_HLinearCatIter(void *p) {
      delete [] ((::HLinearCatIter*)p);
   }
   static void destruct_HLinearCatIter(void *p) {
      typedef ::HLinearCatIter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HLinearCatIter(TBuffer &buf, void *obj) {
      ((::HLinearCatIter*)obj)->::HLinearCatIter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HLinearCatIter

//______________________________________________________________________________
void HFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HFilter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HFilter::IsA());
   } else {
      R__c = R__b.WriteVersion(HFilter::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HFilter.
      TClass *R__cl = ::HFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HFilter(void *p) {
      delete ((::HFilter*)p);
   }
   static void deleteArray_HFilter(void *p) {
      delete [] ((::HFilter*)p);
   }
   static void destruct_HFilter(void *p) {
      typedef ::HFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HFilter(TBuffer &buf, void *obj) {
      ((::HFilter*)obj)->::HFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HFilter

//______________________________________________________________________________
void HIndexTable::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HIndexTable.
      TClass *R__cl = ::HIndexTable::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSizes", &fSizes);
      R__insp.InspectMember(fSizes, "fSizes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCompactTable", &fCompactTable);
      R__insp.InspectMember(fCompactTable, "fCompactTable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIndexArray", &fIndexArray);
      R__insp.InspectMember(fIndexArray, "fIndexArray.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentPos", &fCurrentPos);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HIndexTable(void *p) {
      return  p ? new(p) ::HIndexTable : new ::HIndexTable;
   }
   static void *newArray_HIndexTable(Long_t nElements, void *p) {
      return p ? new(p) ::HIndexTable[nElements] : new ::HIndexTable[nElements];
   }
   // Wrapper around operator delete
   static void delete_HIndexTable(void *p) {
      delete ((::HIndexTable*)p);
   }
   static void deleteArray_HIndexTable(void *p) {
      delete [] ((::HIndexTable*)p);
   }
   static void destruct_HIndexTable(void *p) {
      typedef ::HIndexTable current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HIndexTable(TBuffer &buf, void *obj) {
      ((::HIndexTable*)obj)->::HIndexTable::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HIndexTable

//______________________________________________________________________________
void HPairListI::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPairListI.
      TClass *R__cl = ::HPairListI::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCapacity", &fCapacity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fN", &fN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fArray[2]", &fArray);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPairListI(void *p) {
      return  p ? new(p) ::HPairListI : new ::HPairListI;
   }
   static void *newArray_HPairListI(Long_t nElements, void *p) {
      return p ? new(p) ::HPairListI[nElements] : new ::HPairListI[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPairListI(void *p) {
      delete ((::HPairListI*)p);
   }
   static void deleteArray_HPairListI(void *p) {
      delete [] ((::HPairListI*)p);
   }
   static void destruct_HPairListI(void *p) {
      typedef ::HPairListI current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPairListI(TBuffer &buf, void *obj) {
      ((::HPairListI*)obj)->::HPairListI::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPairListI

//______________________________________________________________________________
void HIterator::Streamer(TBuffer &R__b)
{
   // Stream an object of class HIterator.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TIterator::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HIterator::IsA());
   } else {
      R__c = R__b.WriteVersion(HIterator::IsA(), kTRUE);
      TIterator::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HIterator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HIterator.
      TClass *R__cl = ::HIterator::IsA();
      if (R__cl || R__insp.IsA()) { }
      TIterator::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HIterator(void *p) {
      delete ((::HIterator*)p);
   }
   static void deleteArray_HIterator(void *p) {
      delete [] ((::HIterator*)p);
   }
   static void destruct_HIterator(void *p) {
      typedef ::HIterator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HIterator(TBuffer &buf, void *obj) {
      ((::HIterator*)obj)->::HIterator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HIterator

//______________________________________________________________________________
void HTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HRecObject::Streamer(R__b);
      R__b >> fP;
      R__b.CheckByteCount(R__s, R__c, HTrack::IsA());
   } else {
      R__c = R__b.WriteVersion(HTrack::IsA(), kTRUE);
      HRecObject::Streamer(R__b);
      R__b << fP;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTrack.
      TClass *R__cl = ::HTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP", &fP);
      HRecObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTrack(void *p) {
      return  p ? new(p) ::HTrack : new ::HTrack;
   }
   static void *newArray_HTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HTrack[nElements] : new ::HTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTrack(void *p) {
      delete ((::HTrack*)p);
   }
   static void deleteArray_HTrack(void *p) {
      delete [] ((::HTrack*)p);
   }
   static void destruct_HTrack(void *p) {
      typedef ::HTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTrack(TBuffer &buf, void *obj) {
      ((::HTrack*)obj)->::HTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTrack

/********************************************************
* ../build/pc/DataStructDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableDataStructDict();

extern "C" void G__set_cpp_environmentDataStructDict() {
  G__cpp_reset_tagtableDataStructDict();
}
#include <new>
extern "C" int G__cpp_dllrevDataStructDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HLocation */
static int G__DataStructDict_170_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLocation* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLocation[n];
     } else {
       p = new((void*) gvp) HLocation[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLocation;
     } else {
       p = new((void*) gvp) HLocation;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLocation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLocation* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HLocation(*(HLocation*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HLocation(*(HLocation*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLocation));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HLocation*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HLocation*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HLocation*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HLocation*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HLocation*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HLocation*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->setNIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->setOffset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocation*) G__getstructoffset())->getIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocation*) G__getstructoffset())->getUncheckedIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->setIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocation*) G__getstructoffset())->getLinearIndex((TArrayI*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocation*) G__getstructoffset())->getLinearIndex((Int_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocation*) G__getstructoffset())->getNIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLocation*) G__getstructoffset())->getIndexes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocation*) G__getstructoffset())->getOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->incIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->operator+=((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocation*) G__getstructoffset())->operator++());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->operator-=((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->operator--();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((HLocation*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HLocation& obj = ((HLocation*) G__getstructoffset())->operator=(*(HLocation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->readIndexes(*(HLocation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->Dump();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HLocation::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLocation::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HLocation::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HLocation::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocation*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLocation::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLocation::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLocation::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_170_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLocation::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HLocation G__THLocation;
static int G__DataStructDict_170_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HLocation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HLocation*) (soff+(sizeof(HLocation)*i)))->~G__THLocation();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HLocation*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HLocation*) (soff))->~G__THLocation();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HFilter */
static int G__DataStructDict_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HFilter*) G__getstructoffset())->check((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_211_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HFilter G__THFilter;
static int G__DataStructDict_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HFilter*) (soff+(sizeof(HFilter)*i)))->~G__THFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HFilter*) (soff))->~G__THFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HFilter* dest = (HFilter*) G__getstructoffset();
   *dest = *(HFilter*) libp->para[0].ref;
   const HFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HCategory */
static int G__DataStructDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->setBranchingLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->setCategory((Cat_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HCategory*) G__getstructoffset())->IsPersistent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->setPersistency((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HCategory*) G__getstructoffset())->getCategory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HCategory*) G__getstructoffset())->getBranchingLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->setCatHeader((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->getCatHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HCategory*) G__getstructoffset())->getClassName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->getClass());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->makeBranch((TBranch*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->activateBranch((TTree*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         TObject*& obj = ((HCategory*) G__getstructoffset())->getNewSlot(*(HLocation*) libp->para[0].ref, (Int_t*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
      break;
   case 1:
      {
         TObject*& obj = ((HCategory*) G__getstructoffset())->getNewSlot(*(HLocation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         TObject*& obj = ((HCategory*) G__getstructoffset())->getSlot(*(HLocation*) libp->para[0].ref, (Int_t*) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
      break;
   case 1:
      {
         TObject*& obj = ((HCategory*) G__getstructoffset())->getSlot(*(HLocation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->getObject(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HCategory*) G__getstructoffset())->query((TCollection*) G__int(libp->para[0]), *(HFilter*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HCategory*) G__getstructoffset())->query((TCollection*) G__int(libp->para[0]), *(HLocation*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HCategory*) G__getstructoffset())->query((TCollection*) G__int(libp->para[0]), *(HLocation*) libp->para[1].ref
, *(HFilter*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HCategory*) G__getstructoffset())->filter(*(HFilter*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HCategory*) G__getstructoffset())->filter(*(HLocation*) libp->para[0].ref, *(HFilter*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HCategory*) G__getstructoffset())->isSelfSplitable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->MakeIterator((Option_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->MakeIterator((Option_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->MakeIterator());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HCategory*) G__getstructoffset())->MakeReverseIterator());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HCategory*) G__getstructoffset())->getIndex(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HCategory*) G__getstructoffset())->getIndex((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HCategory*) G__getstructoffset())->getEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->sort();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HCategory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCategory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HCategory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HCategory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCategory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCategory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCategory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_212_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCategory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HCategory G__THCategory;
static int G__DataStructDict_212_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HCategory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HCategory*) (soff+(sizeof(HCategory)*i)))->~G__THCategory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HCategory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HCategory*) (soff))->~G__THCategory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_212_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCategory* dest = (HCategory*) G__getstructoffset();
   *dest = *(HCategory*) libp->para[0].ref;
   const HCategory& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPairListI */
static int G__DataStructDict_213_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPairListI* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPairListI[n];
     } else {
       p = new((void*) gvp) HPairListI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPairListI;
     } else {
       p = new((void*) gvp) HPairListI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HPairListI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPairListI*) G__getstructoffset())->setCapacity((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPairListI*) G__getstructoffset())->add((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPairListI*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPairListI*) G__getstructoffset())->remove((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPairListI*) G__getstructoffset())->getN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const UInt_t& obj = ((HPairListI*) G__getstructoffset())->getIndex1((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'h', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const UInt_t& obj = ((HPairListI*) G__getstructoffset())->getIndex2((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'h', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HPairListI*) G__getstructoffset())->clear((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HPairListI*) G__getstructoffset())->clear();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPairListI::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPairListI::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPairListI::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPairListI::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPairListI*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPairListI::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPairListI::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPairListI::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_213_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPairListI::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_213_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPairListI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPairListI(*(HPairListI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HPairListI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPairListI G__THPairListI;
static int G__DataStructDict_213_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPairListI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPairListI*) (soff+(sizeof(HPairListI)*i)))->~G__THPairListI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPairListI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPairListI*) (soff))->~G__THPairListI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_213_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPairListI* dest = (HPairListI*) G__getstructoffset();
   *dest = *(HPairListI*) libp->para[0].ref;
   const HPairListI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HIndexTable */
static int G__DataStructDict_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HIndexTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HIndexTable[n];
     } else {
       p = new((void*) gvp) HIndexTable[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HIndexTable;
     } else {
       p = new((void*) gvp) HIndexTable;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HIndexTable*) G__getstructoffset())->setDimensions((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HIndexTable*) G__getstructoffset())->getIndex(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HIndexTable*) G__getstructoffset())->setIndex(*(HLocation*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HIndexTable*) G__getstructoffset())->getDimensions());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HIndexTable*) G__getstructoffset())->getIndex((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HIndexTable*) G__getstructoffset())->setIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HIndexTable*) G__getstructoffset())->getEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HIndexTable*) G__getstructoffset())->checkLocation(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HIndexTable*) G__getstructoffset())->gotoLocation(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HIndexTable*) G__getstructoffset())->gotoBegin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HIndexTable*) G__getstructoffset())->next());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HIndexTable*) G__getstructoffset())->getCompactTable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HIndexTable::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HIndexTable::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HIndexTable::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HIndexTable::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HIndexTable*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HIndexTable::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HIndexTable::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HIndexTable::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_214_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HIndexTable::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_214_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HIndexTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HIndexTable(*(HIndexTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HIndexTable G__THIndexTable;
static int G__DataStructDict_214_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HIndexTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HIndexTable*) (soff+(sizeof(HIndexTable)*i)))->~G__THIndexTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HIndexTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HIndexTable*) (soff))->~G__THIndexTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_214_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HIndexTable* dest = (HIndexTable*) G__getstructoffset();
   *dest = *(HIndexTable*) libp->para[0].ref;
   const HIndexTable& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HIterator */
static int G__DataStructDict_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HIterator*) G__getstructoffset())->gotoLocation(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HLocation& obj = ((HIterator*) G__getstructoffset())->getLocation();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HIterator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HIterator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HIterator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HIterator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HIterator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HIterator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HIterator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HIterator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HIterator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HIterator G__THIterator;
static int G__DataStructDict_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HIterator*) (soff+(sizeof(HIterator)*i)))->~G__THIterator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HIterator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HIterator*) (soff))->~G__THIterator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HIterator* dest = (HIterator*) G__getstructoffset();
   *dest = *(HIterator*) libp->para[0].ref;
   const HIterator& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HLinearCatIter */
static int G__DataStructDict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLinearCatIter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinearCatIter((HLinearCategory*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HLinearCatIter((HLinearCategory*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinearCatIter((HLinearCategory*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HLinearCatIter((HLinearCategory*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HLinearCatIter*) G__getstructoffset())->GetCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HLinearCatIter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinearCatIter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HLinearCatIter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HLinearCatIter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLinearCatIter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinearCatIter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLinearCatIter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinearCatIter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_216_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLinearCatIter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_216_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HLinearCatIter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HLinearCatIter(*(HLinearCatIter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HLinearCatIter G__THLinearCatIter;
static int G__DataStructDict_216_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HLinearCatIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HLinearCatIter*) (soff+(sizeof(HLinearCatIter)*i)))->~G__THLinearCatIter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HLinearCatIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HLinearCatIter*) (soff))->~G__THLinearCatIter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLinearCatIter* dest = (HLinearCatIter*) G__getstructoffset();
   *dest = *(HLinearCatIter*) libp->para[0].ref;
   const HLinearCatIter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HLinearCategory */
static int G__DataStructDict_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLinearCategory* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinearCategory[n];
     } else {
       p = new((void*) gvp) HLinearCategory[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinearCategory;
     } else {
       p = new((void*) gvp) HLinearCategory;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLinearCategory* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinearCategory((const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HLinearCategory((const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinearCategory((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HLinearCategory((const Text_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TObject*& obj = ((HLinearCategory*) G__getstructoffset())->getSlot((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLinearCategory*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLinearCategory*) G__getstructoffset())->Compress();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HLinearCategory*) G__getstructoffset())->setDynamicObjects((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HLinearCategory*) G__getstructoffset())->setDynamicObjects();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLinearCategory*) G__getstructoffset())->getDynamicObjects());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLinearCategory*) G__getstructoffset())->freeDynamicMemory();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLinearCategory*) G__getstructoffset())->getCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HLinearCategory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinearCategory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HLinearCategory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HLinearCategory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLinearCategory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinearCategory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLinearCategory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinearCategory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_217_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLinearCategory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_217_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HLinearCategory* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HLinearCategory(*(HLinearCategory*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HLinearCategory G__THLinearCategory;
static int G__DataStructDict_217_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HLinearCategory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HLinearCategory*) (soff+(sizeof(HLinearCategory)*i)))->~G__THLinearCategory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HLinearCategory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HLinearCategory*) (soff))->~G__THLinearCategory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_217_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLinearCategory* dest = (HLinearCategory*) G__getstructoffset();
   *dest = *(HLinearCategory*) libp->para[0].ref;
   const HLinearCategory& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HLocatedDataObject */
static int G__DataStructDict_218_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLocatedDataObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLocatedDataObject[n];
     } else {
       p = new((void*) gvp) HLocatedDataObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLocatedDataObject;
     } else {
       p = new((void*) gvp) HLocatedDataObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocatedDataObject*) G__getstructoffset())->getNLocationIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLocatedDataObject*) G__getstructoffset())->getLocationIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLocatedDataObject*) G__getstructoffset())->getLocation());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HLocatedDataObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLocatedDataObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HLocatedDataObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HLocatedDataObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLocatedDataObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLocatedDataObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLocatedDataObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLocatedDataObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLocatedDataObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HLocatedDataObject* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HLocatedDataObject(*(HLocatedDataObject*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HLocatedDataObject G__THLocatedDataObject;
static int G__DataStructDict_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HLocatedDataObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HLocatedDataObject*) (soff+(sizeof(HLocatedDataObject)*i)))->~G__THLocatedDataObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HLocatedDataObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HLocatedDataObject*) (soff))->~G__THLocatedDataObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_218_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLocatedDataObject* dest = (HLocatedDataObject*) G__getstructoffset();
   *dest = *(HLocatedDataObject*) libp->para[0].ref;
   const HLocatedDataObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMatrixCatIter */
static int G__DataStructDict_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMatrixCatIter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMatrixCatIter((HMatrixCategory*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HMatrixCatIter((HMatrixCategory*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMatrixCatIter((HMatrixCategory*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HMatrixCatIter((HMatrixCategory*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HMatrixCatIter*) G__getstructoffset())->GetCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMatrixCatIter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMatrixCatIter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMatrixCatIter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMatrixCatIter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMatrixCatIter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMatrixCatIter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMatrixCatIter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMatrixCatIter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_219_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMatrixCatIter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_219_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMatrixCatIter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMatrixCatIter(*(HMatrixCatIter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMatrixCatIter G__THMatrixCatIter;
static int G__DataStructDict_219_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMatrixCatIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMatrixCatIter*) (soff+(sizeof(HMatrixCatIter)*i)))->~G__THMatrixCatIter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMatrixCatIter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMatrixCatIter*) (soff))->~G__THMatrixCatIter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_219_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMatrixCatIter* dest = (HMatrixCatIter*) G__getstructoffset();
   *dest = *(HMatrixCatIter*) libp->para[0].ref;
   const HMatrixCatIter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMatrixCategory */
static int G__DataStructDict_220_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMatrixCategory* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMatrixCategory[n];
     } else {
       p = new((void*) gvp) HMatrixCategory[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMatrixCategory;
     } else {
       p = new((void*) gvp) HMatrixCategory;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMatrixCategory* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMatrixCategory(
(const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) HMatrixCategory(
(const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMatrixCategory(
(const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HMatrixCategory(
(const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HMatrixCategory*) G__getstructoffset())->setup((const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HMatrixCategory*) G__getstructoffset())->setup((const Text_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMatrixCategory*) G__getstructoffset())->getCollection());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HMatrixCategory*) G__getstructoffset())->getSizes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMatrixCategory*) G__getstructoffset())->getSize((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMatrixCategory::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMatrixCategory::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMatrixCategory::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMatrixCategory::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMatrixCategory*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMatrixCategory::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMatrixCategory::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMatrixCategory::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_220_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMatrixCategory::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_220_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMatrixCategory* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMatrixCategory(*(HMatrixCategory*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMatrixCategory G__THMatrixCategory;
static int G__DataStructDict_220_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMatrixCategory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMatrixCategory*) (soff+(sizeof(HMatrixCategory)*i)))->~G__THMatrixCategory();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMatrixCategory*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMatrixCategory*) (soff))->~G__THMatrixCategory();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_220_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMatrixCategory* dest = (HMatrixCategory*) G__getstructoffset();
   *dest = *(HMatrixCategory*) libp->para[0].ref;
   const HMatrixCategory& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRecObject */
static int G__DataStructDict_221_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRecObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRecObject[n];
     } else {
       p = new((void*) gvp) HRecObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRecObject;
     } else {
       p = new((void*) gvp) HRecObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRecObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRecObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRecObject(*(HRecObject*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HRecObject(*(HRecObject*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRecObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRecObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRecObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRecObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRecObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRecObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRecObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRecObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRecObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRecObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRecObject G__THRecObject;
static int G__DataStructDict_221_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRecObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRecObject*) (soff+(sizeof(HRecObject)*i)))->~G__THRecObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRecObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRecObject*) (soff))->~G__THRecObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRecObject* dest = (HRecObject*) G__getstructoffset();
   *dest = *(HRecObject*) libp->para[0].ref;
   const HRecObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTrack */
static int G__DataStructDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrack[n];
     } else {
       p = new((void*) gvp) HTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTrack;
     } else {
       p = new((void*) gvp) HTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HTrack(*(HTrack*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HTrack(*(HTrack*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrack*) G__getstructoffset())->setMomentum((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTrack G__THTrack;
static int G__DataStructDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTrack*) (soff+(sizeof(HTrack)*i)))->~G__THTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTrack*) (soff))->~G__THTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTrack* dest = (HTrack*) G__getstructoffset();
   *dest = *(HTrack*) libp->para[0].ref;
   const HTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HLinkedDataObject */
static int G__DataStructDict_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLinkedDataObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinkedDataObject[n];
     } else {
       p = new((void*) gvp) HLinkedDataObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLinkedDataObject;
     } else {
       p = new((void*) gvp) HLinkedDataObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLinkedDataObject*) G__getstructoffset())->setNextHitIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLinkedDataObject*) G__getstructoffset())->getNextHitIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLinkedDataObject*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HLinkedDataObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinkedDataObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HLinkedDataObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HLinkedDataObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLinkedDataObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinkedDataObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLinkedDataObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLinkedDataObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLinkedDataObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HLinkedDataObject* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HLinkedDataObject(*(HLinkedDataObject*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HLinkedDataObject G__THLinkedDataObject;
static int G__DataStructDict_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HLinkedDataObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HLinkedDataObject*) (soff+(sizeof(HLinkedDataObject)*i)))->~G__THLinkedDataObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HLinkedDataObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HLinkedDataObject*) (soff))->~G__THLinkedDataObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_223_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLinkedDataObject* dest = (HLinkedDataObject*) G__getstructoffset();
   *dest = *(HLinkedDataObject*) libp->para[0].ref;
   const HLinkedDataObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRaNode */
static int G__DataStructDict_224_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRaNode[n];
     } else {
       p = new((void*) gvp) HRaNode[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRaNode;
     } else {
       p = new((void*) gvp) HRaNode;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRaNode((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRaNode((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRaNode*) G__getstructoffset())->getSubNode((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaNode*) G__getstructoffset())->addSubNode((HRaNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaNode*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRaNode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaNode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRaNode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRaNode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaNode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaNode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaNode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaNode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_224_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaNode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_224_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRaNode* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRaNode(*(HRaNode*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaNode));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRaNode G__THRaNode;
static int G__DataStructDict_224_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRaNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRaNode*) (soff+(sizeof(HRaNode)*i)))->~G__THRaNode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRaNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRaNode*) (soff))->~G__THRaNode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_224_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaNode* dest = (HRaNode*) G__getstructoffset();
   *dest = *(HRaNode*) libp->para[0].ref;
   const HRaNode& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRaIndexNode */
static int G__DataStructDict_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaIndexNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRaIndexNode((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRaIndexNode((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRaIndexNode*) G__getstructoffset())->getCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaIndexNode*) G__getstructoffset())->setCell((TObject*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRaIndexNode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaIndexNode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRaIndexNode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRaIndexNode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaIndexNode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaIndexNode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaIndexNode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaIndexNode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaIndexNode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRaIndexNode G__THRaIndexNode;
static int G__DataStructDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRaIndexNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRaIndexNode*) (soff+(sizeof(HRaIndexNode)*i)))->~G__THRaIndexNode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRaIndexNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRaIndexNode*) (soff))->~G__THRaIndexNode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRaTree */
static int G__DataStructDict_226_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRaTree[n];
     } else {
       p = new((void*) gvp) HRaTree[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRaTree;
     } else {
       p = new((void*) gvp) HRaTree;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRaTree((HCategory*) G__int(libp->para[0]), (TArrayI*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRaTree((HCategory*) G__int(libp->para[0]), (TArrayI*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTree* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRaTree(
(HCategory*) G__int(libp->para[0]), *(HLocation*) libp->para[1].ref
, (TArrayI*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HRaTree(
(HCategory*) G__int(libp->para[0]), *(HLocation*) libp->para[1].ref
, (TArrayI*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTree));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRaTree*) G__getstructoffset())->update());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getRoot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HRaTree*) G__getstructoffset())->getObject());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRaTree::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaTree::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRaTree::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRaTree::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaTree*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaTree::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaTree::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaTree::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_226_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaTree::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_226_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRaTree* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRaTree(*(HRaTree*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTree));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRaTree G__THRaTree;
static int G__DataStructDict_226_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRaTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRaTree*) (soff+(sizeof(HRaTree)*i)))->~G__THRaTree();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRaTree*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRaTree*) (soff))->~G__THRaTree();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_226_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTree* dest = (HRaTree*) G__getstructoffset();
   *dest = *(HRaTree*) libp->para[0].ref;
   const HRaTree& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRaTreeExt */
static int G__DataStructDict_227_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTreeExt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRaTreeExt[n];
     } else {
       p = new((void*) gvp) HRaTreeExt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRaTreeExt;
     } else {
       p = new((void*) gvp) HRaTreeExt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTreeExt* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRaTreeExt((HCategory*) G__int(libp->para[0]), (TArrayI*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRaTreeExt((HCategory*) G__int(libp->para[0]), (TArrayI*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTreeExt* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRaTreeExt(
(HCategory*) G__int(libp->para[0]), *(HLocation*) libp->para[1].ref
, (TArrayI*) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HRaTreeExt(
(HCategory*) G__int(libp->para[0]), *(HLocation*) libp->para[1].ref
, (TArrayI*) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaTreeExt*) G__getstructoffset())->makeNullObject();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRaTreeExt::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaTreeExt::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRaTreeExt::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRaTreeExt::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRaTreeExt*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaTreeExt::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaTreeExt::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRaTreeExt::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__DataStructDict_227_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRaTreeExt::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__DataStructDict_227_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRaTreeExt* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRaTreeExt(*(HRaTreeExt*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRaTreeExt G__THRaTreeExt;
static int G__DataStructDict_227_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRaTreeExt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRaTreeExt*) (soff+(sizeof(HRaTreeExt)*i)))->~G__THRaTreeExt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRaTreeExt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRaTreeExt*) (soff))->~G__THRaTreeExt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__DataStructDict_227_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRaTreeExt* dest = (HRaTreeExt*) G__getstructoffset();
   *dest = *(HRaTreeExt*) libp->para[0].ref;
   const HRaTreeExt& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HLocation */

/* HFilter */

/* HCategory */

/* HPairListI */

/* HIndexTable */

/* HIterator */

/* HLinearCatIter */

/* HLinearCategory */

/* HLocatedDataObject */

/* HMatrixCatIter */

/* HMatrixCategory */

/* HRecObject */

/* HTrack */

/* HLinkedDataObject */

/* HRaNode */

/* HRaIndexNode */

/* HRaTree */

/* HRaTreeExt */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncDataStructDict {
 public:
  G__Sizep2memfuncDataStructDict(): p(&G__Sizep2memfuncDataStructDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncDataStructDict::*p)();
};

size_t G__get_sizep2memfuncDataStructDict()
{
  G__Sizep2memfuncDataStructDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceDataStructDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HLocation))) {
     HLocation *G__Lderived;
     G__Lderived=(HLocation*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLocation),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HFilter))) {
     HFilter *G__Lderived;
     G__Lderived=(HFilter*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HFilter),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HCategory))) {
     HCategory *G__Lderived;
     G__Lderived=(HCategory*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HCategory),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HPairListI))) {
     HPairListI *G__Lderived;
     G__Lderived=(HPairListI*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HPairListI),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable))) {
     HIndexTable *G__Lderived;
     G__Lderived=(HIndexTable*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HIterator))) {
     HIterator *G__Lderived;
     G__Lderived=(HIterator*)0x1000;
     {
       TIterator *G__Lpbase=(TIterator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HIterator),G__get_linked_tagnum(&G__DataStructDictLN_TIterator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter))) {
     HLinearCatIter *G__Lderived;
     G__Lderived=(HLinearCatIter*)0x1000;
     {
       HIterator *G__Lpbase=(HIterator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter),G__get_linked_tagnum(&G__DataStructDictLN_HIterator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TIterator *G__Lpbase=(TIterator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter),G__get_linked_tagnum(&G__DataStructDictLN_TIterator),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory))) {
     HLinearCategory *G__Lderived;
     G__Lderived=(HLinearCategory*)0x1000;
     {
       HCategory *G__Lpbase=(HCategory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory),G__get_linked_tagnum(&G__DataStructDictLN_HCategory),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject))) {
     HLocatedDataObject *G__Lderived;
     G__Lderived=(HLocatedDataObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter))) {
     HMatrixCatIter *G__Lderived;
     G__Lderived=(HMatrixCatIter*)0x1000;
     {
       HIterator *G__Lpbase=(HIterator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter),G__get_linked_tagnum(&G__DataStructDictLN_HIterator),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TIterator *G__Lpbase=(TIterator*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter),G__get_linked_tagnum(&G__DataStructDictLN_TIterator),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory))) {
     HMatrixCategory *G__Lderived;
     G__Lderived=(HMatrixCategory*)0x1000;
     {
       HCategory *G__Lpbase=(HCategory*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory),G__get_linked_tagnum(&G__DataStructDictLN_HCategory),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HRecObject))) {
     HRecObject *G__Lderived;
     G__Lderived=(HRecObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRecObject),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HTrack))) {
     HTrack *G__Lderived;
     G__Lderived=(HTrack*)0x1000;
     {
       HRecObject *G__Lpbase=(HRecObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HTrack),G__get_linked_tagnum(&G__DataStructDictLN_HRecObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HTrack),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject))) {
     HLinkedDataObject *G__Lderived;
     G__Lderived=(HLinkedDataObject*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject),G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HRaNode))) {
     HRaNode *G__Lderived;
     G__Lderived=(HRaNode*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaNode),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode))) {
     HRaIndexNode *G__Lderived;
     G__Lderived=(HRaIndexNode*)0x1000;
     {
       HRaNode *G__Lpbase=(HRaNode*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode),G__get_linked_tagnum(&G__DataStructDictLN_HRaNode),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HRaTree))) {
     HRaTree *G__Lderived;
     G__Lderived=(HRaTree*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaTree),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt))) {
     HRaTreeExt *G__Lderived;
     G__Lderived=(HRaTreeExt*)0x1000;
     {
       HRaTree *G__Lpbase=(HRaTree*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt),G__get_linked_tagnum(&G__DataStructDictLN_HRaTree),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt),G__get_linked_tagnum(&G__DataStructDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableDataStructDict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__DataStructDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataStructDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataStructDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataStructDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataStructDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__DataStructDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__DataStructDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataStructDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__DataStructDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__DataStructDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Cat_t",115,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HLocation */
static void G__setup_memvarHLocation(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLocation));
   { HLocation *p; p=(HLocation*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TArrayI),-1,-1,2,"fIndexes=",0,"High indexes indicating the location");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fOffset=",0,"Less significant index of the location");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HFilter */
static void G__setup_memvarHFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HFilter));
   { HFilter *p; p=(HFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HCategory */
static void G__setup_memvarHCategory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HCategory));
   { HCategory *p; p=(HCategory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fPersistency=",0,"! Indicates whether this category is stored in output.");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Cat_t"),-1,2,"fCat=",0,"Identifier for this category");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBranchingLevel=",0,"Number of levels for the data in the category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TObject),-1,-1,2,"fHeader=",0,"Category header.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPairListI */
static void G__setup_memvarHPairListI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HPairListI));
   { HPairListI *p; p=(HPairListI*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCapacity=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fN=",0,(char*)NULL);
   G__memvar_setup((void*)0,72,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fArray[2]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HIndexTable */
static void G__setup_memvarHIndexTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable));
   { HIndexTable *p; p=(HIndexTable*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TArrayI),-1,-1,2,"fSizes=",0,"Sizes of the dimensions of the index matrix");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HPairListI),-1,-1,2,"fCompactTable=",0,"Table of linear addres -- index pairs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TArrayI),-1,-1,2,"fIndexArray=",0,"!Index matrix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrentPos=",0,"!Current position in the table for iterations.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HIterator */
static void G__setup_memvarHIterator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HIterator));
   { HIterator *p; p=(HIterator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HLinearCatIter */
static void G__setup_memvarHLinearCatIter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter));
   { HLinearCatIter *p; p=(HLinearCatIter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HLocation),-1,-1,2,"fCurrentLoc=",0,"Current location in the category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TIterator),-1,-1,2,"fIterator=",0,"! Iterator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClonesArray),-1,-1,2,"fArray=",0,"array being iterated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TObject),-1,-1,2,"fCurrent=",0,"Current object");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fLast=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fLocated=",0,"Iteration finished?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HLinearCategory */
static void G__setup_memvarHLinearCategory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory));
   { HLinearCategory *p; p=(HLinearCategory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClonesArray),-1,-1,2,"fData=",0,"Data array of the category");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNDataObjs=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"hasDynamicObjects=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HLocatedDataObject */
static void G__setup_memvarHLocatedDataObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject));
   { HLocatedDataObject *p; p=(HLocatedDataObject*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMatrixCatIter */
static void G__setup_memvarHMatrixCatIter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter));
   { HMatrixCatIter *p; p=(HMatrixCatIter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HLocation),-1,-1,2,"fCurrentLoc=",0,"Current location in the category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory),-1,-1,2,"fCategory=",0,"! Category being iterated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TArrayI),-1,-1,2,"fSizes=",0,"! Sizes of the category");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCursor=",0,"Cursor for linear iteration");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fAntCursor=",0,"Cursor of previous interation");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fDir=",0,"Iteration direction.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEnd=",0,"Last possible value of fCursor");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fBegin=",0,"First value of fCursor ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMatrixCategory */
static void G__setup_memvarHMatrixCategory(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory));
   { HMatrixCategory *p; p=(HMatrixCategory*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable),-1,-1,2,"fIndexTable=",0,"Table of the position in fData of data objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNDataObjs=",0,"Number of data objects actually stored.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClonesArray),-1,-1,2,"fData=",0,"Container for the data in the Matrix category;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRecObject */
static void G__setup_memvarHRecObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRecObject));
   { HRecObject *p; p=(HRecObject*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTrack */
static void G__setup_memvarHTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HTrack));
   { HTrack *p; p=(HTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fP=",0,"Particle momentum in MeV/c");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HLinkedDataObject */
static void G__setup_memvarHLinkedDataObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject));
   { HLinkedDataObject *p; p=(HLinkedDataObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->sortVariable)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"sortVariable=",0,"! used to sort linked objects (non-persistent!)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nextHit=",0,"index of next hit object in cat (-1 if none)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRaNode */
static void G__setup_memvarHRaNode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaNode));
   { HRaNode *p; p=(HRaNode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TObjArray),-1,-1,2,"fSubNodes=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRaIndexNode */
static void G__setup_memvarHRaIndexNode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode));
   { HRaIndexNode *p; p=(HRaIndexNode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TObjArray),-1,-1,2,"fCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRaTree */
static void G__setup_memvarHRaTree(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaTree));
   { HRaTree *p; p=(HRaTree*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HRaNode),-1,-1,2,"fRoot=",0,"index tree's root node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HCategory),-1,-1,2,"fSourceCategory=",0,"! Category actually holding data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fDepth=",0,"Tree's depth");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HLocation),-1,-1,2,"fLoc=",0,"Location for this tree.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_HIterator),-1,-1,2,"fIter=",0,"! Iterator on data objects in the category");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLowerLevel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRaTreeExt */
static void G__setup_memvarHRaTreeExt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt));
   { HRaTreeExt *p; p=(HRaTreeExt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TObject),-1,-1,4,"m_pNullObject=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarDataStructDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHLocation(void) {
   /* HLocation */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLocation));
   G__memfunc_setup("HLocation",897,G__DataStructDict_170_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLocation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HLocation",897,G__DataStructDict_170_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLocation), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__DataStructDict_170_0_3, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - nInd i - 'Int_t' 0 '0' i1 "
"i - 'Int_t' 0 '0' i2 i - 'Int_t' 0 '0' i3 "
"i - 'Int_t' 0 '0' i4 i - 'Int_t' 0 '0' i5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNIndex",914,G__DataStructDict_170_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nIdx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffset",947,G__DataStructDict_170_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aOfs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__DataStructDict_170_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aIdx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUncheckedIndex",1730,G__DataStructDict_170_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aIdx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__DataStructDict_170_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - aIdx i - 'Int_t' 0 - aValue", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLinearIndex",1427,G__DataStructDict_170_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TArrayI' - 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLinearIndex",1427,G__DataStructDict_170_0_10, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - sizes i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNIndex",902,G__DataStructDict_170_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndexes",1040,G__DataStructDict_170_0_12, 85, G__get_linked_tagnum(&G__DataStructDictLN_TArrayI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__DataStructDict_170_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incIndex",818,G__DataStructDict_170_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nIndex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator+=",980,G__DataStructDict_170_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - shift", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator++",962,G__DataStructDict_170_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator-=",982,G__DataStructDict_170_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - shift", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator--",966,G__DataStructDict_170_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__DataStructDict_170_0_19, 105, -1, G__defined_typename("Int_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - aIdx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__DataStructDict_170_0_20, 117, G__get_linked_tagnum(&G__DataStructDictLN_HLocation), -1, 1, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readIndexes",1132,G__DataStructDict_170_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Dump",406,G__DataStructDict_170_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_170_0_23, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HLocation::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_170_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLocation::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_170_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HLocation::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_170_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HLocation::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_170_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_170_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLocation::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_170_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLocation::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_170_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLocation::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_170_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLocation::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HLocation", 1023, G__DataStructDict_170_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHFilter(void) {
   /* HFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HFilter));
   G__memfunc_setup("check",510,G__DataStructDict_211_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__DataStructDict_211_0_3, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_211_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_211_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_211_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_211_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_211_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_211_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_211_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_211_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HFilter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HFilter", 812, G__DataStructDict_211_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_211_0_16, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HFilter), -1, 1, 1, 1, 1, 0, "u 'HFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHCategory(void) {
   /* HCategory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HCategory));
   G__memfunc_setup("setBranchingLevel",1744,G__DataStructDict_212_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nLevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCategory",1162,G__DataStructDict_212_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - aCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsPersistent",1261,G__DataStructDict_212_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPersistency",1509,G__DataStructDict_212_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - per", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCategory",1150,G__DataStructDict_212_0_6, 115, -1, G__defined_typename("Cat_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBranchingLevel",1732,G__DataStructDict_212_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCatHeader",1197,G__DataStructDict_212_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TObject' - 0 - fObj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCatHeader",1185,G__DataStructDict_212_0_9, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClassName",1207,G__DataStructDict_212_0_10, 67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getClass",822,G__DataStructDict_212_0_11, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("makeBranch",1004,G__DataStructDict_212_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TBranch' - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateBranch",1439,G__DataStructDict_212_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree i - 'Int_t' 0 - splitLevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNewSlot",1036,G__DataStructDict_212_0_14, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 1, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc I - 'Int_t' 0 '0' pIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlot",738,G__DataStructDict_212_0_15, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 1, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc I - 'Int_t' 0 '0' pIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,G__DataStructDict_212_0_16, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,G__DataStructDict_212_0_17, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("query",566,G__DataStructDict_212_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TCollection' - 0 - aCol u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("query",566,G__DataStructDict_212_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TCollection' - 0 - aCol u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("query",566,G__DataStructDict_212_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'TCollection' - 0 - aCol u 'HLocation' - 1 - aLoc "
"u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,G__DataStructDict_212_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,G__DataStructDict_212_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isSelfSplitable",1542,G__DataStructDict_212_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeIterator",1224,G__DataStructDict_212_0_25, 85, G__get_linked_tagnum(&G__DataStructDictLN_TIterator), -1, 0, 2, 1, 1, 0, 
"C - 'Option_t' 10 '\"catIter\"' opt g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeReverseIterator",1956,G__DataStructDict_212_0_26, 85, G__get_linked_tagnum(&G__DataStructDictLN_TIterator), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getIndex",824,G__DataStructDict_212_0_28, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getIndex",824,G__DataStructDict_212_0_29, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - pObj", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getEntries",1050,G__DataStructDict_212_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("sort",456,G__DataStructDict_212_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_212_0_32, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HCategory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_212_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCategory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_212_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HCategory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_212_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HCategory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_212_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_212_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCategory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_212_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HCategory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_212_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCategory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_212_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HCategory::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HCategory", 1028, G__DataStructDict_212_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_212_0_45, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HCategory), -1, 1, 1, 1, 1, 0, "u 'HCategory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPairListI(void) {
   /* HPairListI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HPairListI));
   G__memfunc_setup("HPairListI",953,G__DataStructDict_213_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HPairListI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCapacity",1146,G__DataStructDict_213_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("add",297,G__DataStructDict_213_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - i1 h - 'UInt_t' 0 - i2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__DataStructDict_213_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - index h - 'UInt_t' 0 - i1 "
"h - 'UInt_t' 0 - i2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("remove",654,G__DataStructDict_213_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getN",398,G__DataStructDict_213_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex1",873,G__DataStructDict_213_0_7, 104, -1, G__defined_typename("UInt_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex2",874,G__DataStructDict_213_0_8, 104, -1, G__defined_typename("UInt_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataStructDict_213_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", "The default value of a pair is not", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_213_0_10, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPairListI::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_213_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPairListI::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_213_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPairListI::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_213_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPairListI::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_213_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_213_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPairListI::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_213_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPairListI::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_213_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPairListI::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_213_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPairListI::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPairListI", 953, G__DataStructDict_213_0_22, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HPairListI), -1, 0, 1, 1, 1, 0, "u 'HPairListI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPairListI", 1079, G__DataStructDict_213_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_213_0_24, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HPairListI), -1, 1, 1, 1, 1, 0, "u 'HPairListI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHIndexTable(void) {
   /* HIndexTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable));
   G__memfunc_setup("HIndexTable",1064,G__DataStructDict_214_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDimensions",1381,G__DataStructDict_214_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nDim I - 'Int_t' 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__DataStructDict_214_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__DataStructDict_214_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDimensions",1369,G__DataStructDict_214_0_5, 85, G__get_linked_tagnum(&G__DataStructDictLN_TArrayI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__DataStructDict_214_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - linAddr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__DataStructDict_214_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - linAddr i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEntries",1050,G__DataStructDict_214_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkLocation",1335,G__DataStructDict_214_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gotoLocation",1266,G__DataStructDict_214_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gotoBegin",926,G__DataStructDict_214_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("next",447,G__DataStructDict_214_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompactTable",1519,G__DataStructDict_214_0_14, 85, G__get_linked_tagnum(&G__DataStructDictLN_HPairListI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_214_0_15, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HIndexTable::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_214_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HIndexTable::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_214_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HIndexTable::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_214_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HIndexTable::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_214_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_214_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HIndexTable::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_214_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HIndexTable::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_214_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HIndexTable::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_214_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HIndexTable::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HIndexTable", 1064, G__DataStructDict_214_0_27, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable), -1, 0, 1, 1, 1, 0, "u 'HIndexTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HIndexTable", 1190, G__DataStructDict_214_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_214_0_29, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HIndexTable), -1, 1, 1, 1, 1, 0, "u 'HIndexTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHIterator(void) {
   /* HIterator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HIterator));
   G__memfunc_setup("gotoLocation",1266,G__DataStructDict_215_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getLocation",1145,G__DataStructDict_215_0_3, 117, G__get_linked_tagnum(&G__DataStructDictLN_HLocation), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__DataStructDict_215_0_4, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HIterator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_215_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HIterator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_215_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HIterator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_215_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HIterator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_215_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_215_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HIterator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_215_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HIterator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_215_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HIterator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_215_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HIterator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HIterator", 1040, G__DataStructDict_215_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_215_0_17, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HIterator), -1, 1, 1, 1, 1, 0, "u 'HIterator' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHLinearCatIter(void) {
   /* HLinearCatIter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter));
   G__memfunc_setup("HLinearCatIter",1359,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HLinearCatIter",1359,G__DataStructDict_216_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter), -1, 0, 2, 1, 1, 0, 
"U 'HLinearCategory' - 0 - cat g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollection",1324,G__DataStructDict_216_0_3, 85, G__get_linked_tagnum(&G__DataStructDictLN_TCollection), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Next",415,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("gotoLocation",1266,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocation",1145,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__DataStructDictLN_HLocation), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_216_0_8, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HLinearCatIter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_216_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinearCatIter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_216_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HLinearCatIter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_216_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HLinearCatIter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_216_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_216_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinearCatIter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_216_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLinearCatIter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_216_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinearCatIter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_216_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLinearCatIter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HLinearCatIter", 1359, G__DataStructDict_216_0_20, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter), -1, 0, 1, 1, 1, 0, "u 'HLinearCatIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HLinearCatIter", 1485, G__DataStructDict_216_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_216_0_22, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HLinearCatIter), -1, 1, 1, 1, 1, 0, "u 'HLinearCatIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHLinearCategory(void) {
   /* HLinearCategory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory));
   G__memfunc_setup("HLinearCategory",1505,G__DataStructDict_217_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HLinearCategory",1505,G__DataStructDict_217_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - className i - 'Int_t' 0 '1000' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClassName",1207,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getClass",822,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("makeBranch",1004,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBranch' - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateBranch",1439,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree i - 'Int_t' 0 - splitLevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEntries",1050,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNewSlot",1036,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 1, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc I - 'Int_t' 0 '0' pIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlot",738,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 1, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc I - 'Int_t' 0 '0' pIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlot",738,G__DataStructDict_217_0_10, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getData",698,G__DataStructDict_217_0_13, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObjArray), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filter",646,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compress",844,G__DataStructDict_217_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDynamicObjects",1755,G__DataStructDict_217_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' isDyn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDynamicObjects",1743,G__DataStructDict_217_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("freeDynamicMemory",1760,G__DataStructDict_217_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSelfSplitable",1542,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeIterator",1224,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TIterator), -1, 0, 2, 1, 1, 0, 
"C - 'Option_t' 10 '\"catIter\"' opt g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getIndex",824,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getIndex",824,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - pObj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("sort",456,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCollection",1356,G__DataStructDict_217_0_26, 85, G__get_linked_tagnum(&G__DataStructDictLN_TCollection), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_217_0_27, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HLinearCategory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_217_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinearCategory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_217_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HLinearCategory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_217_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HLinearCategory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_217_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_217_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinearCategory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_217_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLinearCategory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_217_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinearCategory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_217_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLinearCategory::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HLinearCategory", 1505, G__DataStructDict_217_0_39, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory), -1, 0, 1, 1, 1, 0, "u 'HLinearCategory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HLinearCategory", 1631, G__DataStructDict_217_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_217_0_41, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HLinearCategory), -1, 1, 1, 1, 1, 0, "u 'HLinearCategory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHLocatedDataObject(void) {
   /* HLocatedDataObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject));
   G__memfunc_setup("HLocatedDataObject",1749,G__DataStructDict_218_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,G__DataStructDict_218_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocationIndex",1649,G__DataStructDict_218_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocation",1145,G__DataStructDict_218_0_4, 85, G__get_linked_tagnum(&G__DataStructDictLN_HLocation), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_218_0_5, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HLocatedDataObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_218_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLocatedDataObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_218_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HLocatedDataObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_218_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HLocatedDataObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_218_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_218_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLocatedDataObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_218_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLocatedDataObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_218_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLocatedDataObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_218_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLocatedDataObject::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HLocatedDataObject", 1749, G__DataStructDict_218_0_17, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject), -1, 0, 1, 1, 1, 0, "u 'HLocatedDataObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HLocatedDataObject", 1875, G__DataStructDict_218_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_218_0_19, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HLocatedDataObject), -1, 1, 1, 1, 1, 0, "u 'HLocatedDataObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMatrixCatIter(void) {
   /* HMatrixCatIter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter));
   G__memfunc_setup("HMatrixCatIter",1385,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter), -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMatrixCatIter",1385,G__DataStructDict_219_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter), -1, 0, 2, 1, 1, 0, 
"U 'HMatrixCategory' - 0 - cat g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCollection",1324,G__DataStructDict_219_0_3, 85, G__get_linked_tagnum(&G__DataStructDictLN_TCollection), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Next",415,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Reset",515,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("gotoLocation",1266,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocation",1145,(G__InterfaceMethod) NULL,117, G__get_linked_tagnum(&G__DataStructDictLN_HLocation), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_219_0_8, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMatrixCatIter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_219_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMatrixCatIter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_219_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMatrixCatIter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_219_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMatrixCatIter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_219_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_219_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMatrixCatIter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_219_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMatrixCatIter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_219_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMatrixCatIter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_219_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMatrixCatIter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMatrixCatIter", 1385, G__DataStructDict_219_0_20, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter), -1, 0, 1, 1, 1, 0, "u 'HMatrixCatIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMatrixCatIter", 1511, G__DataStructDict_219_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_219_0_22, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCatIter), -1, 1, 1, 1, 1, 0, "u 'HMatrixCatIter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMatrixCategory(void) {
   /* HMatrixCategory */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory));
   G__memfunc_setup("HMatrixCategory",1531,G__DataStructDict_220_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMatrixCategory",1531,G__DataStructDict_220_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - className i - 'Int_t' 0 - nSizes "
"I - 'Int_t' 0 - sizes f - 'Float_t' 0 '0.1' fillRate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setup",561,G__DataStructDict_220_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 10 - className i - 'Int_t' 0 - nSizes "
"I - 'Int_t' 0 - sizes f - 'Float_t' 0 '0.1' fillRate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClassName",1207,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Text_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCollection",1356,G__DataStructDict_220_0_5, 85, G__get_linked_tagnum(&G__DataStructDictLN_TCollection), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClass",822,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSizes",846,G__DataStructDict_220_0_7, 85, G__get_linked_tagnum(&G__DataStructDictLN_TArrayI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__DataStructDict_220_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aIdx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEntries",1050,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateBranch",1439,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TTree' - 0 - tree i - 'Int_t' 0 - splitLevel", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("makeBranch",1004,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBranch' - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isSelfSplitable",1542,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNewSlot",1036,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 1, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc I - 'Int_t' 0 '0' pIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlot",738,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 1, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc I - 'Int_t' 0 '0' pIndex", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getIndex",824,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getIndex",824,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - pObj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("query",566,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TCollection' - 0 - aCol u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("query",566,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TCollection' - 0 - aCol u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("query",566,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'TCollection' - 0 - aCol u 'HLocation' - 1 - aLoc "
"u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("filter",646,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - aLoc u 'HFilter' - 1 - aFilter", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("MakeIterator",1224,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TIterator), -1, 0, 2, 1, 1, 0, 
"C - 'Option_t' 10 '\"catIter\"' opt g - 'Bool_t' 0 'kIterForward' dir", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_220_0_27, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMatrixCategory::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_220_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMatrixCategory::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_220_0_29, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMatrixCategory::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_220_0_30, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMatrixCategory::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_220_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_220_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMatrixCategory::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_220_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMatrixCategory::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_220_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMatrixCategory::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_220_0_38, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMatrixCategory::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMatrixCategory", 1531, G__DataStructDict_220_0_39, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory), -1, 0, 1, 1, 1, 0, "u 'HMatrixCategory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMatrixCategory", 1657, G__DataStructDict_220_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_220_0_41, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HMatrixCategory), -1, 1, 1, 1, 1, 0, "u 'HMatrixCategory' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRecObject(void) {
   /* HRecObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRecObject));
   G__memfunc_setup("HRecObject",953,G__DataStructDict_221_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRecObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRecObject",953,G__DataStructDict_221_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRecObject), -1, 0, 1, 1, 1, 0, "u 'HRecObject' - 1 - aObj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_221_0_3, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRecObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_221_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRecObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_221_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRecObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_221_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRecObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_221_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_221_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRecObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_221_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRecObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_221_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRecObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_221_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRecObject::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRecObject", 1079, G__DataStructDict_221_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_221_0_16, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HRecObject), -1, 1, 1, 1, 1, 0, "u 'HRecObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTrack(void) {
   /* HTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HTrack));
   G__memfunc_setup("HTrack",573,G__DataStructDict_222_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTrack",573,G__DataStructDict_222_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HTrack), -1, 0, 1, 1, 1, 0, "u 'HTrack' - 1 - aTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMomentum",1182,G__DataStructDict_222_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_222_0_4, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_222_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_222_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_222_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_222_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_222_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_222_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_222_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_222_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTrack::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HTrack", 699, G__DataStructDict_222_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_222_0_17, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HTrack), -1, 1, 1, 1, 1, 0, "u 'HTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHLinkedDataObject(void) {
   /* HLinkedDataObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject));
   G__memfunc_setup("HLinkedDataObject",1648,G__DataStructDict_223_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNextHitIndex",1544,G__DataStructDict_223_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - next", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextHitIndex",1532,G__DataStructDict_223_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__DataStructDict_223_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_223_0_5, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HLinkedDataObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_223_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinkedDataObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_223_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HLinkedDataObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_223_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HLinkedDataObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_223_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_223_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinkedDataObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_223_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLinkedDataObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_223_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLinkedDataObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_223_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLinkedDataObject::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HLinkedDataObject", 1648, G__DataStructDict_223_0_17, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject), -1, 0, 1, 1, 1, 0, "u 'HLinkedDataObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HLinkedDataObject", 1774, G__DataStructDict_223_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_223_0_19, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HLinkedDataObject), -1, 1, 1, 1, 1, 0, "u 'HLinkedDataObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRaNode(void) {
   /* HRaNode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaNode));
   G__memfunc_setup("HRaNode",641,G__DataStructDict_224_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRaNode",641,G__DataStructDict_224_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaNode), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubNode",1008,G__DataStructDict_224_0_3, 85, G__get_linked_tagnum(&G__DataStructDictLN_HRaNode), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - idx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSubNode",985,G__DataStructDict_224_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRaNode' - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__DataStructDict_224_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_224_0_6, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRaNode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_224_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaNode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_224_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRaNode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_224_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRaNode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_224_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_224_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaNode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_224_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaNode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_224_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaNode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_224_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaNode::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRaNode", 641, G__DataStructDict_224_0_18, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HRaNode), -1, 0, 1, 1, 1, 0, "u 'HRaNode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRaNode", 767, G__DataStructDict_224_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_224_0_20, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HRaNode), -1, 1, 1, 1, 1, 0, "u 'HRaNode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRaIndexNode(void) {
   /* HRaIndexNode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode));
   G__memfunc_setup("HRaIndexNode",1145,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRaIndexNode",1145,G__DataStructDict_225_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaIndexNode), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCell",704,G__DataStructDict_225_0_4, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__DataStructDict_225_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TObject' - 0 - obj i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_225_0_6, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRaIndexNode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_225_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaIndexNode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_225_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRaIndexNode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_225_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRaIndexNode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_225_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_225_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaIndexNode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_225_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaIndexNode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_225_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaIndexNode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_225_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaIndexNode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRaIndexNode", 1271, G__DataStructDict_225_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRaTree(void) {
   /* HRaTree */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaTree));
   G__memfunc_setup("addObject",896,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'HLocatedDataObject' - 0 - obj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildTree",928,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "U 'TArrayI' - 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildNode",918,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__DataStructDictLN_HRaNode), -1, 0, 2, 1, 2, 0, 
"U 'TArrayI' - 0 - sizes i - 'Int_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRaTree",651,G__DataStructDict_226_0_4, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRaTree",651,G__DataStructDict_226_0_5, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaTree), -1, 0, 2, 1, 1, 0, 
"U 'HCategory' - 0 - cat U 'TArrayI' - 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRaTree",651,G__DataStructDict_226_0_6, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaTree), -1, 0, 3, 1, 1, 0, 
"U 'HCategory' - 0 - cat u 'HLocation' - 1 - aLoc "
"U 'TArrayI' - 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("update",643,G__DataStructDict_226_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRoot",740,G__DataStructDict_226_0_8, 85, G__get_linked_tagnum(&G__DataStructDictLN_HRaNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,G__DataStructDict_226_0_9, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,G__DataStructDict_226_0_10, 85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 '-1' i1 i - 'Int_t' 0 '-1' i2 "
"i - 'Int_t' 0 '-1' i3 i - 'Int_t' 0 '-1' i4 "
"i - 'Int_t' 0 '-1' i5 i - 'Int_t' 0 '-1' i6 "
"i - 'Int_t' 0 '-1' i7 i - 'Int_t' 0 '-1' i8 "
"i - 'Int_t' 0 '-1' i9", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__DataStructDict_226_0_11, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRaTree::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_226_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaTree::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_226_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRaTree::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_226_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRaTree::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_226_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_226_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaTree::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_226_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaTree::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_226_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaTree::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_226_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaTree::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRaTree", 651, G__DataStructDict_226_0_23, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HRaTree), -1, 0, 1, 1, 1, 0, "u 'HRaTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRaTree", 777, G__DataStructDict_226_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_226_0_25, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HRaTree), -1, 1, 1, 1, 1, 0, "u 'HRaTree' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRaTreeExt(void) {
   /* HRaTreeExt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt));
   G__memfunc_setup("HRaTreeExt",956,G__DataStructDict_227_0_1, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRaTreeExt",956,G__DataStructDict_227_0_2, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt), -1, 0, 2, 1, 1, 0, 
"U 'HCategory' - 0 - cat U 'TArrayI' - 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRaTreeExt",956,G__DataStructDict_227_0_3, 105, G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt), -1, 0, 3, 1, 1, 0, 
"U 'HCategory' - 0 - cat u 'HLocation' - 1 - aLoc "
"U 'TArrayI' - 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TObject), -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 '-1' i1 i - 'Int_t' 0 '-1' i2 "
"i - 'Int_t' 0 '-1' i3 i - 'Int_t' 0 '-1' i4 "
"i - 'Int_t' 0 '-1' i5 i - 'Int_t' 0 '-1' i6 "
"i - 'Int_t' 0 '-1' i7 i - 'Int_t' 0 '-1' i8 "
"i - 'Int_t' 0 '-1' i9", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("makeNullObject",1424,G__DataStructDict_227_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__DataStructDict_227_0_7, 85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRaTreeExt::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__DataStructDict_227_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaTreeExt::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__DataStructDict_227_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRaTreeExt::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__DataStructDict_227_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRaTreeExt::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__DataStructDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__DataStructDict_227_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__DataStructDict_227_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaTreeExt::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__DataStructDict_227_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaTreeExt::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__DataStructDict_227_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRaTreeExt::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__DataStructDict_227_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRaTreeExt::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRaTreeExt", 956, G__DataStructDict_227_0_19, (int) ('i'), G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt), -1, 0, 1, 1, 1, 0, "u 'HRaTreeExt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRaTreeExt", 1082, G__DataStructDict_227_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__DataStructDict_227_0_21, (int) ('u'), G__get_linked_tagnum(&G__DataStructDictLN_HRaTreeExt), -1, 1, 1, 1, 1, 0, "u 'HRaTreeExt' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncDataStructDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&gNullObjectP),85,0,0,G__get_linked_tagnum(&G__DataStructDictLN_TObject),-1,-1,1,"gNullObjectP=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalDataStructDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcDataStructDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__DataStructDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__DataStructDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HFilter = { "HFilter" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HPairListI = { "HPairListI" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HIndexTable = { "HIndexTable" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HLinearCatIter = { "HLinearCatIter" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HLinearCategory = { "HLinearCategory" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HLocatedDataObject = { "HLocatedDataObject" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HMatrixCatIter = { "HMatrixCatIter" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HMatrixCategory = { "HMatrixCategory" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HRecObject = { "HRecObject" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HTrack = { "HTrack" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HLinkedDataObject = { "HLinkedDataObject" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HRaNode = { "HRaNode" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HRaIndexNode = { "HRaIndexNode" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HRaTree = { "HRaTree" , 99 , -1 };
G__linked_taginfo G__DataStructDictLN_HRaTreeExt = { "HRaTreeExt" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableDataStructDict() {
  G__DataStructDictLN_TClass.tagnum = -1 ;
  G__DataStructDictLN_TBuffer.tagnum = -1 ;
  G__DataStructDictLN_TMemberInspector.tagnum = -1 ;
  G__DataStructDictLN_TObject.tagnum = -1 ;
  G__DataStructDictLN_TCollection.tagnum = -1 ;
  G__DataStructDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__DataStructDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataStructDictLN_TBrowser.tagnum = -1 ;
  G__DataStructDictLN_TObjArray.tagnum = -1 ;
  G__DataStructDictLN_TClonesArray.tagnum = -1 ;
  G__DataStructDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__DataStructDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__DataStructDictLN_TArrayI.tagnum = -1 ;
  G__DataStructDictLN_HLocation.tagnum = -1 ;
  G__DataStructDictLN_TIterator.tagnum = -1 ;
  G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__DataStructDictLN_TTree.tagnum = -1 ;
  G__DataStructDictLN_TBranch.tagnum = -1 ;
  G__DataStructDictLN_HFilter.tagnum = -1 ;
  G__DataStructDictLN_HCategory.tagnum = -1 ;
  G__DataStructDictLN_HPairListI.tagnum = -1 ;
  G__DataStructDictLN_HIndexTable.tagnum = -1 ;
  G__DataStructDictLN_HIterator.tagnum = -1 ;
  G__DataStructDictLN_HLinearCatIter.tagnum = -1 ;
  G__DataStructDictLN_HLinearCategory.tagnum = -1 ;
  G__DataStructDictLN_HLocatedDataObject.tagnum = -1 ;
  G__DataStructDictLN_HMatrixCatIter.tagnum = -1 ;
  G__DataStructDictLN_HMatrixCategory.tagnum = -1 ;
  G__DataStructDictLN_HRecObject.tagnum = -1 ;
  G__DataStructDictLN_HTrack.tagnum = -1 ;
  G__DataStructDictLN_HLinkedDataObject.tagnum = -1 ;
  G__DataStructDictLN_HRaNode.tagnum = -1 ;
  G__DataStructDictLN_HRaIndexNode.tagnum = -1 ;
  G__DataStructDictLN_HRaTree.tagnum = -1 ;
  G__DataStructDictLN_HRaTreeExt.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableDataStructDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TArrayI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HLocation),sizeof(HLocation),-1,32512,"Indicator for a place in the event",G__setup_memvarHLocation,G__setup_memfuncHLocation);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__DataStructDictLN_TBranch);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HFilter),sizeof(HFilter),-1,29953,"Base class for data filters",G__setup_memvarHFilter,G__setup_memfuncHFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HCategory),sizeof(HCategory),-1,95491,"Generic data category",G__setup_memvarHCategory,G__setup_memfuncHCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HPairListI),sizeof(HPairListI),-1,95488,(char*)NULL,G__setup_memvarHPairListI,G__setup_memfuncHPairListI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HIndexTable),sizeof(HIndexTable),-1,95488,"Utility class handling an index table.",G__setup_memvarHIndexTable,G__setup_memfuncHIndexTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HIterator),sizeof(HIterator),-1,1285,"Base iterator for categories",G__setup_memvarHIterator,G__setup_memfuncHIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HLinearCatIter),sizeof(HLinearCatIter),-1,34048,"Iterator for a HMatrixCategory",G__setup_memvarHLinearCatIter,G__setup_memfuncHLinearCatIter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HLinearCategory),sizeof(HLinearCategory),-1,128256,"Generic data category (1-dim array of objects)",G__setup_memvarHLinearCategory,G__setup_memfuncHLinearCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HLocatedDataObject),sizeof(HLocatedDataObject),-1,95488,"Data object with localization data",G__setup_memvarHLocatedDataObject,G__setup_memfuncHLocatedDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HMatrixCatIter),sizeof(HMatrixCatIter),-1,34048,"Iterator for a HMatrixCategory",G__setup_memvarHMatrixCatIter,G__setup_memfuncHMatrixCatIter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HMatrixCategory),sizeof(HMatrixCategory),-1,128256,"Category where data are stored in a vector",G__setup_memvarHMatrixCategory,G__setup_memfuncHMatrixCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HRecObject),sizeof(HRecObject),-1,30464,"Data object obtained from other data objects",G__setup_memvarHRecObject,G__setup_memfuncHRecObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HTrack),sizeof(HTrack),-1,30464,"Track class (= dummy)",G__setup_memvarHTrack,G__setup_memfuncHTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HLinkedDataObject),sizeof(HLinkedDataObject),-1,29952,"Data object with link index",G__setup_memvarHLinkedDataObject,G__setup_memfuncHLinkedDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HRaNode),sizeof(HRaNode),-1,62720,"node for a HRaTree",G__setup_memvarHRaNode,G__setup_memfuncHRaNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HRaIndexNode),sizeof(HRaIndexNode),-1,62720,"Object table for a HRaTree",G__setup_memvarHRaIndexNode,G__setup_memfuncHRaIndexNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HRaTree),sizeof(HRaTree),-1,62720,"Random acces in a tree fashion.",G__setup_memvarHRaTree,G__setup_memfuncHRaTree);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__DataStructDictLN_HRaTreeExt),sizeof(HRaTreeExt),-1,62720,"Random acces in a tree fashion.",G__setup_memvarHRaTreeExt,G__setup_memfuncHRaTreeExt);
}
extern "C" void G__cpp_setupDataStructDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupDataStructDict()");
  G__set_cpp_environmentDataStructDict();
  G__cpp_setup_tagtableDataStructDict();

  G__cpp_setup_inheritanceDataStructDict();

  G__cpp_setup_typetableDataStructDict();

  G__cpp_setup_memvarDataStructDict();

  G__cpp_setup_memfuncDataStructDict();
  G__cpp_setup_globalDataStructDict();
  G__cpp_setup_funcDataStructDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncDataStructDict();
  return;
}
class G__cpp_setup_initDataStructDict {
  public:
    G__cpp_setup_initDataStructDict() { G__add_setup_func("DataStructDict",(G__incsetup)(&G__cpp_setupDataStructDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initDataStructDict() { G__remove_setup_func("DataStructDict"); }
};
G__cpp_setup_initDataStructDict G__cpp_setup_initializerDataStructDict;


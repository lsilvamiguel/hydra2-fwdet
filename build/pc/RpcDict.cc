//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:51:38 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIRpcDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RpcDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HRpcRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcRaw(void *p = 0);
   static void *newArray_HRpcRaw(Long_t size, void *p);
   static void delete_HRpcRaw(void *p);
   static void deleteArray_HRpcRaw(void *p);
   static void destruct_HRpcRaw(void *p);
   static void streamer_HRpcRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcRaw*)
   {
      ::HRpcRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcRaw", ::HRpcRaw::Class_Version(), "././hrpcraw.h", 20,
                  typeid(::HRpcRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcRaw) );
      instance.SetNew(&new_HRpcRaw);
      instance.SetNewArray(&newArray_HRpcRaw);
      instance.SetDelete(&delete_HRpcRaw);
      instance.SetDeleteArray(&deleteArray_HRpcRaw);
      instance.SetDestructor(&destruct_HRpcRaw);
      instance.SetStreamerFunc(&streamer_HRpcRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcRaw*)
   {
      return GenerateInitInstanceLocal((::HRpcRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcContFact(void *p = 0);
   static void *newArray_HRpcContFact(Long_t size, void *p);
   static void delete_HRpcContFact(void *p);
   static void deleteArray_HRpcContFact(void *p);
   static void destruct_HRpcContFact(void *p);
   static void streamer_HRpcContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcContFact*)
   {
      ::HRpcContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcContFact", ::HRpcContFact::Class_Version(), "././hrpccontfact.h", 9,
                  typeid(::HRpcContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcContFact) );
      instance.SetNew(&new_HRpcContFact);
      instance.SetNewArray(&newArray_HRpcContFact);
      instance.SetDelete(&delete_HRpcContFact);
      instance.SetDeleteArray(&deleteArray_HRpcContFact);
      instance.SetDestructor(&destruct_HRpcContFact);
      instance.SetStreamerFunc(&streamer_HRpcContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcContFact*)
   {
      return GenerateInitInstanceLocal((::HRpcContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcDetector(void *p = 0);
   static void *newArray_HRpcDetector(Long_t size, void *p);
   static void delete_HRpcDetector(void *p);
   static void deleteArray_HRpcDetector(void *p);
   static void destruct_HRpcDetector(void *p);
   static void streamer_HRpcDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcDetector*)
   {
      ::HRpcDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcDetector", ::HRpcDetector::Class_Version(), "././hrpcdetector.h", 8,
                  typeid(::HRpcDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcDetector) );
      instance.SetNew(&new_HRpcDetector);
      instance.SetNewArray(&newArray_HRpcDetector);
      instance.SetDelete(&delete_HRpcDetector);
      instance.SetDeleteArray(&deleteArray_HRpcDetector);
      instance.SetDestructor(&destruct_HRpcDetector);
      instance.SetStreamerFunc(&streamer_HRpcDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcDetector*)
   {
      return GenerateInitInstanceLocal((::HRpcDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCalPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCalPar(void *p = 0);
   static void *newArray_HRpcCalPar(Long_t size, void *p);
   static void delete_HRpcCalPar(void *p);
   static void deleteArray_HRpcCalPar(void *p);
   static void destruct_HRpcCalPar(void *p);
   static void streamer_HRpcCalPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCalPar*)
   {
      ::HRpcCalPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCalPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCalPar", ::HRpcCalPar::Class_Version(), "././hrpccalpar.h", 120,
                  typeid(::HRpcCalPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCalPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCalPar) );
      instance.SetNew(&new_HRpcCalPar);
      instance.SetNewArray(&newArray_HRpcCalPar);
      instance.SetDelete(&delete_HRpcCalPar);
      instance.SetDeleteArray(&deleteArray_HRpcCalPar);
      instance.SetDestructor(&destruct_HRpcCalPar);
      instance.SetStreamerFunc(&streamer_HRpcCalPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCalPar*)
   {
      return GenerateInitInstanceLocal((::HRpcCalPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCalPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRpcParRootFileIo(void *p);
   static void deleteArray_HRpcParRootFileIo(void *p);
   static void destruct_HRpcParRootFileIo(void *p);
   static void streamer_HRpcParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcParRootFileIo*)
   {
      ::HRpcParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcParRootFileIo", ::HRpcParRootFileIo::Class_Version(), "././hrpcparrootfileio.h", 12,
                  typeid(::HRpcParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcParRootFileIo) );
      instance.SetDelete(&delete_HRpcParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HRpcParRootFileIo);
      instance.SetDestructor(&destruct_HRpcParRootFileIo);
      instance.SetStreamerFunc(&streamer_HRpcParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HRpcParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRpcParAsciiFileIo(void *p);
   static void deleteArray_HRpcParAsciiFileIo(void *p);
   static void destruct_HRpcParAsciiFileIo(void *p);
   static void streamer_HRpcParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcParAsciiFileIo*)
   {
      ::HRpcParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcParAsciiFileIo", ::HRpcParAsciiFileIo::Class_Version(), "././hrpcparasciifileio.h", 12,
                  typeid(::HRpcParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcParAsciiFileIo) );
      instance.SetDelete(&delete_HRpcParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HRpcParAsciiFileIo);
      instance.SetDestructor(&destruct_HRpcParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HRpcParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HRpcParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCal(void *p = 0);
   static void *newArray_HRpcCal(Long_t size, void *p);
   static void delete_HRpcCal(void *p);
   static void deleteArray_HRpcCal(void *p);
   static void destruct_HRpcCal(void *p);
   static void streamer_HRpcCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCal*)
   {
      ::HRpcCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCal", ::HRpcCal::Class_Version(), "././hrpccal.h", 21,
                  typeid(::HRpcCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCal::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCal) );
      instance.SetNew(&new_HRpcCal);
      instance.SetNewArray(&newArray_HRpcCal);
      instance.SetDelete(&delete_HRpcCal);
      instance.SetDeleteArray(&deleteArray_HRpcCal);
      instance.SetDestructor(&destruct_HRpcCal);
      instance.SetStreamerFunc(&streamer_HRpcCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCal*)
   {
      return GenerateInitInstanceLocal((::HRpcCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCalSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCalSim(void *p = 0);
   static void *newArray_HRpcCalSim(Long_t size, void *p);
   static void delete_HRpcCalSim(void *p);
   static void deleteArray_HRpcCalSim(void *p);
   static void destruct_HRpcCalSim(void *p);
   static void streamer_HRpcCalSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCalSim*)
   {
      ::HRpcCalSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCalSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCalSim", ::HRpcCalSim::Class_Version(), "././hrpccalsim.h", 6,
                  typeid(::HRpcCalSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCalSim::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCalSim) );
      instance.SetNew(&new_HRpcCalSim);
      instance.SetNewArray(&newArray_HRpcCalSim);
      instance.SetDelete(&delete_HRpcCalSim);
      instance.SetDeleteArray(&deleteArray_HRpcCalSim);
      instance.SetDestructor(&destruct_HRpcCalSim);
      instance.SetStreamerFunc(&streamer_HRpcCalSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCalSim*)
   {
      return GenerateInitInstanceLocal((::HRpcCalSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCalSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCalParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCalParCell(void *p = 0);
   static void *newArray_HRpcCalParCell(Long_t size, void *p);
   static void delete_HRpcCalParCell(void *p);
   static void deleteArray_HRpcCalParCell(void *p);
   static void destruct_HRpcCalParCell(void *p);
   static void streamer_HRpcCalParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCalParCell*)
   {
      ::HRpcCalParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCalParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCalParCell", ::HRpcCalParCell::Class_Version(), "././hrpccalpar.h", 9,
                  typeid(::HRpcCalParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCalParCell::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCalParCell) );
      instance.SetNew(&new_HRpcCalParCell);
      instance.SetNewArray(&newArray_HRpcCalParCell);
      instance.SetDelete(&delete_HRpcCalParCell);
      instance.SetDeleteArray(&deleteArray_HRpcCalParCell);
      instance.SetDestructor(&destruct_HRpcCalParCell);
      instance.SetStreamerFunc(&streamer_HRpcCalParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCalParCell*)
   {
      return GenerateInitInstanceLocal((::HRpcCalParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCalParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCalParCol_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCalParCol(void *p = 0);
   static void *newArray_HRpcCalParCol(Long_t size, void *p);
   static void delete_HRpcCalParCol(void *p);
   static void deleteArray_HRpcCalParCol(void *p);
   static void destruct_HRpcCalParCol(void *p);
   static void streamer_HRpcCalParCol(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCalParCol*)
   {
      ::HRpcCalParCol *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCalParCol >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCalParCol", ::HRpcCalParCol::Class_Version(), "././hrpccalpar.h", 77,
                  typeid(::HRpcCalParCol), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCalParCol::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCalParCol) );
      instance.SetNew(&new_HRpcCalParCol);
      instance.SetNewArray(&newArray_HRpcCalParCol);
      instance.SetDelete(&delete_HRpcCalParCol);
      instance.SetDeleteArray(&deleteArray_HRpcCalParCol);
      instance.SetDestructor(&destruct_HRpcCalParCol);
      instance.SetStreamerFunc(&streamer_HRpcCalParCol);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCalParCol*)
   {
      return GenerateInitInstanceLocal((::HRpcCalParCol*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCalParCol*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCalParSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCalParSec(void *p = 0);
   static void *newArray_HRpcCalParSec(Long_t size, void *p);
   static void delete_HRpcCalParSec(void *p);
   static void deleteArray_HRpcCalParSec(void *p);
   static void destruct_HRpcCalParSec(void *p);
   static void streamer_HRpcCalParSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCalParSec*)
   {
      ::HRpcCalParSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCalParSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCalParSec", ::HRpcCalParSec::Class_Version(), "././hrpccalpar.h", 98,
                  typeid(::HRpcCalParSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCalParSec::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCalParSec) );
      instance.SetNew(&new_HRpcCalParSec);
      instance.SetNewArray(&newArray_HRpcCalParSec);
      instance.SetDelete(&delete_HRpcCalParSec);
      instance.SetDeleteArray(&deleteArray_HRpcCalParSec);
      instance.SetDestructor(&destruct_HRpcCalParSec);
      instance.SetStreamerFunc(&streamer_HRpcCalParSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCalParSec*)
   {
      return GenerateInitInstanceLocal((::HRpcCalParSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCalParSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcChargeOffsetPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcChargeOffsetPar(void *p = 0);
   static void *newArray_HRpcChargeOffsetPar(Long_t size, void *p);
   static void delete_HRpcChargeOffsetPar(void *p);
   static void deleteArray_HRpcChargeOffsetPar(void *p);
   static void destruct_HRpcChargeOffsetPar(void *p);
   static void streamer_HRpcChargeOffsetPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcChargeOffsetPar*)
   {
      ::HRpcChargeOffsetPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcChargeOffsetPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcChargeOffsetPar", ::HRpcChargeOffsetPar::Class_Version(), "././hrpcchargeoffsetpar.h", 8,
                  typeid(::HRpcChargeOffsetPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcChargeOffsetPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcChargeOffsetPar) );
      instance.SetNew(&new_HRpcChargeOffsetPar);
      instance.SetNewArray(&newArray_HRpcChargeOffsetPar);
      instance.SetDelete(&delete_HRpcChargeOffsetPar);
      instance.SetDeleteArray(&deleteArray_HRpcChargeOffsetPar);
      instance.SetDestructor(&destruct_HRpcChargeOffsetPar);
      instance.SetStreamerFunc(&streamer_HRpcChargeOffsetPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcChargeOffsetPar*)
   {
      return GenerateInitInstanceLocal((::HRpcChargeOffsetPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcChargeOffsetPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCalibrater_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCalibrater(void *p = 0);
   static void *newArray_HRpcCalibrater(Long_t size, void *p);
   static void delete_HRpcCalibrater(void *p);
   static void deleteArray_HRpcCalibrater(void *p);
   static void destruct_HRpcCalibrater(void *p);
   static void streamer_HRpcCalibrater(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCalibrater*)
   {
      ::HRpcCalibrater *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCalibrater >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCalibrater", ::HRpcCalibrater::Class_Version(), "././hrpccalibrater.h", 13,
                  typeid(::HRpcCalibrater), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCalibrater::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCalibrater) );
      instance.SetNew(&new_HRpcCalibrater);
      instance.SetNewArray(&newArray_HRpcCalibrater);
      instance.SetDelete(&delete_HRpcCalibrater);
      instance.SetDeleteArray(&deleteArray_HRpcCalibrater);
      instance.SetDestructor(&destruct_HRpcCalibrater);
      instance.SetStreamerFunc(&streamer_HRpcCalibrater);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCalibrater*)
   {
      return GenerateInitInstanceLocal((::HRpcCalibrater*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCalibrater*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcHit(void *p = 0);
   static void *newArray_HRpcHit(Long_t size, void *p);
   static void delete_HRpcHit(void *p);
   static void deleteArray_HRpcHit(void *p);
   static void destruct_HRpcHit(void *p);
   static void streamer_HRpcHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcHit*)
   {
      ::HRpcHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcHit", ::HRpcHit::Class_Version(), "././hrpchit.h", 6,
                  typeid(::HRpcHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcHit::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcHit) );
      instance.SetNew(&new_HRpcHit);
      instance.SetNewArray(&newArray_HRpcHit);
      instance.SetDelete(&delete_HRpcHit);
      instance.SetDeleteArray(&deleteArray_HRpcHit);
      instance.SetDestructor(&destruct_HRpcHit);
      instance.SetStreamerFunc(&streamer_HRpcHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcHit*)
   {
      return GenerateInitInstanceLocal((::HRpcHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcHitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcHitSim(void *p = 0);
   static void *newArray_HRpcHitSim(Long_t size, void *p);
   static void delete_HRpcHitSim(void *p);
   static void deleteArray_HRpcHitSim(void *p);
   static void destruct_HRpcHitSim(void *p);
   static void streamer_HRpcHitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcHitSim*)
   {
      ::HRpcHitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcHitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcHitSim", ::HRpcHitSim::Class_Version(), "././hrpchitsim.h", 6,
                  typeid(::HRpcHitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcHitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcHitSim) );
      instance.SetNew(&new_HRpcHitSim);
      instance.SetNewArray(&newArray_HRpcHitSim);
      instance.SetDelete(&delete_HRpcHitSim);
      instance.SetDeleteArray(&deleteArray_HRpcHitSim);
      instance.SetDestructor(&destruct_HRpcHitSim);
      instance.SetStreamerFunc(&streamer_HRpcHitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcHitSim*)
   {
      return GenerateInitInstanceLocal((::HRpcHitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcHitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcGeomPar(void *p = 0);
   static void *newArray_HRpcGeomPar(Long_t size, void *p);
   static void delete_HRpcGeomPar(void *p);
   static void deleteArray_HRpcGeomPar(void *p);
   static void destruct_HRpcGeomPar(void *p);
   static void streamer_HRpcGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcGeomPar*)
   {
      ::HRpcGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcGeomPar", ::HRpcGeomPar::Class_Version(), "././hrpcgeompar.h", 8,
                  typeid(::HRpcGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcGeomPar) );
      instance.SetNew(&new_HRpcGeomPar);
      instance.SetNewArray(&newArray_HRpcGeomPar);
      instance.SetDelete(&delete_HRpcGeomPar);
      instance.SetDeleteArray(&deleteArray_HRpcGeomPar);
      instance.SetDestructor(&destruct_HRpcGeomPar);
      instance.SetStreamerFunc(&streamer_HRpcGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcGeomPar*)
   {
      return GenerateInitInstanceLocal((::HRpcGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcGeomCellPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcGeomCellPar(void *p = 0);
   static void *newArray_HRpcGeomCellPar(Long_t size, void *p);
   static void delete_HRpcGeomCellPar(void *p);
   static void deleteArray_HRpcGeomCellPar(void *p);
   static void destruct_HRpcGeomCellPar(void *p);
   static void streamer_HRpcGeomCellPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcGeomCellPar*)
   {
      ::HRpcGeomCellPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcGeomCellPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcGeomCellPar", ::HRpcGeomCellPar::Class_Version(), "././hrpcgeomcellpar.h", 8,
                  typeid(::HRpcGeomCellPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcGeomCellPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcGeomCellPar) );
      instance.SetNew(&new_HRpcGeomCellPar);
      instance.SetNewArray(&newArray_HRpcGeomCellPar);
      instance.SetDelete(&delete_HRpcGeomCellPar);
      instance.SetDeleteArray(&deleteArray_HRpcGeomCellPar);
      instance.SetDestructor(&destruct_HRpcGeomCellPar);
      instance.SetStreamerFunc(&streamer_HRpcGeomCellPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcGeomCellPar*)
   {
      return GenerateInitInstanceLocal((::HRpcGeomCellPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcGeomCellPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCellStatusPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCellStatusPar(void *p = 0);
   static void *newArray_HRpcCellStatusPar(Long_t size, void *p);
   static void delete_HRpcCellStatusPar(void *p);
   static void deleteArray_HRpcCellStatusPar(void *p);
   static void destruct_HRpcCellStatusPar(void *p);
   static void streamer_HRpcCellStatusPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCellStatusPar*)
   {
      ::HRpcCellStatusPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCellStatusPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCellStatusPar", ::HRpcCellStatusPar::Class_Version(), "././hrpccellstatuspar.h", 9,
                  typeid(::HRpcCellStatusPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCellStatusPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCellStatusPar) );
      instance.SetNew(&new_HRpcCellStatusPar);
      instance.SetNewArray(&newArray_HRpcCellStatusPar);
      instance.SetDelete(&delete_HRpcCellStatusPar);
      instance.SetDeleteArray(&deleteArray_HRpcCellStatusPar);
      instance.SetDestructor(&destruct_HRpcCellStatusPar);
      instance.SetStreamerFunc(&streamer_HRpcCellStatusPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCellStatusPar*)
   {
      return GenerateInitInstanceLocal((::HRpcCellStatusPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCellStatusPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcDigiPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcDigiPar(void *p = 0);
   static void *newArray_HRpcDigiPar(Long_t size, void *p);
   static void delete_HRpcDigiPar(void *p);
   static void deleteArray_HRpcDigiPar(void *p);
   static void destruct_HRpcDigiPar(void *p);
   static void streamer_HRpcDigiPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcDigiPar*)
   {
      ::HRpcDigiPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcDigiPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcDigiPar", ::HRpcDigiPar::Class_Version(), "././hrpcdigipar.h", 6,
                  typeid(::HRpcDigiPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcDigiPar::Dictionary, isa_proxy, 1,
                  sizeof(::HRpcDigiPar) );
      instance.SetNew(&new_HRpcDigiPar);
      instance.SetNewArray(&newArray_HRpcDigiPar);
      instance.SetDelete(&delete_HRpcDigiPar);
      instance.SetDeleteArray(&deleteArray_HRpcDigiPar);
      instance.SetDestructor(&destruct_HRpcDigiPar);
      instance.SetStreamerFunc(&streamer_HRpcDigiPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcDigiPar*)
   {
      return GenerateInitInstanceLocal((::HRpcDigiPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcDigiPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcWtoQPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcWtoQPar(void *p = 0);
   static void *newArray_HRpcWtoQPar(Long_t size, void *p);
   static void delete_HRpcWtoQPar(void *p);
   static void deleteArray_HRpcWtoQPar(void *p);
   static void destruct_HRpcWtoQPar(void *p);
   static void streamer_HRpcWtoQPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcWtoQPar*)
   {
      ::HRpcWtoQPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcWtoQPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcWtoQPar", ::HRpcWtoQPar::Class_Version(), "././hrpcwtoqpar.h", 6,
                  typeid(::HRpcWtoQPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcWtoQPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcWtoQPar) );
      instance.SetNew(&new_HRpcWtoQPar);
      instance.SetNewArray(&newArray_HRpcWtoQPar);
      instance.SetDelete(&delete_HRpcWtoQPar);
      instance.SetDeleteArray(&deleteArray_HRpcWtoQPar);
      instance.SetDestructor(&destruct_HRpcWtoQPar);
      instance.SetStreamerFunc(&streamer_HRpcWtoQPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcWtoQPar*)
   {
      return GenerateInitInstanceLocal((::HRpcWtoQPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcWtoQPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcHitFPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcHitFPar(void *p = 0);
   static void *newArray_HRpcHitFPar(Long_t size, void *p);
   static void delete_HRpcHitFPar(void *p);
   static void deleteArray_HRpcHitFPar(void *p);
   static void destruct_HRpcHitFPar(void *p);
   static void streamer_HRpcHitFPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcHitFPar*)
   {
      ::HRpcHitFPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcHitFPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcHitFPar", ::HRpcHitFPar::Class_Version(), "././hrpchitfpar.h", 8,
                  typeid(::HRpcHitFPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcHitFPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcHitFPar) );
      instance.SetNew(&new_HRpcHitFPar);
      instance.SetNewArray(&newArray_HRpcHitFPar);
      instance.SetDelete(&delete_HRpcHitFPar);
      instance.SetDeleteArray(&deleteArray_HRpcHitFPar);
      instance.SetDestructor(&destruct_HRpcHitFPar);
      instance.SetStreamerFunc(&streamer_HRpcHitFPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcHitFPar*)
   {
      return GenerateInitInstanceLocal((::HRpcHitFPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcHitFPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcTimePosPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcTimePosPar(void *p = 0);
   static void *newArray_HRpcTimePosPar(Long_t size, void *p);
   static void delete_HRpcTimePosPar(void *p);
   static void deleteArray_HRpcTimePosPar(void *p);
   static void destruct_HRpcTimePosPar(void *p);
   static void streamer_HRpcTimePosPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcTimePosPar*)
   {
      ::HRpcTimePosPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcTimePosPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcTimePosPar", ::HRpcTimePosPar::Class_Version(), "././hrpctimepospar.h", 8,
                  typeid(::HRpcTimePosPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcTimePosPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcTimePosPar) );
      instance.SetNew(&new_HRpcTimePosPar);
      instance.SetNewArray(&newArray_HRpcTimePosPar);
      instance.SetDelete(&delete_HRpcTimePosPar);
      instance.SetDeleteArray(&deleteArray_HRpcTimePosPar);
      instance.SetDestructor(&destruct_HRpcTimePosPar);
      instance.SetStreamerFunc(&streamer_HRpcTimePosPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcTimePosPar*)
   {
      return GenerateInitInstanceLocal((::HRpcTimePosPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcTimePosPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcSlewingPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcSlewingPar(void *p = 0);
   static void *newArray_HRpcSlewingPar(Long_t size, void *p);
   static void delete_HRpcSlewingPar(void *p);
   static void deleteArray_HRpcSlewingPar(void *p);
   static void destruct_HRpcSlewingPar(void *p);
   static void streamer_HRpcSlewingPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcSlewingPar*)
   {
      ::HRpcSlewingPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcSlewingPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcSlewingPar", ::HRpcSlewingPar::Class_Version(), "././hrpcslewingpar.h", 8,
                  typeid(::HRpcSlewingPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcSlewingPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcSlewingPar) );
      instance.SetNew(&new_HRpcSlewingPar);
      instance.SetNewArray(&newArray_HRpcSlewingPar);
      instance.SetDelete(&delete_HRpcSlewingPar);
      instance.SetDeleteArray(&deleteArray_HRpcSlewingPar);
      instance.SetDestructor(&destruct_HRpcSlewingPar);
      instance.SetStreamerFunc(&streamer_HRpcSlewingPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcSlewingPar*)
   {
      return GenerateInitInstanceLocal((::HRpcSlewingPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcSlewingPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcHitF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcHitF(void *p = 0);
   static void *newArray_HRpcHitF(Long_t size, void *p);
   static void delete_HRpcHitF(void *p);
   static void deleteArray_HRpcHitF(void *p);
   static void destruct_HRpcHitF(void *p);
   static void streamer_HRpcHitF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcHitF*)
   {
      ::HRpcHitF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcHitF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcHitF", ::HRpcHitF::Class_Version(), "././hrpchitf.h", 19,
                  typeid(::HRpcHitF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcHitF::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcHitF) );
      instance.SetNew(&new_HRpcHitF);
      instance.SetNewArray(&newArray_HRpcHitF);
      instance.SetDelete(&delete_HRpcHitF);
      instance.SetDeleteArray(&deleteArray_HRpcHitF);
      instance.SetDestructor(&destruct_HRpcHitF);
      instance.SetStreamerFunc(&streamer_HRpcHitF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcHitF*)
   {
      return GenerateInitInstanceLocal((::HRpcHitF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcHitF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcCluster(void *p = 0);
   static void *newArray_HRpcCluster(Long_t size, void *p);
   static void delete_HRpcCluster(void *p);
   static void deleteArray_HRpcCluster(void *p);
   static void destruct_HRpcCluster(void *p);
   static void streamer_HRpcCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcCluster*)
   {
      ::HRpcCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcCluster", ::HRpcCluster::Class_Version(), "././hrpccluster.h", 6,
                  typeid(::HRpcCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcCluster::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcCluster) );
      instance.SetNew(&new_HRpcCluster);
      instance.SetNewArray(&newArray_HRpcCluster);
      instance.SetDelete(&delete_HRpcCluster);
      instance.SetDeleteArray(&deleteArray_HRpcCluster);
      instance.SetDestructor(&destruct_HRpcCluster);
      instance.SetStreamerFunc(&streamer_HRpcCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcCluster*)
   {
      return GenerateInitInstanceLocal((::HRpcCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcClusterSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcClusterSim(void *p = 0);
   static void *newArray_HRpcClusterSim(Long_t size, void *p);
   static void delete_HRpcClusterSim(void *p);
   static void deleteArray_HRpcClusterSim(void *p);
   static void destruct_HRpcClusterSim(void *p);
   static void streamer_HRpcClusterSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcClusterSim*)
   {
      ::HRpcClusterSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcClusterSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcClusterSim", ::HRpcClusterSim::Class_Version(), "././hrpcclustersim.h", 6,
                  typeid(::HRpcClusterSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcClusterSim::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcClusterSim) );
      instance.SetNew(&new_HRpcClusterSim);
      instance.SetNewArray(&newArray_HRpcClusterSim);
      instance.SetDelete(&delete_HRpcClusterSim);
      instance.SetDeleteArray(&deleteArray_HRpcClusterSim);
      instance.SetDestructor(&destruct_HRpcClusterSim);
      instance.SetStreamerFunc(&streamer_HRpcClusterSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcClusterSim*)
   {
      return GenerateInitInstanceLocal((::HRpcClusterSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcClusterSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcClusFPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcClusFPar(void *p = 0);
   static void *newArray_HRpcClusFPar(Long_t size, void *p);
   static void delete_HRpcClusFPar(void *p);
   static void deleteArray_HRpcClusFPar(void *p);
   static void destruct_HRpcClusFPar(void *p);
   static void streamer_HRpcClusFPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcClusFPar*)
   {
      ::HRpcClusFPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcClusFPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcClusFPar", ::HRpcClusFPar::Class_Version(), "././hrpcclusfpar.h", 6,
                  typeid(::HRpcClusFPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcClusFPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcClusFPar) );
      instance.SetNew(&new_HRpcClusFPar);
      instance.SetNewArray(&newArray_HRpcClusFPar);
      instance.SetDelete(&delete_HRpcClusFPar);
      instance.SetDeleteArray(&deleteArray_HRpcClusFPar);
      instance.SetDestructor(&destruct_HRpcClusFPar);
      instance.SetStreamerFunc(&streamer_HRpcClusFPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcClusFPar*)
   {
      return GenerateInitInstanceLocal((::HRpcClusFPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcClusFPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcClusterF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcClusterF(void *p = 0);
   static void *newArray_HRpcClusterF(Long_t size, void *p);
   static void delete_HRpcClusterF(void *p);
   static void deleteArray_HRpcClusterF(void *p);
   static void destruct_HRpcClusterF(void *p);
   static void streamer_HRpcClusterF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcClusterF*)
   {
      ::HRpcClusterF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcClusterF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcClusterF", ::HRpcClusterF::Class_Version(), "././hrpcclusterf.h", 12,
                  typeid(::HRpcClusterF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcClusterF::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcClusterF) );
      instance.SetNew(&new_HRpcClusterF);
      instance.SetNewArray(&newArray_HRpcClusterF);
      instance.SetDelete(&delete_HRpcClusterF);
      instance.SetDeleteArray(&deleteArray_HRpcClusterF);
      instance.SetDestructor(&destruct_HRpcClusterF);
      instance.SetStreamerFunc(&streamer_HRpcClusterF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcClusterF*)
   {
      return GenerateInitInstanceLocal((::HRpcClusterF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcClusterF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcTrbUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRpcTrbUnpacker(void *p);
   static void deleteArray_HRpcTrbUnpacker(void *p);
   static void destruct_HRpcTrbUnpacker(void *p);
   static void streamer_HRpcTrbUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcTrbUnpacker*)
   {
      ::HRpcTrbUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcTrbUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcTrbUnpacker", ::HRpcTrbUnpacker::Class_Version(), "././hrpctrbunpacker.h", 12,
                  typeid(::HRpcTrbUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcTrbUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcTrbUnpacker) );
      instance.SetDelete(&delete_HRpcTrbUnpacker);
      instance.SetDeleteArray(&deleteArray_HRpcTrbUnpacker);
      instance.SetDestructor(&destruct_HRpcTrbUnpacker);
      instance.SetStreamerFunc(&streamer_HRpcTrbUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcTrbUnpacker*)
   {
      return GenerateInitInstanceLocal((::HRpcTrbUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcTrbUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcTrb2Lookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcTrb2Lookup(void *p = 0);
   static void *newArray_HRpcTrb2Lookup(Long_t size, void *p);
   static void delete_HRpcTrb2Lookup(void *p);
   static void deleteArray_HRpcTrb2Lookup(void *p);
   static void destruct_HRpcTrb2Lookup(void *p);
   static void streamer_HRpcTrb2Lookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcTrb2Lookup*)
   {
      ::HRpcTrb2Lookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcTrb2Lookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcTrb2Lookup", ::HRpcTrb2Lookup::Class_Version(), "././hrpctrb2lookup.h", 82,
                  typeid(::HRpcTrb2Lookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcTrb2Lookup::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcTrb2Lookup) );
      instance.SetNew(&new_HRpcTrb2Lookup);
      instance.SetNewArray(&newArray_HRpcTrb2Lookup);
      instance.SetDelete(&delete_HRpcTrb2Lookup);
      instance.SetDeleteArray(&deleteArray_HRpcTrb2Lookup);
      instance.SetDestructor(&destruct_HRpcTrb2Lookup);
      instance.SetStreamerFunc(&streamer_HRpcTrb2Lookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcTrb2Lookup*)
   {
      return GenerateInitInstanceLocal((::HRpcTrb2Lookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcTrb2Lookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcTrb2Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRpcTrb2Unpacker(void *p);
   static void deleteArray_HRpcTrb2Unpacker(void *p);
   static void destruct_HRpcTrb2Unpacker(void *p);
   static void streamer_HRpcTrb2Unpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcTrb2Unpacker*)
   {
      ::HRpcTrb2Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcTrb2Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcTrb2Unpacker", ::HRpcTrb2Unpacker::Class_Version(), "././hrpctrb2unpacker.h", 9,
                  typeid(::HRpcTrb2Unpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcTrb2Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcTrb2Unpacker) );
      instance.SetDelete(&delete_HRpcTrb2Unpacker);
      instance.SetDeleteArray(&deleteArray_HRpcTrb2Unpacker);
      instance.SetDestructor(&destruct_HRpcTrb2Unpacker);
      instance.SetStreamerFunc(&streamer_HRpcTrb2Unpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcTrb2Unpacker*)
   {
      return GenerateInitInstanceLocal((::HRpcTrb2Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcTrb2Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcTrb2LookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcTrb2LookupChan(void *p = 0);
   static void *newArray_HRpcTrb2LookupChan(Long_t size, void *p);
   static void delete_HRpcTrb2LookupChan(void *p);
   static void deleteArray_HRpcTrb2LookupChan(void *p);
   static void destruct_HRpcTrb2LookupChan(void *p);
   static void streamer_HRpcTrb2LookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcTrb2LookupChan*)
   {
      ::HRpcTrb2LookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcTrb2LookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcTrb2LookupChan", ::HRpcTrb2LookupChan::Class_Version(), "././hrpctrb2lookup.h", 13,
                  typeid(::HRpcTrb2LookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcTrb2LookupChan::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcTrb2LookupChan) );
      instance.SetNew(&new_HRpcTrb2LookupChan);
      instance.SetNewArray(&newArray_HRpcTrb2LookupChan);
      instance.SetDelete(&delete_HRpcTrb2LookupChan);
      instance.SetDeleteArray(&deleteArray_HRpcTrb2LookupChan);
      instance.SetDestructor(&destruct_HRpcTrb2LookupChan);
      instance.SetStreamerFunc(&streamer_HRpcTrb2LookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcTrb2LookupChan*)
   {
      return GenerateInitInstanceLocal((::HRpcTrb2LookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcTrb2LookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcTrb2LookupBoard_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcTrb2LookupBoard(void *p = 0);
   static void *newArray_HRpcTrb2LookupBoard(Long_t size, void *p);
   static void delete_HRpcTrb2LookupBoard(void *p);
   static void deleteArray_HRpcTrb2LookupBoard(void *p);
   static void destruct_HRpcTrb2LookupBoard(void *p);
   static void streamer_HRpcTrb2LookupBoard(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcTrb2LookupBoard*)
   {
      ::HRpcTrb2LookupBoard *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcTrb2LookupBoard >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcTrb2LookupBoard", ::HRpcTrb2LookupBoard::Class_Version(), "././hrpctrb2lookup.h", 62,
                  typeid(::HRpcTrb2LookupBoard), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcTrb2LookupBoard::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcTrb2LookupBoard) );
      instance.SetNew(&new_HRpcTrb2LookupBoard);
      instance.SetNewArray(&newArray_HRpcTrb2LookupBoard);
      instance.SetDelete(&delete_HRpcTrb2LookupBoard);
      instance.SetDeleteArray(&deleteArray_HRpcTrb2LookupBoard);
      instance.SetDestructor(&destruct_HRpcTrb2LookupBoard);
      instance.SetStreamerFunc(&streamer_HRpcTrb2LookupBoard);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcTrb2LookupBoard*)
   {
      return GenerateInitInstanceLocal((::HRpcTrb2LookupBoard*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcTrb2LookupBoard*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcLookupGCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcLookupGCell(void *p = 0);
   static void *newArray_HRpcLookupGCell(Long_t size, void *p);
   static void delete_HRpcLookupGCell(void *p);
   static void deleteArray_HRpcLookupGCell(void *p);
   static void destruct_HRpcLookupGCell(void *p);
   static void streamer_HRpcLookupGCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcLookupGCell*)
   {
      ::HRpcLookupGCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcLookupGCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcLookupGCell", ::HRpcLookupGCell::Class_Version(), "././hrpclookupgeom.h", 10,
                  typeid(::HRpcLookupGCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcLookupGCell::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcLookupGCell) );
      instance.SetNew(&new_HRpcLookupGCell);
      instance.SetNewArray(&newArray_HRpcLookupGCell);
      instance.SetDelete(&delete_HRpcLookupGCell);
      instance.SetDeleteArray(&deleteArray_HRpcLookupGCell);
      instance.SetDestructor(&destruct_HRpcLookupGCell);
      instance.SetStreamerFunc(&streamer_HRpcLookupGCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcLookupGCell*)
   {
      return GenerateInitInstanceLocal((::HRpcLookupGCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcLookupGCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcLookupGCol_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcLookupGCol(void *p = 0);
   static void *newArray_HRpcLookupGCol(Long_t size, void *p);
   static void delete_HRpcLookupGCol(void *p);
   static void deleteArray_HRpcLookupGCol(void *p);
   static void destruct_HRpcLookupGCol(void *p);
   static void streamer_HRpcLookupGCol(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcLookupGCol*)
   {
      ::HRpcLookupGCol *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcLookupGCol >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcLookupGCol", ::HRpcLookupGCol::Class_Version(), "././hrpclookupgeom.h", 47,
                  typeid(::HRpcLookupGCol), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcLookupGCol::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcLookupGCol) );
      instance.SetNew(&new_HRpcLookupGCol);
      instance.SetNewArray(&newArray_HRpcLookupGCol);
      instance.SetDelete(&delete_HRpcLookupGCol);
      instance.SetDeleteArray(&deleteArray_HRpcLookupGCol);
      instance.SetDestructor(&destruct_HRpcLookupGCol);
      instance.SetStreamerFunc(&streamer_HRpcLookupGCol);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcLookupGCol*)
   {
      return GenerateInitInstanceLocal((::HRpcLookupGCol*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcLookupGCol*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcLookupGSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcLookupGSec(void *p = 0);
   static void *newArray_HRpcLookupGSec(Long_t size, void *p);
   static void delete_HRpcLookupGSec(void *p);
   static void deleteArray_HRpcLookupGSec(void *p);
   static void destruct_HRpcLookupGSec(void *p);
   static void streamer_HRpcLookupGSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcLookupGSec*)
   {
      ::HRpcLookupGSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcLookupGSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcLookupGSec", ::HRpcLookupGSec::Class_Version(), "././hrpclookupgeom.h", 60,
                  typeid(::HRpcLookupGSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcLookupGSec::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcLookupGSec) );
      instance.SetNew(&new_HRpcLookupGSec);
      instance.SetNewArray(&newArray_HRpcLookupGSec);
      instance.SetDelete(&delete_HRpcLookupGSec);
      instance.SetDeleteArray(&deleteArray_HRpcLookupGSec);
      instance.SetDestructor(&destruct_HRpcLookupGSec);
      instance.SetStreamerFunc(&streamer_HRpcLookupGSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcLookupGSec*)
   {
      return GenerateInitInstanceLocal((::HRpcLookupGSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcLookupGSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcLookupGeom_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcLookupGeom(void *p = 0);
   static void *newArray_HRpcLookupGeom(Long_t size, void *p);
   static void delete_HRpcLookupGeom(void *p);
   static void deleteArray_HRpcLookupGeom(void *p);
   static void destruct_HRpcLookupGeom(void *p);
   static void streamer_HRpcLookupGeom(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcLookupGeom*)
   {
      ::HRpcLookupGeom *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcLookupGeom >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcLookupGeom", ::HRpcLookupGeom::Class_Version(), "././hrpclookupgeom.h", 74,
                  typeid(::HRpcLookupGeom), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcLookupGeom::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcLookupGeom) );
      instance.SetNew(&new_HRpcLookupGeom);
      instance.SetNewArray(&newArray_HRpcLookupGeom);
      instance.SetDelete(&delete_HRpcLookupGeom);
      instance.SetDeleteArray(&deleteArray_HRpcLookupGeom);
      instance.SetDestructor(&destruct_HRpcLookupGeom);
      instance.SetStreamerFunc(&streamer_HRpcLookupGeom);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcLookupGeom*)
   {
      return GenerateInitInstanceLocal((::HRpcLookupGeom*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcLookupGeom*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcTaskSet(void *p = 0);
   static void *newArray_HRpcTaskSet(Long_t size, void *p);
   static void delete_HRpcTaskSet(void *p);
   static void deleteArray_HRpcTaskSet(void *p);
   static void destruct_HRpcTaskSet(void *p);
   static void streamer_HRpcTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcTaskSet*)
   {
      ::HRpcTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcTaskSet", ::HRpcTaskSet::Class_Version(), "././hrpctaskset.h", 7,
                  typeid(::HRpcTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcTaskSet) );
      instance.SetNew(&new_HRpcTaskSet);
      instance.SetNewArray(&newArray_HRpcTaskSet);
      instance.SetDelete(&delete_HRpcTaskSet);
      instance.SetDeleteArray(&deleteArray_HRpcTaskSet);
      instance.SetDestructor(&destruct_HRpcTaskSet);
      instance.SetStreamerFunc(&streamer_HRpcTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcTaskSet*)
   {
      return GenerateInitInstanceLocal((::HRpcTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRpcDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRpcDigitizer(void *p = 0);
   static void *newArray_HRpcDigitizer(Long_t size, void *p);
   static void delete_HRpcDigitizer(void *p);
   static void deleteArray_HRpcDigitizer(void *p);
   static void destruct_HRpcDigitizer(void *p);
   static void streamer_HRpcDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRpcDigitizer*)
   {
      ::HRpcDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRpcDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRpcDigitizer", ::HRpcDigitizer::Class_Version(), "././hrpcdigitizer.h", 23,
                  typeid(::HRpcDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRpcDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HRpcDigitizer) );
      instance.SetNew(&new_HRpcDigitizer);
      instance.SetNewArray(&newArray_HRpcDigitizer);
      instance.SetDelete(&delete_HRpcDigitizer);
      instance.SetDeleteArray(&deleteArray_HRpcDigitizer);
      instance.SetDestructor(&destruct_HRpcDigitizer);
      instance.SetStreamerFunc(&streamer_HRpcDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRpcDigitizer*)
   {
      return GenerateInitInstanceLocal((::HRpcDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRpcDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HRpcRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcRaw::Class_Name()
{
   return "HRpcRaw";
}

//______________________________________________________________________________
const char *HRpcRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcContFact::Class_Name()
{
   return "HRpcContFact";
}

//______________________________________________________________________________
const char *HRpcContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcDetector::Class_Name()
{
   return "HRpcDetector";
}

//______________________________________________________________________________
const char *HRpcDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCalPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCalPar::Class_Name()
{
   return "HRpcCalPar";
}

//______________________________________________________________________________
const char *HRpcCalPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCalPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCalPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCalPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcParRootFileIo::Class_Name()
{
   return "HRpcParRootFileIo";
}

//______________________________________________________________________________
const char *HRpcParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcParAsciiFileIo::Class_Name()
{
   return "HRpcParAsciiFileIo";
}

//______________________________________________________________________________
const char *HRpcParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCal::Class_Name()
{
   return "HRpcCal";
}

//______________________________________________________________________________
const char *HRpcCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCalSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCalSim::Class_Name()
{
   return "HRpcCalSim";
}

//______________________________________________________________________________
const char *HRpcCalSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCalSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCalSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCalSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCalParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCalParCell::Class_Name()
{
   return "HRpcCalParCell";
}

//______________________________________________________________________________
const char *HRpcCalParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCalParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCalParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCalParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCalParCol::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCalParCol::Class_Name()
{
   return "HRpcCalParCol";
}

//______________________________________________________________________________
const char *HRpcCalParCol::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCol*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCalParCol::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCol*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCalParCol::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCol*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCalParCol::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParCol*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCalParSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCalParSec::Class_Name()
{
   return "HRpcCalParSec";
}

//______________________________________________________________________________
const char *HRpcCalParSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCalParSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCalParSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCalParSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalParSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcChargeOffsetPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcChargeOffsetPar::Class_Name()
{
   return "HRpcChargeOffsetPar";
}

//______________________________________________________________________________
const char *HRpcChargeOffsetPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcChargeOffsetPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcChargeOffsetPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcChargeOffsetPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcChargeOffsetPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcChargeOffsetPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcChargeOffsetPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcChargeOffsetPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCalibrater::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCalibrater::Class_Name()
{
   return "HRpcCalibrater";
}

//______________________________________________________________________________
const char *HRpcCalibrater::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalibrater*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCalibrater::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalibrater*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCalibrater::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalibrater*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCalibrater::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCalibrater*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcHit::Class_Name()
{
   return "HRpcHit";
}

//______________________________________________________________________________
const char *HRpcHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcHitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcHitSim::Class_Name()
{
   return "HRpcHitSim";
}

//______________________________________________________________________________
const char *HRpcHitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcHitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcHitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcHitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcGeomPar::Class_Name()
{
   return "HRpcGeomPar";
}

//______________________________________________________________________________
const char *HRpcGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcGeomCellPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcGeomCellPar::Class_Name()
{
   return "HRpcGeomCellPar";
}

//______________________________________________________________________________
const char *HRpcGeomCellPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomCellPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcGeomCellPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomCellPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcGeomCellPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomCellPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcGeomCellPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcGeomCellPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCellStatusPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCellStatusPar::Class_Name()
{
   return "HRpcCellStatusPar";
}

//______________________________________________________________________________
const char *HRpcCellStatusPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCellStatusPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCellStatusPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCellStatusPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCellStatusPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCellStatusPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCellStatusPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCellStatusPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcDigiPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcDigiPar::Class_Name()
{
   return "HRpcDigiPar";
}

//______________________________________________________________________________
const char *HRpcDigiPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigiPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcDigiPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigiPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcDigiPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigiPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcDigiPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigiPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcWtoQPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcWtoQPar::Class_Name()
{
   return "HRpcWtoQPar";
}

//______________________________________________________________________________
const char *HRpcWtoQPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcWtoQPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcWtoQPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcWtoQPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcWtoQPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcWtoQPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcWtoQPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcWtoQPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcHitFPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcHitFPar::Class_Name()
{
   return "HRpcHitFPar";
}

//______________________________________________________________________________
const char *HRpcHitFPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitFPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcHitFPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitFPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcHitFPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitFPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcHitFPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitFPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcTimePosPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcTimePosPar::Class_Name()
{
   return "HRpcTimePosPar";
}

//______________________________________________________________________________
const char *HRpcTimePosPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTimePosPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcTimePosPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTimePosPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcTimePosPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTimePosPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcTimePosPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTimePosPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcSlewingPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcSlewingPar::Class_Name()
{
   return "HRpcSlewingPar";
}

//______________________________________________________________________________
const char *HRpcSlewingPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcSlewingPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcSlewingPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcSlewingPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcSlewingPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcSlewingPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcSlewingPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcSlewingPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcHitF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcHitF::Class_Name()
{
   return "HRpcHitF";
}

//______________________________________________________________________________
const char *HRpcHitF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcHitF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcHitF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcHitF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcHitF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcCluster::Class_Name()
{
   return "HRpcCluster";
}

//______________________________________________________________________________
const char *HRpcCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcClusterSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcClusterSim::Class_Name()
{
   return "HRpcClusterSim";
}

//______________________________________________________________________________
const char *HRpcClusterSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcClusterSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcClusterSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcClusterSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcClusFPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcClusFPar::Class_Name()
{
   return "HRpcClusFPar";
}

//______________________________________________________________________________
const char *HRpcClusFPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusFPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcClusFPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusFPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcClusFPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusFPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcClusFPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusFPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcClusterF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcClusterF::Class_Name()
{
   return "HRpcClusterF";
}

//______________________________________________________________________________
const char *HRpcClusterF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcClusterF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcClusterF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcClusterF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcClusterF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcTrbUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcTrbUnpacker::Class_Name()
{
   return "HRpcTrbUnpacker";
}

//______________________________________________________________________________
const char *HRpcTrbUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrbUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcTrbUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrbUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcTrbUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrbUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcTrbUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrbUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcTrb2Lookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcTrb2Lookup::Class_Name()
{
   return "HRpcTrb2Lookup";
}

//______________________________________________________________________________
const char *HRpcTrb2Lookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Lookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcTrb2Lookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Lookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcTrb2Lookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Lookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcTrb2Lookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Lookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcTrb2Unpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcTrb2Unpacker::Class_Name()
{
   return "HRpcTrb2Unpacker";
}

//______________________________________________________________________________
const char *HRpcTrb2Unpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcTrb2Unpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcTrb2Unpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcTrb2Unpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2Unpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcTrb2LookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcTrb2LookupChan::Class_Name()
{
   return "HRpcTrb2LookupChan";
}

//______________________________________________________________________________
const char *HRpcTrb2LookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcTrb2LookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcTrb2LookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcTrb2LookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcTrb2LookupBoard::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcTrb2LookupBoard::Class_Name()
{
   return "HRpcTrb2LookupBoard";
}

//______________________________________________________________________________
const char *HRpcTrb2LookupBoard::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupBoard*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcTrb2LookupBoard::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupBoard*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcTrb2LookupBoard::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupBoard*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcTrb2LookupBoard::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTrb2LookupBoard*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcLookupGCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcLookupGCell::Class_Name()
{
   return "HRpcLookupGCell";
}

//______________________________________________________________________________
const char *HRpcLookupGCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcLookupGCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcLookupGCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcLookupGCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcLookupGCol::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcLookupGCol::Class_Name()
{
   return "HRpcLookupGCol";
}

//______________________________________________________________________________
const char *HRpcLookupGCol::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCol*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcLookupGCol::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCol*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcLookupGCol::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCol*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcLookupGCol::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGCol*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcLookupGSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcLookupGSec::Class_Name()
{
   return "HRpcLookupGSec";
}

//______________________________________________________________________________
const char *HRpcLookupGSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcLookupGSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcLookupGSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcLookupGSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcLookupGeom::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcLookupGeom::Class_Name()
{
   return "HRpcLookupGeom";
}

//______________________________________________________________________________
const char *HRpcLookupGeom::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGeom*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcLookupGeom::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGeom*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcLookupGeom::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGeom*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcLookupGeom::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcLookupGeom*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcTaskSet::Class_Name()
{
   return "HRpcTaskSet";
}

//______________________________________________________________________________
const char *HRpcTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRpcDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRpcDigitizer::Class_Name()
{
   return "HRpcDigitizer";
}

//______________________________________________________________________________
const char *HRpcDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRpcDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRpcDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRpcDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRpcDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HRpcDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetector::Streamer(R__b);
      R__b >> maxColumns;
      R__b >> maxCells;
      R__b >> maxEmptyChannels;
      R__b.CheckByteCount(R__s, R__c, HRpcDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcDetector::IsA(), kTRUE);
      HDetector::Streamer(R__b);
      R__b << maxColumns;
      R__b << maxCells;
      R__b << maxEmptyChannels;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcDetector.
      TClass *R__cl = ::HRpcDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxColumns", &maxColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCells", &maxCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxEmptyChannels", &maxEmptyChannels);
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcDetector(void *p) {
      return  p ? new(p) ::HRpcDetector : new ::HRpcDetector;
   }
   static void *newArray_HRpcDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcDetector[nElements] : new ::HRpcDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcDetector(void *p) {
      delete ((::HRpcDetector*)p);
   }
   static void deleteArray_HRpcDetector(void *p) {
      delete [] ((::HRpcDetector*)p);
   }
   static void destruct_HRpcDetector(void *p) {
      typedef ::HRpcDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcDetector(TBuffer &buf, void *obj) {
      ((::HRpcDetector*)obj)->::HRpcDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcDetector

//______________________________________________________________________________
void HRpcContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcContFact.
      TClass *R__cl = ::HRpcContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcContFact(void *p) {
      return  p ? new(p) ::HRpcContFact : new ::HRpcContFact;
   }
   static void *newArray_HRpcContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcContFact[nElements] : new ::HRpcContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcContFact(void *p) {
      delete ((::HRpcContFact*)p);
   }
   static void deleteArray_HRpcContFact(void *p) {
      delete [] ((::HRpcContFact*)p);
   }
   static void destruct_HRpcContFact(void *p) {
      typedef ::HRpcContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcContFact(TBuffer &buf, void *obj) {
      ((::HRpcContFact*)obj)->::HRpcContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcContFact

//______________________________________________________________________________
void HRpcParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcParRootFileIo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetParRootFileIo::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRpcParRootFileIo::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcParRootFileIo::IsA(), kTRUE);
      HDetParRootFileIo::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcParRootFileIo.
      TClass *R__cl = ::HRpcParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRpcParRootFileIo(void *p) {
      delete ((::HRpcParRootFileIo*)p);
   }
   static void deleteArray_HRpcParRootFileIo(void *p) {
      delete [] ((::HRpcParRootFileIo*)p);
   }
   static void destruct_HRpcParRootFileIo(void *p) {
      typedef ::HRpcParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcParRootFileIo(TBuffer &buf, void *obj) {
      ((::HRpcParRootFileIo*)obj)->::HRpcParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcParRootFileIo

//______________________________________________________________________________
void HRpcParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcParAsciiFileIo.
      TClass *R__cl = ::HRpcParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setSize", &setSize);
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRpcParAsciiFileIo(void *p) {
      delete ((::HRpcParAsciiFileIo*)p);
   }
   static void deleteArray_HRpcParAsciiFileIo(void *p) {
      delete [] ((::HRpcParAsciiFileIo*)p);
   }
   static void destruct_HRpcParAsciiFileIo(void *p) {
      typedef ::HRpcParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HRpcParAsciiFileIo*)obj)->::HRpcParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcParAsciiFileIo

//______________________________________________________________________________
void HRpcRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> rightTime;
      R__b >> leftTime;
      R__b >> rightTime2;
      R__b >> leftTime2;
      R__b >> rightTot;
      R__b >> leftTot;
      R__b >> rightTot2;
      R__b >> leftTot2;
      R__b >> rightTotLast;
      R__b >> leftTotLast;
      R__b >> leftFeeAddress;
      R__b >> rightFeeAddress;
      R__b >> address;
      R__b >> leftLogBit;
      R__b >> rightLogBit;
      R__b.CheckByteCount(R__s, R__c, HRpcRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcRaw::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << rightTime;
      R__b << leftTime;
      R__b << rightTime2;
      R__b << leftTime2;
      R__b << rightTot;
      R__b << leftTot;
      R__b << rightTot2;
      R__b << leftTot2;
      R__b << rightTotLast;
      R__b << leftTotLast;
      R__b << leftFeeAddress;
      R__b << rightFeeAddress;
      R__b << address;
      R__b << leftLogBit;
      R__b << rightLogBit;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcRaw.
      TClass *R__cl = ::HRpcRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTime", &rightTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTime", &leftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTime2", &rightTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTime2", &leftTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTot", &rightTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTot", &leftTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTot2", &rightTot2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTot2", &leftTot2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTotLast", &rightTotLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTotLast", &leftTotLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftFeeAddress", &leftFeeAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightFeeAddress", &rightFeeAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftLogBit", &leftLogBit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightLogBit", &rightLogBit);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcRaw(void *p) {
      return  p ? new(p) ::HRpcRaw : new ::HRpcRaw;
   }
   static void *newArray_HRpcRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcRaw[nElements] : new ::HRpcRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcRaw(void *p) {
      delete ((::HRpcRaw*)p);
   }
   static void deleteArray_HRpcRaw(void *p) {
      delete [] ((::HRpcRaw*)p);
   }
   static void destruct_HRpcRaw(void *p) {
      typedef ::HRpcRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcRaw(TBuffer &buf, void *obj) {
      ((::HRpcRaw*)obj)->::HRpcRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcRaw

//______________________________________________________________________________
void HRpcTrbUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcTrbUnpacker.

   HTrbBaseUnpacker::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcTrbUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcTrbUnpacker.
      TClass *R__cl = ::HRpcTrbUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugRpcFlag", &debugRpcFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoTimeRefCorr", &fNoTimeRefCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fControlHistograms", &fControlHistograms);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histdbos", &histdbos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histdbombo", &histdbombo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histmbotrb", &histmbotrb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*histtrbchan", &histtrbchan);
      HTrbBaseUnpacker::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRpcTrbUnpacker(void *p) {
      delete ((::HRpcTrbUnpacker*)p);
   }
   static void deleteArray_HRpcTrbUnpacker(void *p) {
      delete [] ((::HRpcTrbUnpacker*)p);
   }
   static void destruct_HRpcTrbUnpacker(void *p) {
      typedef ::HRpcTrbUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcTrbUnpacker(TBuffer &buf, void *obj) {
      ((::HRpcTrbUnpacker*)obj)->::HRpcTrbUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcTrbUnpacker

//______________________________________________________________________________
void HRpcTrb2Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcTrb2Unpacker.

   HTrb2Unpacker::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcTrb2Unpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcTrb2Unpacker.
      TClass *R__cl = ::HRpcTrb2Unpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bNoTimeRefCorr", &bNoTimeRefCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bStoreSpareChanData", &bStoreSpareChanData);
      HTrb2Unpacker::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRpcTrb2Unpacker(void *p) {
      delete ((::HRpcTrb2Unpacker*)p);
   }
   static void deleteArray_HRpcTrb2Unpacker(void *p) {
      delete [] ((::HRpcTrb2Unpacker*)p);
   }
   static void destruct_HRpcTrb2Unpacker(void *p) {
      typedef ::HRpcTrb2Unpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcTrb2Unpacker(TBuffer &buf, void *obj) {
      ((::HRpcTrb2Unpacker*)obj)->::HRpcTrb2Unpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcTrb2Unpacker

//______________________________________________________________________________
void HRpcDigiPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcDigiPar.
      TClass *R__cl = ::HRpcDigiPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVprop", &fVprop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fS_x", &fS_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fS0_time", &fS0_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fS1_time", &fS1_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fS2_time", &fS2_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fS3_time", &fS3_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT_off", &fT_off);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQmean0", &fQmean0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQmean1", &fQmean1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQmean2", &fQmean2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQwid0", &fQwid0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQwid1", &fQwid1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQwid2", &fQwid2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEff0", &fEff0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEff1", &fEff1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEff2", &fEff2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEff3", &fEff3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEff4", &fEff4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEff5", &fEff5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime2Tdc", &fTime2Tdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPedestal", &fPedestal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQtoW0", &fQtoW0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQtoW1", &fQtoW1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQtoW2", &fQtoW2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQtoW3", &fQtoW3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGap", &fGap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMode", &fMode);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcDigiPar(void *p) {
      return  p ? new(p) ::HRpcDigiPar : new ::HRpcDigiPar;
   }
   static void *newArray_HRpcDigiPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcDigiPar[nElements] : new ::HRpcDigiPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcDigiPar(void *p) {
      delete ((::HRpcDigiPar*)p);
   }
   static void deleteArray_HRpcDigiPar(void *p) {
      delete [] ((::HRpcDigiPar*)p);
   }
   static void destruct_HRpcDigiPar(void *p) {
      typedef ::HRpcDigiPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcDigiPar(TBuffer &buf, void *obj) {
      ((::HRpcDigiPar*)obj)->::HRpcDigiPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcDigiPar

//______________________________________________________________________________
void HRpcDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcDigitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcDigitizer.
      TClass *R__cl = ::HRpcDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantRpcCat", &fGeantRpcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCat", &fCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fKineCat", &fKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomCellPar", &fGeomCellPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiPar", &fDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterGeantRpc", &iterGeantRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRpcCal", &iterRpcCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCol", &maxCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCell", &maxCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellobjects", (void*)&cellobjects);
      R__insp.InspectMember("vector<celldat*>", (void*)&cellobjects, "cellobjects.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcobjects", (void*)&rpcobjects);
      R__insp.InspectMember("vector<rpcdat*>", (void*)&rpcobjects, "rpcobjects.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "effi_vec", (void*)&effi_vec);
      R__insp.InspectMember("vector<efhits>", (void*)&effi_vec, "effi_vec.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eff0", &Eff0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eff1", &Eff1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eff2", &Eff2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eff3", &Eff3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eff4", &Eff4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eff5", &Eff5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ineff_hit_n", &ineff_hit_n);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ineff_hit", &ineff_hit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma0_T", &sigma0_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma1_T", &sigma1_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma2_T", &sigma2_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma3_T", &sigma3_T);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_el", &sigma_el);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vprop", &vprop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t_offset", &t_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qmean0", &Qmean0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qmean1", &Qmean1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qmean2", &Qmean2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qwid0", &Qwid0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qwid1", &Qwid1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Qwid2", &Qwid2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geaX", &geaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geaTof", &geaTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geaMom", &geaMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geaLocLen", &geaLocLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geaLocLenNorm", &geaLocLenNorm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "D", &D);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gap", &gap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beta", &beta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eff_hit", &eff_hit);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcDigitizer(void *p) {
      return  p ? new(p) ::HRpcDigitizer : new ::HRpcDigitizer;
   }
   static void *newArray_HRpcDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcDigitizer[nElements] : new ::HRpcDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcDigitizer(void *p) {
      delete ((::HRpcDigitizer*)p);
   }
   static void deleteArray_HRpcDigitizer(void *p) {
      delete [] ((::HRpcDigitizer*)p);
   }
   static void destruct_HRpcDigitizer(void *p) {
      typedef ::HRpcDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcDigitizer(TBuffer &buf, void *obj) {
      ((::HRpcDigitizer*)obj)->::HRpcDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcDigitizer

//______________________________________________________________________________
void HRpcCellStatusPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCellStatusPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      cellStatus.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRpcCellStatusPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCellStatusPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      cellStatus.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCellStatusPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCellStatusPar.
      TClass *R__cl = ::HRpcCellStatusPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellStatus", &cellStatus);
      R__insp.InspectMember(cellStatus, "cellStatus.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCellStatusPar(void *p) {
      return  p ? new(p) ::HRpcCellStatusPar : new ::HRpcCellStatusPar;
   }
   static void *newArray_HRpcCellStatusPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCellStatusPar[nElements] : new ::HRpcCellStatusPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCellStatusPar(void *p) {
      delete ((::HRpcCellStatusPar*)p);
   }
   static void deleteArray_HRpcCellStatusPar(void *p) {
      delete [] ((::HRpcCellStatusPar*)p);
   }
   static void destruct_HRpcCellStatusPar(void *p) {
      typedef ::HRpcCellStatusPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCellStatusPar(TBuffer &buf, void *obj) {
      ((::HRpcCellStatusPar*)obj)->::HRpcCellStatusPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCellStatusPar

//______________________________________________________________________________
void HRpcGeomCellPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcGeomCellPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      fXcell.Streamer(R__b);
      fYcell.Streamer(R__b);
      fLcell.Streamer(R__b);
      fWcell.Streamer(R__b);
      R__b >> fDPlanes;
      R__b >> fDeltaZ;
      R__b.CheckByteCount(R__s, R__c, HRpcGeomCellPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcGeomCellPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      fXcell.Streamer(R__b);
      fYcell.Streamer(R__b);
      fLcell.Streamer(R__b);
      fWcell.Streamer(R__b);
      R__b << fDPlanes;
      R__b << fDeltaZ;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcGeomCellPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcGeomCellPar.
      TClass *R__cl = ::HRpcGeomCellPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXcell", &fXcell);
      R__insp.InspectMember(fXcell, "fXcell.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYcell", &fYcell);
      R__insp.InspectMember(fYcell, "fYcell.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLcell", &fLcell);
      R__insp.InspectMember(fLcell, "fLcell.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWcell", &fWcell);
      R__insp.InspectMember(fWcell, "fWcell.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDPlanes", &fDPlanes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeltaZ", &fDeltaZ);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcGeomCellPar(void *p) {
      return  p ? new(p) ::HRpcGeomCellPar : new ::HRpcGeomCellPar;
   }
   static void *newArray_HRpcGeomCellPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcGeomCellPar[nElements] : new ::HRpcGeomCellPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcGeomCellPar(void *p) {
      delete ((::HRpcGeomCellPar*)p);
   }
   static void deleteArray_HRpcGeomCellPar(void *p) {
      delete [] ((::HRpcGeomCellPar*)p);
   }
   static void destruct_HRpcGeomCellPar(void *p) {
      typedef ::HRpcGeomCellPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcGeomCellPar(TBuffer &buf, void *obj) {
      ((::HRpcGeomCellPar*)obj)->::HRpcGeomCellPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcGeomCellPar

//______________________________________________________________________________
void HRpcGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetGeomPar::Streamer(R__b);
      R__b >> maxCells;
      R__b.CheckByteCount(R__s, R__c, HRpcGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcGeomPar::IsA(), kTRUE);
      HDetGeomPar::Streamer(R__b);
      R__b << maxCells;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcGeomPar.
      TClass *R__cl = ::HRpcGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCells", &maxCells);
      HDetGeomPar::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcGeomPar(void *p) {
      return  p ? new(p) ::HRpcGeomPar : new ::HRpcGeomPar;
   }
   static void *newArray_HRpcGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcGeomPar[nElements] : new ::HRpcGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcGeomPar(void *p) {
      delete ((::HRpcGeomPar*)p);
   }
   static void deleteArray_HRpcGeomPar(void *p) {
      delete [] ((::HRpcGeomPar*)p);
   }
   static void destruct_HRpcGeomPar(void *p) {
      typedef ::HRpcGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcGeomPar(TBuffer &buf, void *obj) {
      ((::HRpcGeomPar*)obj)->::HRpcGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcGeomPar

//______________________________________________________________________________
void HRpcWtoQPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcWtoQPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fPar0;
      R__b >> fPar1;
      R__b >> fPar2;
      R__b >> fPar3;
      R__b >> fPar4;
      R__b >> fPar5;
      R__b >> ftdc2time;
      R__b.CheckByteCount(R__s, R__c, HRpcWtoQPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcWtoQPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fPar0;
      R__b << fPar1;
      R__b << fPar2;
      R__b << fPar3;
      R__b << fPar4;
      R__b << fPar5;
      R__b << ftdc2time;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcWtoQPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcWtoQPar.
      TClass *R__cl = ::HRpcWtoQPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPar0", &fPar0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPar1", &fPar1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPar2", &fPar2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPar3", &fPar3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPar4", &fPar4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPar5", &fPar5);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftdc2time", &ftdc2time);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcWtoQPar(void *p) {
      return  p ? new(p) ::HRpcWtoQPar : new ::HRpcWtoQPar;
   }
   static void *newArray_HRpcWtoQPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcWtoQPar[nElements] : new ::HRpcWtoQPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcWtoQPar(void *p) {
      delete ((::HRpcWtoQPar*)p);
   }
   static void deleteArray_HRpcWtoQPar(void *p) {
      delete [] ((::HRpcWtoQPar*)p);
   }
   static void destruct_HRpcWtoQPar(void *p) {
      typedef ::HRpcWtoQPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcWtoQPar(TBuffer &buf, void *obj) {
      ((::HRpcWtoQPar*)obj)->::HRpcWtoQPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcWtoQPar

//______________________________________________________________________________
void HRpcTrb2Lookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcTrb2Lookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HRpcTrb2Lookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcTrb2Lookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcTrb2Lookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcTrb2Lookup.
      TClass *R__cl = ::HRpcTrb2Lookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcTrb2Lookup(void *p) {
      return  p ? new(p) ::HRpcTrb2Lookup : new ::HRpcTrb2Lookup;
   }
   static void *newArray_HRpcTrb2Lookup(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcTrb2Lookup[nElements] : new ::HRpcTrb2Lookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcTrb2Lookup(void *p) {
      delete ((::HRpcTrb2Lookup*)p);
   }
   static void deleteArray_HRpcTrb2Lookup(void *p) {
      delete [] ((::HRpcTrb2Lookup*)p);
   }
   static void destruct_HRpcTrb2Lookup(void *p) {
      typedef ::HRpcTrb2Lookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcTrb2Lookup(TBuffer &buf, void *obj) {
      ((::HRpcTrb2Lookup*)obj)->::HRpcTrb2Lookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcTrb2Lookup

//______________________________________________________________________________
void HRpcTrb2LookupBoard::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcTrb2LookupBoard.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HRpcTrb2LookupBoard::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcTrb2LookupBoard::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcTrb2LookupBoard::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcTrb2LookupBoard.
      TClass *R__cl = ::HRpcTrb2LookupBoard::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcTrb2LookupBoard(void *p) {
      return  p ? new(p) ::HRpcTrb2LookupBoard : new ::HRpcTrb2LookupBoard;
   }
   static void *newArray_HRpcTrb2LookupBoard(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcTrb2LookupBoard[nElements] : new ::HRpcTrb2LookupBoard[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcTrb2LookupBoard(void *p) {
      delete ((::HRpcTrb2LookupBoard*)p);
   }
   static void deleteArray_HRpcTrb2LookupBoard(void *p) {
      delete [] ((::HRpcTrb2LookupBoard*)p);
   }
   static void destruct_HRpcTrb2LookupBoard(void *p) {
      typedef ::HRpcTrb2LookupBoard current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcTrb2LookupBoard(TBuffer &buf, void *obj) {
      ((::HRpcTrb2LookupBoard*)obj)->::HRpcTrb2LookupBoard::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcTrb2LookupBoard

//______________________________________________________________________________
void HRpcTrb2LookupChan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcTrb2LookupChan.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> sector;
      R__b >> column;
      R__b >> cell;
      R__b >> side;
      R__b >> feAddress;
      R__b.CheckByteCount(R__s, R__c, HRpcTrb2LookupChan::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcTrb2LookupChan::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << sector;
      R__b << column;
      R__b << cell;
      R__b << side;
      R__b << feAddress;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcTrb2LookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcTrb2LookupChan.
      TClass *R__cl = ::HRpcTrb2LookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "column", &column);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "side", &side);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "feAddress", &feAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcTrb2LookupChan(void *p) {
      return  p ? new(p) ::HRpcTrb2LookupChan : new ::HRpcTrb2LookupChan;
   }
   static void *newArray_HRpcTrb2LookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcTrb2LookupChan[nElements] : new ::HRpcTrb2LookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcTrb2LookupChan(void *p) {
      delete ((::HRpcTrb2LookupChan*)p);
   }
   static void deleteArray_HRpcTrb2LookupChan(void *p) {
      delete [] ((::HRpcTrb2LookupChan*)p);
   }
   static void destruct_HRpcTrb2LookupChan(void *p) {
      typedef ::HRpcTrb2LookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcTrb2LookupChan(TBuffer &buf, void *obj) {
      ((::HRpcTrb2LookupChan*)obj)->::HRpcTrb2LookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcTrb2LookupChan

//______________________________________________________________________________
void HRpcSlewingPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcSlewingPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      fExpo1.Streamer(R__b);
      fExpo2.Streamer(R__b);
      R__b >> fQcut;
      R__b.CheckByteCount(R__s, R__c, HRpcSlewingPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcSlewingPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      fExpo1.Streamer(R__b);
      fExpo2.Streamer(R__b);
      R__b << fQcut;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcSlewingPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcSlewingPar.
      TClass *R__cl = ::HRpcSlewingPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExpo1", &fExpo1);
      R__insp.InspectMember(fExpo1, "fExpo1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExpo2", &fExpo2);
      R__insp.InspectMember(fExpo2, "fExpo2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQcut", &fQcut);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcSlewingPar(void *p) {
      return  p ? new(p) ::HRpcSlewingPar : new ::HRpcSlewingPar;
   }
   static void *newArray_HRpcSlewingPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcSlewingPar[nElements] : new ::HRpcSlewingPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcSlewingPar(void *p) {
      delete ((::HRpcSlewingPar*)p);
   }
   static void deleteArray_HRpcSlewingPar(void *p) {
      delete [] ((::HRpcSlewingPar*)p);
   }
   static void destruct_HRpcSlewingPar(void *p) {
      typedef ::HRpcSlewingPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcSlewingPar(TBuffer &buf, void *obj) {
      ((::HRpcSlewingPar*)obj)->::HRpcSlewingPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcSlewingPar

//______________________________________________________________________________
void HRpcTimePosPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcTimePosPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      f5harmonics_16.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRpcTimePosPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcTimePosPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      f5harmonics_16.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcTimePosPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcTimePosPar.
      TClass *R__cl = ::HRpcTimePosPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "f5harmonics_16", &f5harmonics_16);
      R__insp.InspectMember(f5harmonics_16, "f5harmonics_16.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcTimePosPar(void *p) {
      return  p ? new(p) ::HRpcTimePosPar : new ::HRpcTimePosPar;
   }
   static void *newArray_HRpcTimePosPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcTimePosPar[nElements] : new ::HRpcTimePosPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcTimePosPar(void *p) {
      delete ((::HRpcTimePosPar*)p);
   }
   static void deleteArray_HRpcTimePosPar(void *p) {
      delete [] ((::HRpcTimePosPar*)p);
   }
   static void destruct_HRpcTimePosPar(void *p) {
      typedef ::HRpcTimePosPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcTimePosPar(TBuffer &buf, void *obj) {
      ((::HRpcTimePosPar*)obj)->::HRpcTimePosPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcTimePosPar

//______________________________________________________________________________
void HRpcLookupGeom::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcLookupGeom.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HRpcLookupGeom::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcLookupGeom::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcLookupGeom::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcLookupGeom.
      TClass *R__cl = ::HRpcLookupGeom::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcLookupGeom(void *p) {
      return  p ? new(p) ::HRpcLookupGeom : new ::HRpcLookupGeom;
   }
   static void *newArray_HRpcLookupGeom(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcLookupGeom[nElements] : new ::HRpcLookupGeom[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcLookupGeom(void *p) {
      delete ((::HRpcLookupGeom*)p);
   }
   static void deleteArray_HRpcLookupGeom(void *p) {
      delete [] ((::HRpcLookupGeom*)p);
   }
   static void destruct_HRpcLookupGeom(void *p) {
      typedef ::HRpcLookupGeom current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcLookupGeom(TBuffer &buf, void *obj) {
      ((::HRpcLookupGeom*)obj)->::HRpcLookupGeom::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcLookupGeom

//______________________________________________________________________________
void HRpcLookupGSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcLookupGSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HRpcLookupGSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcLookupGSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcLookupGSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcLookupGSec.
      TClass *R__cl = ::HRpcLookupGSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcLookupGSec(void *p) {
      return  p ? new(p) ::HRpcLookupGSec : new ::HRpcLookupGSec;
   }
   static void *newArray_HRpcLookupGSec(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcLookupGSec[nElements] : new ::HRpcLookupGSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcLookupGSec(void *p) {
      delete ((::HRpcLookupGSec*)p);
   }
   static void deleteArray_HRpcLookupGSec(void *p) {
      delete [] ((::HRpcLookupGSec*)p);
   }
   static void destruct_HRpcLookupGSec(void *p) {
      typedef ::HRpcLookupGSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcLookupGSec(TBuffer &buf, void *obj) {
      ((::HRpcLookupGSec*)obj)->::HRpcLookupGSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcLookupGSec

//______________________________________________________________________________
void HRpcLookupGCol::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcLookupGCol.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HRpcLookupGCol::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcLookupGCol::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcLookupGCol::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcLookupGCol.
      TClass *R__cl = ::HRpcLookupGCol::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcLookupGCol(void *p) {
      return  p ? new(p) ::HRpcLookupGCol : new ::HRpcLookupGCol;
   }
   static void *newArray_HRpcLookupGCol(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcLookupGCol[nElements] : new ::HRpcLookupGCol[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcLookupGCol(void *p) {
      delete ((::HRpcLookupGCol*)p);
   }
   static void deleteArray_HRpcLookupGCol(void *p) {
      delete [] ((::HRpcLookupGCol*)p);
   }
   static void destruct_HRpcLookupGCol(void *p) {
      typedef ::HRpcLookupGCol current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcLookupGCol(TBuffer &buf, void *obj) {
      ((::HRpcLookupGCol*)obj)->::HRpcLookupGCol::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcLookupGCol

//______________________________________________________________________________
void HRpcLookupGCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcLookupGCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fLeftFeeAddress;
      R__b >> fRightFeeAddress;
      R__b.CheckByteCount(R__s, R__c, HRpcLookupGCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcLookupGCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fLeftFeeAddress;
      R__b << fRightFeeAddress;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcLookupGCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcLookupGCell.
      TClass *R__cl = ::HRpcLookupGCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLeftFeeAddress", &fLeftFeeAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRightFeeAddress", &fRightFeeAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcLookupGCell(void *p) {
      return  p ? new(p) ::HRpcLookupGCell : new ::HRpcLookupGCell;
   }
   static void *newArray_HRpcLookupGCell(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcLookupGCell[nElements] : new ::HRpcLookupGCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcLookupGCell(void *p) {
      delete ((::HRpcLookupGCell*)p);
   }
   static void deleteArray_HRpcLookupGCell(void *p) {
      delete [] ((::HRpcLookupGCell*)p);
   }
   static void destruct_HRpcLookupGCell(void *p) {
      typedef ::HRpcLookupGCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcLookupGCell(TBuffer &buf, void *obj) {
      ((::HRpcLookupGCell*)obj)->::HRpcLookupGCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcLookupGCell

//______________________________________________________________________________
void HRpcTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRpcTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcTaskSet.
      TClass *R__cl = ::HRpcTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcTaskSet(void *p) {
      return  p ? new(p) ::HRpcTaskSet : new ::HRpcTaskSet;
   }
   static void *newArray_HRpcTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcTaskSet[nElements] : new ::HRpcTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcTaskSet(void *p) {
      delete ((::HRpcTaskSet*)p);
   }
   static void deleteArray_HRpcTaskSet(void *p) {
      delete [] ((::HRpcTaskSet*)p);
   }
   static void destruct_HRpcTaskSet(void *p) {
      typedef ::HRpcTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcTaskSet(TBuffer &buf, void *obj) {
      ((::HRpcTaskSet*)obj)->::HRpcTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcTaskSet

//______________________________________________________________________________
void HRpcCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> rightTime;
      R__b >> leftTime;
      R__b >> rightTime2;
      R__b >> leftTime2;
      R__b >> rightCharge;
      R__b >> leftCharge;
      R__b >> rightCharge2;
      R__b >> leftCharge2;
      R__b >> address;
      R__b >> logBit;
      R__b.CheckByteCount(R__s, R__c, HRpcCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCal::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << rightTime;
      R__b << leftTime;
      R__b << rightTime2;
      R__b << leftTime2;
      R__b << rightCharge;
      R__b << leftCharge;
      R__b << rightCharge2;
      R__b << leftCharge2;
      R__b << address;
      R__b << logBit;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCal.
      TClass *R__cl = ::HRpcCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTime", &rightTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTime", &leftTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTime2", &rightTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTime2", &leftTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightCharge", &rightCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftCharge", &leftCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightCharge2", &rightCharge2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftCharge2", &leftCharge2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "logBit", &logBit);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCal(void *p) {
      return  p ? new(p) ::HRpcCal : new ::HRpcCal;
   }
   static void *newArray_HRpcCal(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCal[nElements] : new ::HRpcCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCal(void *p) {
      delete ((::HRpcCal*)p);
   }
   static void deleteArray_HRpcCal(void *p) {
      delete [] ((::HRpcCal*)p);
   }
   static void destruct_HRpcCal(void *p) {
      typedef ::HRpcCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCal(TBuffer &buf, void *obj) {
      ((::HRpcCal*)obj)->::HRpcCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCal

//______________________________________________________________________________
void HRpcCalSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCalSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HRpcCal::Streamer(R__b);
      R__b >> RefL;
      R__b >> RefR;
      R__b >> RefLDgtr;
      R__b >> RefRDgtr;
      R__b.ReadStaticArray((int*)TrackL);
      R__b.ReadStaticArray((int*)TrackR);
      R__b.ReadStaticArray((int*)TrackLDgtr);
      R__b.ReadStaticArray((int*)TrackRDgtr);
      R__b >> nTracksL;
      R__b >> nTracksR;
      R__b.ReadStaticArray((bool*)LisAtBox);
      R__b.ReadStaticArray((bool*)RisAtBox);
      R__b.CheckByteCount(R__s, R__c, HRpcCalSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCalSim::IsA(), kTRUE);
      HRpcCal::Streamer(R__b);
      R__b << RefL;
      R__b << RefR;
      R__b << RefLDgtr;
      R__b << RefRDgtr;
      R__b.WriteArray(TrackL, 10);
      R__b.WriteArray(TrackR, 10);
      R__b.WriteArray(TrackLDgtr, 10);
      R__b.WriteArray(TrackRDgtr, 10);
      R__b << nTracksL;
      R__b << nTracksR;
      R__b.WriteArray(LisAtBox, 10);
      R__b.WriteArray(RisAtBox, 10);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCalSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCalSim.
      TClass *R__cl = ::HRpcCalSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefL", &RefL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefR", &RefR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefLDgtr", &RefLDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefRDgtr", &RefRDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackL[10]", TrackL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackR[10]", TrackR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackLDgtr[10]", TrackLDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackRDgtr[10]", TrackRDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksL", &nTracksL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksR", &nTracksR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LisAtBox[10]", LisAtBox);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RisAtBox[10]", RisAtBox);
      HRpcCal::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCalSim(void *p) {
      return  p ? new(p) ::HRpcCalSim : new ::HRpcCalSim;
   }
   static void *newArray_HRpcCalSim(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCalSim[nElements] : new ::HRpcCalSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCalSim(void *p) {
      delete ((::HRpcCalSim*)p);
   }
   static void deleteArray_HRpcCalSim(void *p) {
      delete [] ((::HRpcCalSim*)p);
   }
   static void destruct_HRpcCalSim(void *p) {
      typedef ::HRpcCalSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCalSim(TBuffer &buf, void *obj) {
      ((::HRpcCalSim*)obj)->::HRpcCalSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCalSim

//______________________________________________________________________________
void HRpcHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcHit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> tof;
      R__b >> charge;
      R__b >> xmod;
      R__b >> ymod;
      R__b >> zmod;
      R__b >> xsec;
      R__b >> ysec;
      R__b >> zsec;
      R__b >> xlab;
      R__b >> ylab;
      R__b >> zlab;
      R__b >> theta;
      R__b >> phi;
      R__b >> isInCell;
      R__b >> sigma_x;
      R__b >> sigma_y;
      R__b >> sigma_z;
      R__b >> sigma_tof;
      R__b >> address;
      R__b >> logBit;
      R__b.CheckByteCount(R__s, R__c, HRpcHit::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcHit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << tof;
      R__b << charge;
      R__b << xmod;
      R__b << ymod;
      R__b << zmod;
      R__b << xsec;
      R__b << ysec;
      R__b << zsec;
      R__b << xlab;
      R__b << ylab;
      R__b << zlab;
      R__b << theta;
      R__b << phi;
      R__b << isInCell;
      R__b << sigma_x;
      R__b << sigma_y;
      R__b << sigma_z;
      R__b << sigma_tof;
      R__b << address;
      R__b << logBit;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcHit.
      TClass *R__cl = ::HRpcHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmod", &xmod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ymod", &ymod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zmod", &zmod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xsec", &xsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ysec", &ysec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zsec", &zsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlab", &xlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ylab", &ylab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlab", &zlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInCell", &isInCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_x", &sigma_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_y", &sigma_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_z", &sigma_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_tof", &sigma_tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "address", &address);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "logBit", &logBit);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcHit(void *p) {
      return  p ? new(p) ::HRpcHit : new ::HRpcHit;
   }
   static void *newArray_HRpcHit(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcHit[nElements] : new ::HRpcHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcHit(void *p) {
      delete ((::HRpcHit*)p);
   }
   static void deleteArray_HRpcHit(void *p) {
      delete [] ((::HRpcHit*)p);
   }
   static void destruct_HRpcHit(void *p) {
      typedef ::HRpcHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcHit(TBuffer &buf, void *obj) {
      ((::HRpcHit*)obj)->::HRpcHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcHit

//______________________________________________________________________________
void HRpcHitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcHitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HRpcHit::Streamer(R__b);
      R__b >> RefL;
      R__b >> RefR;
      R__b >> RefLDgtr;
      R__b >> RefRDgtr;
      R__b.ReadStaticArray((int*)TrackL);
      R__b.ReadStaticArray((int*)TrackR);
      R__b.ReadStaticArray((int*)TrackLDgtr);
      R__b.ReadStaticArray((int*)TrackRDgtr);
      R__b >> nTracksL;
      R__b >> nTracksR;
      R__b.ReadStaticArray((bool*)LisAtBox);
      R__b.ReadStaticArray((bool*)RisAtBox);
      R__b.CheckByteCount(R__s, R__c, HRpcHitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcHitSim::IsA(), kTRUE);
      HRpcHit::Streamer(R__b);
      R__b << RefL;
      R__b << RefR;
      R__b << RefLDgtr;
      R__b << RefRDgtr;
      R__b.WriteArray(TrackL, 10);
      R__b.WriteArray(TrackR, 10);
      R__b.WriteArray(TrackLDgtr, 10);
      R__b.WriteArray(TrackRDgtr, 10);
      R__b << nTracksL;
      R__b << nTracksR;
      R__b.WriteArray(LisAtBox, 10);
      R__b.WriteArray(RisAtBox, 10);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcHitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcHitSim.
      TClass *R__cl = ::HRpcHitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefL", &RefL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefR", &RefR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefLDgtr", &RefLDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefRDgtr", &RefRDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackL[10]", TrackL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackR[10]", TrackR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackLDgtr[10]", TrackLDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackRDgtr[10]", TrackRDgtr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksL", &nTracksL);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksR", &nTracksR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "LisAtBox[10]", LisAtBox);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RisAtBox[10]", RisAtBox);
      HRpcHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcHitSim(void *p) {
      return  p ? new(p) ::HRpcHitSim : new ::HRpcHitSim;
   }
   static void *newArray_HRpcHitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcHitSim[nElements] : new ::HRpcHitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcHitSim(void *p) {
      delete ((::HRpcHitSim*)p);
   }
   static void deleteArray_HRpcHitSim(void *p) {
      delete [] ((::HRpcHitSim*)p);
   }
   static void destruct_HRpcHitSim(void *p) {
      typedef ::HRpcHitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcHitSim(TBuffer &buf, void *obj) {
      ((::HRpcHitSim*)obj)->::HRpcHitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcHitSim

//______________________________________________________________________________
void HRpcHitF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcHitF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcHitF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcHitF.
      TClass *R__cl = ::HRpcHitF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalCat", &pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalCatTmp", &pCalCatTmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHitCat", &pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantRpcCat", &pGeantRpcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pStartHitCat", &pStartHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDigiPar", &pDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWtoQPar", &pWtoQPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHitFPar", &pHitFPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSpecGeomPar", &pSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRpcGeometry", &pRpcGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeomCellPar", &pGeomCellPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCellStatusPar", &pCellStatusPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTimePosPar", &pTimePosPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSlewingPar", &pSlewingPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simulation", &simulation);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcHitF(void *p) {
      return  p ? new(p) ::HRpcHitF : new ::HRpcHitF;
   }
   static void *newArray_HRpcHitF(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcHitF[nElements] : new ::HRpcHitF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcHitF(void *p) {
      delete ((::HRpcHitF*)p);
   }
   static void deleteArray_HRpcHitF(void *p) {
      delete [] ((::HRpcHitF*)p);
   }
   static void destruct_HRpcHitF(void *p) {
      typedef ::HRpcHitF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcHitF(TBuffer &buf, void *obj) {
      ((::HRpcHitF*)obj)->::HRpcHitF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcHitF

//______________________________________________________________________________
void HRpcHitFPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcHitFPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      fPol5Pars.Streamer(R__b);
      fPol1Pars.Streamer(R__b);
      R__b >> fQcut;
      R__b.CheckByteCount(R__s, R__c, HRpcHitFPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcHitFPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      fPol5Pars.Streamer(R__b);
      fPol1Pars.Streamer(R__b);
      R__b << fQcut;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcHitFPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcHitFPar.
      TClass *R__cl = ::HRpcHitFPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPol5Pars", &fPol5Pars);
      R__insp.InspectMember(fPol5Pars, "fPol5Pars.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPol1Pars", &fPol1Pars);
      R__insp.InspectMember(fPol1Pars, "fPol1Pars.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQcut", &fQcut);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcHitFPar(void *p) {
      return  p ? new(p) ::HRpcHitFPar : new ::HRpcHitFPar;
   }
   static void *newArray_HRpcHitFPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcHitFPar[nElements] : new ::HRpcHitFPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcHitFPar(void *p) {
      delete ((::HRpcHitFPar*)p);
   }
   static void deleteArray_HRpcHitFPar(void *p) {
      delete [] ((::HRpcHitFPar*)p);
   }
   static void destruct_HRpcHitFPar(void *p) {
      typedef ::HRpcHitFPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcHitFPar(TBuffer &buf, void *obj) {
      ((::HRpcHitFPar*)obj)->::HRpcHitFPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcHitFPar

//______________________________________________________________________________
void HRpcCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCluster.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> tof;
      R__b >> charge;
      R__b >> xmod;
      R__b >> ymod;
      R__b >> zmod;
      R__b >> xsec;
      R__b >> ysec;
      R__b >> zsec;
      R__b >> xlab;
      R__b >> ylab;
      R__b >> zlab;
      R__b >> theta;
      R__b >> phi;
      R__b >> sigma_x;
      R__b >> sigma_y;
      R__b >> sigma_z;
      R__b >> sigma_tof;
      R__b >> isInCell;
      R__b >> sector;
      R__b >> index;
      R__b >> detID1;
      R__b >> detID2;
      R__b >> type;
      R__b.CheckByteCount(R__s, R__c, HRpcCluster::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCluster::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << tof;
      R__b << charge;
      R__b << xmod;
      R__b << ymod;
      R__b << zmod;
      R__b << xsec;
      R__b << ysec;
      R__b << zsec;
      R__b << xlab;
      R__b << ylab;
      R__b << zlab;
      R__b << theta;
      R__b << phi;
      R__b << sigma_x;
      R__b << sigma_y;
      R__b << sigma_z;
      R__b << sigma_tof;
      R__b << isInCell;
      R__b << sector;
      R__b << index;
      R__b << detID1;
      R__b << detID2;
      R__b << type;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCluster.
      TClass *R__cl = ::HRpcCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tof", &tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xmod", &xmod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ymod", &ymod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zmod", &zmod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xsec", &xsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ysec", &ysec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zsec", &zsec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlab", &xlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ylab", &ylab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlab", &zlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_x", &sigma_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_y", &sigma_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_z", &sigma_z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigma_tof", &sigma_tof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInCell", &isInCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detID1", &detID1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detID2", &detID2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "type", &type);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCluster(void *p) {
      return  p ? new(p) ::HRpcCluster : new ::HRpcCluster;
   }
   static void *newArray_HRpcCluster(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCluster[nElements] : new ::HRpcCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCluster(void *p) {
      delete ((::HRpcCluster*)p);
   }
   static void deleteArray_HRpcCluster(void *p) {
      delete [] ((::HRpcCluster*)p);
   }
   static void destruct_HRpcCluster(void *p) {
      typedef ::HRpcCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCluster(TBuffer &buf, void *obj) {
      ((::HRpcCluster*)obj)->::HRpcCluster::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCluster

//______________________________________________________________________________
void HRpcClusterSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcClusterSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HRpcCluster::Streamer(R__b);
      R__b.ReadStaticArray((int*)TrackList);
      R__b.ReadStaticArray((int*)RefList);
      R__b.ReadStaticArray((bool*)isAtBoxList);
      R__b >> Track;
      R__b >> nTracksAtBox;
      R__b >> nTracksAtCells;
      R__b >> isAtBox;
      R__b.CheckByteCount(R__s, R__c, HRpcClusterSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcClusterSim::IsA(), kTRUE);
      HRpcCluster::Streamer(R__b);
      R__b.WriteArray(TrackList, 4);
      R__b.WriteArray(RefList, 4);
      R__b.WriteArray(isAtBoxList, 4);
      R__b << Track;
      R__b << nTracksAtBox;
      R__b << nTracksAtCells;
      R__b << isAtBox;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcClusterSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcClusterSim.
      TClass *R__cl = ::HRpcClusterSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TrackList[4]", TrackList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RefList[4]", RefList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isAtBoxList[4]", isAtBoxList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Track", &Track);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksAtBox", &nTracksAtBox);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracksAtCells", &nTracksAtCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isAtBox", &isAtBox);
      HRpcCluster::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcClusterSim(void *p) {
      return  p ? new(p) ::HRpcClusterSim : new ::HRpcClusterSim;
   }
   static void *newArray_HRpcClusterSim(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcClusterSim[nElements] : new ::HRpcClusterSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcClusterSim(void *p) {
      delete ((::HRpcClusterSim*)p);
   }
   static void deleteArray_HRpcClusterSim(void *p) {
      delete [] ((::HRpcClusterSim*)p);
   }
   static void destruct_HRpcClusterSim(void *p) {
      typedef ::HRpcClusterSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcClusterSim(TBuffer &buf, void *obj) {
      ((::HRpcClusterSim*)obj)->::HRpcClusterSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcClusterSim

//______________________________________________________________________________
void HRpcClusterF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcClusterF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcClusterF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcClusterF.
      TClass *R__cl = ::HRpcClusterF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHitCat", &pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClusterCat", &pClusterCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeantRpcCat", &pGeantRpcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc_cluster", &loc_cluster);
      R__insp.InspectMember(loc_cluster, "loc_cluster.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeomCellPar", &pGeomCellPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClusFPar", &pClusFPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxcells", &maxcells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "simulation", &simulation);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doSingleCluster", &doSingleCluster);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcClusterF(void *p) {
      return  p ? new(p) ::HRpcClusterF : new ::HRpcClusterF;
   }
   static void *newArray_HRpcClusterF(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcClusterF[nElements] : new ::HRpcClusterF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcClusterF(void *p) {
      delete ((::HRpcClusterF*)p);
   }
   static void deleteArray_HRpcClusterF(void *p) {
      delete [] ((::HRpcClusterF*)p);
   }
   static void destruct_HRpcClusterF(void *p) {
      typedef ::HRpcClusterF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcClusterF(TBuffer &buf, void *obj) {
      ((::HRpcClusterF*)obj)->::HRpcClusterF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcClusterF

//______________________________________________________________________________
void HRpcClusFPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcClusFPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fNsigmasX;
      R__b >> fNsigmasT;
      R__b.CheckByteCount(R__s, R__c, HRpcClusFPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcClusFPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fNsigmasX;
      R__b << fNsigmasT;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcClusFPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcClusFPar.
      TClass *R__cl = ::HRpcClusFPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsigmasX", &fNsigmasX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNsigmasT", &fNsigmasT);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcClusFPar(void *p) {
      return  p ? new(p) ::HRpcClusFPar : new ::HRpcClusFPar;
   }
   static void *newArray_HRpcClusFPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcClusFPar[nElements] : new ::HRpcClusFPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcClusFPar(void *p) {
      delete ((::HRpcClusFPar*)p);
   }
   static void deleteArray_HRpcClusFPar(void *p) {
      delete [] ((::HRpcClusFPar*)p);
   }
   static void destruct_HRpcClusFPar(void *p) {
      typedef ::HRpcClusFPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcClusFPar(TBuffer &buf, void *obj) {
      ((::HRpcClusFPar*)obj)->::HRpcClusFPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcClusFPar

//______________________________________________________________________________
void HRpcCalPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCalPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> MaxSectors;
      R__b.CheckByteCount(R__s, R__c, HRpcCalPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCalPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << MaxSectors;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCalPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCalPar.
      TClass *R__cl = ::HRpcCalPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxSectors", &MaxSectors);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCalPar(void *p) {
      return  p ? new(p) ::HRpcCalPar : new ::HRpcCalPar;
   }
   static void *newArray_HRpcCalPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCalPar[nElements] : new ::HRpcCalPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCalPar(void *p) {
      delete ((::HRpcCalPar*)p);
   }
   static void deleteArray_HRpcCalPar(void *p) {
      delete [] ((::HRpcCalPar*)p);
   }
   static void destruct_HRpcCalPar(void *p) {
      typedef ::HRpcCalPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCalPar(TBuffer &buf, void *obj) {
      ((::HRpcCalPar*)obj)->::HRpcCalPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCalPar

//______________________________________________________________________________
void HRpcCalParSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCalParSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> MaxColumns;
      R__b.CheckByteCount(R__s, R__c, HRpcCalParSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCalParSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << MaxColumns;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCalParSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCalParSec.
      TClass *R__cl = ::HRpcCalParSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxColumns", &MaxColumns);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCalParSec(void *p) {
      return  p ? new(p) ::HRpcCalParSec : new ::HRpcCalParSec;
   }
   static void *newArray_HRpcCalParSec(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCalParSec[nElements] : new ::HRpcCalParSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCalParSec(void *p) {
      delete ((::HRpcCalParSec*)p);
   }
   static void deleteArray_HRpcCalParSec(void *p) {
      delete [] ((::HRpcCalParSec*)p);
   }
   static void destruct_HRpcCalParSec(void *p) {
      typedef ::HRpcCalParSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCalParSec(TBuffer &buf, void *obj) {
      ((::HRpcCalParSec*)obj)->::HRpcCalParSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCalParSec

//______________________________________________________________________________
void HRpcCalParCol::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCalParCol.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> MaxCells;
      R__b.CheckByteCount(R__s, R__c, HRpcCalParCol::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCalParCol::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << MaxCells;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCalParCol::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCalParCol.
      TClass *R__cl = ::HRpcCalParCol::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "MaxCells", &MaxCells);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCalParCol(void *p) {
      return  p ? new(p) ::HRpcCalParCol : new ::HRpcCalParCol;
   }
   static void *newArray_HRpcCalParCol(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCalParCol[nElements] : new ::HRpcCalParCol[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCalParCol(void *p) {
      delete ((::HRpcCalParCol*)p);
   }
   static void deleteArray_HRpcCalParCol(void *p) {
      delete [] ((::HRpcCalParCol*)p);
   }
   static void destruct_HRpcCalParCol(void *p) {
      typedef ::HRpcCalParCol current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCalParCol(TBuffer &buf, void *obj) {
      ((::HRpcCalParCol*)obj)->::HRpcCalParCol::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCalParCol

//______________________________________________________________________________
void HRpcCalParCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCalParCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> rightTimeOffset;
      R__b >> leftTimeOffset;
      R__b >> rightTotOffset;
      R__b >> leftTotOffset;
      R__b >> tdc2time;
      R__b >> tot2charge;
      R__b >> t0;
      R__b.CheckByteCount(R__s, R__c, HRpcCalParCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcCalParCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << rightTimeOffset;
      R__b << leftTimeOffset;
      R__b << rightTotOffset;
      R__b << leftTotOffset;
      R__b << tdc2time;
      R__b << tot2charge;
      R__b << t0;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcCalParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCalParCell.
      TClass *R__cl = ::HRpcCalParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTimeOffset", &rightTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTimeOffset", &leftTimeOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rightTotOffset", &rightTotOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "leftTotOffset", &leftTotOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc2time", &tdc2time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tot2charge", &tot2charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "t0", &t0);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCalParCell(void *p) {
      return  p ? new(p) ::HRpcCalParCell : new ::HRpcCalParCell;
   }
   static void *newArray_HRpcCalParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCalParCell[nElements] : new ::HRpcCalParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCalParCell(void *p) {
      delete ((::HRpcCalParCell*)p);
   }
   static void deleteArray_HRpcCalParCell(void *p) {
      delete [] ((::HRpcCalParCell*)p);
   }
   static void destruct_HRpcCalParCell(void *p) {
      typedef ::HRpcCalParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCalParCell(TBuffer &buf, void *obj) {
      ((::HRpcCalParCell*)obj)->::HRpcCalParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCalParCell

//______________________________________________________________________________
void HRpcCalibrater::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcCalibrater.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRpcCalibrater::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcCalibrater.
      TClass *R__cl = ::HRpcCalibrater::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRawCat", &pRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalCat", &pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalPar", &pCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pChOffPar", &pChOffPar);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcCalibrater(void *p) {
      return  p ? new(p) ::HRpcCalibrater : new ::HRpcCalibrater;
   }
   static void *newArray_HRpcCalibrater(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcCalibrater[nElements] : new ::HRpcCalibrater[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcCalibrater(void *p) {
      delete ((::HRpcCalibrater*)p);
   }
   static void deleteArray_HRpcCalibrater(void *p) {
      delete [] ((::HRpcCalibrater*)p);
   }
   static void destruct_HRpcCalibrater(void *p) {
      typedef ::HRpcCalibrater current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcCalibrater(TBuffer &buf, void *obj) {
      ((::HRpcCalibrater*)obj)->::HRpcCalibrater::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcCalibrater

//______________________________________________________________________________
void HRpcChargeOffsetPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRpcChargeOffsetPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      fRunIDs.Streamer(R__b);
      fChargeCorrPar.Streamer(R__b);
      R__b >> fCurrent;
      R__b >> fNRuns;
      R__b.CheckByteCount(R__s, R__c, HRpcChargeOffsetPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRpcChargeOffsetPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      fRunIDs.Streamer(R__b);
      fChargeCorrPar.Streamer(R__b);
      R__b << fCurrent;
      R__b << fNRuns;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRpcChargeOffsetPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRpcChargeOffsetPar.
      TClass *R__cl = ::HRpcChargeOffsetPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunIDs", &fRunIDs);
      R__insp.InspectMember(fRunIDs, "fRunIDs.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeCorrPar", &fChargeCorrPar);
      R__insp.InspectMember(fChargeCorrPar, "fChargeCorrPar.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrent", &fCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNRuns", &fNRuns);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRpcChargeOffsetPar(void *p) {
      return  p ? new(p) ::HRpcChargeOffsetPar : new ::HRpcChargeOffsetPar;
   }
   static void *newArray_HRpcChargeOffsetPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRpcChargeOffsetPar[nElements] : new ::HRpcChargeOffsetPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRpcChargeOffsetPar(void *p) {
      delete ((::HRpcChargeOffsetPar*)p);
   }
   static void deleteArray_HRpcChargeOffsetPar(void *p) {
      delete [] ((::HRpcChargeOffsetPar*)p);
   }
   static void destruct_HRpcChargeOffsetPar(void *p) {
      typedef ::HRpcChargeOffsetPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRpcChargeOffsetPar(TBuffer &buf, void *obj) {
      ((::HRpcChargeOffsetPar*)obj)->::HRpcChargeOffsetPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRpcChargeOffsetPar

/********************************************************
* ../build/pc/RpcDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableRpcDict();

extern "C" void G__set_cpp_environmentRpcDict() {
  G__cpp_reset_tagtableRpcDict();
}
#include <new>
extern "C" int G__cpp_dllrevRpcDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HRpcRaw */
static int G__RpcDict_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcRaw[n];
     } else {
       p = new((void*) gvp) HRpcRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcRaw;
     } else {
       p = new((void*) gvp) HRpcRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getRightTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getLeftTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getRightTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getLeftTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getRightTot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getLeftTot());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getRightTot2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getLeftTot2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getRightTotLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcRaw*) G__getstructoffset())->getLeftTotLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HRpcRaw*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcRaw*) G__getstructoffset())->getLeftFeeAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcRaw*) G__getstructoffset())->getRightFeeAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HRpcRaw*) G__getstructoffset())->getRightLogBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HRpcRaw*) G__getstructoffset())->getLeftLogBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getColumn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightSubEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightTrbChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightDBOInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightDBONum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightMBONum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightTRBNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftSubEvtId());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftTrbChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftDBOInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftDBONum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftMBONum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftTRBNum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightNLeadings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightNTrailings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightLastTotFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightDataPairFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightDataVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getRightDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftNLeadings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftNTrailings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftLastTotFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftDataPairFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftDataVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcRaw*) G__getstructoffset())->getLeftDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setRightTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setLeftTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setRightTime2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setLeftTime2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setRightTot((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setLeftTot((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setRightTot2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setLeftTot2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setRightTotLast((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setLeftTotLast((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setRightFeeAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setLeftFeeAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setRightLogBit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->setLeftLogBit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_172_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_172_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcRaw(*(HRpcRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcRaw G__THRpcRaw;
static int G__RpcDict_172_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcRaw*) (soff+(sizeof(HRpcRaw)*i)))->~G__THRpcRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcRaw*) (soff))->~G__THRpcRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_172_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcRaw* dest = (HRpcRaw*) G__getstructoffset();
   *dest = *(HRpcRaw*) libp->para[0].ref;
   const HRpcRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcContFact */
static int G__RpcDict_201_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcContFact[n];
     } else {
       p = new((void*) gvp) HRpcContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcContFact;
     } else {
       p = new((void*) gvp) HRpcContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_201_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_201_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcContFact(*(HRpcContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcContFact G__THRpcContFact;
static int G__RpcDict_201_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcContFact*) (soff+(sizeof(HRpcContFact)*i)))->~G__THRpcContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcContFact*) (soff))->~G__THRpcContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_201_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcContFact* dest = (HRpcContFact*) G__getstructoffset();
   *dest = *(HRpcContFact*) libp->para[0].ref;
   const HRpcContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcDetector */
static int G__RpcDict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcDetector[n];
     } else {
       p = new((void*) gvp) HRpcDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcDetector;
     } else {
       p = new((void*) gvp) HRpcDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcDetector*) G__getstructoffset())->buildMatrixCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcDetector*) G__getstructoffset())->buildLinearCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcDetector*) G__getstructoffset())->getMaxColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcDetector*) G__getstructoffset())->getMaxCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcDetector*) G__getstructoffset())->getEmptyChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcDetector*) G__getstructoffset())->setMaxColumns((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcDetector*) G__getstructoffset())->setMaxCells((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcDetector*) G__getstructoffset())->setMaxEmptyChannels((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcDetector(*(HRpcDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcDetector G__THRpcDetector;
static int G__RpcDict_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcDetector*) (soff+(sizeof(HRpcDetector)*i)))->~G__THRpcDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcDetector*) (soff))->~G__THRpcDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcDetector* dest = (HRpcDetector*) G__getstructoffset();
   *dest = *(HRpcDetector*) libp->para[0].ref;
   const HRpcDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCalPar */
static int G__RpcDict_245_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcCalPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcCalPar[n];
       } else {
         p = new((void*) gvp) HRpcCalPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcCalPar;
       } else {
         p = new((void*) gvp) HRpcCalPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRpcCalParSec& obj = ((HRpcCalPar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcCalPar*) G__getstructoffset())->getCol((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalPar*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcCalPar*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCalPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCalPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCalPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_245_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_245_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCalPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCalPar(*(HRpcCalPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCalPar G__THRpcCalPar;
static int G__RpcDict_245_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCalPar*) (soff+(sizeof(HRpcCalPar)*i)))->~G__THRpcCalPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCalPar*) (soff))->~G__THRpcCalPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_245_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalPar* dest = (HRpcCalPar*) G__getstructoffset();
   *dest = *(HRpcCalPar*) libp->para[0].ref;
   const HRpcCalPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcParRootFileIo */
static int G__RpcDict_246_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRpcParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcParRootFileIo*) G__getstructoffset())->read((HRpcCalPar*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcParRootFileIo(*(HRpcParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcParRootFileIo G__THRpcParRootFileIo;
static int G__RpcDict_246_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcParRootFileIo*) (soff+(sizeof(HRpcParRootFileIo)*i)))->~G__THRpcParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcParRootFileIo*) (soff))->~G__THRpcParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_246_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcParRootFileIo* dest = (HRpcParRootFileIo*) G__getstructoffset();
   *dest = *(HRpcParRootFileIo*) libp->para[0].ref;
   const HRpcParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcParAsciiFileIo */
static int G__RpcDict_256_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRpcParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcParAsciiFileIo(*(HRpcParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcParAsciiFileIo G__THRpcParAsciiFileIo;
static int G__RpcDict_256_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcParAsciiFileIo*) (soff+(sizeof(HRpcParAsciiFileIo)*i)))->~G__THRpcParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcParAsciiFileIo*) (soff))->~G__THRpcParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_256_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcParAsciiFileIo* dest = (HRpcParAsciiFileIo*) G__getstructoffset();
   *dest = *(HRpcParAsciiFileIo*) libp->para[0].ref;
   const HRpcParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCal */
static int G__RpcDict_257_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCal[n];
     } else {
       p = new((void*) gvp) HRpcCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCal;
     } else {
       p = new((void*) gvp) HRpcCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getRightTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getLeftTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getRightTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getLeftTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getRightCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getLeftCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getRightCharge2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCal*) G__getstructoffset())->getLeftCharge2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HRpcCal*) G__getstructoffset())->getLogBit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HRpcCal*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCal*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCal*) G__getstructoffset())->getColumn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCal*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCal*) G__getstructoffset())->getNLeadings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCal*) G__getstructoffset())->getNTrailings());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCal*) G__getstructoffset())->getLastChargeFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCal*) G__getstructoffset())->getDataPairFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCal*) G__getstructoffset())->getDataVersion());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCal*) G__getstructoffset())->getDataType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setRightTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setLeftTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setRightTime2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setLeftTime2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setRightCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setLeftCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setRightCharge2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setLeftCharge2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setLogBit((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setAddress((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_257_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_257_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCal(*(HRpcCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCal G__THRpcCal;
static int G__RpcDict_257_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCal*) (soff+(sizeof(HRpcCal)*i)))->~G__THRpcCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCal*) (soff))->~G__THRpcCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_257_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCal* dest = (HRpcCal*) G__getstructoffset();
   *dest = *(HRpcCal*) libp->para[0].ref;
   const HRpcCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCalSim */
static int G__RpcDict_258_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalSim[n];
     } else {
       p = new((void*) gvp) HRpcCalSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalSim;
     } else {
       p = new((void*) gvp) HRpcCalSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setRefL((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setRefR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setRefLDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setRefRDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackL((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackLDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackRDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setLisAtBox((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setRisAtBox((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setNTracksL((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setNTracksR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackLArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackLDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackRArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setTrackRDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setLisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->setRisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalSim*) G__getstructoffset())->getRefL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalSim*) G__getstructoffset())->getRefR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalSim*) G__getstructoffset())->getRefLDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalSim*) G__getstructoffset())->getRefRDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCalSim*) G__getstructoffset())->getTrackL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCalSim*) G__getstructoffset())->getTrackR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCalSim*) G__getstructoffset())->getTrackLDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCalSim*) G__getstructoffset())->getTrackRDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRpcCalSim*) G__getstructoffset())->getLisAtBox());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRpcCalSim*) G__getstructoffset())->getRisAtBox());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalSim*) G__getstructoffset())->getNTracksL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalSim*) G__getstructoffset())->getNTracksR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->getTrackLArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->getTrackLDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->getTrackRArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->getTrackRDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->getLisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->getRisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCalSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCalSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCalSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_258_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_258_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCalSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCalSim(*(HRpcCalSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCalSim G__THRpcCalSim;
static int G__RpcDict_258_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCalSim*) (soff+(sizeof(HRpcCalSim)*i)))->~G__THRpcCalSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCalSim*) (soff))->~G__THRpcCalSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_258_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalSim* dest = (HRpcCalSim*) G__getstructoffset();
   *dest = *(HRpcCalSim*) libp->para[0].ref;
   const HRpcCalSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCalParCell */
static int G__RpcDict_260_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalParCell[n];
     } else {
       p = new((void*) gvp) HRpcCalParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalParCell;
     } else {
       p = new((void*) gvp) HRpcCalParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCalParCell*) G__getstructoffset())->getRightTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCalParCell*) G__getstructoffset())->getLeftTimeOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCalParCell*) G__getstructoffset())->getRightTOTOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCalParCell*) G__getstructoffset())->getLeftTOTOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCalParCell*) G__getstructoffset())->getTDC2Time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCalParCell*) G__getstructoffset())->getTOT2Charge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCalParCell*) G__getstructoffset())->getT0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->getAddress(
*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])
, *(Float_t*) G__Floatref(&libp->para[4]), *(Float_t*) G__Floatref(&libp->para[5])
, *(Float_t*) G__Floatref(&libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->fill(
(const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5])
, (const Float_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->fill(*(HRpcCalParCell*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->setRightTimeOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->setLeftTimeOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->setRightTOTOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->setLeftTOTOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->setTDC2Time((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->setTOT2Charge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->setT0((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCalParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCalParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCalParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_260_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_260_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCalParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCalParCell(*(HRpcCalParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCalParCell G__THRpcCalParCell;
static int G__RpcDict_260_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCalParCell*) (soff+(sizeof(HRpcCalParCell)*i)))->~G__THRpcCalParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCalParCell*) (soff))->~G__THRpcCalParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_260_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalParCell* dest = (HRpcCalParCell*) G__getstructoffset();
   *dest = *(HRpcCalParCell*) libp->para[0].ref;
   const HRpcCalParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCalParCol */
static int G__RpcDict_261_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalParCol* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalParCol[n];
     } else {
       p = new((void*) gvp) HRpcCalParCol[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalParCol;
     } else {
       p = new((void*) gvp) HRpcCalParCol;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRpcCalParCell& obj = ((HRpcCalParCol*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcCalParCol*) G__getstructoffset())->getCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalParCol*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCol*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCalParCol::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParCol::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCalParCol::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCalParCol::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParCol*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParCol::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalParCol::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParCol::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_261_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalParCol::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_261_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCalParCol* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCalParCol(*(HRpcCalParCol*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCalParCol G__THRpcCalParCol;
static int G__RpcDict_261_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCalParCol*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCalParCol*) (soff+(sizeof(HRpcCalParCol)*i)))->~G__THRpcCalParCol();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCalParCol*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCalParCol*) (soff))->~G__THRpcCalParCol();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_261_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalParCol* dest = (HRpcCalParCol*) G__getstructoffset();
   *dest = *(HRpcCalParCol*) libp->para[0].ref;
   const HRpcCalParCol& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCalParSec */
static int G__RpcDict_262_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalParSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalParSec[n];
     } else {
       p = new((void*) gvp) HRpcCalParSec[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalParSec;
     } else {
       p = new((void*) gvp) HRpcCalParSec;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRpcCalParCol& obj = ((HRpcCalParSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcCalParSec*) G__getstructoffset())->getCol((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCalParSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParSec*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCalParSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCalParSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCalParSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalParSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalParSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalParSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_262_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalParSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_262_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCalParSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCalParSec(*(HRpcCalParSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCalParSec G__THRpcCalParSec;
static int G__RpcDict_262_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCalParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCalParSec*) (soff+(sizeof(HRpcCalParSec)*i)))->~G__THRpcCalParSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCalParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCalParSec*) (soff))->~G__THRpcCalParSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_262_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalParSec* dest = (HRpcCalParSec*) G__getstructoffset();
   *dest = *(HRpcCalParSec*) libp->para[0].ref;
   const HRpcCalParSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcChargeOffsetPar */
static int G__RpcDict_271_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcChargeOffsetPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcChargeOffsetPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcChargeOffsetPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcChargeOffsetPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcChargeOffsetPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcChargeOffsetPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcChargeOffsetPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcChargeOffsetPar[n];
       } else {
         p = new((void*) gvp) HRpcChargeOffsetPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcChargeOffsetPar;
       } else {
         p = new((void*) gvp) HRpcChargeOffsetPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcChargeOffsetPar*) G__getstructoffset())->addNewSet((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcChargeOffsetPar*) G__getstructoffset())->addFirstSet((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcChargeOffsetPar*) G__getstructoffset())->addLastSet((Float_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcChargeOffsetPar*) G__getstructoffset())->addLastRunId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRpcChargeOffsetPar*) G__getstructoffset())->getPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRpcChargeOffsetPar*) G__getstructoffset())->getPar((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcChargeOffsetPar*) G__getstructoffset())->getFirstRunID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcChargeOffsetPar*) G__getstructoffset())->getLastRunID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcChargeOffsetPar*) G__getstructoffset())->getNextRunID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcChargeOffsetPar*) G__getstructoffset())->getCurrentSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcChargeOffsetPar*) G__getstructoffset())->getNSets());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcChargeOffsetPar*) G__getstructoffset())->setPars((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcChargeOffsetPar*) G__getstructoffset())->getSlot((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcChargeOffsetPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcChargeOffsetPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcChargeOffsetPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcChargeOffsetPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcChargeOffsetPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcChargeOffsetPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcChargeOffsetPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcChargeOffsetPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_271_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcChargeOffsetPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_271_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcChargeOffsetPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcChargeOffsetPar(*(HRpcChargeOffsetPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcChargeOffsetPar G__THRpcChargeOffsetPar;
static int G__RpcDict_271_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcChargeOffsetPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcChargeOffsetPar*) (soff+(sizeof(HRpcChargeOffsetPar)*i)))->~G__THRpcChargeOffsetPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcChargeOffsetPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcChargeOffsetPar*) (soff))->~G__THRpcChargeOffsetPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_271_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcChargeOffsetPar* dest = (HRpcChargeOffsetPar*) G__getstructoffset();
   *dest = *(HRpcChargeOffsetPar*) libp->para[0].ref;
   const HRpcChargeOffsetPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCalibrater */
static int G__RpcDict_272_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalibrater[n];
     } else {
       p = new((void*) gvp) HRpcCalibrater[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCalibrater;
     } else {
       p = new((void*) gvp) HRpcCalibrater;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRpcCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCalibrater::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalibrater::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCalibrater::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCalibrater::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCalibrater*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalibrater::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalibrater::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCalibrater::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCalibrater::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCalibrater G__THRpcCalibrater;
static int G__RpcDict_272_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCalibrater*) (soff+(sizeof(HRpcCalibrater)*i)))->~G__THRpcCalibrater();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCalibrater*) (soff))->~G__THRpcCalibrater();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcHit */
static int G__RpcDict_276_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHit[n];
     } else {
       p = new((void*) gvp) HRpcHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHit;
     } else {
       p = new((void*) gvp) HRpcHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getXMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getYMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getZMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getXRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getYRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getZRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getTOFRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getXSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getYSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getZSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHit*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcHit*) G__getstructoffset())->getInsideCellFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->getXYZLab(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHit*) G__getstructoffset())->getNLocationIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHit*) G__getstructoffset())->getLocationIndex((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcHit*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcHit*) G__getstructoffset())->getColumn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcHit*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setAddress((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setXSec((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setYSec((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setZSec((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setInsideCellFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setXYZLab((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setLogBit((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setHit((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->setRMS((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_276_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_276_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcHit(*(HRpcHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcHit G__THRpcHit;
static int G__RpcDict_276_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcHit*) (soff+(sizeof(HRpcHit)*i)))->~G__THRpcHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcHit*) (soff))->~G__THRpcHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_276_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHit* dest = (HRpcHit*) G__getstructoffset();
   *dest = *(HRpcHit*) libp->para[0].ref;
   const HRpcHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcHitSim */
static int G__RpcDict_277_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHitSim[n];
     } else {
       p = new((void*) gvp) HRpcHitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHitSim;
     } else {
       p = new((void*) gvp) HRpcHitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setRefL((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setRefR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setRefLDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setRefRDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackL((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackLDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackRDgtr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setLisAtBox((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setRisAtBox((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setNTracksL((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setNTracksR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackLArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackLDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackRArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setTrackRDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setLisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->setRisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHitSim*) G__getstructoffset())->getRefL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHitSim*) G__getstructoffset())->getRefR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHitSim*) G__getstructoffset())->getRefLDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHitSim*) G__getstructoffset())->getRefRDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcHitSim*) G__getstructoffset())->getTrackL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcHitSim*) G__getstructoffset())->getTrackR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcHitSim*) G__getstructoffset())->getTrackLDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcHitSim*) G__getstructoffset())->getTrackRDgtr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRpcHitSim*) G__getstructoffset())->getLisAtBox());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRpcHitSim*) G__getstructoffset())->getRisAtBox());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHitSim*) G__getstructoffset())->getNTracksL());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcHitSim*) G__getstructoffset())->getNTracksR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->getTrackLArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->getTrackLDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->getTrackRArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->getTrackRDgtrArray((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->getLisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->getRisAtBoxArray((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcHitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcHitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcHitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_277_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_277_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcHitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcHitSim(*(HRpcHitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcHitSim G__THRpcHitSim;
static int G__RpcDict_277_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcHitSim*) (soff+(sizeof(HRpcHitSim)*i)))->~G__THRpcHitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcHitSim*) (soff))->~G__THRpcHitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_277_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHitSim* dest = (HRpcHitSim*) G__getstructoffset();
   *dest = *(HRpcHitSim*) libp->para[0].ref;
   const HRpcHitSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcGeomPar */
static int G__RpcDict_278_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcGeomPar[n];
       } else {
         p = new((void*) gvp) HRpcGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcGeomPar;
       } else {
         p = new((void*) gvp) HRpcGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcGeomPar*) G__getstructoffset())->getCompNum((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_278_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_278_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcGeomPar(*(HRpcGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcGeomPar G__THRpcGeomPar;
static int G__RpcDict_278_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcGeomPar*) (soff+(sizeof(HRpcGeomPar)*i)))->~G__THRpcGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcGeomPar*) (soff))->~G__THRpcGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_278_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcGeomPar* dest = (HRpcGeomPar*) G__getstructoffset();
   *dest = *(HRpcGeomPar*) libp->para[0].ref;
   const HRpcGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcGeomCellPar */
static int G__RpcDict_279_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcGeomCellPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcGeomCellPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcGeomCellPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcGeomCellPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcGeomCellPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcGeomCellPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcGeomCellPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcGeomCellPar[n];
       } else {
         p = new((void*) gvp) HRpcGeomCellPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcGeomCellPar;
       } else {
         p = new((void*) gvp) HRpcGeomCellPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcGeomCellPar*) G__getstructoffset())->getX((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomCellPar*) G__getstructoffset())->setX((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcGeomCellPar*) G__getstructoffset())->getY((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomCellPar*) G__getstructoffset())->setY((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcGeomCellPar*) G__getstructoffset())->getLength((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomCellPar*) G__getstructoffset())->setLength((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcGeomCellPar*) G__getstructoffset())->getWidth((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomCellPar*) G__getstructoffset())->setWidth((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcGeomCellPar*) G__getstructoffset())->getDPlanes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomCellPar*) G__getstructoffset())->setDPlanes((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcGeomCellPar*) G__getstructoffset())->getDeltaZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomCellPar*) G__getstructoffset())->setDeltaZ((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcGeomCellPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcGeomCellPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcGeomCellPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcGeomCellPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcGeomCellPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcGeomCellPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcGeomCellPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcGeomCellPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_279_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcGeomCellPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_279_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcGeomCellPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcGeomCellPar(*(HRpcGeomCellPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcGeomCellPar G__THRpcGeomCellPar;
static int G__RpcDict_279_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcGeomCellPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcGeomCellPar*) (soff+(sizeof(HRpcGeomCellPar)*i)))->~G__THRpcGeomCellPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcGeomCellPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcGeomCellPar*) (soff))->~G__THRpcGeomCellPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_279_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcGeomCellPar* dest = (HRpcGeomCellPar*) G__getstructoffset();
   *dest = *(HRpcGeomCellPar*) libp->para[0].ref;
   const HRpcGeomCellPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCellStatusPar */
static int G__RpcDict_280_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCellStatusPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCellStatusPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcCellStatusPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCellStatusPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcCellStatusPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCellStatusPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcCellStatusPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcCellStatusPar[n];
       } else {
         p = new((void*) gvp) HRpcCellStatusPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcCellStatusPar;
       } else {
         p = new((void*) gvp) HRpcCellStatusPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCellStatusPar*) G__getstructoffset())->getCellStatus((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCellStatusPar*) G__getstructoffset())->setCellStatus((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCellStatusPar*) G__getstructoffset())->printCellParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCellStatusPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCellStatusPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCellStatusPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCellStatusPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCellStatusPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCellStatusPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCellStatusPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCellStatusPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_280_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCellStatusPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_280_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCellStatusPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCellStatusPar(*(HRpcCellStatusPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCellStatusPar G__THRpcCellStatusPar;
static int G__RpcDict_280_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCellStatusPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCellStatusPar*) (soff+(sizeof(HRpcCellStatusPar)*i)))->~G__THRpcCellStatusPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCellStatusPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCellStatusPar*) (soff))->~G__THRpcCellStatusPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_280_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCellStatusPar* dest = (HRpcCellStatusPar*) G__getstructoffset();
   *dest = *(HRpcCellStatusPar*) libp->para[0].ref;
   const HRpcCellStatusPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcDigiPar */
static int G__RpcDict_281_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcDigiPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcDigiPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcDigiPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcDigiPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcDigiPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcDigiPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcDigiPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcDigiPar[n];
       } else {
         p = new((void*) gvp) HRpcDigiPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcDigiPar;
       } else {
         p = new((void*) gvp) HRpcDigiPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getVprop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getSigmaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getSigmaT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getSigmaT1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getSigmaT2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getSigmaT3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getToff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQmean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQmean1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQmean2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQwid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQwid1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQwid2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getEff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getEff1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getEff2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getEff3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getEff4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getEff5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getTime2Tdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getPedestal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQtoW0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQtoW1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQtoW2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getQtoW3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigiPar*) G__getstructoffset())->getGap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcDigiPar*) G__getstructoffset())->getMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcDigiPar*) G__getstructoffset())->fill(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10]), (Float_t) G__double(libp->para[11])
, (Float_t) G__double(libp->para[12]), (Float_t) G__double(libp->para[13])
, (Float_t) G__double(libp->para[14]), (Float_t) G__double(libp->para[15])
, (Float_t) G__double(libp->para[16]), (Float_t) G__double(libp->para[17])
, (Float_t) G__double(libp->para[18]), (Float_t) G__double(libp->para[19])
, (Float_t) G__double(libp->para[20]), (Float_t) G__double(libp->para[21])
, (Float_t) G__double(libp->para[22]), (Float_t) G__double(libp->para[23])
, (Float_t) G__double(libp->para[24]), (Float_t) G__double(libp->para[25])
, (Int_t) G__int(libp->para[26]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcDigiPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDigiPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcDigiPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcDigiPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcDigiPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDigiPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcDigiPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDigiPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_281_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcDigiPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_281_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcDigiPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcDigiPar(*(HRpcDigiPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcDigiPar G__THRpcDigiPar;
static int G__RpcDict_281_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcDigiPar*) (soff+(sizeof(HRpcDigiPar)*i)))->~G__THRpcDigiPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcDigiPar*) (soff))->~G__THRpcDigiPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_281_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcDigiPar* dest = (HRpcDigiPar*) G__getstructoffset();
   *dest = *(HRpcDigiPar*) libp->para[0].ref;
   const HRpcDigiPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcWtoQPar */
static int G__RpcDict_282_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcWtoQPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcWtoQPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcWtoQPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcWtoQPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcWtoQPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcWtoQPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcWtoQPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcWtoQPar[n];
       } else {
         p = new((void*) gvp) HRpcWtoQPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcWtoQPar;
       } else {
         p = new((void*) gvp) HRpcWtoQPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcWtoQPar*) G__getstructoffset())->getPar0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcWtoQPar*) G__getstructoffset())->getPar1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcWtoQPar*) G__getstructoffset())->getPar2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcWtoQPar*) G__getstructoffset())->getPar3());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcWtoQPar*) G__getstructoffset())->getPar4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcWtoQPar*) G__getstructoffset())->getPar5());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcWtoQPar*) G__getstructoffset())->getTdc2Time());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcWtoQPar*) G__getstructoffset())->fill(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcWtoQPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcWtoQPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcWtoQPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcWtoQPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcWtoQPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcWtoQPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcWtoQPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcWtoQPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_282_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcWtoQPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_282_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcWtoQPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcWtoQPar(*(HRpcWtoQPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcWtoQPar G__THRpcWtoQPar;
static int G__RpcDict_282_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcWtoQPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcWtoQPar*) (soff+(sizeof(HRpcWtoQPar)*i)))->~G__THRpcWtoQPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcWtoQPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcWtoQPar*) (soff))->~G__THRpcWtoQPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_282_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcWtoQPar* dest = (HRpcWtoQPar*) G__getstructoffset();
   *dest = *(HRpcWtoQPar*) libp->para[0].ref;
   const HRpcWtoQPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcHitFPar */
static int G__RpcDict_283_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHitFPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHitFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcHitFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHitFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcHitFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHitFPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcHitFPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcHitFPar[n];
       } else {
         p = new((void*) gvp) HRpcHitFPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcHitFPar;
       } else {
         p = new((void*) gvp) HRpcHitFPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRpcHitFPar*) G__getstructoffset())->getPol5Pars((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitFPar*) G__getstructoffset())->setPol5Pars((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRpcHitFPar*) G__getstructoffset())->getPol1Pars((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitFPar*) G__getstructoffset())->setPol1Pars((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcHitFPar*) G__getstructoffset())->getQcut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitFPar*) G__getstructoffset())->setQcut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcHitFPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitFPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcHitFPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcHitFPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitFPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitFPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHitFPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitFPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_283_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHitFPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_283_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcHitFPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcHitFPar(*(HRpcHitFPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcHitFPar G__THRpcHitFPar;
static int G__RpcDict_283_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcHitFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcHitFPar*) (soff+(sizeof(HRpcHitFPar)*i)))->~G__THRpcHitFPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcHitFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcHitFPar*) (soff))->~G__THRpcHitFPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_283_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHitFPar* dest = (HRpcHitFPar*) G__getstructoffset();
   *dest = *(HRpcHitFPar*) libp->para[0].ref;
   const HRpcHitFPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcTimePosPar */
static int G__RpcDict_285_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTimePosPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTimePosPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcTimePosPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTimePosPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcTimePosPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTimePosPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcTimePosPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcTimePosPar[n];
       } else {
         p = new((void*) gvp) HRpcTimePosPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcTimePosPar;
       } else {
         p = new((void*) gvp) HRpcTimePosPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRpcTimePosPar*) G__getstructoffset())->getPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRpcTimePosPar*) G__getstructoffset())->getPars((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTimePosPar*) G__getstructoffset())->setPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTimePosPar*) G__getstructoffset())->setPars((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcTimePosPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTimePosPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcTimePosPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcTimePosPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTimePosPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTimePosPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTimePosPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTimePosPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_285_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTimePosPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_285_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcTimePosPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcTimePosPar(*(HRpcTimePosPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcTimePosPar G__THRpcTimePosPar;
static int G__RpcDict_285_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcTimePosPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcTimePosPar*) (soff+(sizeof(HRpcTimePosPar)*i)))->~G__THRpcTimePosPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcTimePosPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcTimePosPar*) (soff))->~G__THRpcTimePosPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_285_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTimePosPar* dest = (HRpcTimePosPar*) G__getstructoffset();
   *dest = *(HRpcTimePosPar*) libp->para[0].ref;
   const HRpcTimePosPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcSlewingPar */
static int G__RpcDict_286_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcSlewingPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcSlewingPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcSlewingPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcSlewingPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcSlewingPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcSlewingPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcSlewingPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcSlewingPar[n];
       } else {
         p = new((void*) gvp) HRpcSlewingPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcSlewingPar;
       } else {
         p = new((void*) gvp) HRpcSlewingPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRpcSlewingPar*) G__getstructoffset())->getExpo1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRpcSlewingPar*) G__getstructoffset())->getExpo2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcSlewingPar*) G__getstructoffset())->getQcut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcSlewingPar*) G__getstructoffset())->setExpo1par((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcSlewingPar*) G__getstructoffset())->setExpo2par((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcSlewingPar*) G__getstructoffset())->setQcut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcSlewingPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcSlewingPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcSlewingPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcSlewingPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcSlewingPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcSlewingPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcSlewingPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcSlewingPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_286_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcSlewingPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_286_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcSlewingPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcSlewingPar(*(HRpcSlewingPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcSlewingPar G__THRpcSlewingPar;
static int G__RpcDict_286_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcSlewingPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcSlewingPar*) (soff+(sizeof(HRpcSlewingPar)*i)))->~G__THRpcSlewingPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcSlewingPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcSlewingPar*) (soff))->~G__THRpcSlewingPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_286_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcSlewingPar* dest = (HRpcSlewingPar*) G__getstructoffset();
   *dest = *(HRpcSlewingPar*) libp->para[0].ref;
   const HRpcSlewingPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcHitF */
static int G__RpcDict_287_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHitF[n];
     } else {
       p = new((void*) gvp) HRpcHitF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcHitF;
     } else {
       p = new((void*) gvp) HRpcHitF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRpcHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitF*) G__getstructoffset())->initParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcHitF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcHitF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcHitF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcHitF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHitF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcHitF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_287_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcHitF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcHitF G__THRpcHitF;
static int G__RpcDict_287_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcHitF*) (soff+(sizeof(HRpcHitF)*i)))->~G__THRpcHitF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcHitF*) (soff))->~G__THRpcHitF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcCluster */
static int G__RpcDict_288_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCluster[n];
     } else {
       p = new((void*) gvp) HRpcCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcCluster;
     } else {
       p = new((void*) gvp) HRpcCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getTof());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getXSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getYSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getZSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getXMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getYMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getZMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getXRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getYRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getZRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcCluster*) G__getstructoffset())->getTOFRMS());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HRpcCluster*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HRpcCluster*) G__getstructoffset())->getIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCluster*) G__getstructoffset())->getClusterType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcCluster*) G__getstructoffset())->getInsideCellFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCluster*) G__getstructoffset())->getSector1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCluster*) G__getstructoffset())->getColumn1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCluster*) G__getstructoffset())->getCell1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCluster*) G__getstructoffset())->getSector2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCluster*) G__getstructoffset())->getColumn2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcCluster*) G__getstructoffset())->getCell2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->getXYZLab(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setClusterType((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setInsideCellFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setDetID1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setDetID1((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setDetID2((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setDetID2((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setCluster((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setRSEC((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setRMS((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setAddress((Short_t) G__int(libp->para[0]), (Short_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->setXYZLab((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_288_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_288_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcCluster(*(HRpcCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcCluster G__THRpcCluster;
static int G__RpcDict_288_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcCluster*) (soff+(sizeof(HRpcCluster)*i)))->~G__THRpcCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcCluster*) (soff))->~G__THRpcCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_288_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcCluster* dest = (HRpcCluster*) G__getstructoffset();
   *dest = *(HRpcCluster*) libp->para[0].ref;
   const HRpcCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcClusterSim */
static int G__RpcDict_289_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcClusterSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcClusterSim[n];
     } else {
       p = new((void*) gvp) HRpcClusterSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcClusterSim;
     } else {
       p = new((void*) gvp) HRpcClusterSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->resetTrackList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->resetRefList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->resetIsAtBoxList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setTrackList((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setTrackList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setRefList((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setRefList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setIsAtBoxList((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setIsAtBoxList((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcClusterSim*) G__getstructoffset())->howManyTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRpcClusterSim*) G__getstructoffset())->howManyTracksAtCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setNTracksAtBox((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setNTracksAtCells((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->setIsAtBox((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcClusterSim*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcClusterSim*) G__getstructoffset())->getIsAtBox());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->getTrackList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->getRefList((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->getIsAtBoxList((Bool_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcClusterSim*) G__getstructoffset())->isTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcClusterSim*) G__getstructoffset())->isRef((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcClusterSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusterSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcClusterSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcClusterSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusterSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcClusterSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusterSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_289_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcClusterSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_289_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcClusterSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcClusterSim(*(HRpcClusterSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcClusterSim G__THRpcClusterSim;
static int G__RpcDict_289_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcClusterSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcClusterSim*) (soff+(sizeof(HRpcClusterSim)*i)))->~G__THRpcClusterSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcClusterSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcClusterSim*) (soff))->~G__THRpcClusterSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_289_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcClusterSim* dest = (HRpcClusterSim*) G__getstructoffset();
   *dest = *(HRpcClusterSim*) libp->para[0].ref;
   const HRpcClusterSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcClusFPar */
static int G__RpcDict_290_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcClusFPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcClusFPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcClusFPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcClusFPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcClusFPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcClusFPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcClusFPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcClusFPar[n];
       } else {
         p = new((void*) gvp) HRpcClusFPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcClusFPar;
       } else {
         p = new((void*) gvp) HRpcClusFPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcClusFPar*) G__getstructoffset())->getNsigmasX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcClusFPar*) G__getstructoffset())->getNsigmasT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusFPar*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcClusFPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusFPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcClusFPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcClusFPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusFPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusFPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcClusFPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusFPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_290_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcClusFPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_290_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcClusFPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcClusFPar(*(HRpcClusFPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcClusFPar G__THRpcClusFPar;
static int G__RpcDict_290_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcClusFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcClusFPar*) (soff+(sizeof(HRpcClusFPar)*i)))->~G__THRpcClusFPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcClusFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcClusFPar*) (soff))->~G__THRpcClusFPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_290_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcClusFPar* dest = (HRpcClusFPar*) G__getstructoffset();
   *dest = *(HRpcClusFPar*) libp->para[0].ref;
   const HRpcClusFPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcClusterF */
static int G__RpcDict_291_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcClusterF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcClusterF[n];
     } else {
       p = new((void*) gvp) HRpcClusterF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcClusterF;
     } else {
       p = new((void*) gvp) HRpcClusterF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcClusterF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcClusterF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRpcClusterF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HRpcClusterF*) G__getstructoffset())->setDoSingleClusters((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HRpcClusterF*) G__getstructoffset())->setDoSingleClusters();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterF*) G__getstructoffset())->initParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcClusterF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusterF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcClusterF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcClusterF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcClusterF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusterF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcClusterF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcClusterF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_291_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcClusterF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcClusterF G__THRpcClusterF;
static int G__RpcDict_291_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcClusterF*) (soff+(sizeof(HRpcClusterF)*i)))->~G__THRpcClusterF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcClusterF*) (soff))->~G__THRpcClusterF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcTrbUnpacker */
static int G__RpcDict_335_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrbUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcTrbUnpacker((UInt_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRpcTrbUnpacker((UInt_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrbUnpacker*) G__getstructoffset())->setDebugRpcFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrbUnpacker*) G__getstructoffset())->disableTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrbUnpacker*) G__getstructoffset())->enableControlHistograms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcTrbUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrbUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcTrbUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcTrbUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrbUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrbUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrbUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrbUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_335_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrbUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_335_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcTrbUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcTrbUnpacker(*(HRpcTrbUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcTrbUnpacker G__THRpcTrbUnpacker;
static int G__RpcDict_335_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcTrbUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcTrbUnpacker*) (soff+(sizeof(HRpcTrbUnpacker)*i)))->~G__THRpcTrbUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcTrbUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcTrbUnpacker*) (soff))->~G__THRpcTrbUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_335_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrbUnpacker* dest = (HRpcTrbUnpacker*) G__getstructoffset();
   *dest = *(HRpcTrbUnpacker*) libp->para[0].ref;
   const HRpcTrbUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcTrb2Lookup */
static int G__RpcDict_339_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2Lookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HRpcTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HRpcTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcTrb2Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2Lookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcTrb2Lookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcTrb2Lookup[n];
       } else {
         p = new((void*) gvp) HRpcTrb2Lookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcTrb2Lookup;
       } else {
         p = new((void*) gvp) HRpcTrb2Lookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcTrb2Lookup*) G__getstructoffset())->getBoard((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcTrb2Lookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcTrb2Lookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcTrb2Lookup*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2Lookup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcTrb2Lookup*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Char_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcTrb2Lookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2Lookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2Lookup*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcTrb2Lookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2Lookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcTrb2Lookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcTrb2Lookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2Lookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2Lookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2Lookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2Lookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_339_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2Lookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_339_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcTrb2Lookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcTrb2Lookup(*(HRpcTrb2Lookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcTrb2Lookup G__THRpcTrb2Lookup;
static int G__RpcDict_339_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcTrb2Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcTrb2Lookup*) (soff+(sizeof(HRpcTrb2Lookup)*i)))->~G__THRpcTrb2Lookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcTrb2Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcTrb2Lookup*) (soff))->~G__THRpcTrb2Lookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_339_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2Lookup* dest = (HRpcTrb2Lookup*) G__getstructoffset();
   *dest = *(HRpcTrb2Lookup*) libp->para[0].ref;
   const HRpcTrb2Lookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcTrb2Unpacker */
static int G__RpcDict_340_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2Unpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcTrb2Unpacker((UInt_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRpcTrb2Unpacker((UInt_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2Unpacker*) G__getstructoffset())->disableTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2Unpacker*) G__getstructoffset())->storeSpareChannelsData();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcTrb2Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcTrb2Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcTrb2Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_340_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_340_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcTrb2Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcTrb2Unpacker(*(HRpcTrb2Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcTrb2Unpacker G__THRpcTrb2Unpacker;
static int G__RpcDict_340_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcTrb2Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcTrb2Unpacker*) (soff+(sizeof(HRpcTrb2Unpacker)*i)))->~G__THRpcTrb2Unpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcTrb2Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcTrb2Unpacker*) (soff))->~G__THRpcTrb2Unpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_340_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2Unpacker* dest = (HRpcTrb2Unpacker*) G__getstructoffset();
   *dest = *(HRpcTrb2Unpacker*) libp->para[0].ref;
   const HRpcTrb2Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcTrb2LookupChan */
static int G__RpcDict_343_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2LookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2LookupChan[n];
     } else {
       p = new((void*) gvp) HRpcTrb2LookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2LookupChan;
     } else {
       p = new((void*) gvp) HRpcTrb2LookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcTrb2LookupChan*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcTrb2LookupChan*) G__getstructoffset())->getColumn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcTrb2LookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HRpcTrb2LookupChan*) G__getstructoffset())->getSide());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcTrb2LookupChan*) G__getstructoffset())->getFeAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Char_t*) G__Charref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Char_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->fill(*(HRpcTrb2LookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->setColumn((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->setSide((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->setFeAddress((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcTrb2LookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2LookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcTrb2LookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcTrb2LookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2LookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2LookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2LookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_343_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2LookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_343_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcTrb2LookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcTrb2LookupChan(*(HRpcTrb2LookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcTrb2LookupChan G__THRpcTrb2LookupChan;
static int G__RpcDict_343_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcTrb2LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcTrb2LookupChan*) (soff+(sizeof(HRpcTrb2LookupChan)*i)))->~G__THRpcTrb2LookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcTrb2LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcTrb2LookupChan*) (soff))->~G__THRpcTrb2LookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_343_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2LookupChan* dest = (HRpcTrb2LookupChan*) G__getstructoffset();
   *dest = *(HRpcTrb2LookupChan*) libp->para[0].ref;
   const HRpcTrb2LookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcTrb2LookupBoard */
static int G__RpcDict_344_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2LookupBoard* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2LookupBoard[n];
     } else {
       p = new((void*) gvp) HRpcTrb2LookupBoard[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTrb2LookupBoard;
     } else {
       p = new((void*) gvp) HRpcTrb2LookupBoard;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRpcTrb2LookupBoard*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRpcTrb2LookupChan& obj = ((HRpcTrb2LookupBoard*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcTrb2LookupBoard*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupBoard*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcTrb2LookupBoard::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2LookupBoard::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcTrb2LookupBoard::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcTrb2LookupBoard::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTrb2LookupBoard*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2LookupBoard::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2LookupBoard::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTrb2LookupBoard::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_344_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTrb2LookupBoard::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_344_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcTrb2LookupBoard* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcTrb2LookupBoard(*(HRpcTrb2LookupBoard*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcTrb2LookupBoard G__THRpcTrb2LookupBoard;
static int G__RpcDict_344_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcTrb2LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcTrb2LookupBoard*) (soff+(sizeof(HRpcTrb2LookupBoard)*i)))->~G__THRpcTrb2LookupBoard();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcTrb2LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcTrb2LookupBoard*) (soff))->~G__THRpcTrb2LookupBoard();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_344_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTrb2LookupBoard* dest = (HRpcTrb2LookupBoard*) G__getstructoffset();
   *dest = *(HRpcTrb2LookupBoard*) libp->para[0].ref;
   const HRpcTrb2LookupBoard& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcLookupGCell */
static int G__RpcDict_345_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGCell[n];
     } else {
       p = new((void*) gvp) HRpcLookupGCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGCell;
     } else {
       p = new((void*) gvp) HRpcLookupGCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HRpcLookupGCell*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HRpcLookupGCell*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HRpcLookupGCell*) G__getstructoffset())->fill();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getLeftMBOnum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getLeftDBOnum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getLeftTRBnum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getRightMBOnum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getRightDBOnum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getRightTRBnum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGCell*) G__getstructoffset())->getTrbMboDboLeftNum(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGCell*) G__getstructoffset())->getTrbMboDboRightNum(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getLeftFEEAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCell*) G__getstructoffset())->getRightFEEAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGCell*) G__getstructoffset())->getLeftRightRegAdd((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HRpcLookupGCell*) G__getstructoffset())->setLeftFEEAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HRpcLookupGCell*) G__getstructoffset())->setLeftFEEAddress();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HRpcLookupGCell*) G__getstructoffset())->setRightFEEAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HRpcLookupGCell*) G__getstructoffset())->setRightFEEAddress();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcLookupGCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcLookupGCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcLookupGCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_345_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_345_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcLookupGCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcLookupGCell(*(HRpcLookupGCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcLookupGCell G__THRpcLookupGCell;
static int G__RpcDict_345_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcLookupGCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcLookupGCell*) (soff+(sizeof(HRpcLookupGCell)*i)))->~G__THRpcLookupGCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcLookupGCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcLookupGCell*) (soff))->~G__THRpcLookupGCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_345_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGCell* dest = (HRpcLookupGCell*) G__getstructoffset();
   *dest = *(HRpcLookupGCell*) libp->para[0].ref;
   const HRpcLookupGCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcLookupGCol */
static int G__RpcDict_346_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGCol* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGCol((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcLookupGCol((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcLookupGCol[n];
       } else {
         p = new((void*) gvp) HRpcLookupGCol[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcLookupGCol;
       } else {
         p = new((void*) gvp) HRpcLookupGCol;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRpcLookupGCell& obj = ((HRpcLookupGCol*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGCol*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcLookupGCol::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGCol::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcLookupGCol::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcLookupGCol::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGCol*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGCol::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGCol::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGCol::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_346_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGCol::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_346_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcLookupGCol* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcLookupGCol(*(HRpcLookupGCol*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcLookupGCol G__THRpcLookupGCol;
static int G__RpcDict_346_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcLookupGCol*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcLookupGCol*) (soff+(sizeof(HRpcLookupGCol)*i)))->~G__THRpcLookupGCol();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcLookupGCol*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcLookupGCol*) (soff))->~G__THRpcLookupGCol();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_346_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGCol* dest = (HRpcLookupGCol*) G__getstructoffset();
   *dest = *(HRpcLookupGCol*) libp->para[0].ref;
   const HRpcLookupGCol& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcLookupGSec */
static int G__RpcDict_347_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcLookupGSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcLookupGSec[n];
       } else {
         p = new((void*) gvp) HRpcLookupGSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcLookupGSec;
       } else {
         p = new((void*) gvp) HRpcLookupGSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRpcLookupGCol& obj = ((HRpcLookupGSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcLookupGSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcLookupGSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcLookupGSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_347_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_347_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcLookupGSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcLookupGSec(*(HRpcLookupGSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcLookupGSec G__THRpcLookupGSec;
static int G__RpcDict_347_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcLookupGSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcLookupGSec*) (soff+(sizeof(HRpcLookupGSec)*i)))->~G__THRpcLookupGSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcLookupGSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcLookupGSec*) (soff))->~G__THRpcLookupGSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_347_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGSec* dest = (HRpcLookupGSec*) G__getstructoffset();
   *dest = *(HRpcLookupGSec*) libp->para[0].ref;
   const HRpcLookupGSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcLookupGeom */
static int G__RpcDict_348_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGeom* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HRpcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRpcLookupGeom(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGeom((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRpcLookupGeom((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcLookupGeom((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRpcLookupGeom((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcLookupGeom[n];
       } else {
         p = new((void*) gvp) HRpcLookupGeom[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRpcLookupGeom;
       } else {
         p = new((void*) gvp) HRpcLookupGeom;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRpcLookupGSec& obj = ((HRpcLookupGeom*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRpcLookupGeom*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGeom*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRpcLookupGeom*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcLookupGeom::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGeom::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcLookupGeom::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcLookupGeom::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcLookupGeom*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGeom::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGeom::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcLookupGeom::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_348_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcLookupGeom::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RpcDict_348_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRpcLookupGeom* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRpcLookupGeom(*(HRpcLookupGeom*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcLookupGeom G__THRpcLookupGeom;
static int G__RpcDict_348_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcLookupGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcLookupGeom*) (soff+(sizeof(HRpcLookupGeom)*i)))->~G__THRpcLookupGeom();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcLookupGeom*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcLookupGeom*) (soff))->~G__THRpcLookupGeom();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RpcDict_348_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcLookupGeom* dest = (HRpcLookupGeom*) G__getstructoffset();
   *dest = *(HRpcLookupGeom*) libp->para[0].ref;
   const HRpcLookupGeom& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcTaskSet */
static int G__RpcDict_353_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTaskSet[n];
     } else {
       p = new((void*) gvp) HRpcTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcTaskSet;
     } else {
       p = new((void*) gvp) HRpcTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRpcTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HRpcTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HRpcTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HRpcTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_353_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcTaskSet G__THRpcTaskSet;
static int G__RpcDict_353_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcTaskSet*) (soff+(sizeof(HRpcTaskSet)*i)))->~G__THRpcTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcTaskSet*) (soff))->~G__THRpcTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRpcDigitizer */
static int G__RpcDict_356_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcDigitizer[n];
     } else {
       p = new((void*) gvp) HRpcDigitizer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRpcDigitizer;
     } else {
       p = new((void*) gvp) HRpcDigitizer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRpcDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRpcDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRpcDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRpcDigitizer*) G__getstructoffset())->getDistanceToXedge((HGeantRpc*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcDigitizer::setCropDistance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRpcDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRpcDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRpcDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRpcDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRpcDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RpcDict_356_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRpcDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRpcDigitizer G__THRpcDigitizer;
static int G__RpcDict_356_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRpcDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRpcDigitizer*) (soff+(sizeof(HRpcDigitizer)*i)))->~G__THRpcDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRpcDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRpcDigitizer*) (soff))->~G__THRpcDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HRpcRaw */

/* HRpcContFact */

/* HRpcDetector */

/* HRpcCalPar */

/* HRpcParRootFileIo */

/* HRpcParAsciiFileIo */

/* HRpcCal */

/* HRpcCalSim */

/* HRpcCalParCell */

/* HRpcCalParCol */

/* HRpcCalParSec */

/* HRpcChargeOffsetPar */

/* HRpcCalibrater */

/* HRpcHit */

/* HRpcHitSim */

/* HRpcGeomPar */

/* HRpcGeomCellPar */

/* HRpcCellStatusPar */

/* HRpcDigiPar */

/* HRpcWtoQPar */

/* HRpcHitFPar */

/* HRpcTimePosPar */

/* HRpcSlewingPar */

/* HRpcHitF */

/* HRpcCluster */

/* HRpcClusterSim */

/* HRpcClusFPar */

/* HRpcClusterF */

/* HRpcTrbUnpacker */

/* HRpcTrb2Lookup */

/* HRpcTrb2Unpacker */

/* HRpcTrb2LookupChan */

/* HRpcTrb2LookupBoard */

/* HRpcLookupGCell */

/* HRpcLookupGCol */

/* HRpcLookupGSec */

/* HRpcLookupGeom */

/* HRpcTaskSet */

/* HRpcDigitizer */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRpcDict {
 public:
  G__Sizep2memfuncRpcDict(): p(&G__Sizep2memfuncRpcDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRpcDict::*p)();
};

size_t G__get_sizep2memfuncRpcDict()
{
  G__Sizep2memfuncRpcDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRpcDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw))) {
     HRpcRaw *G__Lderived;
     G__Lderived=(HRpcRaw*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw),G__get_linked_tagnum(&G__RpcDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact))) {
     HRpcContFact *G__Lderived;
     G__Lderived=(HRpcContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact),G__get_linked_tagnum(&G__RpcDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector))) {
     HRpcDetector *G__Lderived;
     G__Lderived=(HRpcDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector),G__get_linked_tagnum(&G__RpcDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar))) {
     HRpcCalPar *G__Lderived;
     G__Lderived=(HRpcCalPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo))) {
     HRpcParRootFileIo *G__Lderived;
     G__Lderived=(HRpcParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo),G__get_linked_tagnum(&G__RpcDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo),G__get_linked_tagnum(&G__RpcDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo))) {
     HRpcParAsciiFileIo *G__Lderived;
     G__Lderived=(HRpcParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo),G__get_linked_tagnum(&G__RpcDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo),G__get_linked_tagnum(&G__RpcDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCal))) {
     HRpcCal *G__Lderived;
     G__Lderived=(HRpcCal*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCal),G__get_linked_tagnum(&G__RpcDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCal),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim))) {
     HRpcCalSim *G__Lderived;
     G__Lderived=(HRpcCalSim*)0x1000;
     {
       HRpcCal *G__Lpbase=(HRpcCal*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim),G__get_linked_tagnum(&G__RpcDictLN_HRpcCal),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim),G__get_linked_tagnum(&G__RpcDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell))) {
     HRpcCalParCell *G__Lderived;
     G__Lderived=(HRpcCalParCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol))) {
     HRpcCalParCol *G__Lderived;
     G__Lderived=(HRpcCalParCol*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec))) {
     HRpcCalParSec *G__Lderived;
     G__Lderived=(HRpcCalParSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar))) {
     HRpcChargeOffsetPar *G__Lderived;
     G__Lderived=(HRpcChargeOffsetPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater))) {
     HRpcCalibrater *G__Lderived;
     G__Lderived=(HRpcCalibrater*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater),G__get_linked_tagnum(&G__RpcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater),G__get_linked_tagnum(&G__RpcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HParCond),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HParCond),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HParCond),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcHit))) {
     HRpcHit *G__Lderived;
     G__Lderived=(HRpcHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHit),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim))) {
     HRpcHitSim *G__Lderived;
     G__Lderived=(HRpcHitSim*)0x1000;
     {
       HRpcHit *G__Lpbase=(HRpcHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim),G__get_linked_tagnum(&G__RpcDictLN_HRpcHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar))) {
     HRpcGeomPar *G__Lderived;
     G__Lderived=(HRpcGeomPar*)0x1000;
     {
       HDetGeomPar *G__Lpbase=(HDetGeomPar*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar),G__get_linked_tagnum(&G__RpcDictLN_HDetGeomPar),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar))) {
     HRpcGeomCellPar *G__Lderived;
     G__Lderived=(HRpcGeomCellPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar))) {
     HRpcCellStatusPar *G__Lderived;
     G__Lderived=(HRpcCellStatusPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar))) {
     HRpcDigiPar *G__Lderived;
     G__Lderived=(HRpcDigiPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar))) {
     HRpcWtoQPar *G__Lderived;
     G__Lderived=(HRpcWtoQPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar))) {
     HRpcHitFPar *G__Lderived;
     G__Lderived=(HRpcHitFPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar))) {
     HRpcTimePosPar *G__Lderived;
     G__Lderived=(HRpcTimePosPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar))) {
     HRpcSlewingPar *G__Lderived;
     G__Lderived=(HRpcSlewingPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF))) {
     HRpcHitF *G__Lderived;
     G__Lderived=(HRpcHitF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF),G__get_linked_tagnum(&G__RpcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF),G__get_linked_tagnum(&G__RpcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster))) {
     HRpcCluster *G__Lderived;
     G__Lderived=(HRpcCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim))) {
     HRpcClusterSim *G__Lderived;
     G__Lderived=(HRpcClusterSim*)0x1000;
     {
       HRpcCluster *G__Lpbase=(HRpcCluster*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim),G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar))) {
     HRpcClusFPar *G__Lderived;
     G__Lderived=(HRpcClusFPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar),G__get_linked_tagnum(&G__RpcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF))) {
     HRpcClusterF *G__Lderived;
     G__Lderived=(HRpcClusterF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF),G__get_linked_tagnum(&G__RpcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF),G__get_linked_tagnum(&G__RpcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker))) {
     HRpcTrbUnpacker *G__Lderived;
     G__Lderived=(HRpcTrbUnpacker*)0x1000;
     {
       HTrbBaseUnpacker *G__Lpbase=(HTrbBaseUnpacker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker),G__get_linked_tagnum(&G__RpcDictLN_HTrbBaseUnpacker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker),G__get_linked_tagnum(&G__RpcDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup))) {
     HRpcTrb2Lookup *G__Lderived;
     G__Lderived=(HRpcTrb2Lookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker))) {
     HRpcTrb2Unpacker *G__Lderived;
     G__Lderived=(HRpcTrb2Unpacker*)0x1000;
     {
       HTrb2Unpacker *G__Lpbase=(HTrb2Unpacker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker),G__get_linked_tagnum(&G__RpcDictLN_HTrb2Unpacker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker),G__get_linked_tagnum(&G__RpcDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan))) {
     HRpcTrb2LookupChan *G__Lderived;
     G__Lderived=(HRpcTrb2LookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard))) {
     HRpcTrb2LookupBoard *G__Lderived;
     G__Lderived=(HRpcTrb2LookupBoard*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell))) {
     HRpcLookupGCell *G__Lderived;
     G__Lderived=(HRpcLookupGCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol))) {
     HRpcLookupGCol *G__Lderived;
     G__Lderived=(HRpcLookupGCol*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec))) {
     HRpcLookupGSec *G__Lderived;
     G__Lderived=(HRpcLookupGSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom))) {
     HRpcLookupGeom *G__Lderived;
     G__Lderived=(HRpcLookupGeom*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom),G__get_linked_tagnum(&G__RpcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet))) {
     HRpcTaskSet *G__Lderived;
     G__Lderived=(HRpcTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet),G__get_linked_tagnum(&G__RpcDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet),G__get_linked_tagnum(&G__RpcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer))) {
     HRpcDigitizer *G__Lderived;
     G__Lderived=(HRpcDigitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer),G__get_linked_tagnum(&G__RpcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer),G__get_linked_tagnum(&G__RpcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer),G__get_linked_tagnum(&G__RpcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer),G__get_linked_tagnum(&G__RpcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRpcDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__RpcDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__RpcDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__RpcDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__RpcDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("gaptrack",117,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizercLcLgaptrack),0,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("rpcdat",117,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizercLcLrpcdat),0,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<gaptrack*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRpcDigitizer::gaptrack*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("celltrack",117,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizercLcLcelltrack),0,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("celldat",117,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizercLcLcelldat),0,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<celltrack*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRpcDigitizer::celltrack*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("efhits",117,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizercLcLefhits),0,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<celldat*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRpcDigitizer::celldat*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<rpcdat*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRpcDigitizer::rpcdat*>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<efhits>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRpcDigitizer::efhits>",117,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HRpcRaw */
static void G__setup_memvarHRpcRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw));
   { HRpcRaw *p; p=(HRpcRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightTime=",0,"TDC: 1st leading time on the right");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftTime=",0,"TDC: 1st leading time on the left");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightTime2=",0,"TDC: 2nd leading time on the right");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftTime2=",0,"TDC: 2nd leading time on the left");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightTot=",0,"TDC: 1st Time-over-Threshold on the right");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftTot=",0,"TDC: 1st Time-over-Threshold on the left");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightTot2=",0,"TDC: 2nd Time-over-Threshold on the right");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftTot2=",0,"TDC: 2nd Time-over-Threshold on the left");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightTotLast=",0,"TDC: Time-over-Threshold on the left including all the reflexions up to 500 ns");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftTotLast=",0,"TDC: Time-over-Threshold on the right including all the reflexions up to 500 ns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"leftFeeAddress=",0,"FEE address (DBO_input, DBO, MBO, TRB): see wiki for documentation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rightFeeAddress=",0,"FEE address (DBO_input, DBO, MBO, TRB): see wiki for documentation");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"address=",0,"Geometrical address (sec, col, cell)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"leftLogBit=",0,"Data Info");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"rightLogBit=",0,"Data Info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcContFact */
static void G__setup_memvarHRpcContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact));
   { HRpcContFact *p; p=(HRpcContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcDetector */
static void G__setup_memvarHRpcDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector));
   { HRpcDetector *p; p=(HRpcDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxColumns=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxEmptyChannels=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCalPar */
static void G__setup_memvarHRpcCalPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar));
   { HRpcCalPar *p; p=(HRpcCalPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,4,"array=",0,"array of pointers of type HRpcCalParSec");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"MaxSectors=",0,"Maximum number of columns");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcParRootFileIo */
static void G__setup_memvarHRpcParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo));
   { HRpcParRootFileIo *p; p=(HRpcParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcParAsciiFileIo */
static void G__setup_memvarHRpcParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo));
   { HRpcParAsciiFileIo *p; p=(HRpcParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"setSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCal */
static void G__setup_memvarHRpcCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCal));
   { HRpcCal *p; p=(HRpcCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightTime=",0,"right leading time     [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftTime=",0,"left leading time      [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightTime2=",0,"2nd right leading time [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftTime2=",0,"2nd left leading time  [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightCharge=",0,"right charge           [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftCharge=",0,"left  charge           [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"rightCharge2=",0,"2nd right charge       [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"leftCharge2=",0,"2nd left  charge       [pC]");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"address=",0,"Geometrical address (sec, col, cell)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"logBit=",0,"Data Info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCalSim */
static void G__setup_memvarHRpcCalSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim));
   { HRpcCalSim *p; p=(HRpcCalSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefL=",0,"Reference to the first mother contributing to the cell ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefR=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefLDgtr=",0,"Reference to the first daughter contributing to the cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefRDgtr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackL[10]=",0,"Array of tracks of mothers at the RPC box for this cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackR[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackLDgtr[10]=",0,"Array of tracks of daughters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackRDgtr[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracksL=",0,"Number of daughter tracks at this cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracksR=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"LisAtBox[10]=",0,"Are they at box?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"RisAtBox[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCalParCell */
static void G__setup_memvarHRpcCalParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell));
   { HRpcCalParCell *p; p=(HRpcCalParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rightTimeOffset=",0,"Time offset of the right channel    [TDC units]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"leftTimeOffset=",0,"Time offset of the left channel     [TDC units]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"rightTotOffset=",0,"ToT  offset of the right channel    [TDC units]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"leftTotOffset=",0,"ToT  offset of the left channel     [TDC units]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tdc2time=",0,"Conversion from TDC units to time   [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"tot2charge=",0,"Conversion from TOT units to charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t0=",0,"Overall offset                      [TDC units]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCalParCol */
static void G__setup_memvarHRpcCalParCol(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol));
   { HRpcCalParCol *p; p=(HRpcCalParCol*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,4,"array=",0,"pointer array containing HRpcCalParCell objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"MaxCells=",0,"Maximum number of cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCalParSec */
static void G__setup_memvarHRpcCalParSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec));
   { HRpcCalParSec *p; p=(HRpcCalParSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,4,"array=",0,"pointer array containing HRpcCalParCol objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"MaxColumns=",0,"Maximum number of sectors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcChargeOffsetPar */
static void G__setup_memvarHRpcChargeOffsetPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar));
   { HRpcChargeOffsetPar *p; p=(HRpcChargeOffsetPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayI),-1,-1,2,"fRunIDs=",0,"Array with Beggining-End of RunId slots. Last stores the last RunID");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fChargeCorrPar=",0,"Array with Correction pars.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fCurrent=",0,"Current set of correction parameters; Starts from 0 up to fNRuns-1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fNRuns=",0,"number of sets of parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCalibrater */
static void G__setup_memvarHRpcCalibrater(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater));
   { HRpcCalibrater *p; p=(HRpcCalibrater*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pRawCat=",0,"pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pCalCat=",0,"pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HIterator),-1,-1,2,"iter=",0,"iterator on raw data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_HLocation),-1,-1,2,"loc=",0,"location for new cal object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar),-1,-1,2,"pCalPar=",0,"calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar),-1,-1,2,"pChOffPar=",0,"charge offset parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcHit */
static void G__setup_memvarHRpcHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHit));
   { HRpcHit *p; p=(HRpcHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof=",0,"Time of flight [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"charge=",0,"Charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xmod=",0,"X coordinate in Module system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ymod=",0,"Y coordinate in Module system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zmod=",0,"Z coordinate in Module system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xsec=",0,"X coordinate in Sector system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ysec=",0,"Y coordinate in Sector system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zsec=",0,"Z coordinate in Sector system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xlab=",0,"X coordinate in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ylab=",0,"Y coordinate in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zlab=",0,"Z coordinate in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta=",0,"Theta angle [degrees]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi=",0,"Phi angle [degrees]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInCell=",0,"Flag for cell outliers");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_x=",0,"Sigma of x   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_y=",0,"Sigma of y   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_z=",0,"Sigma of z   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_tof=",0,"Sigma of tof [ps]");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"address=",0,"Geometrical address (sec, col, cell)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"logBit=",0,"Data Info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcHitSim */
static void G__setup_memvarHRpcHitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim));
   { HRpcHitSim *p; p=(HRpcHitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefL=",0,"Reference to the first mother contributing to the cell ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefR=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefLDgtr=",0,"Reference to the first daughter contributing to the cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefRDgtr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackL[10]=",0,"Array of tracks of mothers at the RPC box for this cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackR[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackLDgtr[10]=",0,"Array of tracks of daughters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackRDgtr[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracksL=",0,"Number of daughter tracks at this cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracksR=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"LisAtBox[10]=",0,"Are they at box?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"RisAtBox[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcGeomPar */
static void G__setup_memvarHRpcGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar));
   { HRpcGeomPar *p; p=(HRpcGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcGeomCellPar */
static void G__setup_memvarHRpcGeomCellPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar));
   { HRpcGeomCellPar *p; p=(HRpcGeomCellPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fXcell=",0,"X position at module (left-down cell corner) [mm] ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fYcell=",0,"Y position at module (left-down cell corner) [mm]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fLcell=",0,"Cell lenght (down edge) [mm] ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fWcell=",0,"Cell width [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDPlanes=",0,"Efective distance between layers ( center of the active regions of the two layers) [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDeltaZ=",0,"Thickness of the cell active region (between inner and outer gaps) [mm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCellStatusPar */
static void G__setup_memvarHRpcCellStatusPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar));
   { HRpcCellStatusPar *p; p=(HRpcCellStatusPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayI),-1,-1,2,"cellStatus=",0,"Status of cell: 0=dead/off, 1=on");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcDigiPar */
static void G__setup_memvarHRpcDigiPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar));
   { HRpcDigiPar *p; p=(HRpcDigiPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fVprop=",0,"signal propagation velocity [mm/ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fS_x=",0,"position resolution [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fS0_time=",0,"time resolution par0 [ps]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fS1_time=",0,"time resolution par1 [ps]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fS2_time=",0,"time resolution par2 (pure number)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fS3_time=",0,"time resolution par3 (pure number)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fT_off=",0,"time offset [ps]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQmean0=",0,"4-gap average charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQmean1=",0,"4-gap average charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQmean2=",0,"4-gap average charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQwid0=",0,"4-gap width charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQwid1=",0,"4-gap width charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQwid2=",0,"4-gap width charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEff0=",0,"4-gap efficiency par0 ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEff1=",0,"4-gap efficiency par1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEff2=",0,"4-gap efficiency par2 (pure number)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEff3=",0,"4-gap efficiency par3 (pure number)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEff4=",0,"4-gap efficiency par4 (pure number)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fEff5=",0,"4-gap efficiency par5 (pure number)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTime2Tdc=",0,"Time (ns) to TDC bin conversion (1/0.098)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPedestal=",0,"Mean Charge Pedestal [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQtoW0=",0,"First parameter for charge to width conversion");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQtoW1=",0,"Second parameter for charge to width conversion");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQtoW2=",0,"Third parameter for charge to width conversion");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQtoW3=",0,"Fourth parameter for charge to width conversion");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fGap=",0,"Gas gap size [mm]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMode=",0,"Digitizing Mode type");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcWtoQPar */
static void G__setup_memvarHRpcWtoQPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar));
   { HRpcWtoQPar *p; p=(HRpcWtoQPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPar0=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPar1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPar2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPar3=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPar4=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPar5=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ftdc2time=",0,"TDC to Time conversion [ns/bin]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcHitFPar */
static void G__setup_memvarHRpcHitFPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar));
   { HRpcHitFPar *p; p=(HRpcHitFPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fPol5Pars=",0,"Parameters of 5th order pol parameterization of T=f(Q) ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fPol1Pars=",0,"Parameters of 1th order pol parameterization of T=f(Q) ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQcut=",0,"Cut value for the two parameterizations");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcTimePosPar */
static void G__setup_memvarHRpcTimePosPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar));
   { HRpcTimePosPar *p; p=(HRpcTimePosPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"f5harmonics_16=",0,"Parameters of the 5 harmonics used for the correction");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcSlewingPar */
static void G__setup_memvarHRpcSlewingPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar));
   { HRpcSlewingPar *p; p=(HRpcSlewingPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fExpo1=",0,"Parameters of the exponential describing behaviour below fQcut");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_TArrayF),-1,-1,2,"fExpo2=",0,"Parameters of the exponential describing behaviour above fQcut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fQcut=",0,"Cut value for the two parameterizations. Limit region of both pars");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcHitF */
static void G__setup_memvarHRpcHitF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF));
   { HRpcHitF *p; p=(HRpcHitF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pCalCat=",0,"pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pCalCatTmp=",0,"pointer to the calTmp data for embedding");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pHitCat=",0,"pointer to the hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pGeantRpcCat=",0,"pointer to the GeantRpc data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pStartHitCat=",0,"pointer to the Start Hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar),-1,-1,2,"pDigiPar=",0,"Digitization parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar),-1,-1,2,"pWtoQPar=",0,"Width to Charge conversion parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar),-1,-1,2,"pHitFPar=",0,"Hit Finder parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HIterator),-1,-1,2,"iter=",0,"iterator on cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HSpecGeomPar),-1,-1,2,"pSpecGeomPar=",0,"pointer to official geometry parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar),-1,-1,2,"pRpcGeometry=",0,"rpc geometry parameters from official geometry");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar),-1,-1,2,"pGeomCellPar=",0,"rpc cell geometry parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar),-1,-1,2,"pCellStatusPar=",0,"cell status parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar),-1,-1,2,"pTimePosPar=",0,"Time-position dependence correction parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar),-1,-1,2,"pSlewingPar=",0,"Time-charge dependence (slewing) correction pars");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_HLocation),-1,-1,2,"loc=",0,"location");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"simulation=",0,"Flag to decide whether simulation(1) or analisis(0)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcCluster */
static void G__setup_memvarHRpcCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster));
   { HRpcCluster *p; p=(HRpcCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tof=",0,"Time of flight [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"charge=",0,"Charge [pC]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xmod=",0,"X coordinate in Module system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ymod=",0,"Y coordinate in Module system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zmod=",0,"Z coordinate in Module system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xsec=",0,"X coordinate in Sector system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ysec=",0,"Y coordinate in Sector system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zsec=",0,"Z coordinate in Sector system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xlab=",0,"X coordinate in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ylab=",0,"Y coordinate in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zlab=",0,"Z coordinate in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta=",0,"Theta angle [degrees]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi=",0,"Phi angle [degrees]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_x=",0,"Sigma of x   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_y=",0,"Sigma of y   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_z=",0,"Sigma of z   [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigma_tof=",0,"Sigma of tof [ps]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"isInCell=",0,"Flag for cell outliers (xMod out of geometric cell bounds)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"sector=",0,"Sector");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"index=",0,"Linear index of \"this\" object in category");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"detID1=",0,"Detector ID of the first  cell in the cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"detID2=",0,"Detector ID of the second cell in the cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"type=",0,"1: Single hit, 2: Two-cell cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcClusterSim */
static void G__setup_memvarHRpcClusterSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim));
   { HRpcClusterSim *p; p=(HRpcClusterSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"TrackList[4]=",0,"List of the four tracks contributing to the cluster, ordered as:");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"RefList[4]=",0,"List of the four references to the geantrpc objects contributing ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isAtBoxList[4]=",0,"Boolean list to indicate if a mother was found at the box or not.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Track=",0,"Track preferred by the cluster finder (typically the one contributing");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracksAtBox=",0,"Number of different tracks at the RPC box that contribute to this cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracksAtCells=",0,"Number of different tracks at the RPC cells that contribute to this cluster	");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isAtBox=",0,"Boolean to indicate if a mother was found at the box or not.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcClusFPar */
static void G__setup_memvarHRpcClusFPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar));
   { HRpcClusFPar *p; p=(HRpcClusFPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNsigmasX=",0,"Number of sigmas for position searching window");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fNsigmasT=",0,"Number of sigmas for time searching window");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcClusterF */
static void G__setup_memvarHRpcClusterF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF));
   { HRpcClusterF *p; p=(HRpcClusterF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pHitCat=",0,"pointer to the hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pClusterCat=",0,"pointer to the cluster data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,2,"pGeantRpcCat=",0,"pointer to the GeantRpc data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_HLocation),-1,-1,2,"loc=",0,"location for hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_HLocation),-1,-1,2,"loc_cluster=",0,"location for cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar),-1,-1,2,"pGeomCellPar=",0,"rpc cell geometry parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar),-1,-1,2,"pClusFPar=",0,"cluster finder parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxcells=",0,"Maximum number of cells");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"simulation=",0,"Flag to decide whether simulation(1) or analisis(0)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"doSingleCluster=",0,"kTRUE : fill clusters as copy from hits (default kFALSE)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcTrbUnpacker */
static void G__setup_memvarHRpcTrbUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker));
   { HRpcTrbUnpacker *p; p=(HRpcTrbUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_HLocation),-1,-1,2,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"debugRpcFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fNoTimeRefCorr=",0,"Switch of Reference Time substraction (debugging)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fControlHistograms=",0,"flag for control histograms");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TH2F),-1,-1,2,"histdbos=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TH2F),-1,-1,2,"histdbombo=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TH2F),-1,-1,2,"histmbotrb=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TH2F),-1,-1,2,"histtrbchan=",0,"control histos");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcTrb2Lookup */
static void G__setup_memvarHRpcTrb2Lookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup));
   { HRpcTrb2Lookup *p; p=(HRpcTrb2Lookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HRpcTrb2LookupBoard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcTrb2Unpacker */
static void G__setup_memvarHRpcTrb2Unpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker));
   { HRpcTrb2Unpacker *p; p=(HRpcTrb2Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_HLocation),-1,-1,2,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup),-1,-1,2,"lookup=",0,"TRB lookup table");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"bNoTimeRefCorr=",0,"Switch of Reference Time substraction (debugging)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"bStoreSpareChanData=",0,"flag for storing data from spare channels (cells over no. 31). By default, it is not.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcTrb2LookupChan */
static void G__setup_memvarHRpcTrb2LookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan));
   { HRpcTrb2LookupChan *p; p=(HRpcTrb2LookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"column=",0,"column number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"side=",0,"side of cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"feAddress=",0,"front end address");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcTrb2LookupBoard */
static void G__setup_memvarHRpcTrb2LookupBoard(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard));
   { HRpcTrb2LookupBoard *p; p=(HRpcTrb2LookupBoard*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HRpcTrb2LookupChan objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcLookupGCell */
static void G__setup_memvarHRpcLookupGCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell));
   { HRpcLookupGCell *p; p=(HRpcLookupGCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fLeftFeeAddress=",0,"left fee addr from lookuptable");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fRightFeeAddress=",0,"right fee addr from lookuptable");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcLookupGCol */
static void G__setup_memvarHRpcLookupGCol(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol));
   { HRpcLookupGCol *p; p=(HRpcLookupGCol*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcLookupGSec */
static void G__setup_memvarHRpcLookupGSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec));
   { HRpcLookupGSec *p; p=(HRpcLookupGSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,2,"array=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcLookupGeom */
static void G__setup_memvarHRpcLookupGeom(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom));
   { HRpcLookupGeom *p; p=(HRpcLookupGeom*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcTaskSet */
static void G__setup_memvarHRpcTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet));
   { HRpcTaskSet *p; p=(HRpcTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRpcDigitizer */
static void G__setup_memvarHRpcDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   { HRpcDigitizer *p; p=(HRpcDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_HLocation),-1,-1,4,"fLoc=",0,"! Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,4,"fGeantRpcCat=",0,"! Pointer to Rpc Geant data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,4,"fCalCat=",0,"! Pointer to Cal  data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HCategory),-1,-1,4,"fKineCat=",0,"! Pointer to Kine data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar),-1,-1,4,"fGeomCellPar=",0,"! Geometrical parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar),-1,-1,4,"fDigiPar=",0,"! Digitization parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HIterator),-1,-1,4,"iterGeantRpc=",0,"! Iterator over catRpcGeantRaw category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_HIterator),-1,-1,4,"iterRpcCal=",0,"! Iterator over HRpcCalSim category");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxCol=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxCell=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR),G__defined_typename("vector<celldat*>"),-1,4,"cellobjects=",0,"! temporary working array for regrouping gaps");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR),G__defined_typename("vector<rpcdat*>"),-1,4,"rpcobjects=",0,"! temporary working array for digitized data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR),G__defined_typename("vector<efhits>"),-1,4,"effi_vec=",0,"! vector of hits for efficiency calculation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Eff0=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Eff1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Eff2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Eff3=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Eff4=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Eff5=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ineff_hit_n=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"ineff_hit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma0_T=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma1_T=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma2_T=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma3_T=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigma_el=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"vprop=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"t_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qmean0=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qmean1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qmean2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qwid0=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qwid1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"Qwid2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"geaX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"geaTof=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"geaMom=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"geaLocLen=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"geaLocLenNorm=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"D=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"gap=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"beta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"eff_hit=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-2,4,"fCropDistance=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RpcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRpcDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHRpcRaw(void) {
   /* HRpcRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw));
   G__memfunc_setup("HRpcRaw",663,G__RpcDict_172_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTime",1229,G__RpcDict_172_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTime",1114,G__RpcDict_172_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTime2",1279,G__RpcDict_172_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTime2",1164,G__RpcDict_172_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTot",1141,G__RpcDict_172_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTot",1026,G__RpcDict_172_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTot2",1191,G__RpcDict_172_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTot2",1076,G__RpcDict_172_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTotLast",1545,G__RpcDict_172_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTotLast",1430,G__RpcDict_172_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RpcDict_172_0_12, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftFeeAddress",1697,G__RpcDict_172_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightFeeAddress",1812,G__RpcDict_172_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightLogBit",1407,G__RpcDict_172_0_15, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftLogBit",1292,G__RpcDict_172_0_16, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocationIndex",1649,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSector",944,G__RpcDict_172_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumn",942,G__RpcDict_172_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__RpcDict_172_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightSubEvtId",1604,G__RpcDict_172_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTrbChannel",1823,G__RpcDict_172_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightDBOInput",1571,G__RpcDict_172_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightDBONum",1347,G__RpcDict_172_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightMBONum",1356,G__RpcDict_172_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTRBNum",1366,G__RpcDict_172_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftSubEvtId",1489,G__RpcDict_172_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTrbChannel",1708,G__RpcDict_172_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftDBOInput",1456,G__RpcDict_172_0_30, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftDBONum",1232,G__RpcDict_172_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftMBONum",1241,G__RpcDict_172_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTRBNum",1251,G__RpcDict_172_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightNLeadings",1715,G__RpcDict_172_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightNTrailings",1849,G__RpcDict_172_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightLastTotFlag",1923,G__RpcDict_172_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightDataPairFlag",1982,G__RpcDict_172_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightDataVersion",1950,G__RpcDict_172_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightDataType",1626,G__RpcDict_172_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftNLeadings",1600,G__RpcDict_172_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftNTrailings",1734,G__RpcDict_172_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftLastTotFlag",1808,G__RpcDict_172_0_42, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftDataPairFlag",1867,G__RpcDict_172_0_43, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftDataVersion",1835,G__RpcDict_172_0_44, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftDataType",1511,G__RpcDict_172_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTime",1241,G__RpcDict_172_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTime",1126,G__RpcDict_172_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTime2",1291,G__RpcDict_172_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightTime2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTime2",1176,G__RpcDict_172_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftTime2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTot",1153,G__RpcDict_172_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightTot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTot",1038,G__RpcDict_172_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftTot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTot2",1203,G__RpcDict_172_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightTot2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTot2",1088,G__RpcDict_172_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftTot2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTotLast",1557,G__RpcDict_172_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightTotLast", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTotLast",1442,G__RpcDict_172_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftTotLast", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RpcDict_172_0_56, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightFeeAddress",1824,G__RpcDict_172_0_57, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - sevtid i - 'Int_t' 0 - chan "
"i - 'Int_t' 0 - dbi i - 'Int_t' 0 - dbn "
"i - 'Int_t' 0 - mbn i - 'Int_t' 0 - trbn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftFeeAddress",1709,G__RpcDict_172_0_58, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - sevtid i - 'Int_t' 0 - chan "
"i - 'Int_t' 0 - dbi i - 'Int_t' 0 - dbn "
"i - 'Int_t' 0 - mbn i - 'Int_t' 0 - trbn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightLogBit",1419,G__RpcDict_172_0_59, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - lm i - 'Int_t' 0 - tm "
"i - 'Int_t' 0 - ltf i - 'Int_t' 0 - pf "
"i - 'Int_t' 0 - ref i - 'Int_t' 0 - type "
"i - 'Int_t' 0 - ex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftLogBit",1304,G__RpcDict_172_0_60, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - lm i - 'Int_t' 0 - tm "
"i - 'Int_t' 0 - ltf i - 'Int_t' 0 - pf "
"i - 'Int_t' 0 - ref i - 'Int_t' 0 - type "
"i - 'Int_t' 0 - ex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_172_0_61, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_172_0_62, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_172_0_63, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_172_0_64, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_172_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_172_0_69, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_172_0_70, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_172_0_71, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_172_0_72, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcRaw", 663, G__RpcDict_172_0_73, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw), -1, 0, 1, 1, 1, 0, "u 'HRpcRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcRaw", 789, G__RpcDict_172_0_74, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_172_0_75, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcRaw), -1, 1, 1, 1, 1, 0, "u 'HRpcRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcContFact(void) {
   /* HRpcContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcContFact",1151,G__RpcDict_201_0_2, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_201_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_201_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_201_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_201_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_201_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_201_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_201_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_201_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_201_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcContFact", 1151, G__RpcDict_201_0_16, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact), -1, 0, 1, 1, 1, 0, "u 'HRpcContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcContFact", 1277, G__RpcDict_201_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_201_0_18, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcContFact), -1, 1, 1, 1, 1, 0, "u 'HRpcContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcDetector(void) {
   /* HRpcDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector));
   G__memfunc_setup("HRpcDetector",1191,G__RpcDict_206_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - cat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildMatrixCategory",1987,G__RpcDict_206_0_3, 85, G__get_linked_tagnum(&G__RpcDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildLinearCategory",1961,G__RpcDict_206_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxColumns",1351,G__RpcDict_206_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxCells",1113,G__RpcDict_206_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEmptyChannels",1659,G__RpcDict_206_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxColumns",1363,G__RpcDict_206_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - amaxColumns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCells",1125,G__RpcDict_206_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - amaxCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxEmptyChannels",1965,G__RpcDict_206_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - amaxChannels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_206_0_14, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_206_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_206_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_206_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_206_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_206_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_206_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_206_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_206_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcDetector", 1191, G__RpcDict_206_0_26, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector), -1, 0, 1, 1, 1, 0, "u 'HRpcDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcDetector", 1317, G__RpcDict_206_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_206_0_28, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcDetector), -1, 1, 1, 1, 1, 0, "u 'HRpcDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCalPar(void) {
   /* HRpcCalPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar));
   G__memfunc_setup("printPause",1067,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcCalPar",928,G__RpcDict_245_0_2, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcCalPar\"' name C - 'Char_t' 10 '\"Calibration parameters for the Rpc Detector\"' title "
"C - 'Char_t' 10 '\"RpcCalProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_245_0_3, 117, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__RpcDict_245_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_245_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__RpcDict_245_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_245_0_10, 121, -1, -1, 0, 10, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__RpcDict_245_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__RpcDict_245_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__RpcDict_245_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_245_0_14, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCalPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_245_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_245_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCalPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_245_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCalPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_245_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_245_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_245_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_245_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_245_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCalPar", 928, G__RpcDict_245_0_26, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar), -1, 0, 1, 1, 1, 0, "u 'HRpcCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCalPar", 1054, G__RpcDict_245_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_245_0_28, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalPar), -1, 1, 1, 1, 1, 0, "u 'HRpcCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcParRootFileIo(void) {
   /* HRpcParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo));
   G__memfunc_setup("HRpcParRootFileIo",1644,G__RpcDict_246_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__RpcDict_246_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HRpcCalPar' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_246_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_246_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_246_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_246_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_246_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_246_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_246_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_246_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_246_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcParRootFileIo", 1644, G__RpcDict_246_0_16, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HRpcParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcParRootFileIo", 1770, G__RpcDict_246_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_246_0_18, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HRpcParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcParAsciiFileIo(void) {
   /* HRpcParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo));
   G__memfunc_setup("HRpcParAsciiFileIo",1713,G__RpcDict_256_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_256_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_256_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_256_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_256_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_256_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_256_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_256_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_256_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_256_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcParAsciiFileIo", 1713, G__RpcDict_256_0_16, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HRpcParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcParAsciiFileIo", 1839, G__RpcDict_256_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_256_0_18, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HRpcParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCal(void) {
   /* HRpcCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCal));
   G__memfunc_setup("HRpcCal",637,G__RpcDict_257_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTime",1229,G__RpcDict_257_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTime",1114,G__RpcDict_257_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTime2",1279,G__RpcDict_257_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTime2",1164,G__RpcDict_257_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightCharge",1416,G__RpcDict_257_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftCharge",1301,G__RpcDict_257_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightCharge2",1466,G__RpcDict_257_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftCharge2",1351,G__RpcDict_257_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLogBit",897,G__RpcDict_257_0_10, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RpcDict_257_0_11, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocationIndex",1649,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSector",944,G__RpcDict_257_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumn",942,G__RpcDict_257_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__RpcDict_257_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLeadings",1205,G__RpcDict_257_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrailings",1339,G__RpcDict_257_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastChargeFlag",1688,G__RpcDict_257_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataPairFlag",1472,G__RpcDict_257_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataVersion",1440,G__RpcDict_257_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDataType",1116,G__RpcDict_257_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTime",1241,G__RpcDict_257_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTime",1126,G__RpcDict_257_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTime2",1291,G__RpcDict_257_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightTime2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTime2",1176,G__RpcDict_257_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftTime2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightCharge",1428,G__RpcDict_257_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftCharge",1313,G__RpcDict_257_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightCharge2",1478,G__RpcDict_257_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - arightCharge2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftCharge2",1363,G__RpcDict_257_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aleftCharge2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLogBit",909,G__RpcDict_257_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - alogBit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RpcDict_257_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - aAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RpcDict_257_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_257_0_34, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_257_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_257_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_257_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_257_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_257_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_257_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_257_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_257_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCal", 637, G__RpcDict_257_0_46, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCal), -1, 0, 1, 1, 1, 0, "u 'HRpcCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCal", 763, G__RpcDict_257_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_257_0_48, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCal), -1, 1, 1, 1, 1, 0, "u 'HRpcCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCalSim(void) {
   /* HRpcCalSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim));
   G__memfunc_setup("HRpcCalSim",934,G__RpcDict_258_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_258_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefL",693,G__RpcDict_258_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefR",699,G__RpcDict_258_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefLDgtr",1094,G__RpcDict_258_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefLDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefRDgtr",1100,G__RpcDict_258_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefRDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackL",909,G__RpcDict_258_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackR",915,G__RpcDict_258_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackLDgtr",1310,G__RpcDict_258_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackLDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackRDgtr",1316,G__RpcDict_258_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackRDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLisAtBox",1106,G__RpcDict_258_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - aLisAtBox", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRisAtBox",1112,G__RpcDict_258_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - aRisAtBox", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracksL",1102,G__RpcDict_258_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - anTracksL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracksR",1108,G__RpcDict_258_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - anTracksR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackLArray",1420,G__RpcDict_258_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackLDgtrArray",1821,G__RpcDict_258_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackRArray",1426,G__RpcDict_258_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackRDgtrArray",1827,G__RpcDict_258_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLisAtBoxArray",1617,G__RpcDict_258_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - LisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRisAtBoxArray",1623,G__RpcDict_258_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - RisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefL",681,G__RpcDict_258_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefR",687,G__RpcDict_258_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefLDgtr",1082,G__RpcDict_258_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefRDgtr",1088,G__RpcDict_258_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackL",897,G__RpcDict_258_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackR",903,G__RpcDict_258_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackLDgtr",1298,G__RpcDict_258_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackRDgtr",1304,G__RpcDict_258_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLisAtBox",1094,G__RpcDict_258_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRisAtBox",1100,G__RpcDict_258_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracksL",1090,G__RpcDict_258_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracksR",1096,G__RpcDict_258_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackLArray",1408,G__RpcDict_258_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackLDgtrArray",1809,G__RpcDict_258_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackRArray",1414,G__RpcDict_258_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackRDgtrArray",1815,G__RpcDict_258_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLisAtBoxArray",1605,G__RpcDict_258_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - LisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRisAtBoxArray",1611,G__RpcDict_258_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - RisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_258_0_39, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCalSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_258_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_258_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCalSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_258_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCalSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_258_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_258_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_258_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_258_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_258_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCalSim", 934, G__RpcDict_258_0_51, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim), -1, 0, 1, 1, 1, 0, "u 'HRpcCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCalSim", 1060, G__RpcDict_258_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_258_0_53, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalSim), -1, 1, 1, 1, 1, 0, "u 'HRpcCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCalParCell(void) {
   /* HRpcCalParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell));
   G__memfunc_setup("HRpcCalParCell",1312,G__RpcDict_260_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTimeOffset",1844,G__RpcDict_260_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTimeOffset",1729,G__RpcDict_260_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTOTOffset",1692,G__RpcDict_260_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTOTOffset",1577,G__RpcDict_260_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC2Time",988,G__RpcDict_260_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOT2Charge",1203,G__RpcDict_260_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT0",452,G__RpcDict_260_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RpcDict_260_0_9, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - 'Float_t' 1 - rtimoff f - 'Float_t' 1 - ltimoff "
"f - 'Float_t' 1 - rtotoff f - 'Float_t' 1 - ltotoff "
"f - 'Float_t' 1 - t2t f - 'Float_t' 1 - t2c "
"f - 'Float_t' 1 - tzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_260_0_10, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - 'Float_t' 10 - rtimoff f - 'Float_t' 10 - ltimoff "
"f - 'Float_t' 10 - rtotoff f - 'Float_t' 10 - ltotoff "
"f - 'Float_t' 10 - t2t f - 'Float_t' 10 - t2c "
"f - 'Float_t' 10 - tzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_260_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HRpcCalParCell' - 1 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTimeOffset",1856,G__RpcDict_260_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - rtimoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTimeOffset",1741,G__RpcDict_260_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ltimoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightTOTOffset",1704,G__RpcDict_260_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - rtotoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftTOTOffset",1589,G__RpcDict_260_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ltotoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDC2Time",1000,G__RpcDict_260_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t2t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTOT2Charge",1215,G__RpcDict_260_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t2c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setT0",464,G__RpcDict_260_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - tzero", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_260_0_19, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_260_0_20, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCalParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_260_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_260_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCalParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_260_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCalParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_260_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_260_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_260_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_260_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_260_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCalParCell", 1312, G__RpcDict_260_0_32, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell), -1, 0, 1, 1, 1, 0, "u 'HRpcCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCalParCell", 1438, G__RpcDict_260_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_260_0_34, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell), -1, 1, 1, 1, 1, 0, "u 'HRpcCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCalParCol(void) {
   /* HRpcCalParCol */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol));
   G__memfunc_setup("HRpcCalParCol",1214,G__RpcDict_261_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_261_0_2, 117, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__RpcDict_261_0_3, 85, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCell), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_261_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_261_0_5, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_261_0_6, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCalParCol::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_261_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParCol::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_261_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCalParCol::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_261_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCalParCol::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_261_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_261_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParCol::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_261_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalParCol::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_261_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParCol::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_261_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalParCol::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCalParCol", 1214, G__RpcDict_261_0_18, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol), -1, 0, 1, 1, 1, 0, "u 'HRpcCalParCol' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCalParCol", 1340, G__RpcDict_261_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_261_0_20, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol), -1, 1, 1, 1, 1, 0, "u 'HRpcCalParCol' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCalParSec(void) {
   /* HRpcCalParSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec));
   G__memfunc_setup("HRpcCalParSec",1211,G__RpcDict_262_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_262_0_2, 117, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__RpcDict_262_0_3, 85, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParCol), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_262_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_262_0_5, 121, -1, -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_262_0_6, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCalParSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_262_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_262_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCalParSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_262_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCalParSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_262_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_262_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_262_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalParSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_262_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalParSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_262_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalParSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCalParSec", 1211, G__RpcDict_262_0_18, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec), -1, 0, 1, 1, 1, 0, "u 'HRpcCalParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCalParSec", 1337, G__RpcDict_262_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_262_0_20, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCalParSec), -1, 1, 1, 1, 1, 0, "u 'HRpcCalParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcChargeOffsetPar(void) {
   /* HRpcChargeOffsetPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar));
   G__memfunc_setup("HRpcChargeOffsetPar",1857,G__RpcDict_271_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcChargeOffsetPar\"' name C - 'Char_t' 10 '\"Correction of RPC charge offsets\"' title "
"C - 'Char_t' 10 '\"RpcChargeOffsetParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNewSet",895,G__RpcDict_271_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - pars i - 'Int_t' 0 - startRunID", "{fChargeCorrPar.Set((fCurrent+2)*6*64); fRunIDs.Set(fCurrent+2); fCurrent = +1;  for(Int_t i = 0; i < 64*6 ; i++) fChargeCorrPar.AddAt(pars[i], fCurrent*64*6); fRunIDs.AddAt(startRunID,fCurrent);fNRuns++;  }", (void*) NULL, 0);
   G__memfunc_setup("addFirstSet",1117,G__RpcDict_271_0_3, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - pars i - 'Int_t' 0 - startRunID", "{fChargeCorrPar.Set((fCurrent+2)*6*64); fRunIDs.Set(fCurrent+2); fCurrent = +1;  for(Int_t i = 0; i < 64*6 ; i++) fChargeCorrPar.AddAt(pars[i], fCurrent*64*6); fRunIDs.AddAt(startRunID,fCurrent);fNRuns++;  }", (void*) NULL, 0);
   G__memfunc_setup("addLastSet",1001,G__RpcDict_271_0_4, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - pars i - 'Int_t' 0 - startRunID "
"i - 'Int_t' 0 - endRunID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addLastRunId",1183,G__RpcDict_271_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - runId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar",611,G__RpcDict_271_0_6, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - TRB "
"i - 'Int_t' 0 - MBO i - 'Int_t' 0 - DBO", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar",611,G__RpcDict_271_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - regNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstRunID",1290,G__RpcDict_271_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastRunID",1174,G__RpcDict_271_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNextRunID",1185,G__RpcDict_271_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCurrentSet",1359,G__RpcDict_271_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSets",813,G__RpcDict_271_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPars",738,G__RpcDict_271_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nrun F - 'Float_t' 0 - pars "
"i - 'Int_t' 0 - startRunID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - inp I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlot",738,G__RpcDict_271_0_17, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - runId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_271_0_19, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcChargeOffsetPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_271_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcChargeOffsetPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_271_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcChargeOffsetPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_271_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcChargeOffsetPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_271_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_271_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcChargeOffsetPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_271_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcChargeOffsetPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_271_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcChargeOffsetPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_271_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcChargeOffsetPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcChargeOffsetPar", 1857, G__RpcDict_271_0_31, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar), -1, 0, 1, 1, 1, 0, "u 'HRpcChargeOffsetPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcChargeOffsetPar", 1983, G__RpcDict_271_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_271_0_33, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcChargeOffsetPar), -1, 1, 1, 1, 1, 0, "u 'HRpcChargeOffsetPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCalibrater(void) {
   /* HRpcCalibrater */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater));
   G__memfunc_setup("HRpcCalibrater",1382,G__RpcDict_272_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcCalibrater",1382,G__RpcDict_272_0_2, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCalibrater), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_272_0_6, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCalibrater::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_272_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalibrater::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_272_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCalibrater::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_272_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCalibrater::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_272_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_272_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalibrater::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_272_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalibrater::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_272_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCalibrater::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_272_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCalibrater::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCalibrater", 1508, G__RpcDict_272_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcHit(void) {
   /* HRpcHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHit));
   G__memfunc_setup("HRpcHit",658,G__RpcDict_276_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_276_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof",617,G__RpcDict_276_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__RpcDict_276_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXMod",696,G__RpcDict_276_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMod",697,G__RpcDict_276_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZMod",698,G__RpcDict_276_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXRMS",650,G__RpcDict_276_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYRMS",651,G__RpcDict_276_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZRMS",652,G__RpcDict_276_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOFRMS",795,G__RpcDict_276_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXSec",691,G__RpcDict_276_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYSec",692,G__RpcDict_276_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZSec",693,G__RpcDict_276_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__RpcDict_276_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__RpcDict_276_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInsideCellFlag",1686,G__RpcDict_276_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYZLab",858,G__RpcDict_276_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,G__RpcDict_276_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLocationIndex",1649,G__RpcDict_276_0_20, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RpcDict_276_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumn",942,G__RpcDict_276_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__RpcDict_276_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RpcDict_276_0_24, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RpcDict_276_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - add", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXSec",703,G__RpcDict_276_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - axsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYSec",704,G__RpcDict_276_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aysec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZSec",705,G__RpcDict_276_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - azsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__RpcDict_276_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - atheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__RpcDict_276_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aphi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInsideCellFlag",1698,G__RpcDict_276_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZLab",870,G__RpcDict_276_0_32, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLogBit",909,G__RpcDict_276_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - lBit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHit",625,G__RpcDict_276_0_34, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - atof f - 'Float_t' 0 - acharge "
"f - 'Float_t' 0 - axmod f - 'Float_t' 0 - aymod "
"f - 'Float_t' 0 - azmod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRMS",574,G__RpcDict_276_0_35, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - asigma_tof f - 'Float_t' 0 - asigma_x "
"f - 'Float_t' 0 - asigma_y f - 'Float_t' 0 - asigma_z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_276_0_36, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_276_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_276_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_276_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_276_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_276_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_276_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_276_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_276_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcHit", 658, G__RpcDict_276_0_48, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcHit), -1, 0, 1, 1, 1, 0, "u 'HRpcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcHit", 784, G__RpcDict_276_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_276_0_50, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcHit), -1, 1, 1, 1, 1, 0, "u 'HRpcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcHitSim(void) {
   /* HRpcHitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim));
   G__memfunc_setup("HRpcHitSim",955,G__RpcDict_277_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_277_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefL",693,G__RpcDict_277_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefR",699,G__RpcDict_277_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefLDgtr",1094,G__RpcDict_277_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefLDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefRDgtr",1100,G__RpcDict_277_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aRefRDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackL",909,G__RpcDict_277_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackR",915,G__RpcDict_277_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackLDgtr",1310,G__RpcDict_277_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackLDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackRDgtr",1316,G__RpcDict_277_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aTrackRDgtr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLisAtBox",1106,G__RpcDict_277_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - aLisAtBox", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRisAtBox",1112,G__RpcDict_277_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - aRisAtBox", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracksL",1102,G__RpcDict_277_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - anTracksL", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracksR",1108,G__RpcDict_277_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - anTracksR", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackLArray",1420,G__RpcDict_277_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackLDgtrArray",1821,G__RpcDict_277_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackRArray",1426,G__RpcDict_277_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackRDgtrArray",1827,G__RpcDict_277_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLisAtBoxArray",1617,G__RpcDict_277_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - LisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRisAtBoxArray",1623,G__RpcDict_277_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - RisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefL",681,G__RpcDict_277_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefR",687,G__RpcDict_277_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefLDgtr",1082,G__RpcDict_277_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefRDgtr",1088,G__RpcDict_277_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackL",897,G__RpcDict_277_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackR",903,G__RpcDict_277_0_26, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackLDgtr",1298,G__RpcDict_277_0_27, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackRDgtr",1304,G__RpcDict_277_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLisAtBox",1094,G__RpcDict_277_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRisAtBox",1100,G__RpcDict_277_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracksL",1090,G__RpcDict_277_0_31, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracksR",1096,G__RpcDict_277_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackLArray",1408,G__RpcDict_277_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackLDgtrArray",1809,G__RpcDict_277_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackLDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackRArray",1414,G__RpcDict_277_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackRDgtrArray",1815,G__RpcDict_277_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - trackRDgtrarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLisAtBoxArray",1605,G__RpcDict_277_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - LisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRisAtBoxArray",1611,G__RpcDict_277_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - RisAtBoxarray", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_277_0_39, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcHitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_277_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_277_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcHitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_277_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcHitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_277_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_277_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_277_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_277_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_277_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcHitSim", 955, G__RpcDict_277_0_51, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim), -1, 0, 1, 1, 1, 0, "u 'HRpcHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcHitSim", 1081, G__RpcDict_277_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_277_0_53, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcHitSim), -1, 1, 1, 1, 1, 0, "u 'HRpcHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcGeomPar(void) {
   /* HRpcGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar));
   G__memfunc_setup("HRpcGeomPar",1048,G__RpcDict_278_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcGeomPar\"' name C - 'Char_t' 10 '\"Rpc geometry parameters\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNum",907,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInComp",1494,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompNum",1023,G__RpcDict_278_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - col i - 'Int_t' 10 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCompNum",1023,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_278_0_9, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_278_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_278_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_278_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_278_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_278_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_278_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_278_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_278_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcGeomPar", 1048, G__RpcDict_278_0_21, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar), -1, 0, 1, 1, 1, 0, "u 'HRpcGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcGeomPar", 1174, G__RpcDict_278_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_278_0_23, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomPar), -1, 1, 1, 1, 1, 0, "u 'HRpcGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcGeomCellPar(void) {
   /* HRpcGeomCellPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar));
   G__memfunc_setup("HRpcGeomCellPar",1432,G__RpcDict_279_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcGeomCellPar\"' name C - 'Char_t' 10 '\"Geometry parameters of cells for the Rpc Detector\"' title "
"C - 'Char_t' 10 '\"RpcGeomCellProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__RpcDict_279_0_2, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__RpcDict_279_0_3, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell "
"f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__RpcDict_279_0_4, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__RpcDict_279_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell "
"f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLength",930,G__RpcDict_279_0_6, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLength",942,G__RpcDict_279_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell "
"f - 'Float_t' 0 - len", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth",832,G__RpcDict_279_0_8, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWidth",844,G__RpcDict_279_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - cell "
"f - 'Float_t' 0 - wid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDPlanes",999,G__RpcDict_279_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDPlanes",1011,G__RpcDict_279_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaZ",900,G__RpcDict_279_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeltaZ",912,G__RpcDict_279_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_279_0_17, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcGeomCellPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_279_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcGeomCellPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_279_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcGeomCellPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_279_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcGeomCellPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_279_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_279_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcGeomCellPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_279_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcGeomCellPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_279_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcGeomCellPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_279_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcGeomCellPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcGeomCellPar", 1432, G__RpcDict_279_0_29, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar), -1, 0, 1, 1, 1, 0, "u 'HRpcGeomCellPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcGeomCellPar", 1558, G__RpcDict_279_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_279_0_31, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcGeomCellPar), -1, 1, 1, 1, 1, 0, "u 'HRpcGeomCellPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCellStatusPar(void) {
   /* HRpcCellStatusPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar));
   G__memfunc_setup("HRpcCellStatusPar",1684,G__RpcDict_280_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcCellStatusPar\"' name C - 'Char_t' 10 '\"Cell status parameters for the Rpc Detector\"' title "
"C - 'Char_t' 10 '\"RpcCellStatusProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellStatus",1348,G__RpcDict_280_0_2, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellStatus",1360,G__RpcDict_280_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCellParams",1553,G__RpcDict_280_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_280_0_8, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCellStatusPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_280_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCellStatusPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_280_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCellStatusPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_280_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCellStatusPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_280_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_280_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCellStatusPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_280_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCellStatusPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_280_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCellStatusPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_280_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCellStatusPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCellStatusPar", 1684, G__RpcDict_280_0_20, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar), -1, 0, 1, 1, 1, 0, "u 'HRpcCellStatusPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCellStatusPar", 1810, G__RpcDict_280_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_280_0_22, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCellStatusPar), -1, 1, 1, 1, 1, 0, "u 'HRpcCellStatusPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcDigiPar(void) {
   /* HRpcDigiPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar));
   G__memfunc_setup("HRpcDigiPar",1037,G__RpcDict_281_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"RpcDigiPar\"' name C - - 10 '\"RPC digitization parameters\"' title "
"C - - 10 '\"RpcDigiProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVprop",855,G__RpcDict_281_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaX",905,G__RpcDict_281_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaT",901,G__RpcDict_281_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaT1",950,G__RpcDict_281_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaT2",951,G__RpcDict_281_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaT3",952,G__RpcDict_281_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getToff",719,G__RpcDict_281_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQmean",818,G__RpcDict_281_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQmean1",867,G__RpcDict_281_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQmean2",868,G__RpcDict_281_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQwid",725,G__RpcDict_281_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQwid1",774,G__RpcDict_281_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQwid2",775,G__RpcDict_281_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEff",593,G__RpcDict_281_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEff1",642,G__RpcDict_281_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEff2",643,G__RpcDict_281_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEff3",644,G__RpcDict_281_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEff4",645,G__RpcDict_281_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEff5",646,G__RpcDict_281_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime2Tdc",1052,G__RpcDict_281_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPedestal",1138,G__RpcDict_281_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQtoW0",763,G__RpcDict_281_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQtoW1",764,G__RpcDict_281_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQtoW2",765,G__RpcDict_281_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQtoW3",766,G__RpcDict_281_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGap",600,G__RpcDict_281_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMode",709,G__RpcDict_281_0_28, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_281_0_29, 121, -1, -1, 0, 27, 1, 1, 0, 
"f - 'Float_t' 0 - aVprop f - 'Float_t' 0 - aSx "
"f - 'Float_t' 0 - aSt0 f - 'Float_t' 0 - aSt1 "
"f - 'Float_t' 0 - aSt2 f - 'Float_t' 0 - aSt3 "
"f - 'Float_t' 0 - aToff f - 'Float_t' 0 - aQmean0 "
"f - 'Float_t' 0 - aQmean1 f - 'Float_t' 0 - aQmean2 "
"f - 'Float_t' 0 - aQwid0 f - 'Float_t' 0 - aQwid1 "
"f - 'Float_t' 0 - aQwid2 f - 'Float_t' 0 - aEff0 "
"f - 'Float_t' 0 - aEff1 f - 'Float_t' 0 - aEff2 "
"f - 'Float_t' 0 - aEff3 f - 'Float_t' 0 - aEff4 "
"f - 'Float_t' 0 - aEff5 f - 'Float_t' 0 - aT2T "
"f - 'Float_t' 0 - aPes f - 'Float_t' 0 - a0 "
"f - 'Float_t' 0 - a1 f - 'Float_t' 0 - a2 "
"f - 'Float_t' 0 - a3 f - 'Float_t' 0 - gap "
"i - 'Int_t' 0 - aMode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_281_0_33, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcDigiPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_281_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDigiPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_281_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcDigiPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_281_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcDigiPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_281_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_281_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDigiPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_281_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcDigiPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_281_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDigiPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_281_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcDigiPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcDigiPar", 1037, G__RpcDict_281_0_45, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar), -1, 0, 1, 1, 1, 0, "u 'HRpcDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcDigiPar", 1163, G__RpcDict_281_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_281_0_47, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcDigiPar), -1, 1, 1, 1, 1, 0, "u 'HRpcDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcWtoQPar(void) {
   /* HRpcWtoQPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar));
   G__memfunc_setup("HRpcWtoQPar",1051,G__RpcDict_282_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"RpcWtoQPar\"' name C - - 10 '\"Width to Charge conversion parameters for the RPC detector\"' title "
"C - - 10 '\"RpcWtoQProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar0",659,G__RpcDict_282_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar1",660,G__RpcDict_282_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar2",661,G__RpcDict_282_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar3",662,G__RpcDict_282_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar4",663,G__RpcDict_282_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar5",664,G__RpcDict_282_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdc2Time",1052,G__RpcDict_282_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_282_0_9, 121, -1, -1, 0, 7, 1, 1, 0, 
"f - 'Float_t' 0 - P0 f - 'Float_t' 0 - P1 "
"f - 'Float_t' 0 - P2 f - 'Float_t' 0 - P3 "
"f - 'Float_t' 0 - P4 f - 'Float_t' 0 - P5 "
"f - 'Float_t' 0 - t2t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_282_0_13, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcWtoQPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_282_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcWtoQPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_282_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcWtoQPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_282_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcWtoQPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_282_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_282_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcWtoQPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_282_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcWtoQPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_282_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcWtoQPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_282_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcWtoQPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcWtoQPar", 1051, G__RpcDict_282_0_25, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar), -1, 0, 1, 1, 1, 0, "u 'HRpcWtoQPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcWtoQPar", 1177, G__RpcDict_282_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_282_0_27, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcWtoQPar), -1, 1, 1, 1, 1, 0, "u 'HRpcWtoQPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcHitFPar(void) {
   /* HRpcHitFPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar));
   G__memfunc_setup("HRpcHitFPar",1019,G__RpcDict_283_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcHitFPar\"' name C - 'Char_t' 10 '\"Hit Finder parameters for the Rpc Detector\"' title "
"C - 'Char_t' 10 '\"RpcHitFProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPol5Pars",1078,G__RpcDict_283_0_2, 70, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPol5Pars",1090,G__RpcDict_283_0_3, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - index "
"f - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPol1Pars",1074,G__RpcDict_283_0_4, 70, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPol1Pars",1086,G__RpcDict_283_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - index "
"f - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQcut",733,G__RpcDict_283_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQcut",745,G__RpcDict_283_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - qc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_283_0_11, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcHitFPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_283_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitFPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_283_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcHitFPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_283_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcHitFPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_283_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_283_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitFPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_283_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHitFPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_283_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitFPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_283_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHitFPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcHitFPar", 1019, G__RpcDict_283_0_23, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar), -1, 0, 1, 1, 1, 0, "u 'HRpcHitFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcHitFPar", 1145, G__RpcDict_283_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_283_0_25, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcHitFPar), -1, 1, 1, 1, 1, 0, "u 'HRpcHitFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcTimePosPar(void) {
   /* HRpcTimePosPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar));
   G__memfunc_setup("HRpcTimePosPar",1361,G__RpcDict_285_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcTimePosPar\"' name C - 'Char_t' 10 '\"Time-position correction parameters for the Rpc Detector\"' title "
"C - 'Char_t' 10 '\"RpcTimePosParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar",611,G__RpcDict_285_0_2, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 8, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - npar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPars",726,G__RpcDict_285_0_3, 70, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPar",623,G__RpcDict_285_0_4, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - npar "
"f - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPars",738,G__RpcDict_285_0_5, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell F - 'Float_t' 0 - pars", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_285_0_9, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcTimePosPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_285_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTimePosPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_285_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcTimePosPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_285_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcTimePosPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_285_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_285_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTimePosPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_285_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTimePosPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_285_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTimePosPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_285_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTimePosPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcTimePosPar", 1361, G__RpcDict_285_0_21, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar), -1, 0, 1, 1, 1, 0, "u 'HRpcTimePosPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcTimePosPar", 1487, G__RpcDict_285_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_285_0_23, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTimePosPar), -1, 1, 1, 1, 1, 0, "u 'HRpcTimePosPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcSlewingPar(void) {
   /* HRpcSlewingPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar));
   G__memfunc_setup("HRpcSlewingPar",1385,G__RpcDict_286_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcSlewingPar\"' name C - 'Char_t' 10 '\"Slewing correciton parameters for the Rpc Detector\"' title "
"C - 'Char_t' 10 '\"RpcSlewingParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExpo1",781,G__RpcDict_286_0_2, 70, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExpo2",782,G__RpcDict_286_0_3, 70, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQcut",733,G__RpcDict_286_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExpo1par",1116,G__RpcDict_286_0_5, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - index "
"f - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExpo2par",1117,G__RpcDict_286_0_6, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - index "
"f - 'Float_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQcut",745,G__RpcDict_286_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_286_0_11, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcSlewingPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_286_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcSlewingPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_286_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcSlewingPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_286_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcSlewingPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_286_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_286_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcSlewingPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_286_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcSlewingPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_286_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcSlewingPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_286_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcSlewingPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcSlewingPar", 1385, G__RpcDict_286_0_23, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar), -1, 0, 1, 1, 1, 0, "u 'HRpcSlewingPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcSlewingPar", 1511, G__RpcDict_286_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_286_0_25, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcSlewingPar), -1, 1, 1, 1, 1, 0, "u 'HRpcSlewingPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcHitF(void) {
   /* HRpcHitF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF));
   G__memfunc_setup("HRpcHitF",728,G__RpcDict_287_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcHitF",728,G__RpcDict_287_0_2, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcHitF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,G__RpcDict_287_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_287_0_7, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcHitF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_287_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_287_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcHitF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_287_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcHitF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_287_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_287_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_287_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHitF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_287_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcHitF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_287_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcHitF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRpcHitF", 854, G__RpcDict_287_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcCluster(void) {
   /* HRpcCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster));
   G__memfunc_setup("HRpcCluster",1103,G__RpcDict_288_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTof",617,G__RpcDict_288_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__RpcDict_288_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXSec",691,G__RpcDict_288_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYSec",692,G__RpcDict_288_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZSec",693,G__RpcDict_288_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXMod",696,G__RpcDict_288_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMod",697,G__RpcDict_288_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZMod",698,G__RpcDict_288_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__RpcDict_288_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__RpcDict_288_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXRMS",650,G__RpcDict_288_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYRMS",651,G__RpcDict_288_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZRMS",652,G__RpcDict_288_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTOFRMS",795,G__RpcDict_288_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RpcDict_288_0_16, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__RpcDict_288_0_17, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterType",1476,G__RpcDict_288_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInsideCellFlag",1686,G__RpcDict_288_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector1",993,G__RpcDict_288_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumn1",991,G__RpcDict_288_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell1",753,G__RpcDict_288_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector2",994,G__RpcDict_288_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumn2",992,G__RpcDict_288_0_24, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell2",754,G__RpcDict_288_0_25, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYZLab",858,G__RpcDict_288_0_26, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterType",1488,G__RpcDict_288_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - atype", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInsideCellFlag",1698,G__RpcDict_288_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDetID1",807,G__RpcDict_288_0_29, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDetID1",807,G__RpcDict_288_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - aDetID1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDetID2",808,G__RpcDict_288_0_31, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDetID2",808,G__RpcDict_288_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - aDetID2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCluster",1070,G__RpcDict_288_0_33, 121, -1, -1, 0, 5, 1, 1, 0, 
"f - 'Float_t' 0 - atof f - 'Float_t' 0 - acharge "
"f - 'Float_t' 0 - axmod f - 'Float_t' 0 - aymod "
"f - 'Float_t' 0 - azmod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRSEC",633,G__RpcDict_288_0_34, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - axsec f - 'Float_t' 0 - aysec "
"f - 'Float_t' 0 - azsec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRMS",574,G__RpcDict_288_0_35, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - asigma_tof f - 'Float_t' 0 - asigma_x "
"f - 'Float_t' 0 - asigma_y f - 'Float_t' 0 - asigma_z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RpcDict_288_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"s - 'Short_t' 0 - asector s - 'Short_t' 0 - aindex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__RpcDict_288_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - atheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__RpcDict_288_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - aphi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZLab",870,G__RpcDict_288_0_39, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_288_0_40, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_288_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_288_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_288_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_288_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_288_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_288_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_288_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_288_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcCluster", 1103, G__RpcDict_288_0_52, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster), -1, 0, 1, 1, 1, 0, "u 'HRpcCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcCluster", 1229, G__RpcDict_288_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_288_0_54, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcCluster), -1, 1, 1, 1, 1, 0, "u 'HRpcCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcClusterSim(void) {
   /* HRpcClusterSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim));
   G__memfunc_setup("HRpcClusterSim",1400,G__RpcDict_289_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_289_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetTrackList",1460,G__RpcDict_289_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetRefList",1244,G__RpcDict_289_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetIsAtBoxList",1625,G__RpcDict_289_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackList",1245,G__RpcDict_289_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackList",1245,G__RpcDict_289_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefList",1029,G__RpcDict_289_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefList",1029,G__RpcDict_289_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsAtBoxList",1410,G__RpcDict_289_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i g - 'Bool_t' 0 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsAtBoxList",1410,G__RpcDict_289_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howManyTracks",1355,G__RpcDict_289_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howManyTracksAtCells",2035,G__RpcDict_289_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracksAtBox",1504,G__RpcDict_289_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aNTracksAtBox", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracksAtCells",1706,G__RpcDict_289_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - aNTracksAtCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__RpcDict_289_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - atrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsAtBox",998,G__RpcDict_289_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - is", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__RpcDict_289_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsAtBox",986,G__RpcDict_289_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackList",1233,G__RpcDict_289_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefList",1017,G__RpcDict_289_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsAtBoxList",1398,G__RpcDict_289_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "G - 'Bool_t' 0 - array", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTrack",721,G__RpcDict_289_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - track", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRef",505,G__RpcDict_289_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ref", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_289_0_25, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcClusterSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_289_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusterSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_289_0_27, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcClusterSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_289_0_28, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcClusterSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_289_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_289_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusterSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_289_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcClusterSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_289_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusterSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_289_0_36, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcClusterSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcClusterSim", 1400, G__RpcDict_289_0_37, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim), -1, 0, 1, 1, 1, 0, "u 'HRpcClusterSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcClusterSim", 1526, G__RpcDict_289_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_289_0_39, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterSim), -1, 1, 1, 1, 1, 0, "u 'HRpcClusterSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcClusFPar(void) {
   /* HRpcClusFPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar));
   G__memfunc_setup("HRpcClusFPar",1133,G__RpcDict_290_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"RpcClusFPar\"' name C - - 10 '\"Cluster finder parameters for the Rpc Detector\"' title "
"C - - 10 '\"RpcClusFProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNsigmasX",1130,G__RpcDict_290_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNsigmasT",1126,G__RpcDict_290_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_290_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - aNsigX f - 'Float_t' 0 - aNsigT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_290_0_8, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcClusFPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_290_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusFPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_290_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcClusFPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_290_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcClusFPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_290_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_290_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusFPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_290_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcClusFPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_290_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusFPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_290_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcClusFPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcClusFPar", 1133, G__RpcDict_290_0_20, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar), -1, 0, 1, 1, 1, 0, "u 'HRpcClusFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcClusFPar", 1259, G__RpcDict_290_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_290_0_22, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcClusFPar), -1, 1, 1, 1, 1, 0, "u 'HRpcClusFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcClusterF(void) {
   /* HRpcClusterF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF));
   G__memfunc_setup("howManyTracks",1355,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'HRpcClusterSim' - 0 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("howManyTracksAtCells",2035,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 0, "U 'HRpcClusterSim' - 0 - clus", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcClusterF",1173,G__RpcDict_291_0_3, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcClusterF",1173,G__RpcDict_291_0_4, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcClusterF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDoSingleClusters",1974,G__RpcDict_291_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' single", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,G__RpcDict_291_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_291_0_10, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcClusterF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_291_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusterF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_291_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcClusterF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_291_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcClusterF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_291_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_291_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusterF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_291_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcClusterF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_291_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcClusterF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_291_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcClusterF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRpcClusterF", 1299, G__RpcDict_291_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcTrbUnpacker(void) {
   /* HRpcTrbUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker));
   G__memfunc_setup("HRpcTrbUnpacker",1486,G__RpcDict_335_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDebugRpcFlag",1490,G__RpcDict_335_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("disableTimeRef",1408,G__RpcDict_335_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "Switch off Reference Time substraction (debugging)", (void*) NULL, 0);
   G__memfunc_setup("enableControlHistograms",2409,G__RpcDict_335_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", "Switch on control histos", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_335_0_8, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcTrbUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_335_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrbUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_335_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcTrbUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_335_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcTrbUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_335_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_335_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrbUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_335_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrbUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_335_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrbUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_335_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrbUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcTrbUnpacker", 1486, G__RpcDict_335_0_20, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker), -1, 0, 1, 1, 1, 0, "u 'HRpcTrbUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcTrbUnpacker", 1612, G__RpcDict_335_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_335_0_22, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrbUnpacker), -1, 1, 1, 1, 1, 0, "u 'HRpcTrbUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcTrb2Lookup(void) {
   /* HRpcTrb2Lookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup));
   G__memfunc_setup("HRpcTrb2Lookup",1345,G__RpcDict_339_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcTrb2Lookup\"' name C - 'Char_t' 10 '\"Lookup table for the TRB2 unpacker of the RPC detector\"' title "
"C - 'Char_t' 10 '\"RpcTrb2LookupProduction\"' context i - 'Int_t' 0 'Trbnet::kRpcMinTrbnetAddress' minTrbnetAddress "
"i - 'Int_t' 0 'Trbnet::kRpcMaxTrbnetAddress' maxTrbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__RpcDict_339_0_2, 85, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_339_0_3, 85, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_339_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__RpcDict_339_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__RpcDict_339_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_339_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - c - 'Char_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__RpcDict_339_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__RpcDict_339_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__RpcDict_339_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_339_0_14, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcTrb2Lookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_339_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2Lookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_339_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcTrb2Lookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_339_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcTrb2Lookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_339_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_339_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2Lookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_339_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2Lookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_339_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2Lookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_339_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2Lookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcTrb2Lookup", 1345, G__RpcDict_339_0_26, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup), -1, 0, 1, 1, 1, 0, "u 'HRpcTrb2Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcTrb2Lookup", 1471, G__RpcDict_339_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_339_0_28, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Lookup), -1, 1, 1, 1, 1, 0, "u 'HRpcTrb2Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcTrb2Unpacker(void) {
   /* HRpcTrb2Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker));
   G__memfunc_setup("HRpcTrb2Unpacker",1536,G__RpcDict_340_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("disableTimeRef",1408,G__RpcDict_340_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", "Switch off Reference Time substraction (debugging)", (void*) NULL, 0);
   G__memfunc_setup("storeSpareChannelsData",2254,G__RpcDict_340_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", "Switch on storing spare channels data", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_340_0_7, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcTrb2Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_340_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_340_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcTrb2Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_340_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcTrb2Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_340_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_340_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_340_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_340_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_340_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcTrb2Unpacker", 1536, G__RpcDict_340_0_19, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker), -1, 0, 1, 1, 1, 0, "u 'HRpcTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcTrb2Unpacker", 1662, G__RpcDict_340_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_340_0_21, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2Unpacker), -1, 1, 1, 1, 1, 0, "u 'HRpcTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcTrb2LookupChan(void) {
   /* HRpcTrb2LookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan));
   G__memfunc_setup("HRpcTrb2LookupChan",1723,G__RpcDict_343_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RpcDict_343_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumn",942,G__RpcDict_343_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__RpcDict_343_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSide",709,G__RpcDict_343_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFeAddress",1201,G__RpcDict_343_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RpcDict_343_0_7, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 1 - se i - 'Int_t' 1 - co "
"i - 'Int_t' 1 - ce c - 'Char_t' 1 - si "
"i - 'Int_t' 1 - fa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_343_0_8, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - se i - 'Int_t' 0 - co "
"i - 'Int_t' 0 - ce c - 'Char_t' 0 - si "
"i - 'Int_t' 0 - fa", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_343_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HRpcTrb2LookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__RpcDict_343_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setColumn",954,G__RpcDict_343_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__RpcDict_343_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSide",721,G__RpcDict_343_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFeAddress",1213,G__RpcDict_343_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_343_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_343_0_16, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcTrb2LookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_343_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2LookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_343_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcTrb2LookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_343_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcTrb2LookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_343_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_343_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2LookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_343_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2LookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_343_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2LookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_343_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2LookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcTrb2LookupChan", 1723, G__RpcDict_343_0_28, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan), -1, 0, 1, 1, 1, 0, "u 'HRpcTrb2LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcTrb2LookupChan", 1849, G__RpcDict_343_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_343_0_30, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan), -1, 1, 1, 1, 1, 0, "u 'HRpcTrb2LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcTrb2LookupBoard(void) {
   /* HRpcTrb2LookupBoard */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard));
   G__memfunc_setup("HRpcTrb2LookupBoard",1833,G__RpcDict_344_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__RpcDict_344_0_2, 85, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_344_0_3, 117, G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_344_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_344_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_344_0_6, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcTrb2LookupBoard::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_344_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2LookupBoard::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_344_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcTrb2LookupBoard::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_344_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcTrb2LookupBoard::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_344_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_344_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2LookupBoard::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_344_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2LookupBoard::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_344_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTrb2LookupBoard::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_344_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTrb2LookupBoard::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcTrb2LookupBoard", 1833, G__RpcDict_344_0_18, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "u 'HRpcTrb2LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcTrb2LookupBoard", 1959, G__RpcDict_344_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_344_0_20, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcTrb2LookupBoard), -1, 1, 1, 1, 1, 0, "u 'HRpcTrb2LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcLookupGCell(void) {
   /* HRpcLookupGCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell));
   G__memfunc_setup("HRpcLookupGCell",1454,G__RpcDict_345_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__RpcDict_345_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '-1' lFee i - 'Int_t' 0 '-1' rFee", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftMBOnum",1273,G__RpcDict_345_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftDBOnum",1264,G__RpcDict_345_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftTRBnum",1283,G__RpcDict_345_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightMBOnum",1388,G__RpcDict_345_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightDBOnum",1379,G__RpcDict_345_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightTRBnum",1398,G__RpcDict_345_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrbMboDboLeftNum",1878,G__RpcDict_345_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - trbnum i - 'Int_t' 1 - mbonum "
"i - 'Int_t' 1 - dbonum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrbMboDboRightNum",1993,G__RpcDict_345_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 1 - trbnum i - 'Int_t' 1 - mbonum "
"i - 'Int_t' 1 - dbonum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftFEEAddress",1633,G__RpcDict_345_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRightFEEAddress",1748,G__RpcDict_345_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLeftRightRegAdd",1776,G__RpcDict_345_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 1 - leftRegNum "
"i - 'Int_t' 1 - rightRegNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLeftFEEAddress",1645,G__RpcDict_345_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' ladd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRightFEEAddress",1760,G__RpcDict_345_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' radd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RpcDict_345_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_345_0_17, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcLookupGCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_345_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_345_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcLookupGCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_345_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcLookupGCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_345_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_345_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_345_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_345_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_345_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcLookupGCell", 1454, G__RpcDict_345_0_29, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell), -1, 0, 1, 1, 1, 0, "u 'HRpcLookupGCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcLookupGCell", 1580, G__RpcDict_345_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_345_0_31, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell), -1, 1, 1, 1, 1, 0, "u 'HRpcLookupGCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcLookupGCol(void) {
   /* HRpcLookupGCol */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol));
   G__memfunc_setup("HRpcLookupGCol",1356,G__RpcDict_346_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_346_0_2, 117, G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_346_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_346_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcLookupGCol::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_346_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGCol::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_346_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcLookupGCol::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_346_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcLookupGCol::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_346_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_346_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGCol::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_346_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGCol::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_346_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGCol::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_346_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGCol::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcLookupGCol", 1356, G__RpcDict_346_0_16, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol), -1, 0, 1, 1, 1, 0, "u 'HRpcLookupGCol' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcLookupGCol", 1482, G__RpcDict_346_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_346_0_18, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol), -1, 1, 1, 1, 1, 0, "u 'HRpcLookupGCol' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcLookupGSec(void) {
   /* HRpcLookupGSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec));
   G__memfunc_setup("HRpcLookupGSec",1353,G__RpcDict_347_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_347_0_2, 117, G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGCol), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_347_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_347_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcLookupGSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_347_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_347_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcLookupGSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_347_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcLookupGSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_347_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_347_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_347_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_347_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_347_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcLookupGSec", 1353, G__RpcDict_347_0_16, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec), -1, 0, 1, 1, 1, 0, "u 'HRpcLookupGSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcLookupGSec", 1479, G__RpcDict_347_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_347_0_18, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec), -1, 1, 1, 1, 1, 0, "u 'HRpcLookupGSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcLookupGeom(void) {
   /* HRpcLookupGeom */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom));
   G__memfunc_setup("HRpcLookupGeom",1391,G__RpcDict_348_0_1, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 '\"RpcLookupGeom\"' name C - 'Char_t' 10 '\"Rpc lookup table from geom to channel\"' title "
"C - 'Char_t' 10 '\"\"' context i - 'Int_t' 0 '6' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__RpcDict_348_0_2, 117, G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - input", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("writeline",979,G__RpcDict_348_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__RpcDict_348_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__RpcDict_348_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RpcDict_348_0_9, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcLookupGeom::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_348_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGeom::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_348_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcLookupGeom::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_348_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcLookupGeom::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_348_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_348_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGeom::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_348_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGeom::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_348_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcLookupGeom::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_348_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcLookupGeom::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRpcLookupGeom", 1391, G__RpcDict_348_0_21, (int) ('i'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom), -1, 0, 1, 1, 1, 0, "u 'HRpcLookupGeom' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRpcLookupGeom", 1517, G__RpcDict_348_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RpcDict_348_0_23, (int) ('u'), G__get_linked_tagnum(&G__RpcDictLN_HRpcLookupGeom), -1, 1, 1, 1, 1, 0, "u 'HRpcLookupGeom' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcTaskSet(void) {
   /* HRpcTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet));
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - s i - 'Int_t' 1 - doCluster", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcTaskSet",1068,G__RpcDict_353_0_2, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet), -1, 0, 0, 1, 1, 0, "", ": HTaskSet() {}   //HRpcTaskSet(void);", (void*) NULL, 0);
   G__memfunc_setup("HRpcTaskSet",1068,G__RpcDict_353_0_3, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", ": HTaskSet(name,title) {} //HRpcTaskSet(Text_t name[],Text_t title[]);", (void*) NULL, 0);
   G__memfunc_setup("make",414,G__RpcDict_353_0_4, 85, G__get_linked_tagnum(&G__RpcDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RpcDict_353_0_5, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_353_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_353_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_353_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_353_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_353_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_353_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_353_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_353_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRpcTaskSet", 1194, G__RpcDict_353_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRpcDigitizer(void) {
   /* HRpcDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer));
   G__memfunc_setup("initVars",848,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearObjects",1233,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMother",1040,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - Ref_initial", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc_eff_hit",1223,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("digitize_one_hit",1694,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HRpcDigitizer::gaptrack' 'HRpcDigitizer::gaptrack' 0 - left U 'HRpcDigitizer::gaptrack' 'HRpcDigitizer::gaptrack' 0 - right "
"i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcDigitizer",1304,G__RpcDict_356_0_7, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRpcDigitizer",1304,G__RpcDict_356_0_8, 105, G__get_linked_tagnum(&G__RpcDictLN_HRpcDigitizer), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getDistanceToXedge",1819,G__RpcDict_356_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "U 'HGeantRpc' - 0 - gea", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCropDistance",1547,G__RpcDict_356_0_13, 121, -1, -1, 0, 1, 3, 1, 0, "f - 'Float_t' 0 - val", (char*)NULL, (void*) G__func2void( (void (*)(Float_t))(&HRpcDigitizer::setCropDistance) ), 0);
   G__memfunc_setup("Class",502,G__RpcDict_356_0_14, 85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRpcDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RpcDict_356_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RpcDict_356_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRpcDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RpcDict_356_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRpcDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RpcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RpcDict_356_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RpcDict_356_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RpcDict_356_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RpcDict_356_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRpcDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RpcDict_356_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRpcDigitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRpcDigitizer", 1430, G__RpcDict_356_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRpcDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&catRpcRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRpcRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRpcCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRpcCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRpcHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRpcHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRpcCluster),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRpcCluster=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRpcDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRpcDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RpcDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HLocatedDataObject = { "HLocatedDataObject" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcRaw = { "HRpcRaw" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__RpcDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcContFact = { "HRpcContFact" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDetector = { "HRpcDetector" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCalPar = { "HRpcCalPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcParRootFileIo = { "HRpcParRootFileIo" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcParAsciiFileIo = { "HRpcParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCal = { "HRpcCal" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCalSim = { "HRpcCalSim" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCalParCell = { "HRpcCalParCell" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCalParCol = { "HRpcCalParCol" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCalParSec = { "HRpcCalParSec" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcChargeOffsetPar = { "HRpcChargeOffsetPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCalibrater = { "HRpcCalibrater" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcHit = { "HRpcHit" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcHitSim = { "HRpcHitSim" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcGeomPar = { "HRpcGeomPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcGeomCellPar = { "HRpcGeomCellPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCellStatusPar = { "HRpcCellStatusPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDigiPar = { "HRpcDigiPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcWtoQPar = { "HRpcWtoQPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcHitFPar = { "HRpcHitFPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcTimePosPar = { "HRpcTimePosPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcSlewingPar = { "HRpcSlewingPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcHitF = { "HRpcHitF" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcCluster = { "HRpcCluster" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcClusterSim = { "HRpcClusterSim" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcClusFPar = { "HRpcClusFPar" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcClusterF = { "HRpcClusterF" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HTrbBaseUnpacker = { "HTrbBaseUnpacker" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcTrbUnpacker = { "HRpcTrbUnpacker" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HTrb2Unpacker = { "HTrb2Unpacker" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcTrb2Lookup = { "HRpcTrb2Lookup" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcTrb2Unpacker = { "HRpcTrb2Unpacker" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcTrb2LookupChan = { "HRpcTrb2LookupChan" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcTrb2LookupBoard = { "HRpcTrb2LookupBoard" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcLookupGCell = { "HRpcLookupGCell" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcLookupGCol = { "HRpcLookupGCol" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcLookupGSec = { "HRpcLookupGSec" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcLookupGeom = { "HRpcLookupGeom" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcTaskSet = { "HRpcTaskSet" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HGeantRpc = { "HGeantRpc" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDigitizer = { "HRpcDigitizer" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDigitizercLcLgaptrack = { "HRpcDigitizer::gaptrack" , 115 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDigitizercLcLrpcdat = { "HRpcDigitizer::rpcdat" , 115 , -1 };
G__linked_taginfo G__RpcDictLN_vectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgR = { "vector<HRpcDigitizer::gaptrack*,allocator<HRpcDigitizer::gaptrack*> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRpcDigitizer::gaptrack*,allocator<HRpcDigitizer::gaptrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDigitizercLcLcelltrack = { "HRpcDigitizer::celltrack" , 115 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDigitizercLcLcelldat = { "HRpcDigitizer::celldat" , 115 , -1 };
G__linked_taginfo G__RpcDictLN_vectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgR = { "vector<HRpcDigitizer::celltrack*,allocator<HRpcDigitizer::celltrack*> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRpcDigitizer::celltrack*,allocator<HRpcDigitizer::celltrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_HRpcDigitizercLcLefhits = { "HRpcDigitizer::efhits" , 115 , -1 };
G__linked_taginfo G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR = { "vector<HRpcDigitizer::celldat*,allocator<HRpcDigitizer::celldat*> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRpcDigitizer::celldat*,allocator<HRpcDigitizer::celldat*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR = { "vector<HRpcDigitizer::rpcdat*,allocator<HRpcDigitizer::rpcdat*> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRpcDigitizer::rpcdat*,allocator<HRpcDigitizer::rpcdat*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR = { "vector<HRpcDigitizer::efhits,allocator<HRpcDigitizer::efhits> >" , 99 , -1 };
G__linked_taginfo G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRpcDigitizer::efhits,allocator<HRpcDigitizer::efhits> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRpcDict() {
  G__RpcDictLN_TClass.tagnum = -1 ;
  G__RpcDictLN_TBuffer.tagnum = -1 ;
  G__RpcDictLN_TMemberInspector.tagnum = -1 ;
  G__RpcDictLN_TObject.tagnum = -1 ;
  G__RpcDictLN_TNamed.tagnum = -1 ;
  G__RpcDictLN_TString.tagnum = -1 ;
  G__RpcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__RpcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RpcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RpcDictLN_TObjArray.tagnum = -1 ;
  G__RpcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__RpcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RpcDictLN_TArrayI.tagnum = -1 ;
  G__RpcDictLN_HLocation.tagnum = -1 ;
  G__RpcDictLN_HLocatedDataObject.tagnum = -1 ;
  G__RpcDictLN_HRpcRaw.tagnum = -1 ;
  G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__RpcDictLN_HParSet.tagnum = -1 ;
  G__RpcDictLN_HContainer.tagnum = -1 ;
  G__RpcDictLN_HContFact.tagnum = -1 ;
  G__RpcDictLN_HRpcContFact.tagnum = -1 ;
  G__RpcDictLN_HTask.tagnum = -1 ;
  G__RpcDictLN_HCategory.tagnum = -1 ;
  G__RpcDictLN_HParIo.tagnum = -1 ;
  G__RpcDictLN_HDetector.tagnum = -1 ;
  G__RpcDictLN_HRpcDetector.tagnum = -1 ;
  G__RpcDictLN_HDetParIo.tagnum = -1 ;
  G__RpcDictLN_HParRootFile.tagnum = -1 ;
  G__RpcDictLN_HDetGeomPar.tagnum = -1 ;
  G__RpcDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__RpcDictLN_HRpcCalPar.tagnum = -1 ;
  G__RpcDictLN_HRpcParRootFileIo.tagnum = -1 ;
  G__RpcDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__RpcDictLN_HRpcParAsciiFileIo.tagnum = -1 ;
  G__RpcDictLN_HRpcCal.tagnum = -1 ;
  G__RpcDictLN_HRpcCalSim.tagnum = -1 ;
  G__RpcDictLN_HRpcCalParCell.tagnum = -1 ;
  G__RpcDictLN_HRpcCalParCol.tagnum = -1 ;
  G__RpcDictLN_HRpcCalParSec.tagnum = -1 ;
  G__RpcDictLN_HReconstructor.tagnum = -1 ;
  G__RpcDictLN_HIterator.tagnum = -1 ;
  G__RpcDictLN_HRpcChargeOffsetPar.tagnum = -1 ;
  G__RpcDictLN_HRpcCalibrater.tagnum = -1 ;
  G__RpcDictLN_TArrayF.tagnum = -1 ;
  G__RpcDictLN_HParamList.tagnum = -1 ;
  G__RpcDictLN_HParCond.tagnum = -1 ;
  G__RpcDictLN_HRpcHit.tagnum = -1 ;
  G__RpcDictLN_HRpcHitSim.tagnum = -1 ;
  G__RpcDictLN_HRpcGeomPar.tagnum = -1 ;
  G__RpcDictLN_HRpcGeomCellPar.tagnum = -1 ;
  G__RpcDictLN_HRpcCellStatusPar.tagnum = -1 ;
  G__RpcDictLN_HRpcDigiPar.tagnum = -1 ;
  G__RpcDictLN_HRpcWtoQPar.tagnum = -1 ;
  G__RpcDictLN_HRpcHitFPar.tagnum = -1 ;
  G__RpcDictLN_HSpecGeomPar.tagnum = -1 ;
  G__RpcDictLN_HRpcTimePosPar.tagnum = -1 ;
  G__RpcDictLN_HRpcSlewingPar.tagnum = -1 ;
  G__RpcDictLN_HRpcHitF.tagnum = -1 ;
  G__RpcDictLN_HRpcCluster.tagnum = -1 ;
  G__RpcDictLN_HRpcClusterSim.tagnum = -1 ;
  G__RpcDictLN_HRpcClusFPar.tagnum = -1 ;
  G__RpcDictLN_HRpcClusterF.tagnum = -1 ;
  G__RpcDictLN_HldUnpack.tagnum = -1 ;
  G__RpcDictLN_HTrbBaseUnpacker.tagnum = -1 ;
  G__RpcDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__RpcDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__RpcDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__RpcDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__RpcDictLN_TH2F.tagnum = -1 ;
  G__RpcDictLN_HRpcTrbUnpacker.tagnum = -1 ;
  G__RpcDictLN_HTrb2Unpacker.tagnum = -1 ;
  G__RpcDictLN_HRpcTrb2Lookup.tagnum = -1 ;
  G__RpcDictLN_HRpcTrb2Unpacker.tagnum = -1 ;
  G__RpcDictLN_HRpcTrb2LookupChan.tagnum = -1 ;
  G__RpcDictLN_HRpcTrb2LookupBoard.tagnum = -1 ;
  G__RpcDictLN_HRpcLookupGCell.tagnum = -1 ;
  G__RpcDictLN_HRpcLookupGCol.tagnum = -1 ;
  G__RpcDictLN_HRpcLookupGSec.tagnum = -1 ;
  G__RpcDictLN_HRpcLookupGeom.tagnum = -1 ;
  G__RpcDictLN_HTaskSet.tagnum = -1 ;
  G__RpcDictLN_HRpcTaskSet.tagnum = -1 ;
  G__RpcDictLN_HGeantRpc.tagnum = -1 ;
  G__RpcDictLN_HRpcDigitizer.tagnum = -1 ;
  G__RpcDictLN_HRpcDigitizercLcLgaptrack.tagnum = -1 ;
  G__RpcDictLN_HRpcDigitizercLcLrpcdat.tagnum = -1 ;
  G__RpcDictLN_vectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgR.tagnum = -1 ;
  G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RpcDictLN_HRpcDigitizercLcLcelltrack.tagnum = -1 ;
  G__RpcDictLN_HRpcDigitizercLcLcelldat.tagnum = -1 ;
  G__RpcDictLN_vectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgR.tagnum = -1 ;
  G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RpcDictLN_HRpcDigitizercLcLefhits.tagnum = -1 ;
  G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR.tagnum = -1 ;
  G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR.tagnum = -1 ;
  G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR.tagnum = -1 ;
  G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRpcDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TString);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HLocatedDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcRaw),sizeof(HRpcRaw),-1,29952,"Raw data class of RPC detector",G__setup_memvarHRpcRaw,G__setup_memfuncHRpcRaw);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcContFact),sizeof(HRpcContFact),-1,62720,"Factory for parameter containers in libRpc",G__setup_memvarHRpcContFact,G__setup_memfuncHRpcContFact);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDetector),sizeof(HRpcDetector),-1,62720,"RPC detector class",G__setup_memvarHRpcDetector,G__setup_memfuncHRpcDetector);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HDetGeomPar);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCalPar),sizeof(HRpcCalPar),-1,62720,"Container for the RPC calibration parameters",G__setup_memvarHRpcCalPar,G__setup_memfuncHRpcCalPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcParRootFileIo),sizeof(HRpcParRootFileIo),-1,62464,"Class for RPC parameter I/O from ROOT file",G__setup_memvarHRpcParRootFileIo,G__setup_memfuncHRpcParRootFileIo);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcParAsciiFileIo),sizeof(HRpcParAsciiFileIo),-1,62464,"Class for RPC parameter I/O from Ascii files",G__setup_memvarHRpcParAsciiFileIo,G__setup_memfuncHRpcParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCal),sizeof(HRpcCal),-1,29952,"RPC cal data class",G__setup_memvarHRpcCal,G__setup_memfuncHRpcCal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCalSim),sizeof(HRpcCalSim),-1,29952,(char*)NULL,G__setup_memvarHRpcCalSim,G__setup_memfuncHRpcCalSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCalParCell),sizeof(HRpcCalParCell),-1,29952,"Cell level of the RPC calibration parameters",G__setup_memvarHRpcCalParCell,G__setup_memfuncHRpcCalParCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCalParCol),sizeof(HRpcCalParCol),-1,29952,"Column level of the RPC calibration parameters",G__setup_memvarHRpcCalParCol,G__setup_memfuncHRpcCalParCol);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCalParSec),sizeof(HRpcCalParSec),-1,29952,"Sector level of the RPC calibration parameters",G__setup_memvarHRpcCalParSec,G__setup_memfuncHRpcCalParSec);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcChargeOffsetPar),sizeof(HRpcChargeOffsetPar),-1,62720,"Container for the RPC hit finder parameters",G__setup_memvarHRpcChargeOffsetPar,G__setup_memfuncHRpcChargeOffsetPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCalibrater),sizeof(HRpcCalibrater),-1,62720,"Calibrater raw->cal for RPC data",G__setup_memvarHRpcCalibrater,G__setup_memfuncHRpcCalibrater);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HParCond);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcHit),sizeof(HRpcHit),-1,29952,"RPC hit data class",G__setup_memvarHRpcHit,G__setup_memfuncHRpcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcHitSim),sizeof(HRpcHitSim),-1,29952,(char*)NULL,G__setup_memvarHRpcHitSim,G__setup_memfuncHRpcHitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcGeomPar),sizeof(HRpcGeomPar),-1,62720,"Container for the Rpc geometry parameters",G__setup_memvarHRpcGeomPar,G__setup_memfuncHRpcGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcGeomCellPar),sizeof(HRpcGeomCellPar),-1,62720,"Container for the RPC cells geometry parameters",G__setup_memvarHRpcGeomCellPar,G__setup_memfuncHRpcGeomCellPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCellStatusPar),sizeof(HRpcCellStatusPar),-1,62720,"Container for Rpc cell status parameters ",G__setup_memvarHRpcCellStatusPar,G__setup_memfuncHRpcCellStatusPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDigiPar),sizeof(HRpcDigiPar),-1,128256,"Container for the RPC digitization parameters",G__setup_memvarHRpcDigiPar,G__setup_memfuncHRpcDigiPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcWtoQPar),sizeof(HRpcWtoQPar),-1,62720,"Container for the RPC width to charge conversion parameters",G__setup_memvarHRpcWtoQPar,G__setup_memfuncHRpcWtoQPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcHitFPar),sizeof(HRpcHitFPar),-1,62720,"Container for the RPC hit finder parameters",G__setup_memvarHRpcHitFPar,G__setup_memfuncHRpcHitFPar);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HSpecGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcTimePosPar),sizeof(HRpcTimePosPar),-1,62720,"Container for the RPC hit finder parameters",G__setup_memvarHRpcTimePosPar,G__setup_memfuncHRpcTimePosPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcSlewingPar),sizeof(HRpcSlewingPar),-1,62720,"Container for the RPC hit finder parameters",G__setup_memvarHRpcSlewingPar,G__setup_memfuncHRpcSlewingPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcHitF),sizeof(HRpcHitF),-1,62720,"Hit Finder cal->hit for RPC data",G__setup_memvarHRpcHitF,G__setup_memfuncHRpcHitF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcCluster),sizeof(HRpcCluster),-1,29952,"RPC cluster data class",G__setup_memvarHRpcCluster,G__setup_memfuncHRpcCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcClusterSim),sizeof(HRpcClusterSim),-1,29952,(char*)NULL,G__setup_memvarHRpcClusterSim,G__setup_memfuncHRpcClusterSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcClusFPar),sizeof(HRpcClusFPar),-1,62720,"Container for the RPC cluster finding parameters",G__setup_memvarHRpcClusFPar,G__setup_memfuncHRpcClusFPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcClusterF),sizeof(HRpcClusterF),-1,62720,"Cluster Finder hit->cluster for RPC data",G__setup_memvarHRpcClusterF,G__setup_memfuncHRpcClusterF);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HldUnpack);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HTrbBaseUnpacker);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_TH2F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcTrbUnpacker),sizeof(HRpcTrbUnpacker),-1,62464,"Unpacker for Rpc data",G__setup_memvarHRpcTrbUnpacker,G__setup_memfuncHRpcTrbUnpacker);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HTrb2Unpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcTrb2Lookup),sizeof(HRpcTrb2Lookup),-1,62720,"Lookup table for the TRB2 unpacker of the RPC detector",G__setup_memvarHRpcTrb2Lookup,G__setup_memfuncHRpcTrb2Lookup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcTrb2Unpacker),sizeof(HRpcTrb2Unpacker),-1,62464,"Unpacker for Rpc data",G__setup_memvarHRpcTrb2Unpacker,G__setup_memfuncHRpcTrb2Unpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcTrb2LookupChan),sizeof(HRpcTrb2LookupChan),-1,29952,"Channel level of the lookup table for the RPC TRB2 unpacker",G__setup_memvarHRpcTrb2LookupChan,G__setup_memfuncHRpcTrb2LookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcTrb2LookupBoard),sizeof(HRpcTrb2LookupBoard),-1,29952,"Board level of  the lookup table for the RPC TRB2 unpacker",G__setup_memvarHRpcTrb2LookupBoard,G__setup_memfuncHRpcTrb2LookupBoard);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcLookupGCell),sizeof(HRpcLookupGCell),-1,29952,"RPC cell geom->FEE",G__setup_memvarHRpcLookupGCell,G__setup_memfuncHRpcLookupGCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcLookupGCol),sizeof(HRpcLookupGCol),-1,29952,"Layer level of RPC lookup table (cell->channel)",G__setup_memvarHRpcLookupGCol,G__setup_memfuncHRpcLookupGCol);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcLookupGSec),sizeof(HRpcLookupGSec),-1,29952,"Sector level of RPC lookup table (cell->channel)",G__setup_memvarHRpcLookupGSec,G__setup_memfuncHRpcLookupGSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcLookupGeom),sizeof(HRpcLookupGeom),-1,62720,"RPC lookup table (cell->channel)",G__setup_memvarHRpcLookupGeom,G__setup_memfuncHRpcLookupGeom);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcTaskSet),sizeof(HRpcTaskSet),-1,62720,"Set of tasks",G__setup_memvarHRpcTaskSet,G__setup_memfuncHRpcTaskSet);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HGeantRpc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDigitizer),sizeof(HRpcDigitizer),-1,62720,"Digitizer of RPC data.",G__setup_memvarHRpcDigitizer,G__setup_memfuncHRpcDigitizer);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDigitizercLcLgaptrack);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDigitizercLcLrpcdat);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_vectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLgaptrackmUcOallocatorlEHRpcDigitizercLcLgaptrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDigitizercLcLcelltrack);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDigitizercLcLcelldat);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelltrackmUcOallocatorlEHRpcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_HRpcDigitizercLcLefhits);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_vectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLcelldatmUcOallocatorlEHRpcDigitizercLcLcelldatmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_vectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLrpcdatmUcOallocatorlEHRpcDigitizercLcLrpcdatmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_vectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgR);
   G__get_linked_tagnum_fwd(&G__RpcDictLN_reverse_iteratorlEvectorlEHRpcDigitizercLcLefhitscOallocatorlEHRpcDigitizercLcLefhitsgRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupRpcDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupRpcDict()");
  G__set_cpp_environmentRpcDict();
  G__cpp_setup_tagtableRpcDict();

  G__cpp_setup_inheritanceRpcDict();

  G__cpp_setup_typetableRpcDict();

  G__cpp_setup_memvarRpcDict();

  G__cpp_setup_memfuncRpcDict();
  G__cpp_setup_globalRpcDict();
  G__cpp_setup_funcRpcDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRpcDict();
  return;
}
class G__cpp_setup_initRpcDict {
  public:
    G__cpp_setup_initRpcDict() { G__add_setup_func("RpcDict",(G__incsetup)(&G__cpp_setupRpcDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRpcDict() { G__remove_setup_func("RpcDict"); }
};
G__cpp_setup_initRpcDict G__cpp_setup_initializerRpcDict;


//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:49:10 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIMdcUtilDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MdcUtilDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HMdcLowLevelQA_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcLowLevelQA(void *p = 0);
   static void *newArray_HMdcLowLevelQA(Long_t size, void *p);
   static void delete_HMdcLowLevelQA(void *p);
   static void deleteArray_HMdcLowLevelQA(void *p);
   static void destruct_HMdcLowLevelQA(void *p);
   static void streamer_HMdcLowLevelQA(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcLowLevelQA*)
   {
      ::HMdcLowLevelQA *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcLowLevelQA >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcLowLevelQA", ::HMdcLowLevelQA::Class_Version(), "././hmdclowlevelqa.h", 20,
                  typeid(::HMdcLowLevelQA), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcLowLevelQA::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcLowLevelQA) );
      instance.SetNew(&new_HMdcLowLevelQA);
      instance.SetNewArray(&newArray_HMdcLowLevelQA);
      instance.SetDelete(&delete_HMdcLowLevelQA);
      instance.SetDeleteArray(&deleteArray_HMdcLowLevelQA);
      instance.SetDestructor(&destruct_HMdcLowLevelQA);
      instance.SetStreamerFunc(&streamer_HMdcLowLevelQA);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcLowLevelQA*)
   {
      return GenerateInitInstanceLocal((::HMdcLowLevelQA*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcLowLevelQA*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcOffset_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcOffset(void *p = 0);
   static void *newArray_HMdcOffset(Long_t size, void *p);
   static void delete_HMdcOffset(void *p);
   static void deleteArray_HMdcOffset(void *p);
   static void destruct_HMdcOffset(void *p);
   static void streamer_HMdcOffset(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcOffset*)
   {
      ::HMdcOffset *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcOffset >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcOffset", ::HMdcOffset::Class_Version(), "././hmdcoffset.h", 29,
                  typeid(::HMdcOffset), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcOffset::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcOffset) );
      instance.SetNew(&new_HMdcOffset);
      instance.SetNewArray(&newArray_HMdcOffset);
      instance.SetDelete(&delete_HMdcOffset);
      instance.SetDeleteArray(&deleteArray_HMdcOffset);
      instance.SetDestructor(&destruct_HMdcOffset);
      instance.SetStreamerFunc(&streamer_HMdcOffset);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcOffset*)
   {
      return GenerateInitInstanceLocal((::HMdcOffset*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcOffset*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSlope_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSlope(void *p = 0);
   static void *newArray_HMdcSlope(Long_t size, void *p);
   static void delete_HMdcSlope(void *p);
   static void deleteArray_HMdcSlope(void *p);
   static void destruct_HMdcSlope(void *p);
   static void streamer_HMdcSlope(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSlope*)
   {
      ::HMdcSlope *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSlope >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSlope", ::HMdcSlope::Class_Version(), "././hmdcslope.h", 30,
                  typeid(::HMdcSlope), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSlope::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSlope) );
      instance.SetNew(&new_HMdcSlope);
      instance.SetNewArray(&newArray_HMdcSlope);
      instance.SetDelete(&delete_HMdcSlope);
      instance.SetDeleteArray(&deleteArray_HMdcSlope);
      instance.SetDestructor(&destruct_HMdcSlope);
      instance.SetStreamerFunc(&streamer_HMdcSlope);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSlope*)
   {
      return GenerateInitInstanceLocal((::HMdcSlope*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSlope*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSelfTracking_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSelfTracking(void *p = 0);
   static void *newArray_HMdcSelfTracking(Long_t size, void *p);
   static void delete_HMdcSelfTracking(void *p);
   static void deleteArray_HMdcSelfTracking(void *p);
   static void destruct_HMdcSelfTracking(void *p);
   static void streamer_HMdcSelfTracking(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSelfTracking*)
   {
      ::HMdcSelfTracking *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSelfTracking >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSelfTracking", ::HMdcSelfTracking::Class_Version(), "././hmdcselftracking.h", 20,
                  typeid(::HMdcSelfTracking), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSelfTracking::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcSelfTracking) );
      instance.SetNew(&new_HMdcSelfTracking);
      instance.SetNewArray(&newArray_HMdcSelfTracking);
      instance.SetDelete(&delete_HMdcSelfTracking);
      instance.SetDeleteArray(&deleteArray_HMdcSelfTracking);
      instance.SetDestructor(&destruct_HMdcSelfTracking);
      instance.SetStreamerFunc(&streamer_HMdcSelfTracking);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSelfTracking*)
   {
      return GenerateInitInstanceLocal((::HMdcSelfTracking*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSelfTracking*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcSlopes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcSlopes(void *p = 0);
   static void *newArray_HMdcSlopes(Long_t size, void *p);
   static void delete_HMdcSlopes(void *p);
   static void deleteArray_HMdcSlopes(void *p);
   static void destruct_HMdcSlopes(void *p);
   static void streamer_HMdcSlopes(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcSlopes*)
   {
      ::HMdcSlopes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcSlopes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcSlopes", ::HMdcSlopes::Class_Version(), "././hmdcslopes.h", 7,
                  typeid(::HMdcSlopes), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcSlopes::Dictionary, isa_proxy, 1,
                  sizeof(::HMdcSlopes) );
      instance.SetNew(&new_HMdcSlopes);
      instance.SetNewArray(&newArray_HMdcSlopes);
      instance.SetDelete(&delete_HMdcSlopes);
      instance.SetDeleteArray(&deleteArray_HMdcSlopes);
      instance.SetDestructor(&destruct_HMdcSlopes);
      instance.SetStreamerFunc(&streamer_HMdcSlopes);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcSlopes*)
   {
      return GenerateInitInstanceLocal((::HMdcSlopes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcSlopes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMdcTrackingEff_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMdcTrackingEff(void *p = 0);
   static void *newArray_HMdcTrackingEff(Long_t size, void *p);
   static void delete_HMdcTrackingEff(void *p);
   static void deleteArray_HMdcTrackingEff(void *p);
   static void destruct_HMdcTrackingEff(void *p);
   static void streamer_HMdcTrackingEff(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMdcTrackingEff*)
   {
      ::HMdcTrackingEff *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMdcTrackingEff >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMdcTrackingEff", ::HMdcTrackingEff::Class_Version(), "././hmdctrackingeff.h", 18,
                  typeid(::HMdcTrackingEff), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMdcTrackingEff::Dictionary, isa_proxy, 0,
                  sizeof(::HMdcTrackingEff) );
      instance.SetNew(&new_HMdcTrackingEff);
      instance.SetNewArray(&newArray_HMdcTrackingEff);
      instance.SetDelete(&delete_HMdcTrackingEff);
      instance.SetDeleteArray(&deleteArray_HMdcTrackingEff);
      instance.SetDestructor(&destruct_HMdcTrackingEff);
      instance.SetStreamerFunc(&streamer_HMdcTrackingEff);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMdcTrackingEff*)
   {
      return GenerateInitInstanceLocal((::HMdcTrackingEff*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMdcTrackingEff*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HMdcLowLevelQA::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcLowLevelQA::Class_Name()
{
   return "HMdcLowLevelQA";
}

//______________________________________________________________________________
const char *HMdcLowLevelQA::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLowLevelQA*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcLowLevelQA::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLowLevelQA*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcLowLevelQA::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLowLevelQA*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcLowLevelQA::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcLowLevelQA*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcOffset::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcOffset::Class_Name()
{
   return "HMdcOffset";
}

//______________________________________________________________________________
const char *HMdcOffset::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOffset*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcOffset::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOffset*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcOffset::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOffset*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcOffset::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcOffset*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSlope::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSlope::Class_Name()
{
   return "HMdcSlope";
}

//______________________________________________________________________________
const char *HMdcSlope::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlope*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSlope::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlope*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSlope::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlope*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSlope::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlope*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSelfTracking::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSelfTracking::Class_Name()
{
   return "HMdcSelfTracking";
}

//______________________________________________________________________________
const char *HMdcSelfTracking::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSelfTracking*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSelfTracking::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSelfTracking*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSelfTracking::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSelfTracking*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSelfTracking::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSelfTracking*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcSlopes::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcSlopes::Class_Name()
{
   return "HMdcSlopes";
}

//______________________________________________________________________________
const char *HMdcSlopes::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlopes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcSlopes::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlopes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcSlopes::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlopes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcSlopes::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcSlopes*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMdcTrackingEff::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMdcTrackingEff::Class_Name()
{
   return "HMdcTrackingEff";
}

//______________________________________________________________________________
const char *HMdcTrackingEff::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackingEff*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMdcTrackingEff::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackingEff*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMdcTrackingEff::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackingEff*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMdcTrackingEff::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMdcTrackingEff*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HMdcOffset::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcOffset.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcOffset::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcOffset.
      TClass *R__cl = ::HMdcOffset::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawCat", &rawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hitStartCat", &hitStartCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*clusCat", &clusCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter_start", &iter_start);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter_clus", &iter_clus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locraw", &locraw);
      R__insp.InspectMember(locraw, "locraw.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calparraw", &calparraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*timecut", &timecut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookupgeom", &lookupgeom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookupraw", &lookupraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sizescells", &sizescells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalspeed", &signalspeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventcounter", &eventcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "skipcounter", &skipcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSkipEvents", &nSkipEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nStep", &nStep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "validRange", &validRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isPulserFile", &isPulserFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noStart", &noStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTimeCuts", &useTimeCuts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useClusters", &useClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useWireOffset", &useWireOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useTof", &useTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fillHistsOnly", &fillHistsOnly);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "readHists", &readHists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "perMBO", &perMBO);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "perMBOafterSingle", &perMBOafterSingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filterwindow1", &filterwindow1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filterwindow2", &filterwindow2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filenumber", &filenumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNameAsciiOffset", &fNameAsciiOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNameRootOffset", &fNameRootOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ferrorlog", &ferrorlog);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*offsetTuple", &offsetTuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*offsetPulserTuple", &offsetPulserTuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minfitthreshold", &minfitthreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxfitthreshold", &maxfitthreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetfitNoise", &offsetfitNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "widthfitNoise", &widthfitNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitNoise", &fitNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rangeGauss", &rangeGauss);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cleanThreshold", &cleanThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hreverse[6][4][16][96][2048]", &hreverse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hinv", &hinv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hint", &hint);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*htime1temp", &htime1temp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*htime1_mbo[16]", &htime1_mbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*htime1_lay[6]", &htime1_lay);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*htime1_lay_inv_norm[6]", &htime1_lay_inv_norm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*htime1_lay_int[6]", &htime1_lay_int);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*htime1_lay_int_norm[6]", &htime1_lay_int_norm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*toffunc[4][6]", &toffunc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yequalzero", &yequalzero);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "crosspointX", &crosspointX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitpar0", &fitpar0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitpar0error", &fitpar0error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitpar1", &fitpar1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitpar1error", &fitpar1error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitparNoise0", &fitparNoise0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitparNoise0error", &fitparNoise0error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitparNoise1", &fitparNoise1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitparNoise1error", &fitparNoise1error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totalsigma", &totalsigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitGaussMean", &fitGaussMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitGaussSigma", &fitGaussSigma);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "meanhOffset", &meanhOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsets[6][4][16][96]", offsets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetErr[6][4][16][96]", offsetErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offset1[6][4][16][96]", offset1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "integral[6][4][16][96]", integral);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitslope1[6][4][16][96]", fitslope1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitslope2[6][4][16][96]", fitslope2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetpulser[6][4][16][96][5]", offsetpulser);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myoffset", &myoffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "myerror", &myerror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debug", &debug);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcOffset(void *p) {
      return  p ? new(p) ::HMdcOffset : new ::HMdcOffset;
   }
   static void *newArray_HMdcOffset(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcOffset[nElements] : new ::HMdcOffset[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcOffset(void *p) {
      delete ((::HMdcOffset*)p);
   }
   static void deleteArray_HMdcOffset(void *p) {
      delete [] ((::HMdcOffset*)p);
   }
   static void destruct_HMdcOffset(void *p) {
      typedef ::HMdcOffset current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcOffset(TBuffer &buf, void *obj) {
      ((::HMdcOffset*)obj)->::HMdcOffset::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcOffset

//______________________________________________________________________________
void HMdcLowLevelQA::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcLowLevelQA.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcLowLevelQA::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcLowLevelQA.
      TClass *R__cl = ::HMdcLowLevelQA::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1_everithing_summ[6][4]", &hmdc_time1_everithing_summ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1_good_t1_summ[6][4]", &hmdc_time1_good_t1_summ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1_not_t1_summ[6][4]", &hmdc_time1_not_t1_summ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_meantime1[6][4]", &hmdc_trend_meantime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1[6][4]", &hmdc_time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_meantime1not_t1[6][4]", &hmdc_trend_meantime1not_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1not_t1[6][4]", &hmdc_time1not_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_meantime1not_t2[6][4]", &hmdc_trend_meantime1not_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1not_t2[6][4]", &hmdc_time1not_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_meantime1not_t12[6][4]", &hmdc_trend_meantime1not_t12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1not_t12[6][4]", &hmdc_time1not_t12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_meantime1_plane[4]", &hmdc_trend_meantime1_plane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_time1_plane[4]", &hmdc_time1_plane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_meanSlope[6][4]", &hmdc_trend_meanSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_Slope[6][4]", &hmdc_Slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_neighbors[6][4]", &hmdc_trend_neighbors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "previousCellStatus", &previousCellStatus);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "double_all[6][4][2]", double_all);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_123ratio[6][4]", &hmdc_trend_123ratio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cnt123[6][4]", cnt123);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sect_module_NumberOfHits[6][4]", sect_module_NumberOfHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sm_old[2]", sm_old);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_multiplicity[6][4]", &hmdc_multiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_multiplicity[6][4]", &hmdc_trend_multiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*a_thisFileName", &a_thisFileName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_MBOvsTDC[6][4]", &hmdc_summ_MBOvsTDC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_dNdNhits[6][4]", &hmdc_summ_dNdNhits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_t2mt1_vs_t1[6][4]", &hmdc_summ_t2mt1_vs_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_tCuts_info[4]", &hmdc_summ_tCuts_info);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_dNdWire[6][4][6][3]", &hmdc_summ_dNdWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_meantime1_plane", &hmdc_summ_trend_meantime1_plane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_meantime1", &hmdc_summ_trend_meantime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_meantime1not_t1", &hmdc_summ_trend_meantime1not_t1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_meantime1not_t2", &hmdc_summ_trend_meantime1not_t2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_meantime1not_t12", &hmdc_summ_trend_meantime1not_t12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_neighbors", &hmdc_summ_trend_neighbors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_123ratio", &hmdc_summ_trend_123ratio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_summ_trend_multiplicity", &hmdc_summ_trend_multiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hmdc_trend_NhitsPERmbo[6][4][16]", &hmdc_trend_NhitsPERmbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NhitsPERmbo[6][4][16]", NhitsPERmbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "smmb_old[3]", smmb_old);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNameRootHists", &fNameRootHists);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Eventcounter", &Eventcounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "step_trend_meantime1_counter", &step_trend_meantime1_counter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stepsize_trend_meantime1", &stepsize_trend_meantime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numberOfSectorsPerModule[4]", numberOfSectorsPerModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mySetup[6][4]", mySetup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isInitialized", &isInitialized);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nReqEvents", &nReqEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nBinsTrendX", &nBinsTrendX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calCat", &calCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawCat", &rawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loccal1", &loccal1);
      R__insp.InspectMember(loccal1, "loccal1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locraw", &locraw);
      R__insp.InspectMember(locraw, "locraw.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*itercal1", &itercal1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterraw", &iterraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookupRaw", &lookupRaw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*timecut", &timecut);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcLowLevelQA(void *p) {
      return  p ? new(p) ::HMdcLowLevelQA : new ::HMdcLowLevelQA;
   }
   static void *newArray_HMdcLowLevelQA(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcLowLevelQA[nElements] : new ::HMdcLowLevelQA[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcLowLevelQA(void *p) {
      delete ((::HMdcLowLevelQA*)p);
   }
   static void deleteArray_HMdcLowLevelQA(void *p) {
      delete [] ((::HMdcLowLevelQA*)p);
   }
   static void destruct_HMdcLowLevelQA(void *p) {
      typedef ::HMdcLowLevelQA current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcLowLevelQA(TBuffer &buf, void *obj) {
      ((::HMdcLowLevelQA*)obj)->::HMdcLowLevelQA::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcLowLevelQA

//______________________________________________________________________________
void HMdcSlope::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSlope.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSlope::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSlope.
      TClass *R__cl = ::HMdcSlope::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawCat", &rawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*slopeCat", &slopeCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calparraw", &calparraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNameRoot", &fNameRoot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNameNtuple", &fNameNtuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*avgSlope[6][4][16][96]", &avgSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*avgSlopeErr[6][4][16][96]", &avgSlopeErr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nEvt[6][4][16][96]", &nEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*errorTrend[6][4][16][96][600]", &errorTrend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeTrend[6][4][16][96][5000]", slopeTrend);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trendCalculationActive", &trendCalculationActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calibrationAlgorithm", &calibrationAlgorithm);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTimeValues", &nTimeValues);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugActive", &debugActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitHistMethod", &fitHistMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "linRegActive", &linRegActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "histFitActive", &histFitActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "graphFitActive", &graphFitActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "binError", &binError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "selectorActive", &selectorActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mbSelector", &mbSelector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcSelector", &tdcSelector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "createNtupleActive", &createNtupleActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ntupleOutputFile", &ntupleOutputFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ntuple", &ntuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*file", &file);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hSlope", &hSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hTime", &hTime);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSlope(void *p) {
      return  p ? new(p) ::HMdcSlope : new ::HMdcSlope;
   }
   static void *newArray_HMdcSlope(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSlope[nElements] : new ::HMdcSlope[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSlope(void *p) {
      delete ((::HMdcSlope*)p);
   }
   static void deleteArray_HMdcSlope(void *p) {
      delete [] ((::HMdcSlope*)p);
   }
   static void destruct_HMdcSlope(void *p) {
      typedef ::HMdcSlope current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSlope(TBuffer &buf, void *obj) {
      ((::HMdcSlope*)obj)->::HMdcSlope::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSlope

//______________________________________________________________________________
void HMdcSelfTracking::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcSelfTracking.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcSelfTracking::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSelfTracking.
      TClass *R__cl = ::HMdcSelfTracking::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setLeft[4]", setLeft);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setRight[4]", setRight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "A[4]", A);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "B[4]", B);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "C[4]", C);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CorrWindow[4][3]", CorrWindow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdifmin[5]", tdifmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdifmax[5]", tdifmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdifcut", &tdifcut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmin", &tmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tmax", &tmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellmin", &cellmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellmax", &cellmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startmin[9]", startmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "startmax[9]", startmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cutbridge[20]", cutbridge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cut[20]", cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "monitorCell", &monitorCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "monitorLayer", &monitorLayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitTime1[7][200]", hitTime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitTime2[7][200]", hitTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timesum", &timesum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timediff", &timediff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeDiffMax", &timeDiffMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setmodule", &setmodule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setsector", &setsector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noStart", &noStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noCorrSector", &noCorrSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noCheckCorrSector", &noCheckCorrSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "layer", &layer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitCells[7][200]", hitCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nhit[7]", nhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell0[5][200]", cell0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncell0[5]", ncell0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "relevant_data", &relevant_data);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag[4]", flag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alreadyUsedCellFlag_AnalysisLayer1[200]", alreadyUsedCellFlag_AnalysisLayer1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "alreadyUsedCellFlag_AnalysisLayer2[200]", alreadyUsedCellFlag_AnalysisLayer2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lhit[3]", lhit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "analysisLayer1", &analysisLayer1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "analysisLayer2", &analysisLayer2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cntHitslayer1", &cntHitslayer1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cntHitslayer2", &cntHitslayer2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cntHitsWithoutNeighbours", &cntHitsWithoutNeighbours);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cntHitsAnalysislayer2", &cntHitsAnalysislayer2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cntDoubleHitsAnalysislayer2", &cntDoubleHitsAnalysislayer2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eventCounter", &eventCounter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "counter[3][160]", counter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ctrl[11]", ctrl);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_strip", &start_strip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nstartstrip", &nstartstrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "start_time", &start_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calCatMdc", &calCatMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calCatStart", &calCatStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterMdc", &iterMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterStart", &iterStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*evheader", &evheader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fNameRoot", &fNameRoot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pinfo", &pinfo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*player[7]", &player);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pNhitlayer[7]", &pNhitlayer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*player0[3]", &player0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*peff", &peff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTime_cut[7]", &pTime_cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTime0_cell[7]", &pTime0_cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTime0_diff", &pTime0_diff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTime_cell[7]", &pTime_cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTime_diff[2]", &pTime_diff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTime0diff_cell[3]", &pTime0diff_cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTimesum_adj_cell3", &pTimesum_adj_cell3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTimesum_adj_cell4", &pTimesum_adj_cell4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTimesum_cell[3]", &pTimesum_cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pFish[3][120]", &pFish);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTsum_ev[3][120]", &pTsum_ev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTsum_ev_prof[3][120]", &pTsum_ev_prof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pStart_time_strip", &pStart_time_strip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pStart_time[9]", &pStart_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pStart_mult", &pStart_mult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCorrSector", &pCorrSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCorrDiff[2][4]", &pCorrDiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fout", &fout);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSelfTracking(void *p) {
      return  p ? new(p) ::HMdcSelfTracking : new ::HMdcSelfTracking;
   }
   static void *newArray_HMdcSelfTracking(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSelfTracking[nElements] : new ::HMdcSelfTracking[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSelfTracking(void *p) {
      delete ((::HMdcSelfTracking*)p);
   }
   static void deleteArray_HMdcSelfTracking(void *p) {
      delete [] ((::HMdcSelfTracking*)p);
   }
   static void destruct_HMdcSelfTracking(void *p) {
      typedef ::HMdcSelfTracking current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSelfTracking(TBuffer &buf, void *obj) {
      ((::HMdcSelfTracking*)obj)->::HMdcSelfTracking::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSelfTracking

//______________________________________________________________________________
void HMdcTrackingEff::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMdcTrackingEff.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HMdcTrackingEff::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcTrackingEff.
      TClass *R__cl = ::HMdcTrackingEff::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameRoot", &fNameRoot);
      R__insp.InspectMember(fNameRoot, "fNameRoot.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*out", &out);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*single", &single);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pairs", &pairs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTrkCand", &iterTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterTrkCandIdeal", &iterTrkCandIdeal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterGeantTof", &iterGeantTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterGeantShower", &iterGeantShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcTrkCand", &catmHMdcTrkCand);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcTrkCandIdeal", &catmHMdcTrkCandIdeal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcSegSim", &catmHMdcSegSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHMdcSegIdeal", &catmHMdcSegIdeal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHGeantTof", &catmHGeantTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catmHGeantShower", &catmHGeantShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catlHGeantKine", &catlHGeantKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indSegId[2]", indSegId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSegId[2]", &pSegId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indSeg[2]", indSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSeg[2]", &pSeg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trkNrId", &trkNrId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "indexTable[6000]", indexTable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dSingle[40]", dSingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dPairs[98]", dPairs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetSeg1Kine", &offsetSeg1Kine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetSeg2Kine", &offsetSeg2Kine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetSeg1", &offsetSeg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetSeg2", &offsetSeg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetChi2", &offsetChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetPair", &offsetPair);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsetSingle", &offsetSingle);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcTrackingEff(void *p) {
      return  p ? new(p) ::HMdcTrackingEff : new ::HMdcTrackingEff;
   }
   static void *newArray_HMdcTrackingEff(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcTrackingEff[nElements] : new ::HMdcTrackingEff[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcTrackingEff(void *p) {
      delete ((::HMdcTrackingEff*)p);
   }
   static void deleteArray_HMdcTrackingEff(void *p) {
      delete [] ((::HMdcTrackingEff*)p);
   }
   static void destruct_HMdcTrackingEff(void *p) {
      typedef ::HMdcTrackingEff current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcTrackingEff(TBuffer &buf, void *obj) {
      ((::HMdcTrackingEff*)obj)->::HMdcTrackingEff::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcTrackingEff

//______________________________________________________________________________
void HMdcSlopes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMdcSlopes.
      TClass *R__cl = ::HMdcSlopes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mbo", &mbo);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdc", &tdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slope", &slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "error", &error);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "slopeMethode", &slopeMethode);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMdcSlopes(void *p) {
      return  p ? new(p) ::HMdcSlopes : new ::HMdcSlopes;
   }
   static void *newArray_HMdcSlopes(Long_t nElements, void *p) {
      return p ? new(p) ::HMdcSlopes[nElements] : new ::HMdcSlopes[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMdcSlopes(void *p) {
      delete ((::HMdcSlopes*)p);
   }
   static void deleteArray_HMdcSlopes(void *p) {
      delete [] ((::HMdcSlopes*)p);
   }
   static void destruct_HMdcSlopes(void *p) {
      typedef ::HMdcSlopes current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMdcSlopes(TBuffer &buf, void *obj) {
      ((::HMdcSlopes*)obj)->::HMdcSlopes::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMdcSlopes

/********************************************************
* ../build/pc/MdcUtilDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMdcUtilDict();

extern "C" void G__set_cpp_environmentMdcUtilDict() {
  G__cpp_reset_tagtableMdcUtilDict();
}
#include <new>
extern "C" int G__cpp_dllrevMdcUtilDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HMdcLowLevelQA */
static int G__MdcUtilDict_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLowLevelQA* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLowLevelQA[n];
     } else {
       p = new((void*) gvp) HMdcLowLevelQA[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcLowLevelQA;
     } else {
       p = new((void*) gvp) HMdcLowLevelQA;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcLowLevelQA* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcLowLevelQA((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcLowLevelQA((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->setOutputRoot((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->initVariables();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->printStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->resetCounters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->checkNeighboringCells((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->setStepSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->createHistograms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcLowLevelQA*) G__getstructoffset())->getCategories());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->writeHistograms((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->fillHistogramsCal((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->fillHistogramsRaw((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->lookupSlopes((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->testTimeCuts((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->writeTimeCuts();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->getSetup();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((HMdcLowLevelQA*) G__getstructoffset())->Mkdir((TDirectory*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HMdcLowLevelQA*) G__getstructoffset())->Mkdir((TDirectory*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->setParContainers();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcLowLevelQA::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLowLevelQA::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcLowLevelQA::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcLowLevelQA::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcLowLevelQA*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLowLevelQA::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLowLevelQA::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcLowLevelQA::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_212_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcLowLevelQA::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcLowLevelQA G__THMdcLowLevelQA;
static int G__MdcUtilDict_212_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcLowLevelQA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcLowLevelQA*) (soff+(sizeof(HMdcLowLevelQA)*i)))->~G__THMdcLowLevelQA();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcLowLevelQA*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcLowLevelQA*) (soff))->~G__THMdcLowLevelQA();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcOffset */
static int G__MdcUtilDict_607_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcOffset* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcOffset[n];
     } else {
       p = new((void*) gvp) HMdcOffset[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcOffset;
     } else {
       p = new((void*) gvp) HMdcOffset;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcOffset* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcOffset((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcOffset((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setSignalSpeed((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setCounter((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setOutputAscii((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setOutputRoot((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setPulserFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setNotUseStart((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setUseClusters((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setUseWireOffset((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setUseTof(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setFillHistsOnly((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMdcOffset*) G__getstructoffset())->setReadHists(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HMdcOffset*) G__getstructoffset())->setReadHists(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setFillPerMBO((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setFillPerMBOafterSingle((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setFilterWindow1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setFilterWindow2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setNSkipEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setValidOffsetRange((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setUseTimeCuts((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setNoiseOffset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setNoiseWidth((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setThresholdMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setThresholdMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setNoise((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setFitNoise((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setThreshold((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setRangeGauss((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setDebug();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->setCleanThreshold((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcOffset::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOffset::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcOffset::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcOffset::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcOffset*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOffset::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcOffset::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcOffset::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_607_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcOffset::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcOffset G__THMdcOffset;
static int G__MdcUtilDict_607_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcOffset*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcOffset*) (soff+(sizeof(HMdcOffset)*i)))->~G__THMdcOffset();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcOffset*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcOffset*) (soff))->~G__THMdcOffset();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSlope */
static int G__MdcUtilDict_634_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSlope* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSlope[n];
     } else {
       p = new((void*) gvp) HMdcSlope[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSlope;
     } else {
       p = new((void*) gvp) HMdcSlope;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSlope* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcSlope((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcSlope((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSlope*) G__getstructoffset())->calcBinNr((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setOutputRoot((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setOutputNtuple((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->selectCalibrationAlgorithm((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->selectHistFitMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setBinError((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setCreateNtupleActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setDebugActive((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setGraphFitActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setHistFitActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setLinRegActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setMbSelector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setnTimeValues((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setTrendCalculationActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setSelectorActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->setTdcSelector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSlope::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSlope::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSlope::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSlope::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlope*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSlope::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSlope::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSlope::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_634_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSlope::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSlope G__THMdcSlope;
static int G__MdcUtilDict_634_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSlope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSlope*) (soff+(sizeof(HMdcSlope)*i)))->~G__THMdcSlope();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSlope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSlope*) (soff))->~G__THMdcSlope();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSelfTracking */
static int G__MdcUtilDict_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSelfTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSelfTracking[n];
     } else {
       p = new((void*) gvp) HMdcSelfTracking[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSelfTracking;
     } else {
       p = new((void*) gvp) HMdcSelfTracking;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSelfTracking* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcSelfTracking((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcSelfTracking((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setOutputRoot((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setActiveModule((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setNoStart();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setNoCorrSector();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setNoCheckCorrSector();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSelfTracking*) G__getstructoffset())->setCutbridge((UInt_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSelfTracking*) G__getstructoffset())->getCutbridge((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->clearCutbridges();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printCutbridge();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSelfTracking*) G__getstructoffset())->setStartTimeCutWindow((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSelfTracking*) G__getstructoffset())->setStartTimeCutMax((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMdcSelfTracking*) G__getstructoffset())->setStartTimeCutMin((UInt_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getStartTimeCutMax((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getStartTimeCutMin((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printStartTimeCutWindow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeCutWindow((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeCutMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeCutMin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getTimeCutMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getTimeCutMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printTimeCutWindow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeAboveThresholdCutWindow((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeAboveThresholdCutMax((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeAboveThresholdCutMin((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getTimeAboveThresholdCutMax((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getTimeAboveThresholdCutMin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printTimeAboveThresholdCutWindow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setCorrelationFct((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setCorrelationFctA((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setCorrelationFctB((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setCorrelationFctC((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getCorrelationFctA((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getCorrelationFctB((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getCorrelationFctC((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printCorrelationFct();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setCorrelationWindow((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setCorrelationWmin((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setCorrelationWmax((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getCorrelationWmin((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getCorrelationWmax((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printCorrelationWindow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setAnalysisCellCutWindow((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setAnalysisCellCutMax((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setAnalysisCellCutMin((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HMdcSelfTracking*) G__getstructoffset())->getAnalysisCellCutMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HMdcSelfTracking*) G__getstructoffset())->getAnalysisCellCutMin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printAnalysisCellCutWindow();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeDiffL3L4Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getTimeDiffL3L4Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->printTimeDiffL3L4Cut();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setMonitor((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setMonitorCell((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSelfTracking*) G__getstructoffset())->getMonitorCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setMonitorLayer((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSelfTracking*) G__getstructoffset())->getMonitorLayer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->setTimeDiffMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSelfTracking*) G__getstructoffset())->getTimeDiffMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSelfTracking::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSelfTracking::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSelfTracking::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSelfTracking::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSelfTracking*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSelfTracking::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSelfTracking::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSelfTracking::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_638_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSelfTracking::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSelfTracking G__THMdcSelfTracking;
static int G__MdcUtilDict_638_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSelfTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSelfTracking*) (soff+(sizeof(HMdcSelfTracking)*i)))->~G__THMdcSelfTracking();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSelfTracking*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSelfTracking*) (soff))->~G__THMdcSelfTracking();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcSlopes */
static int G__MdcUtilDict_643_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSlopes* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSlopes[n];
     } else {
       p = new((void*) gvp) HMdcSlopes[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcSlopes;
     } else {
       p = new((void*) gvp) HMdcSlopes;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->getAddress((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSlopes*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSlopes*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSlopes*) G__getstructoffset())->getMbo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSlopes*) G__getstructoffset())->getTdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSlopes*) G__getstructoffset())->getSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HMdcSlopes*) G__getstructoffset())->getError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HMdcSlopes*) G__getstructoffset())->getMethode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setModule((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setMbo((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setTdc((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setError((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->setMethode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcSlopes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSlopes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcSlopes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcSlopes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcSlopes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSlopes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSlopes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcSlopes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_643_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcSlopes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MdcUtilDict_643_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMdcSlopes* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMdcSlopes(*(HMdcSlopes*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcSlopes G__THMdcSlopes;
static int G__MdcUtilDict_643_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcSlopes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcSlopes*) (soff+(sizeof(HMdcSlopes)*i)))->~G__THMdcSlopes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcSlopes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcSlopes*) (soff))->~G__THMdcSlopes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MdcUtilDict_643_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcSlopes* dest = (HMdcSlopes*) G__getstructoffset();
   *dest = *(HMdcSlopes*) libp->para[0].ref;
   const HMdcSlopes& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMdcTrackingEff */
static int G__MdcUtilDict_650_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackingEff* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackingEff[n];
     } else {
       p = new((void*) gvp) HMdcTrackingEff[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMdcTrackingEff;
     } else {
       p = new((void*) gvp) HMdcTrackingEff;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMdcTrackingEff* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMdcTrackingEff((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMdcTrackingEff((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMdcTrackingEff*) G__getstructoffset())->setOutputRoot(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HMdcTrackingEff*) G__getstructoffset())->setOutputRoot();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMdcTrackingEff::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackingEff::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMdcTrackingEff::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMdcTrackingEff::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMdcTrackingEff*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackingEff::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackingEff::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMdcTrackingEff::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MdcUtilDict_650_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMdcTrackingEff::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMdcTrackingEff G__THMdcTrackingEff;
static int G__MdcUtilDict_650_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMdcTrackingEff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMdcTrackingEff*) (soff+(sizeof(HMdcTrackingEff)*i)))->~G__THMdcTrackingEff();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMdcTrackingEff*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMdcTrackingEff*) (soff))->~G__THMdcTrackingEff();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HMdcLowLevelQA */

/* HMdcOffset */

/* HMdcSlope */

/* HMdcSelfTracking */

/* HMdcSlopes */

/* HMdcTrackingEff */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMdcUtilDict {
 public:
  G__Sizep2memfuncMdcUtilDict(): p(&G__Sizep2memfuncMdcUtilDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMdcUtilDict::*p)();
};

size_t G__get_sizep2memfuncMdcUtilDict()
{
  G__Sizep2memfuncMdcUtilDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMdcUtilDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA))) {
     HMdcLowLevelQA *G__Lderived;
     G__Lderived=(HMdcLowLevelQA*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA),G__get_linked_tagnum(&G__MdcUtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA),G__get_linked_tagnum(&G__MdcUtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA),G__get_linked_tagnum(&G__MdcUtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA),G__get_linked_tagnum(&G__MdcUtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset))) {
     HMdcOffset *G__Lderived;
     G__Lderived=(HMdcOffset*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset),G__get_linked_tagnum(&G__MdcUtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset),G__get_linked_tagnum(&G__MdcUtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset),G__get_linked_tagnum(&G__MdcUtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset),G__get_linked_tagnum(&G__MdcUtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope))) {
     HMdcSlope *G__Lderived;
     G__Lderived=(HMdcSlope*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope),G__get_linked_tagnum(&G__MdcUtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope),G__get_linked_tagnum(&G__MdcUtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope),G__get_linked_tagnum(&G__MdcUtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope),G__get_linked_tagnum(&G__MdcUtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking))) {
     HMdcSelfTracking *G__Lderived;
     G__Lderived=(HMdcSelfTracking*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking),G__get_linked_tagnum(&G__MdcUtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking),G__get_linked_tagnum(&G__MdcUtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking),G__get_linked_tagnum(&G__MdcUtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking),G__get_linked_tagnum(&G__MdcUtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes))) {
     HMdcSlopes *G__Lderived;
     G__Lderived=(HMdcSlopes*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes),G__get_linked_tagnum(&G__MdcUtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff))) {
     HMdcTrackingEff *G__Lderived;
     G__Lderived=(HMdcTrackingEff*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff),G__get_linked_tagnum(&G__MdcUtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff),G__get_linked_tagnum(&G__MdcUtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff),G__get_linked_tagnum(&G__MdcUtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff),G__get_linked_tagnum(&G__MdcUtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMdcUtilDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MdcUtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__MdcUtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__MdcUtilDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HMdcLowLevelQA */
static void G__setup_memvarHMdcLowLevelQA(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA));
   { HMdcLowLevelQA *p; p=(HMdcLowLevelQA*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1_everithing_summ[6][4]=",0,"Regardless of any time cuts summary for the file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1_good_t1_summ[6][4]=",0,"All cuts are OK, summary for the file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1_not_t1_summ[6][4]=",0,"Time1 cut is not done, summary for the file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_meantime1[6][4]=",0,"PASS        //trend of mean of time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1[6][4]=",0,"all t-cuts  //time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_meantime1not_t1[6][4]=",0,"DOES NOT    //trend of mean of time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1not_t1[6][4]=",0,"PASS t1-cut //time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_meantime1not_t2[6][4]=",0,"DOES NOT    //trend of mean of time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1not_t2[6][4]=",0,"PASS t2-cut //time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_meantime1not_t12[6][4]=",0,"DOES NOT    //trend of mean of time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1not_t12[6][4]=",0,"PASS t12cut //time1 per sector and module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_meantime1_plane[4]=",0,"trend of mean of time1 per plane");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_time1_plane[4]=",0,"time1 per plane");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_meanSlope[6][4]=",0,"slope of CAL1 as a function of file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_Slope[6][4]=",0,"technical histogramm for calculating slopes mean value for trend histogramm");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_neighbors[6][4]=",0,"trend of ratio single to neighboring cells per sector and module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"previousCellStatus=",0,"buffer for cell number of previous hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"double_all[6][4][2]=",0,"keeps conter for cells with neighbors and all cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_123ratio[6][4]=",0,"for 6 modules in 4 planes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cnt123[6][4]=",0,"number of \"noise\" wires (we assume this to be a noise if only 1 or 2 or 3 wires have fired in a module)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sect_module_NumberOfHits[6][4]=",0,"number of hits per module=(sector,plane)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sm_old[2]=",0,"sector => sm_old[0], module =>  sm_old[1]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_multiplicity[6][4]=",0,"hits multiplicity event by event storage");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_multiplicity[6][4]=",0,"mean value over N-step events of multiplicity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"a_thisFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2F),-1,-1,2,"hmdc_summ_MBOvsTDC[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_dNdNhits[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2F),-1,-1,2,"hmdc_summ_t2mt1_vs_t1[6][4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_tCuts_info[4]=",0,"histogram contains 6 bins for each time cut");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_dNdWire[6][4][6][3]=",0,"sector//plane//layer//histogramm_kind_(four different histograms: for different time cut conditions)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_meantime1_plane=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_meantime1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_meantime1not_t1=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_meantime1not_t2=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_meantime1not_t12=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_neighbors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_123ratio=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_summ_trend_multiplicity=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hmdc_trend_NhitsPERmbo[6][4][16]=",0,"for 6 modules in 4 planes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"NhitsPERmbo[6][4][16]=",0,"for 6 modules in 4 planes");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"smmb_old[3]=",0,"[sector,module,mbo] combination");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNameRootHists=",0,"file name of root output file");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"colorsSector[6]=",0,"colors for hists to be compared in one plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"colorsModule[4]=",0,"colors for hists to be compared in one sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"colorsCuts[3]=",0,"colors for hists to be compared for cuts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"Eventcounter=",0,"counts the number of events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"step_trend_meantime1_counter=",0,"counts the number of bin to be filled in trend hists");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"stepsize_trend_meantime1=",0,"defines the number of events to be filled for one data point");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numberOfSectorsPerModule[4]=",0,"stores number of chambers per plane");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mySetup[6][4]=",0,"actual setup of the detector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,2,"cutResults[4]=",0,"contains 0/1 for cuts in t1,t2 and t2-1 after testTimeCuts()");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isInitialized=",0,"flag for initialization of histograms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nReqEvents=",0,"nuber of Events from Hades::EventLoop");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nBinsTrendX=",0,"max number of bins for trend histograms");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"calCat=",0,"! pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"rawCat=",0,"! pointer to the raw data");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HLocation),-1,-1,2,"loccal1=",0,"! location for new object.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HLocation),-1,-1,2,"locraw=",0,"! location for new object.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"itercal1=",0,"! iterator on cal1 data.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"iterraw=",0,"! iterator on raw data.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLookupGeom),-1,-1,2,"lookup=",0,"! lookup table for mapping");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLookupRaw),-1,-1,2,"lookupRaw=",0,"! lookup table for mapping");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTimeCut),-1,-1,2,"timecut=",0,"! container for time cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcOffset */
static void G__setup_memvarHMdcOffset(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset));
   { HMdcOffset *p; p=(HMdcOffset*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nbin=0LL",0,"Number of bins ih the histogramms");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nbinm1=0LL",0,"nbin - 1");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nbinp1=0LL",0,"nbin + 1");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nSubEvents=0LL",0,"The max. number of objects per event");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"rawCat=",0,"pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"hitStartCat=",0,"pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"clusCat=",0,"pointer to the cluster data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"iter=",0,"iterator on raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"iter_start=",0,"iterator on start cal data.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"iter_clus=",0,"iterator on clus data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HLocation),-1,-1,2,"locraw=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcCalParRaw),-1,-1,2,"calparraw=",0,"pointer to HMdcCalParRaw container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTimeCut),-1,-1,2,"timecut=",0,"pointer to HMdcTimeCut container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLookupGeom),-1,-1,2,"lookupgeom=",0,"pointer to HMdcLookupGeom container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLookupRaw),-1,-1,2,"lookupraw=",0,"pointer to HMdcLookupRaw container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSizesCells),-1,-1,2,"sizescells=",0,"pointer to HMdcSizesCells container");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"signalspeed=",0,"! speed of the signal on the wire [ns/mm]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"eventcounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"skipcounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSkipEvents=",0,"number of skipped events per file");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nStep=",0,"step size for print events");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"validRange=",0,"allowed interval arround mean of offsets");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isPulserFile=",0,"flag for a external calibration file (pulser)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noStart=",0,"flag if starttime should not be used");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useTimeCuts=",0,"switch on/off time cuts usage");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useClusters=",0,"switch on/off clusters/raw");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useWireOffset=",0,"switch on/off substraction of signal time on wire");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"useTof=",0,"switch on/off substraction of minimum tof");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fillHistsOnly=",0,"switch to fill hists only (no offset calculation)");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"readHists=",0,"switch to read hists from root file and than calculate offset");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"perMBO=",0,"switch to calc offsets per MBO");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"perMBOafterSingle=",0,"switch to calc offsets per MBO from single offsets");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"filterwindow1=",0,"wide window arround mean to filter (perMBOafterSingle)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"filterwindow2=",0,"narrow window arround mean to filter (perMBOafterSingle)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"filenumber=",0,"counter for the read histogram files");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNameAsciiOffset=",0,"file name of ascii output file");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNameRootOffset=",0,"file name of root output file");
   G__memvar_setup((void*)0,69,0,0,-1,-1,-1,2,"ferrorlog=",0,"File pointer to errorlog");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TNtuple),-1,-1,2,"offsetTuple=",0,"pointer to NTuple for offset");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TNtuple),-1,-1,2,"offsetPulserTuple=",0,"pointer to NTuple for multiple peaks of pulser files");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"minfitthreshold=",0,"minimum threshold for linear fit (y-range)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"maxfitthreshold=",0,"maximum threshold for linear fit (y-range)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetfitNoise=",0,"offset of the fit range for the subtraction of the noise (start at yequalzero going to the left)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"widthfitNoise=",0,"width of the fit range");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fitNoise=",0,"fit noise or don't");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rangeGauss=",0,"fit range of the gaussian fit around calculated offset");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cleanThreshold=",0,"threshold to clean hinv : bins with less than the threshold will be set to 0");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("MyField"),-1,2,"hreverse[6][4][16][96][2048]=",0,"array for the drift-time (Time1) to be filled in eventloop");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),G__defined_typename("MyHist"),-1,2,"hinv=",0,"drift-time histograms to hold collected data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),G__defined_typename("MyHist"),-1,2,"hint=",0,"integrated drift-time histograms");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),G__defined_typename("MyHist"),-1,2,"htime1temp=",0,"temp drift-time histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2F),-1,-1,2,"htime1_mbo[16]=",0,"2-D hist time1 vers tdc");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2F),-1,-1,2,"htime1_lay[6]=",0,"2-D hist time1 vers cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2F),-1,-1,2,"htime1_lay_inv_norm[6]=",0,"2-D hist time1 vers cell normalized to counts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2F),-1,-1,2,"htime1_lay_int[6]=",0,"2-D hist integrated time1 vers cell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2F),-1,-1,2,"htime1_lay_int_norm[6]=",0,"2-D hist integrated time1 vers cell normalized to counts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TF1),-1,-1,2,"toffunc[4][6]=",0,"TF1 fits for minimum tof");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"yequalzero=",0,"intersection point of the first  fit and the x-axis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"crosspointX=",0,"x-value of the intersection point of the two linear fits->offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitpar0=",0,"first fit parameter of the first linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitpar0error=",0,"error of the first fit parameter of the first linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitpar1=",0,"second fit parameter of the first linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitpar1error=",0,"error of the second fit parameter of the first linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitparNoise0=",0,"first fit parameter of the second linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitparNoise0error=",0,"error of the first fit parameter of the second linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitparNoise1=",0,"second fit parameter of the second linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitparNoise1error=",0,"error of the second fit parameter of the second linear fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"totalsigma=",0,"sigma of the offset calculated from the sigmas of the two linear fits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitGaussMean=",0,"mean of the gaussian fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("MyFloat"),-1,2,"fitGaussSigma=",0,"sigma of the gaussian fit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"meanhOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"offsets[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"offsetErr[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"offset1[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"integral[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fitslope1[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fitslope2[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"offsetpulser[6][4][16][96][5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"myoffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"myerror=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"debug=",0,"! debug flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSlope */
static void G__setup_memvarHMdcSlope(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope));
   { HMdcSlope *p; p=(HMdcSlope*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"rawCat=",0,"! pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"slopeCat=",0,"! pointer to the calibration's slope");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"iter=",0,"! iterator on raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcCalParRaw),-1,-1,2,"calparraw=",0,"! calibration parameters on raw level");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNameRoot=",0,"! file name of root output file");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNameNtuple=",0,"! file name of ntuple output file");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("MyFloatField"),-1,2,"avgSlope[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("MyFloatField"),-1,2,"avgSlopeErr[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("MyIntField"),-1,2,"nEvt[6][4][16][96]=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("MboErrorTrendIntField"),-1,2,"errorTrend[6][4][16][96][600]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"slopeTrend[6][4][16][96][5000]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"trendCalculationActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"calibrationAlgorithm=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTimeValues=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"debugActive=",0,"! 0x00: off, 0x01: general, 0x02: init, 0x04: finalize, 0x08: execute, 0x10: calc, 0x20: fitHistogramm");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fitHistMethod=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"linRegActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"histFitActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"graphFitActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"binError=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"selectorActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mbSelector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdcSelector=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"createNtupleActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TFile),-1,-1,2,"ntupleOutputFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TNtuple),-1,-1,2,"ntuple=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TFile),-1,-1,2,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hSlope=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"hTime=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopecLcLcalibrationMethod),-1,-2,2,"HMDC_SLOPE_LIN_REG_6=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopecLcLcalibrationMethod),-1,-2,2,"HMDC_SLOPE_HIST_FIT_5=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopecLcLcalibrationMethod),-1,-2,2,"HMDC_SLOPE_GRAPH_FIT_5=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopecLcLcalibrationMethod),-1,-2,2,"HMDC_SLOPE_LIN_REG_5=4LL",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSelfTracking */
static void G__setup_memvarHMdcSelfTracking(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking));
   { HMdcSelfTracking *p; p=(HMdcSelfTracking*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"NO_CUT=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"TOF_BIT_CUT=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"START_CUT=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"TIME1_CUT=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"TIME2_CUT=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"TIME_ABOVE_THRESHOLD_CUT=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_6=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_7=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_8=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_9=9LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_10=10LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_11=11LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_12=12LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_13=13LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_14=14LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_15=15LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_16=16LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_17=17LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_18=18LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_19=19LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut),-1,-2,2,"MISC_20=20LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags),-1,-2,2,"NEIGHBOURS=0LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags),-1,-2,2,"LEFT_CELL_HIT=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags),-1,-2,2,"RIGHT_CELL_HIT=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags),-1,-2,2,"ANALYSISLAYER2_HITS=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags),-1,-2,2,"ANALYSISLAYER2_DOUBLE_HITS=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags),-1,-2,2,"RESIDUAL_CUT=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_1=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_2=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_3=3LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_4=4LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_5=5LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_6=6LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_7=7LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip),-1,-2,2,"START_STRIP_8=8LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLrightleft),-1,-2,2,"LEFT=1LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLrightleft),-1,-2,2,"RIGHT=2LL",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"setLeft[4]=",0,"define conditions for LEFT/RIGHT correlations for different planes (I,II,III,IV)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"setRight[4]=",0,"same");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"A[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"B[4]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"C[4]=",0,"Correlation fct parameters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"CorrWindow[4][3]=",0,"Residual cut");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdifmin[5]=",0,"lower limit for cut in time-above-threshold (time1-time2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdifmax[5]=",0,"upper limit for cut in time-above-threshold (time1-time2)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdifcut=",0,"cut for time1(layer3)-time1(layer4)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tmin=",0,"lower limit for cut in time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tmax=",0,"upper limit for cut in time");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cellmin=",0,"lower limit for the cells to be used in a further analysis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cellmax=",0,"upper limit for the cells to be used in a further analysis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"startmin[9]=",0,"array of lower limits of start time window over all start detector strips");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"startmax[9]=",0,"array of upper limits of start time window over all start detector strips");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"cutbridge[20]=",0,"array of cut bridges to switch of cuts ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"cut[20]=",0,"internal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"monitorCell=",0,"cell number which is taken into account for further analysis");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"monitorLayer=",0,"cell layer which is taken into account for further analysis");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"hitTime1[7][200]=",0,"array containing time 1 per layer which fulfill the cut conditions");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"hitTime2[7][200]=",0,"array containing time 2 per layer which fulfill the cut conditions");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timesum=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timediff=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeDiffMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"setmodule=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"setsector=",0,"variables for setActiveModule(sec,mod) start counting from 1");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noStart=",0,"flag if starttime should not be used");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noCorrSector=",0,"flag if CorrSector 3dim histogram should not be filled");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noCheckCorrSector=",0,"flag if CorrSector is not checked");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"layer=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"hitCells[7][200]=",0,"array containing the cellnumbers per layer which fulfill the cut conditions");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nhit[7]=",0,"hits per layer");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell0[5][200]=",0,"hits in 0-deg-layers, all chambers of a given sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ncell0[5]=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"relevant_data=",0,"Boolean flag to indicate that data arrays had been filled, triggers correlation analysis");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"flag[4]=",0,"Boolean array to trigger on flags (NEIGHBOURS = 0, LEFT_CELL_HIT = 1, RIGHT_CELL_HIT = 2, RESIDUAL_CUT = 3)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"alreadyUsedCellFlag_AnalysisLayer1[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"alreadyUsedCellFlag_AnalysisLayer2[200]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lhit[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"analysisLayer1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"analysisLayer2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cntHitslayer1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cntHitslayer2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cntHitsWithoutNeighbours=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cntHitsAnalysislayer2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cntDoubleHitsAnalysislayer2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"eventCounter=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"counter[3][160]=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"ctrl[11]=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"start_strip=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nstartstrip=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"start_time=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"calCatMdc=",0,"pointer to the MDC-CAL1 data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HCategory),-1,-1,2,"calCatStart=",0,"pointer to the START-CAL1 data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"iterMdc=",0,"iterator on MDC raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HIterator),-1,-1,2,"iterStart=",0,"iterator on START raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HEventHeader),-1,-1,2,"evheader=",0,"Hades event header");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"fNameRoot=",0,"file name of root output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"pinfo=",0,"scaler info");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1D),-1,-1,2,"player[7]=",0,"hit pattern layer 1-6");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1D),-1,-1,2,"pNhitlayer[7]=",0,"hits per layer 1-6");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1D),-1,-1,2,"player0[3]=",0,"selftracking: hit pattern +/-0deg layers");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"peff=",0,"efficiency layer 4 relative to layer 3");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1D),-1,-1,2,"pTime_cut[7]=",0,"drift time spectra for different cut levels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTime0_cell[7]=",0,"cell# vs. drifttime per layer without cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTime0_diff=",0,"time above threshold vs. drifttime");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTime_cell[7]=",0,"cell# vs. drifttime after cuts");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1D),-1,-1,2,"pTime_diff[2]=",0,"time above threshold, w/[0]. w/o[1] threshold");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTime0diff_cell[3]=",0,"cell# vs. time above threshold (0deg layers)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTimesum_adj_cell3=",0,"cell# vs. time sum of adjacent cells, layer 3");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTimesum_adj_cell4=",0,"cell# vs. time sum of adj. cells, layer 4, cut on time diff");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTimesum_cell[3]=",0,"selftracking: cell# vs. time sum of correl. cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pFish[3][120]=",0,"selftracking: time diff vs. sum of correl. cells");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pTsum_ev[3][120]=",0,"selftracking: time sum vs. event#");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TProfile),-1,-1,2,"pTsum_ev_prof[3][120]=",0,"selftracking: time sum vs. event#, profile");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH2S),-1,-1,2,"pStart_time_strip=",0,"start detector: strip# vs. time");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"pStart_time[9]=",0,"start detector: time, incl. cut1 and strip-mult=1");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"pStart_mult=",0,"start detector:strip multiplicity");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH3F),-1,-1,2,"pCorrSector=",0,"Correlations in a given sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TH1F),-1,-1,2,"pCorrDiff[2][4]=",0,"residuals from correlation in one sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TFile),-1,-1,2,"fout=",0,"output file pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcSlopes */
static void G__setup_memvarHMdcSlopes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes));
   { HMdcSlopes *p; p=(HMdcSlopes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"MdcSlopes container coordinate: sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"MdcSlopes container coordinate: module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"mbo=",0,"MdcSlopes container coordinate: mbo");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"tdc=",0,"MdcSlopes container coordinate: tdc (tdc*8 + channel)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"slope=",0,"value of slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"error=",0,"error of the slope");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"slopeMethode=",0,"method used to calculate slope");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMdcTrackingEff */
static void G__setup_memvarHMdcTrackingEff(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff));
   { HMdcTrackingEff *p; p=(HMdcTrackingEff*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TString),-1,-1,2,"fNameRoot=",0,"! file name of root output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TFile),-1,-1,2,"out=",0,"! file pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TNtuple),-1,-1,2,"single=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TNtuple),-1,-1,2,"pairs=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TIterator),-1,-1,2,"iterTrkCand=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TIterator),-1,-1,2,"iterTrkCandIdeal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TIterator),-1,-1,2,"iterGeantTof=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TIterator),-1,-1,2,"iterGeantShower=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMatrixCategory),-1,-1,2,"catmHMdcTrkCand=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMatrixCategory),-1,-1,2,"catmHMdcTrkCandIdeal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMatrixCategory),-1,-1,2,"catmHMdcSegSim=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMatrixCategory),-1,-1,2,"catmHMdcSegIdeal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMatrixCategory),-1,-1,2,"catmHGeantTof=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMatrixCategory),-1,-1,2,"catmHGeantShower=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HLinearCategory),-1,-1,2,"catlHGeantKine=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indSegId[2]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSegSim),-1,-1,2,"pSegId[2]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indSeg[2]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSegSim),-1,-1,2,"pSeg[2]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"trkNrId=",0,"!");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nEvnt=1LL",0,"number of event   indexes stored in data word");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nKine=10LL",0,"number of kine    indexes stored in data word");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nSeg=24LL",0,"number of segment indexes stored in data word");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nChi2=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"npair=25LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nsingle=2LL",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"maxTrks=600LL",0,"!");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nSingle=40LL",0,"! nEvnt + nkine + nSeg + nChi2 + nsingle");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"nPairs=98LL",0,"! nEvnt + nkine + nSeg + nChi2 + nkine + nSeg + nChi2 + npair");
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"sizeInd=10LL",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"indexTable[6000]=",0,"! maxtrks tracks : ind kine, ind seg1_id,ind seg2_id, ind seg1,ind seg2,ind used");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dSingle[40]=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"dPairs[98]=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetSeg1Kine=",0,"! starting index in data word for particle 1 (kine)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetSeg2Kine=",0,"! starting index in data word for particle 2 (kine)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetSeg1=",0,"! starting index in data word for seg1       (seg)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetSeg2=",0,"! starting index in data word for seg2       (seg)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetChi2=",0,"! starting index in data word for chi2 relative to seg");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetPair=",0,"! starting index in data word for pair   infos");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"offsetSingle=",0,"! starting index in data word for single infos");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MdcUtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMdcUtilDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHMdcLowLevelQA(void) {
   /* HMdcLowLevelQA */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA));
   G__memfunc_setup("HMdcLowLevelQA",1304,G__MdcUtilDict_212_0_1, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcLowLevelQA",1304,G__MdcUtilDict_212_0_2, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcLowLevelQA), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputRoot",1409,G__MdcUtilDict_212_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVariables",1357,G__MdcUtilDict_212_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatus",1201,G__MdcUtilDict_212_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounters",1398,G__MdcUtilDict_212_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkNeighboringCells",2141,G__MdcUtilDict_212_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStepSize",1155,G__MdcUtilDict_212_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHistograms",1685,G__MdcUtilDict_212_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCategories",1350,G__MdcUtilDict_212_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHistograms",1612,G__MdcUtilDict_212_0_11, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistogramsCal",1752,G__MdcUtilDict_212_0_12, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHistogramsRaw",1778,G__MdcUtilDict_212_0_13, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lookupSlopes",1296,G__MdcUtilDict_212_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testTimeCuts",1262,G__MdcUtilDict_212_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"f - 'Float_t' 0 - t1 f - 'Float_t' 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeTimeCuts",1369,G__MdcUtilDict_212_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSetup",849,G__MdcUtilDict_212_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Mkdir",503,G__MdcUtilDict_212_0_20, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TDirectory), -1, 0, 4, 1, 1, 0, 
"U 'TDirectory' - 0 - - C - 'Char_t' 10 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 '1' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParContainers",1669,G__MdcUtilDict_212_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcUtilDict_212_0_24, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcLowLevelQA::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcUtilDict_212_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLowLevelQA::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcUtilDict_212_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcLowLevelQA::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcUtilDict_212_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcLowLevelQA::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcUtilDict_212_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcUtilDict_212_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLowLevelQA::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcUtilDict_212_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLowLevelQA::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcUtilDict_212_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcLowLevelQA::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcUtilDict_212_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcLowLevelQA::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcLowLevelQA", 1430, G__MdcUtilDict_212_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcOffset(void) {
   /* HMdcOffset */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset));
   G__memfunc_setup("HMdcOffset",963,G__MdcUtilDict_607_0_1, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcOffset",963,G__MdcUtilDict_607_0_2, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcOffset), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setSignalSpeed",1435,G__MdcUtilDict_607_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - speed", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCounter",1068,G__MdcUtilDict_607_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputAscii",1478,G__MdcUtilDict_607_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputRoot",1409,G__MdcUtilDict_607_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPulserFile",1351,G__MdcUtilDict_607_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotUseStart",1464,G__MdcUtilDict_607_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - nouse", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseClusters",1486,G__MdcUtilDict_607_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseWireOffset",1655,G__MdcUtilDict_607_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseTof",930,G__MdcUtilDict_607_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - inp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillHistsOnly",1664,G__MdcUtilDict_607_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fill", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReadHists",1235,G__MdcUtilDict_607_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - inp g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillPerMBO",1240,G__MdcUtilDict_607_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fillPerMBO", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillPerMBOafterSingle",2380,G__MdcUtilDict_607_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fillPerMBO", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilterWindow1",1627,G__MdcUtilDict_607_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - window", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFilterWindow2",1628,G__MdcUtilDict_607_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - window", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNSkipEvents",1446,G__MdcUtilDict_607_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nskipevents", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setValidOffsetRange",1936,G__MdcUtilDict_607_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - range", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUseTimeCuts",1447,G__MdcUtilDict_607_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseOffset",1457,G__MdcUtilDict_607_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoiseWidth",1354,G__MdcUtilDict_607_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThresholdMin",1565,G__MdcUtilDict_607_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThresholdMax",1567,G__MdcUtilDict_607_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoise",842,G__MdcUtilDict_607_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - o i - 'Int_t' 0 - w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFitNoise",1133,G__MdcUtilDict_607_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - fit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__MdcUtilDict_607_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - min f - 'Float_t' 0 - max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRangeGauss",1340,G__MdcUtilDict_607_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebug",819,G__MdcUtilDict_607_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCleanThreshold",1756,G__MdcUtilDict_607_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - thresh", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("executeRaw",1053,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("executeClus",1162,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefault",1041,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openAsciiFile",1307,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR), G__defined_typename("ofstream"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Mkdir",503,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TDirectory), -1, 0, 4, 1, 2, 0, 
"U 'TDirectory' - 0 - - C - 'Char_t' 10 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 '1' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHist",1036,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"U 'TFile' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHist_2D",1249,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"g - 'Bool_t' 0 'kFALSE' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist_2D",1044,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitHist",731,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHist",963,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'TFile' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHist_2D",1176,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteHist",1035,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteHist_2D",1248,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNTuples",1138,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getstarttime",1309,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeAscii",1044,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVariables",1357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMultiplePeaks",1761,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initMemory",1069,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initArrays",1062,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("testTimeCuts",1262,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 2, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"f - 'Float_t' 0 - t1 f - 'Float_t' 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillArrays",1049,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"U 'TH1F' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillCalParRaw",1284,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"U 'TH1F' - 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStatus",1201,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcUtilDict_607_0_60, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcOffset::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcUtilDict_607_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOffset::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcUtilDict_607_0_62, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcOffset::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcUtilDict_607_0_63, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcOffset::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcUtilDict_607_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcUtilDict_607_0_68, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOffset::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcUtilDict_607_0_69, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcOffset::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcUtilDict_607_0_70, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcOffset::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcUtilDict_607_0_71, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcOffset::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcOffset", 1089, G__MdcUtilDict_607_0_72, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSlope(void) {
   /* HMdcSlope */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope));
   G__memfunc_setup("HMdcSlope",863,G__MdcUtilDict_634_0_1, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcSlope",863,G__MdcUtilDict_634_0_2, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlope), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcBinNr",876,G__MdcUtilDict_634_0_6, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputRoot",1409,G__MdcUtilDict_634_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputNtuple",1621,G__MdcUtilDict_634_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectCalibrationAlgorithm",2703,G__MdcUtilDict_634_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("selectHistFitMethod",1948,G__MdcUtilDict_634_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBinError",1135,G__MdcUtilDict_634_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCreateNtupleActive",2164,G__MdcUtilDict_634_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugActive",1423,G__MdcUtilDict_634_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGraphFitActive",1725,G__MdcUtilDict_634_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHistFitActive",1635,G__MdcUtilDict_634_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLinRegActive",1513,G__MdcUtilDict_634_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMbSelector",1340,G__MdcUtilDict_634_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setnTimeValues",1465,G__MdcUtilDict_634_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrendCalculationActive",2580,G__MdcUtilDict_634_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSelectorActive",1769,G__MdcUtilDict_634_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcSelector",1448,G__MdcUtilDict_634_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc",403,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calc5",456,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCHI",615,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcGraph",901,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 9, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcSlope",918,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 12, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitHistogramm",1374,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 2, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitHistogrammMeanCondition",2694,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fitHistogrammMaxCondition",2603,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"F - 'Float_t' 0 - - F - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcUtilDict_634_0_30, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSlope::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcUtilDict_634_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSlope::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcUtilDict_634_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSlope::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcUtilDict_634_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSlope::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcUtilDict_634_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcUtilDict_634_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSlope::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcUtilDict_634_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSlope::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcUtilDict_634_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSlope::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcUtilDict_634_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSlope::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSlope", 989, G__MdcUtilDict_634_0_42, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSelfTracking(void) {
   /* HMdcSelfTracking */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking));
   G__memfunc_setup("HMdcSelfTracking",1561,G__MdcUtilDict_638_0_1, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcSelfTracking",1561,G__MdcUtilDict_638_0_2, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSelfTracking), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setOutputRoot",1409,G__MdcUtilDict_638_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setActiveModule",1550,G__MdcUtilDict_638_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", "only this module will be analyzed", (void*) NULL, 0);
   G__memfunc_setup("setNoStart",1047,G__MdcUtilDict_638_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoCorrSector",1551,G__MdcUtilDict_638_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoCheckCorrSector",2029,G__MdcUtilDict_638_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCutbridge",1253,G__MdcUtilDict_638_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - - g - 'Bool_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutbridge",1241,G__MdcUtilDict_638_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearCutbridges",1555,G__MdcUtilDict_638_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", "set all cutbridges to 0", (void*) NULL, 0);
   G__memfunc_setup("printCutbridge",1478,G__MdcUtilDict_638_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStartTimeCutWindow",2189,G__MdcUtilDict_638_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"h - 'UInt_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStartTimeCutMax",1851,G__MdcUtilDict_638_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStartTimeCutMin",1849,G__MdcUtilDict_638_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStartTimeCutMax",1839,G__MdcUtilDict_638_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStartTimeCutMin",1837,G__MdcUtilDict_638_0_19, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printStartTimeCutWindow",2414,G__MdcUtilDict_638_0_20, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeCutWindow",1663,G__MdcUtilDict_638_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - min f - 'Float_t' 0 - max", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("setTimeCutMax",1325,G__MdcUtilDict_638_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("setTimeCutMin",1323,G__MdcUtilDict_638_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("getTimeCutMax",1313,G__MdcUtilDict_638_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("getTimeCutMin",1311,G__MdcUtilDict_638_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("printTimeCutWindow",1888,G__MdcUtilDict_638_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeAboveThresholdCutWindow",3097,G__MdcUtilDict_638_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - a "
"f - 'Float_t' 0 - b", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("setTimeAboveThresholdCutMax",2759,G__MdcUtilDict_638_0_28, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("setTimeAboveThresholdCutMin",2757,G__MdcUtilDict_638_0_29, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("getTimeAboveThresholdCutMax",2747,G__MdcUtilDict_638_0_30, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("getTimeAboveThresholdCutMin",2745,G__MdcUtilDict_638_0_31, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("printTimeAboveThresholdCutWindow",3322,G__MdcUtilDict_638_0_32, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrelationFct",1771,G__MdcUtilDict_638_0_33, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - a "
"f - 'Float_t' 0 - b f - 'Float_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrelationFctA",1836,G__MdcUtilDict_638_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrelationFctB",1837,G__MdcUtilDict_638_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrelationFctC",1838,G__MdcUtilDict_638_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrelationFctA",1824,G__MdcUtilDict_638_0_37, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrelationFctB",1825,G__MdcUtilDict_638_0_38, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrelationFctC",1826,G__MdcUtilDict_638_0_39, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCorrelationFct",1996,G__MdcUtilDict_638_0_40, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrelationWindow",2118,G__MdcUtilDict_638_0_41, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - a "
"f - 'Float_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrelationWmin",1897,G__MdcUtilDict_638_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorrelationWmax",1899,G__MdcUtilDict_638_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrelationWmin",1885,G__MdcUtilDict_638_0_44, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrelationWmax",1887,G__MdcUtilDict_638_0_45, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCorrelationWindow",2343,G__MdcUtilDict_638_0_46, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAnalysisCellCutWindow",2484,G__MdcUtilDict_638_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - a h - 'UInt_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAnalysisCellCutMax",2146,G__MdcUtilDict_638_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAnalysisCellCutMin",2144,G__MdcUtilDict_638_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAnalysisCellCutMax",2134,G__MdcUtilDict_638_0_50, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAnalysisCellCutMin",2132,G__MdcUtilDict_638_0_51, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printAnalysisCellCutWindow",2709,G__MdcUtilDict_638_0_52, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeDiffL3L4Cut",1663,G__MdcUtilDict_638_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("getTimeDiffL3L4Cut",1651,G__MdcUtilDict_638_0_54, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", "values in ns", (void*) NULL, 0);
   G__memfunc_setup("printTimeDiffL3L4Cut",1888,G__MdcUtilDict_638_0_55, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMonitor",1076,G__MdcUtilDict_638_0_56, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - layer h - 'UInt_t' 0 - cellNumber", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMonitorCell",1460,G__MdcUtilDict_638_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMonitorCell",1448,G__MdcUtilDict_638_0_58, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMonitorLayer",1585,G__MdcUtilDict_638_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - layer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMonitorLayer",1573,G__MdcUtilDict_638_0_60, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeDiffMax",1402,G__MdcUtilDict_638_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeDiffMax",1390,G__MdcUtilDict_638_0_62, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHist",1036,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetCounters",1398,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillControlHists",1683,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillAnalysisHists",1782,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkAdjacentCellAnalysisLayer1",3082,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkAdjacentCellAnalysisLayer2",3083,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findCorrelatedHits",1854,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkCorrSector",1540,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHist",963,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefault",1041,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("executeStart",1281,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("executeMdc",1031,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("executeCorrSector",1785,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("executeEventHeaderCheck",2332,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("executeReset",1270,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcUtilDict_638_0_79, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSelfTracking::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcUtilDict_638_0_80, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSelfTracking::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcUtilDict_638_0_81, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSelfTracking::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcUtilDict_638_0_82, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSelfTracking::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcUtilDict_638_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcUtilDict_638_0_87, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSelfTracking::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcUtilDict_638_0_88, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSelfTracking::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcUtilDict_638_0_89, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSelfTracking::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcUtilDict_638_0_90, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSelfTracking::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSelfTracking", 1687, G__MdcUtilDict_638_0_91, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcSlopes(void) {
   /* HMdcSlopes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes));
   G__memfunc_setup("HMdcSlopes",978,G__MdcUtilDict_643_0_1, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__MdcUtilDict_643_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"I - 'Int_t' 0 - s I - 'Int_t' 0 - m "
"I - 'Int_t' 0 - mb I - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__MdcUtilDict_643_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__MdcUtilDict_643_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMbo",606,G__MdcUtilDict_643_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdc",603,G__MdcUtilDict_643_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlope",835,G__MdcUtilDict_643_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getError",842,G__MdcUtilDict_643_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMethode",1030,G__MdcUtilDict_643_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__MdcUtilDict_643_0_10, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - m "
"i - 'Int_t' 0 - mb i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__MdcUtilDict_643_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__MdcUtilDict_643_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMbo",618,G__MdcUtilDict_643_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mb", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdc",615,G__MdcUtilDict_643_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSlope",847,G__MdcUtilDict_643_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - sl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setError",854,G__MdcUtilDict_643_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - er", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMethode",1042,G__MdcUtilDict_643_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mth", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MdcUtilDict_643_0_18, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcSlopes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcUtilDict_643_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSlopes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcUtilDict_643_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcSlopes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcUtilDict_643_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcSlopes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcUtilDict_643_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcUtilDict_643_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSlopes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcUtilDict_643_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSlopes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcUtilDict_643_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcSlopes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcUtilDict_643_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcSlopes::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMdcSlopes", 978, G__MdcUtilDict_643_0_30, (int) ('i'), G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes), -1, 0, 1, 1, 1, 0, "u 'HMdcSlopes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMdcSlopes", 1104, G__MdcUtilDict_643_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MdcUtilDict_643_0_32, (int) ('u'), G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcSlopes), -1, 1, 1, 1, 1, 0, "u 'HMdcSlopes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMdcTrackingEff(void) {
   /* HMdcTrackingEff */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff));
   G__memfunc_setup("initVariables",1357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetDataArray",1436,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSegPointers",1459,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 2, 0, 
"I - 'Int_t' 0 - - U 'HMdcSegSim' - 2 - - "
"U 'HMdcTrkCand' - 0 - - U 'HMatrixCategory' - 0 - - "
"i - 'Int_t' 0 '0' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKineInfo",1107,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_HGeantKine), -1, 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 1 - - "
"i - 'Int_t' 1 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"U 'HLinearCategory' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sameTrkSegments",1565,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - - U 'HMdcSegSim' - 2 - - "
"i - 'Int_t' 0 '0' mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSameRealCand",1569,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrkCand), -1, 0, 7, 1, 2, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 0 - - "
"U 'HMdcSegSim' - 2 - - U 'TIterator' - 0 - - "
"U 'HMatrixCategory' - 0 - - U 'HMatrixCategory' - 0 - - "
"U 'HLinearCategory' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getProcessString",1686,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__MdcUtilDictLN_TString), -1, 0, 1, 1, 2, 0, "f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sameDecay",908,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetIndexTable",1539,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"I - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillIndexTable",1415,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 2, 0, 
"I - 'Int_t' 0 - - i - 'Int_t' 1 - - "
"i - 'Int_t' 0 - - I - 'Int_t' 0 - - "
"I - 'Int_t' 0 - - U 'HLinearCategory' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printIndexTable",1549,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"I - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findPartner",1149,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"I - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hasPartner",1048,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"I - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSegData",1088,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 6, 1, 2, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 0 - - "
"F - 'Float_t' 0 - - i - 'Int_t' 0 - - "
"U 'HMatrixCategory' - 0 - - U 'HMatrixCategory' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillKineData",1192,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 7, 1, 2, 0, 
"i - 'Int_t' 1 - - i - 'Int_t' 0 - - "
"I - 'Int_t' 0 - - F - 'Float_t' 0 - - "
"i - 'Int_t' 0 - - U 'HMatrixCategory' - 0 - - "
"U 'HLinearCategory' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findGeantMeta",1303,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 6, 1, 2, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"U 'TIterator' - 0 - - U 'HMatrixCategory' - 0 - - "
"U 'TIterator' - 0 - - U 'HMatrixCategory' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillNTuple",1023,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 12, 1, 2, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - U 'HMatrixCategory' - 0 - - "
"U 'HMatrixCategory' - 0 - - U 'HLinearCategory' - 0 - - "
"U 'TIterator' - 0 - - U 'HMatrixCategory' - 0 - - "
"U 'TIterator' - 0 - - U 'HMatrixCategory' - 0 - - "
"U 'TNtuple' - 0 - - U 'TNtuple' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabPhiDeg",1152,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 0, 
"i - 'Int_t' 0 - sector f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThetaPairDeg",1490,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "u 'TLorentzVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiPairDeg",1277,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "u 'TLorentzVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("kineToSegPhiThetaDeg",1968,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"U 'HGeantKine' - 0 - kine f - 'Float_t' 1 - theta "
"f - 'Float_t' 1 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pairPhiToLabDeg",1455,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("pairThetaToLabDeg",1668,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 2, 0, "f - 'Float_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillVectorFromSeg",1741,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 2, 0, 
"u 'TLorentzVector' - 1 - v i - 'Int_t' 0 - slot "
"i - 'Int_t' 0 - type", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillVectorFromKine",1845,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'TLorentzVector' - 1 - v i - 'Int_t' 0 - slot", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackingEff",1440,G__MdcUtilDict_650_0_26, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HMdcTrackingEff",1440,G__MdcUtilDict_650_0_27, 105, G__get_linked_tagnum(&G__MdcUtilDictLN_HMdcTrackingEff), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputRoot",1409,G__MdcUtilDict_650_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"ntuple_tracking_eff.root\"' -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__MdcUtilDict_650_0_32, 85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMdcTrackingEff::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MdcUtilDict_650_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackingEff::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MdcUtilDict_650_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMdcTrackingEff::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MdcUtilDict_650_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMdcTrackingEff::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MdcUtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MdcUtilDict_650_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MdcUtilDict_650_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackingEff::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MdcUtilDict_650_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackingEff::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MdcUtilDict_650_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMdcTrackingEff::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MdcUtilDict_650_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMdcTrackingEff::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMdcTrackingEff", 1566, G__MdcUtilDict_650_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMdcUtilDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMdcUtilDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMdcUtilDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MdcUtilDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TIterator = { "TIterator" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcLookupGeom = { "HMdcLookupGeom" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcLookupRaw = { "HMdcLookupRaw" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcTimeCut = { "HMdcTimeCut" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcCalParRaw = { "HMdcCalParRaw" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcLowLevelQA = { "HMdcLowLevelQA" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSizesCells = { "HMdcSizesCells" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcOffset = { "HMdcOffset" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TProfile = { "TProfile" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TH2S = { "TH2S" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSlope = { "HMdcSlope" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSlopecLcLcalibrationMethod = { "HMdcSlope::calibrationMethod" , 101 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HEventHeader = { "HEventHeader" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TH3F = { "TH3F" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSelfTracking = { "HMdcSelfTracking" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut = { "HMdcSelfTracking::selftrackingCut" , 101 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags = { "HMdcSelfTracking::flags" , 101 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip = { "HMdcSelfTracking::selftrackingStartStrip" , 101 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSelfTrackingcLcLrightleft = { "HMdcSelfTracking::rightleft" , 101 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSlopes = { "HMdcSlopes" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMatrixCategory = { "HMatrixCategory" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HLinearCategory = { "HLinearCategory" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcSegSim = { "HMdcSegSim" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcTrkCand = { "HMdcTrkCand" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HGeantKine = { "HGeantKine" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_TLorentzVector = { "TLorentzVector" , 99 , -1 };
G__linked_taginfo G__MdcUtilDictLN_HMdcTrackingEff = { "HMdcTrackingEff" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMdcUtilDict() {
  G__MdcUtilDictLN_TClass.tagnum = -1 ;
  G__MdcUtilDictLN_TBuffer.tagnum = -1 ;
  G__MdcUtilDictLN_TDirectory.tagnum = -1 ;
  G__MdcUtilDictLN_TMemberInspector.tagnum = -1 ;
  G__MdcUtilDictLN_TObject.tagnum = -1 ;
  G__MdcUtilDictLN_TNamed.tagnum = -1 ;
  G__MdcUtilDictLN_TString.tagnum = -1 ;
  G__MdcUtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__MdcUtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__MdcUtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MdcUtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcUtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MdcUtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcUtilDictLN_HTask.tagnum = -1 ;
  G__MdcUtilDictLN_HLocation.tagnum = -1 ;
  G__MdcUtilDictLN_TIterator.tagnum = -1 ;
  G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__MdcUtilDictLN_HReconstructor.tagnum = -1 ;
  G__MdcUtilDictLN_HCategory.tagnum = -1 ;
  G__MdcUtilDictLN_HIterator.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcLookupGeom.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcLookupRaw.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcTimeCut.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcCalParRaw.tagnum = -1 ;
  G__MdcUtilDictLN_TH2F.tagnum = -1 ;
  G__MdcUtilDictLN_TH1F.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcLowLevelQA.tagnum = -1 ;
  G__MdcUtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__MdcUtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MdcUtilDictLN_TFile.tagnum = -1 ;
  G__MdcUtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSizesCells.tagnum = -1 ;
  G__MdcUtilDictLN_TNtuple.tagnum = -1 ;
  G__MdcUtilDictLN_TF1.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcOffset.tagnum = -1 ;
  G__MdcUtilDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MdcUtilDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MdcUtilDictLN_TH1D.tagnum = -1 ;
  G__MdcUtilDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__MdcUtilDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__MdcUtilDictLN_TProfile.tagnum = -1 ;
  G__MdcUtilDictLN_TH2S.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSlope.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSlopecLcLcalibrationMethod.tagnum = -1 ;
  G__MdcUtilDictLN_HEventHeader.tagnum = -1 ;
  G__MdcUtilDictLN_TH3F.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSelfTracking.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSelfTrackingcLcLrightleft.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSlopes.tagnum = -1 ;
  G__MdcUtilDictLN_HMatrixCategory.tagnum = -1 ;
  G__MdcUtilDictLN_HLinearCategory.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcSegSim.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcTrkCand.tagnum = -1 ;
  G__MdcUtilDictLN_HGeantKine.tagnum = -1 ;
  G__MdcUtilDictLN_TLorentzVector.tagnum = -1 ;
  G__MdcUtilDictLN_HMdcTrackingEff.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMdcUtilDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TString);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TIterator);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HIterator);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcLookupGeom);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcLookupRaw);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcTimeCut);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcCalParRaw);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TH1F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcLowLevelQA),sizeof(HMdcLowLevelQA),-1,62720,"fills different hists for cal1 data",G__setup_memvarHMdcLowLevelQA,G__setup_memfuncHMdcLowLevelQA);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSizesCells);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TNtuple);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TF1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcOffset),sizeof(HMdcOffset),-1,62720,"class for the calculation of the offsets per tdc channel",G__setup_memvarHMdcOffset,G__setup_memfuncHMdcOffset);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TProfile);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TH2S);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSlope),sizeof(HMdcSlope),-1,62720,"! Class calculates slopes and errors for TDC channels from internal calibration.",G__setup_memvarHMdcSlope,G__setup_memfuncHMdcSlope);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSlopecLcLcalibrationMethod);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HEventHeader);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TH3F);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSelfTracking),sizeof(HMdcSelfTracking),-1,62720,"class for the MDC 0deg-layer's self tracking",G__setup_memvarHMdcSelfTracking,G__setup_memfuncHMdcSelfTracking);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingCut);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLflags);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLselftrackingStartStrip);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSelfTrackingcLcLrightleft);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSlopes),sizeof(HMdcSlopes),-1,95488,"MDC slope",G__setup_memvarHMdcSlopes,G__setup_memfuncHMdcSlopes);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMatrixCategory);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HLinearCategory);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcSegSim);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcTrkCand);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HGeantKine);
   G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_TLorentzVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MdcUtilDictLN_HMdcTrackingEff),sizeof(HMdcTrackingEff),-1,62720,"fills ntuple for efficiency of tracking",G__setup_memvarHMdcTrackingEff,G__setup_memfuncHMdcTrackingEff);
}
extern "C" void G__cpp_setupMdcUtilDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMdcUtilDict()");
  G__set_cpp_environmentMdcUtilDict();
  G__cpp_setup_tagtableMdcUtilDict();

  G__cpp_setup_inheritanceMdcUtilDict();

  G__cpp_setup_typetableMdcUtilDict();

  G__cpp_setup_memvarMdcUtilDict();

  G__cpp_setup_memfuncMdcUtilDict();
  G__cpp_setup_globalMdcUtilDict();
  G__cpp_setup_funcMdcUtilDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMdcUtilDict();
  return;
}
class G__cpp_setup_initMdcUtilDict {
  public:
    G__cpp_setup_initMdcUtilDict() { G__add_setup_func("MdcUtilDict",(G__incsetup)(&G__cpp_setupMdcUtilDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMdcUtilDict() { G__remove_setup_func("MdcUtilDict"); }
};
G__cpp_setup_initMdcUtilDict G__cpp_setup_initializerMdcUtilDict;


//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:44:55 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIUtilDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "UtilDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HDebug_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HDebug(void *p = 0);
   static void *newArray_HDebug(Long_t size, void *p);
   static void delete_HDebug(void *p);
   static void deleteArray_HDebug(void *p);
   static void destruct_HDebug(void *p);
   static void streamer_HDebug(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDebug*)
   {
      ::HDebug *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDebug >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDebug", ::HDebug::Class_Version(), "./util/hdebug.h", 6,
                  typeid(::HDebug), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDebug::Dictionary, isa_proxy, 0,
                  sizeof(::HDebug) );
      instance.SetNew(&new_HDebug);
      instance.SetNewArray(&newArray_HDebug);
      instance.SetDelete(&delete_HDebug);
      instance.SetDeleteArray(&deleteArray_HDebug);
      instance.SetDestructor(&destruct_HDebug);
      instance.SetStreamerFunc(&streamer_HDebug);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDebug*)
   {
      return GenerateInitInstanceLocal((::HDebug*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDebug*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HObjTable_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HObjTable(void *p = 0);
   static void *newArray_HObjTable(Long_t size, void *p);
   static void delete_HObjTable(void *p);
   static void deleteArray_HObjTable(void *p);
   static void destruct_HObjTable(void *p);
   static void streamer_HObjTable(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HObjTable*)
   {
      ::HObjTable *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HObjTable >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HObjTable", ::HObjTable::Class_Version(), "./util/hobjtable.h", 9,
                  typeid(::HObjTable), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HObjTable::Dictionary, isa_proxy, 1,
                  sizeof(::HObjTable) );
      instance.SetNew(&new_HObjTable);
      instance.SetNewArray(&newArray_HObjTable);
      instance.SetDelete(&delete_HObjTable);
      instance.SetDeleteArray(&deleteArray_HObjTable);
      instance.SetDestructor(&destruct_HObjTable);
      instance.SetStreamerFunc(&streamer_HObjTable);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HObjTable*)
   {
      return GenerateInitInstanceLocal((::HObjTable*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HObjTable*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRunAnalizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRunAnalizer(void *p);
   static void deleteArray_HRunAnalizer(void *p);
   static void destruct_HRunAnalizer(void *p);
   static void streamer_HRunAnalizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRunAnalizer*)
   {
      ::HRunAnalizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRunAnalizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRunAnalizer", ::HRunAnalizer::Class_Version(), "./util/hrunanalizer.h", 9,
                  typeid(::HRunAnalizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRunAnalizer::Dictionary, isa_proxy, 0,
                  sizeof(::HRunAnalizer) );
      instance.SetDelete(&delete_HRunAnalizer);
      instance.SetDeleteArray(&deleteArray_HRunAnalizer);
      instance.SetDestructor(&destruct_HRunAnalizer);
      instance.SetStreamerFunc(&streamer_HRunAnalizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRunAnalizer*)
   {
      return GenerateInitInstanceLocal((::HRunAnalizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRunAnalizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSymMat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSymMat(void *p = 0);
   static void *newArray_HSymMat(Long_t size, void *p);
   static void delete_HSymMat(void *p);
   static void deleteArray_HSymMat(void *p);
   static void destruct_HSymMat(void *p);
   static void streamer_HSymMat(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSymMat*)
   {
      ::HSymMat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSymMat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSymMat", ::HSymMat::Class_Version(), "./util/hsymmat.h", 15,
                  typeid(::HSymMat), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSymMat::Dictionary, isa_proxy, 0,
                  sizeof(::HSymMat) );
      instance.SetNew(&new_HSymMat);
      instance.SetNewArray(&newArray_HSymMat);
      instance.SetDelete(&delete_HSymMat);
      instance.SetDeleteArray(&deleteArray_HSymMat);
      instance.SetDestructor(&destruct_HSymMat);
      instance.SetStreamerFunc(&streamer_HSymMat);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSymMat*)
   {
      return GenerateInitInstanceLocal((::HSymMat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSymMat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSymMat2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSymMat2(void *p = 0);
   static void *newArray_HSymMat2(Long_t size, void *p);
   static void delete_HSymMat2(void *p);
   static void deleteArray_HSymMat2(void *p);
   static void destruct_HSymMat2(void *p);
   static void streamer_HSymMat2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSymMat2*)
   {
      ::HSymMat2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSymMat2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSymMat2", ::HSymMat2::Class_Version(), "./util/hsymmat.h", 58,
                  typeid(::HSymMat2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSymMat2::Dictionary, isa_proxy, 0,
                  sizeof(::HSymMat2) );
      instance.SetNew(&new_HSymMat2);
      instance.SetNewArray(&newArray_HSymMat2);
      instance.SetDelete(&delete_HSymMat2);
      instance.SetDeleteArray(&deleteArray_HSymMat2);
      instance.SetDestructor(&destruct_HSymMat2);
      instance.SetStreamerFunc(&streamer_HSymMat2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSymMat2*)
   {
      return GenerateInitInstanceLocal((::HSymMat2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSymMat2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSymMat3_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSymMat3(void *p = 0);
   static void *newArray_HSymMat3(Long_t size, void *p);
   static void delete_HSymMat3(void *p);
   static void deleteArray_HSymMat3(void *p);
   static void destruct_HSymMat3(void *p);
   static void streamer_HSymMat3(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSymMat3*)
   {
      ::HSymMat3 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSymMat3 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSymMat3", ::HSymMat3::Class_Version(), "./util/hsymmat.h", 67,
                  typeid(::HSymMat3), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSymMat3::Dictionary, isa_proxy, 0,
                  sizeof(::HSymMat3) );
      instance.SetNew(&new_HSymMat3);
      instance.SetNewArray(&newArray_HSymMat3);
      instance.SetDelete(&delete_HSymMat3);
      instance.SetDeleteArray(&deleteArray_HSymMat3);
      instance.SetDestructor(&destruct_HSymMat3);
      instance.SetStreamerFunc(&streamer_HSymMat3);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSymMat3*)
   {
      return GenerateInitInstanceLocal((::HSymMat3*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSymMat3*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSymMat4_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSymMat4(void *p = 0);
   static void *newArray_HSymMat4(Long_t size, void *p);
   static void delete_HSymMat4(void *p);
   static void deleteArray_HSymMat4(void *p);
   static void destruct_HSymMat4(void *p);
   static void streamer_HSymMat4(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSymMat4*)
   {
      ::HSymMat4 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSymMat4 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSymMat4", ::HSymMat4::Class_Version(), "./util/hsymmat.h", 76,
                  typeid(::HSymMat4), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSymMat4::Dictionary, isa_proxy, 0,
                  sizeof(::HSymMat4) );
      instance.SetNew(&new_HSymMat4);
      instance.SetNewArray(&newArray_HSymMat4);
      instance.SetDelete(&delete_HSymMat4);
      instance.SetDeleteArray(&deleteArray_HSymMat4);
      instance.SetDestructor(&destruct_HSymMat4);
      instance.SetStreamerFunc(&streamer_HSymMat4);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSymMat4*)
   {
      return GenerateInitInstanceLocal((::HSymMat4*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSymMat4*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSymMat5_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSymMat5(void *p = 0);
   static void *newArray_HSymMat5(Long_t size, void *p);
   static void delete_HSymMat5(void *p);
   static void deleteArray_HSymMat5(void *p);
   static void destruct_HSymMat5(void *p);
   static void streamer_HSymMat5(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSymMat5*)
   {
      ::HSymMat5 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSymMat5 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSymMat5", ::HSymMat5::Class_Version(), "./util/hsymmat.h", 85,
                  typeid(::HSymMat5), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSymMat5::Dictionary, isa_proxy, 0,
                  sizeof(::HSymMat5) );
      instance.SetNew(&new_HSymMat5);
      instance.SetNewArray(&newArray_HSymMat5);
      instance.SetDelete(&delete_HSymMat5);
      instance.SetDeleteArray(&deleteArray_HSymMat5);
      instance.SetDestructor(&destruct_HSymMat5);
      instance.SetStreamerFunc(&streamer_HSymMat5);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSymMat5*)
   {
      return GenerateInitInstanceLocal((::HSymMat5*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSymMat5*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSymMat6_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSymMat6(void *p = 0);
   static void *newArray_HSymMat6(Long_t size, void *p);
   static void delete_HSymMat6(void *p);
   static void deleteArray_HSymMat6(void *p);
   static void destruct_HSymMat6(void *p);
   static void streamer_HSymMat6(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSymMat6*)
   {
      ::HSymMat6 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSymMat6 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSymMat6", ::HSymMat6::Class_Version(), "./util/hsymmat.h", 94,
                  typeid(::HSymMat6), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSymMat6::Dictionary, isa_proxy, 0,
                  sizeof(::HSymMat6) );
      instance.SetNew(&new_HSymMat6);
      instance.SetNewArray(&newArray_HSymMat6);
      instance.SetDelete(&delete_HSymMat6);
      instance.SetDeleteArray(&deleteArray_HSymMat6);
      instance.SetDestructor(&destruct_HSymMat6);
      instance.SetStreamerFunc(&streamer_HSymMat6);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSymMat6*)
   {
      return GenerateInitInstanceLocal((::HSymMat6*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSymMat6*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMessageMgr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HMessageMgr(void *p);
   static void deleteArray_HMessageMgr(void *p);
   static void destruct_HMessageMgr(void *p);
   static void streamer_HMessageMgr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMessageMgr*)
   {
      ::HMessageMgr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMessageMgr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMessageMgr", ::HMessageMgr::Class_Version(), "./util/hmessagemgr.h", 91,
                  typeid(::HMessageMgr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMessageMgr::Dictionary, isa_proxy, 0,
                  sizeof(::HMessageMgr) );
      instance.SetDelete(&delete_HMessageMgr);
      instance.SetDeleteArray(&deleteArray_HMessageMgr);
      instance.SetDestructor(&destruct_HMessageMgr);
      instance.SetStreamerFunc(&streamer_HMessageMgr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMessageMgr*)
   {
      return GenerateInitInstanceLocal((::HMessageMgr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMessageMgr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSrcKeeper_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSrcKeeper(void *p = 0);
   static void *newArray_HSrcKeeper(Long_t size, void *p);
   static void delete_HSrcKeeper(void *p);
   static void deleteArray_HSrcKeeper(void *p);
   static void destruct_HSrcKeeper(void *p);
   static void streamer_HSrcKeeper(TBuffer &buf, void *obj);
   static Long64_t merge_HSrcKeeper(void *obj, TCollection *coll,TFileMergeInfo *info);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSrcKeeper*)
   {
      ::HSrcKeeper *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSrcKeeper >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSrcKeeper", ::HSrcKeeper::Class_Version(), "./util/hsrckeeper.h", 14,
                  typeid(::HSrcKeeper), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSrcKeeper::Dictionary, isa_proxy, 0,
                  sizeof(::HSrcKeeper) );
      instance.SetNew(&new_HSrcKeeper);
      instance.SetNewArray(&newArray_HSrcKeeper);
      instance.SetDelete(&delete_HSrcKeeper);
      instance.SetDeleteArray(&deleteArray_HSrcKeeper);
      instance.SetDestructor(&destruct_HSrcKeeper);
      instance.SetStreamerFunc(&streamer_HSrcKeeper);
      instance.SetMerge(&merge_HSrcKeeper);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSrcKeeper*)
   {
      return GenerateInitInstanceLocal((::HSrcKeeper*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSrcKeeper*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HNtuple_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HNtuple(void *p = 0);
   static void *newArray_HNtuple(Long_t size, void *p);
   static void delete_HNtuple(void *p);
   static void deleteArray_HNtuple(void *p);
   static void destruct_HNtuple(void *p);
   static void streamer_HNtuple(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HNtuple*)
   {
      ::HNtuple *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HNtuple >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HNtuple", ::HNtuple::Class_Version(), "./util/hntuple.h", 18,
                  typeid(::HNtuple), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HNtuple::Dictionary, isa_proxy, 0,
                  sizeof(::HNtuple) );
      instance.SetNew(&new_HNtuple);
      instance.SetNewArray(&newArray_HNtuple);
      instance.SetDelete(&delete_HNtuple);
      instance.SetDeleteArray(&deleteArray_HNtuple);
      instance.SetDestructor(&destruct_HNtuple);
      instance.SetStreamerFunc(&streamer_HNtuple);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HNtuple*)
   {
      return GenerateInitInstanceLocal((::HNtuple*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HNtuple*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HNtupleMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HNtupleMap(void *p = 0);
   static void *newArray_HNtupleMap(Long_t size, void *p);
   static void delete_HNtupleMap(void *p);
   static void deleteArray_HNtupleMap(void *p);
   static void destruct_HNtupleMap(void *p);
   static void streamer_HNtupleMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HNtupleMap*)
   {
      ::HNtupleMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HNtupleMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HNtupleMap", ::HNtupleMap::Class_Version(), "./util/hntuplemap.h", 13,
                  typeid(::HNtupleMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HNtupleMap::Dictionary, isa_proxy, 0,
                  sizeof(::HNtupleMap) );
      instance.SetNew(&new_HNtupleMap);
      instance.SetNewArray(&newArray_HNtupleMap);
      instance.SetDelete(&delete_HNtupleMap);
      instance.SetDeleteArray(&deleteArray_HNtupleMap);
      instance.SetDestructor(&destruct_HNtupleMap);
      instance.SetStreamerFunc(&streamer_HNtupleMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HNtupleMap*)
   {
      return GenerateInitInstanceLocal((::HNtupleMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HNtupleMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HArrayC_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HArrayC(void *p = 0);
   static void *newArray_HArrayC(Long_t size, void *p);
   static void delete_HArrayC(void *p);
   static void deleteArray_HArrayC(void *p);
   static void destruct_HArrayC(void *p);
   static void streamer_HArrayC(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HArrayC*)
   {
      ::HArrayC *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HArrayC >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HArrayC", ::HArrayC::Class_Version(), "./util/harray.h", 21,
                  typeid(::HArrayC), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HArrayC::Dictionary, isa_proxy, 0,
                  sizeof(::HArrayC) );
      instance.SetNew(&new_HArrayC);
      instance.SetNewArray(&newArray_HArrayC);
      instance.SetDelete(&delete_HArrayC);
      instance.SetDeleteArray(&deleteArray_HArrayC);
      instance.SetDestructor(&destruct_HArrayC);
      instance.SetStreamerFunc(&streamer_HArrayC);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HArrayC*)
   {
      return GenerateInitInstanceLocal((::HArrayC*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HArrayC*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HArrayS_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HArrayS(void *p = 0);
   static void *newArray_HArrayS(Long_t size, void *p);
   static void delete_HArrayS(void *p);
   static void deleteArray_HArrayS(void *p);
   static void destruct_HArrayS(void *p);
   static void streamer_HArrayS(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HArrayS*)
   {
      ::HArrayS *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HArrayS >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HArrayS", ::HArrayS::Class_Version(), "./util/harray.h", 39,
                  typeid(::HArrayS), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HArrayS::Dictionary, isa_proxy, 0,
                  sizeof(::HArrayS) );
      instance.SetNew(&new_HArrayS);
      instance.SetNewArray(&newArray_HArrayS);
      instance.SetDelete(&delete_HArrayS);
      instance.SetDeleteArray(&deleteArray_HArrayS);
      instance.SetDestructor(&destruct_HArrayS);
      instance.SetStreamerFunc(&streamer_HArrayS);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HArrayS*)
   {
      return GenerateInitInstanceLocal((::HArrayS*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HArrayS*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HArrayI_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HArrayI(void *p = 0);
   static void *newArray_HArrayI(Long_t size, void *p);
   static void delete_HArrayI(void *p);
   static void deleteArray_HArrayI(void *p);
   static void destruct_HArrayI(void *p);
   static void streamer_HArrayI(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HArrayI*)
   {
      ::HArrayI *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HArrayI >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HArrayI", ::HArrayI::Class_Version(), "./util/harray.h", 57,
                  typeid(::HArrayI), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HArrayI::Dictionary, isa_proxy, 0,
                  sizeof(::HArrayI) );
      instance.SetNew(&new_HArrayI);
      instance.SetNewArray(&newArray_HArrayI);
      instance.SetDelete(&delete_HArrayI);
      instance.SetDeleteArray(&deleteArray_HArrayI);
      instance.SetDestructor(&destruct_HArrayI);
      instance.SetStreamerFunc(&streamer_HArrayI);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HArrayI*)
   {
      return GenerateInitInstanceLocal((::HArrayI*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HArrayI*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HArrayL_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HArrayL(void *p = 0);
   static void *newArray_HArrayL(Long_t size, void *p);
   static void delete_HArrayL(void *p);
   static void deleteArray_HArrayL(void *p);
   static void destruct_HArrayL(void *p);
   static void streamer_HArrayL(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HArrayL*)
   {
      ::HArrayL *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HArrayL >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HArrayL", ::HArrayL::Class_Version(), "./util/harray.h", 75,
                  typeid(::HArrayL), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HArrayL::Dictionary, isa_proxy, 0,
                  sizeof(::HArrayL) );
      instance.SetNew(&new_HArrayL);
      instance.SetNewArray(&newArray_HArrayL);
      instance.SetDelete(&delete_HArrayL);
      instance.SetDeleteArray(&deleteArray_HArrayL);
      instance.SetDestructor(&destruct_HArrayL);
      instance.SetStreamerFunc(&streamer_HArrayL);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HArrayL*)
   {
      return GenerateInitInstanceLocal((::HArrayL*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HArrayL*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HArrayL64_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HArrayL64(void *p = 0);
   static void *newArray_HArrayL64(Long_t size, void *p);
   static void delete_HArrayL64(void *p);
   static void deleteArray_HArrayL64(void *p);
   static void destruct_HArrayL64(void *p);
   static void streamer_HArrayL64(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HArrayL64*)
   {
      ::HArrayL64 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HArrayL64 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HArrayL64", ::HArrayL64::Class_Version(), "./util/harray.h", 93,
                  typeid(::HArrayL64), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HArrayL64::Dictionary, isa_proxy, 0,
                  sizeof(::HArrayL64) );
      instance.SetNew(&new_HArrayL64);
      instance.SetNewArray(&newArray_HArrayL64);
      instance.SetDelete(&delete_HArrayL64);
      instance.SetDeleteArray(&deleteArray_HArrayL64);
      instance.SetDestructor(&destruct_HArrayL64);
      instance.SetStreamerFunc(&streamer_HArrayL64);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HArrayL64*)
   {
      return GenerateInitInstanceLocal((::HArrayL64*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HArrayL64*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HArrayF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HArrayF(void *p = 0);
   static void *newArray_HArrayF(Long_t size, void *p);
   static void delete_HArrayF(void *p);
   static void deleteArray_HArrayF(void *p);
   static void destruct_HArrayF(void *p);
   static void streamer_HArrayF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HArrayF*)
   {
      ::HArrayF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HArrayF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HArrayF", ::HArrayF::Class_Version(), "./util/harray.h", 111,
                  typeid(::HArrayF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HArrayF::Dictionary, isa_proxy, 0,
                  sizeof(::HArrayF) );
      instance.SetNew(&new_HArrayF);
      instance.SetNewArray(&newArray_HArrayF);
      instance.SetDelete(&delete_HArrayF);
      instance.SetDeleteArray(&deleteArray_HArrayF);
      instance.SetDestructor(&destruct_HArrayF);
      instance.SetStreamerFunc(&streamer_HArrayF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HArrayF*)
   {
      return GenerateInitInstanceLocal((::HArrayF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HArrayF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HArrayD_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HArrayD(void *p = 0);
   static void *newArray_HArrayD(Long_t size, void *p);
   static void delete_HArrayD(void *p);
   static void deleteArray_HArrayD(void *p);
   static void destruct_HArrayD(void *p);
   static void streamer_HArrayD(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HArrayD*)
   {
      ::HArrayD *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HArrayD >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HArrayD", ::HArrayD::Class_Version(), "./util/harray.h", 129,
                  typeid(::HArrayD), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HArrayD::Dictionary, isa_proxy, 0,
                  sizeof(::HArrayD) );
      instance.SetNew(&new_HArrayD);
      instance.SetNewArray(&newArray_HArrayD);
      instance.SetDelete(&delete_HArrayD);
      instance.SetDeleteArray(&deleteArray_HArrayD);
      instance.SetDestructor(&destruct_HArrayD);
      instance.SetStreamerFunc(&streamer_HArrayD);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HArrayD*)
   {
      return GenerateInitInstanceLocal((::HArrayD*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HArrayD*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTool(void *p = 0);
   static void *newArray_HTool(Long_t size, void *p);
   static void delete_HTool(void *p);
   static void deleteArray_HTool(void *p);
   static void destruct_HTool(void *p);
   static void streamer_HTool(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTool*)
   {
      ::HTool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTool", ::HTool::Class_Version(), "./util/htool.h", 17,
                  typeid(::HTool), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTool::Dictionary, isa_proxy, 0,
                  sizeof(::HTool) );
      instance.SetNew(&new_HTool);
      instance.SetNewArray(&newArray_HTool);
      instance.SetDelete(&delete_HTool);
      instance.SetDeleteArray(&deleteArray_HTool);
      instance.SetDestructor(&destruct_HTool);
      instance.SetStreamerFunc(&streamer_HTool);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTool*)
   {
      return GenerateInitInstanceLocal((::HTool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HHistMap_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HHistMap(void *p = 0);
   static void *newArray_HHistMap(Long_t size, void *p);
   static void delete_HHistMap(void *p);
   static void deleteArray_HHistMap(void *p);
   static void destruct_HHistMap(void *p);
   static void streamer_HHistMap(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HHistMap*)
   {
      ::HHistMap *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HHistMap >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HHistMap", ::HHistMap::Class_Version(), "./util/hhistmap.h", 31,
                  typeid(::HHistMap), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HHistMap::Dictionary, isa_proxy, 0,
                  sizeof(::HHistMap) );
      instance.SetNew(&new_HHistMap);
      instance.SetNewArray(&newArray_HHistMap);
      instance.SetDelete(&delete_HHistMap);
      instance.SetDeleteArray(&deleteArray_HHistMap);
      instance.SetDestructor(&destruct_HHistMap);
      instance.SetStreamerFunc(&streamer_HHistMap);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HHistMap*)
   {
      return GenerateInitInstanceLocal((::HHistMap*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HHistMap*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HFlex_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HFlex(void *p = 0);
   static void *newArray_HFlex(Long_t size, void *p);
   static void delete_HFlex(void *p);
   static void deleteArray_HFlex(void *p);
   static void destruct_HFlex(void *p);
   static void streamer_HFlex(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HFlex*)
   {
      ::HFlex *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HFlex >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HFlex", ::HFlex::Class_Version(), "./util/hflex.h", 12,
                  typeid(::HFlex), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HFlex::Dictionary, isa_proxy, 0,
                  sizeof(::HFlex) );
      instance.SetNew(&new_HFlex);
      instance.SetNewArray(&newArray_HFlex);
      instance.SetDelete(&delete_HFlex);
      instance.SetDeleteArray(&deleteArray_HFlex);
      instance.SetDestructor(&destruct_HFlex);
      instance.SetStreamerFunc(&streamer_HFlex);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HFlex*)
   {
      return GenerateInitInstanceLocal((::HFlex*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HFlex*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HFlexFiller_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HFlexFiller(void *p = 0);
   static void *newArray_HFlexFiller(Long_t size, void *p);
   static void delete_HFlexFiller(void *p);
   static void deleteArray_HFlexFiller(void *p);
   static void destruct_HFlexFiller(void *p);
   static void streamer_HFlexFiller(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HFlexFiller*)
   {
      ::HFlexFiller *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HFlexFiller >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HFlexFiller", ::HFlexFiller::Class_Version(), "./util/hflexfiller.h", 13,
                  typeid(::HFlexFiller), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HFlexFiller::Dictionary, isa_proxy, 0,
                  sizeof(::HFlexFiller) );
      instance.SetNew(&new_HFlexFiller);
      instance.SetNewArray(&newArray_HFlexFiller);
      instance.SetDelete(&delete_HFlexFiller);
      instance.SetDeleteArray(&deleteArray_HFlexFiller);
      instance.SetDestructor(&destruct_HFlexFiller);
      instance.SetStreamerFunc(&streamer_HFlexFiller);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HFlexFiller*)
   {
      return GenerateInitInstanceLocal((::HFlexFiller*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HFlexFiller*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPhysicsConstants_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPhysicsConstants(void *p = 0);
   static void *newArray_HPhysicsConstants(Long_t size, void *p);
   static void delete_HPhysicsConstants(void *p);
   static void deleteArray_HPhysicsConstants(void *p);
   static void destruct_HPhysicsConstants(void *p);
   static void streamer_HPhysicsConstants(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPhysicsConstants*)
   {
      ::HPhysicsConstants *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPhysicsConstants >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPhysicsConstants", ::HPhysicsConstants::Class_Version(), "./util/hphysicsconstants.h", 70,
                  typeid(::HPhysicsConstants), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPhysicsConstants::Dictionary, isa_proxy, 0,
                  sizeof(::HPhysicsConstants) );
      instance.SetNew(&new_HPhysicsConstants);
      instance.SetNewArray(&newArray_HPhysicsConstants);
      instance.SetDelete(&delete_HPhysicsConstants);
      instance.SetDeleteArray(&deleteArray_HPhysicsConstants);
      instance.SetDestructor(&destruct_HPhysicsConstants);
      instance.SetStreamerFunc(&streamer_HPhysicsConstants);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPhysicsConstants*)
   {
      return GenerateInitInstanceLocal((::HPhysicsConstants*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPhysicsConstants*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HHistConverter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HHistConverter(void *p = 0);
   static void *newArray_HHistConverter(Long_t size, void *p);
   static void delete_HHistConverter(void *p);
   static void deleteArray_HHistConverter(void *p);
   static void destruct_HHistConverter(void *p);
   static void streamer_HHistConverter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HHistConverter*)
   {
      ::HHistConverter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HHistConverter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HHistConverter", ::HHistConverter::Class_Version(), "./util/hhistconverter.h", 10,
                  typeid(::HHistConverter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HHistConverter::Dictionary, isa_proxy, 0,
                  sizeof(::HHistConverter) );
      instance.SetNew(&new_HHistConverter);
      instance.SetNewArray(&newArray_HHistConverter);
      instance.SetDelete(&delete_HHistConverter);
      instance.SetDeleteArray(&deleteArray_HHistConverter);
      instance.SetDestructor(&destruct_HHistConverter);
      instance.SetStreamerFunc(&streamer_HHistConverter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HHistConverter*)
   {
      return GenerateInitInstanceLocal((::HHistConverter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HHistConverter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HBitMan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HBitMan(void *p = 0);
   static void *newArray_HBitMan(Long_t size, void *p);
   static void delete_HBitMan(void *p);
   static void deleteArray_HBitMan(void *p);
   static void destruct_HBitMan(void *p);
   static void streamer_HBitMan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HBitMan*)
   {
      ::HBitMan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HBitMan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HBitMan", ::HBitMan::Class_Version(), "./util/hbitman.h", 10,
                  typeid(::HBitMan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HBitMan::Dictionary, isa_proxy, 0,
                  sizeof(::HBitMan) );
      instance.SetNew(&new_HBitMan);
      instance.SetNewArray(&newArray_HBitMan);
      instance.SetDelete(&delete_HBitMan);
      instance.SetDeleteArray(&deleteArray_HBitMan);
      instance.SetDestructor(&destruct_HBitMan);
      instance.SetStreamerFunc(&streamer_HBitMan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HBitMan*)
   {
      return GenerateInitInstanceLocal((::HBitMan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HBitMan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSTLTool_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSTLTool(void *p = 0);
   static void *newArray_HSTLTool(Long_t size, void *p);
   static void delete_HSTLTool(void *p);
   static void deleteArray_HSTLTool(void *p);
   static void destruct_HSTLTool(void *p);
   static void streamer_HSTLTool(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSTLTool*)
   {
      ::HSTLTool *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSTLTool >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSTLTool", ::HSTLTool::Class_Version(), "./util/hstltool.h", 15,
                  typeid(::HSTLTool), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSTLTool::Dictionary, isa_proxy, 0,
                  sizeof(::HSTLTool) );
      instance.SetNew(&new_HSTLTool);
      instance.SetNewArray(&newArray_HSTLTool);
      instance.SetDelete(&delete_HSTLTool);
      instance.SetDeleteArray(&deleteArray_HSTLTool);
      instance.SetDestructor(&destruct_HSTLTool);
      instance.SetStreamerFunc(&streamer_HSTLTool);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSTLTool*)
   {
      return GenerateInitInstanceLocal((::HSTLTool*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSTLTool*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HCategoryManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HCategoryManager(void *p = 0);
   static void *newArray_HCategoryManager(Long_t size, void *p);
   static void delete_HCategoryManager(void *p);
   static void deleteArray_HCategoryManager(void *p);
   static void destruct_HCategoryManager(void *p);
   static void streamer_HCategoryManager(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HCategoryManager*)
   {
      ::HCategoryManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HCategoryManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HCategoryManager", ::HCategoryManager::Class_Version(), "./util/hcategorymanager.h", 16,
                  typeid(::HCategoryManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HCategoryManager::Dictionary, isa_proxy, 0,
                  sizeof(::HCategoryManager) );
      instance.SetNew(&new_HCategoryManager);
      instance.SetNewArray(&newArray_HCategoryManager);
      instance.SetDelete(&delete_HCategoryManager);
      instance.SetDeleteArray(&deleteArray_HCategoryManager);
      instance.SetDestructor(&destruct_HCategoryManager);
      instance.SetStreamerFunc(&streamer_HCategoryManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HCategoryManager*)
   {
      return GenerateInitInstanceLocal((::HCategoryManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HCategoryManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSectorSelector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSectorSelector(void *p = 0);
   static void *newArray_HSectorSelector(Long_t size, void *p);
   static void delete_HSectorSelector(void *p);
   static void deleteArray_HSectorSelector(void *p);
   static void destruct_HSectorSelector(void *p);
   static void streamer_HSectorSelector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSectorSelector*)
   {
      ::HSectorSelector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSectorSelector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSectorSelector", ::HSectorSelector::Class_Version(), "./util/hloop.h", 30,
                  typeid(::HSectorSelector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSectorSelector::Dictionary, isa_proxy, 0,
                  sizeof(::HSectorSelector) );
      instance.SetNew(&new_HSectorSelector);
      instance.SetNewArray(&newArray_HSectorSelector);
      instance.SetDelete(&delete_HSectorSelector);
      instance.SetDeleteArray(&deleteArray_HSectorSelector);
      instance.SetDestructor(&destruct_HSectorSelector);
      instance.SetStreamerFunc(&streamer_HSectorSelector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSectorSelector*)
   {
      return GenerateInitInstanceLocal((::HSectorSelector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSectorSelector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HLoop_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HLoop(void *p = 0);
   static void *newArray_HLoop(Long_t size, void *p);
   static void delete_HLoop(void *p);
   static void deleteArray_HLoop(void *p);
   static void destruct_HLoop(void *p);
   static void streamer_HLoop(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HLoop*)
   {
      ::HLoop *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HLoop >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HLoop", ::HLoop::Class_Version(), "./util/hloop.h", 132,
                  typeid(::HLoop), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HLoop::Dictionary, isa_proxy, 0,
                  sizeof(::HLoop) );
      instance.SetNew(&new_HLoop);
      instance.SetNewArray(&newArray_HLoop);
      instance.SetDelete(&delete_HLoop);
      instance.SetDeleteArray(&deleteArray_HLoop);
      instance.SetDestructor(&destruct_HLoop);
      instance.SetStreamerFunc(&streamer_HLoop);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HLoop*)
   {
      return GenerateInitInstanceLocal((::HLoop*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HLoop*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HZip_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HZip(void *p = 0);
   static void *newArray_HZip(Long_t size, void *p);
   static void delete_HZip(void *p);
   static void deleteArray_HZip(void *p);
   static void destruct_HZip(void *p);
   static void streamer_HZip(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HZip*)
   {
      ::HZip *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HZip >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HZip", ::HZip::Class_Version(), "./util/hzip.h", 32,
                  typeid(::HZip), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HZip::Dictionary, isa_proxy, 0,
                  sizeof(::HZip) );
      instance.SetNew(&new_HZip);
      instance.SetNewArray(&newArray_HZip);
      instance.SetDelete(&delete_HZip);
      instance.SetDeleteArray(&deleteArray_HZip);
      instance.SetDestructor(&destruct_HZip);
      instance.SetStreamerFunc(&streamer_HZip);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HZip*)
   {
      return GenerateInitInstanceLocal((::HZip*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HZip*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HDiskCatalog_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HDiskCatalog(void *p = 0);
   static void *newArray_HDiskCatalog(Long_t size, void *p);
   static void delete_HDiskCatalog(void *p);
   static void deleteArray_HDiskCatalog(void *p);
   static void destruct_HDiskCatalog(void *p);
   static void streamer_HDiskCatalog(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDiskCatalog*)
   {
      ::HDiskCatalog *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDiskCatalog >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDiskCatalog", ::HDiskCatalog::Class_Version(), "./util/hdiskspace.h", 262,
                  typeid(::HDiskCatalog), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDiskCatalog::Dictionary, isa_proxy, 0,
                  sizeof(::HDiskCatalog) );
      instance.SetNew(&new_HDiskCatalog);
      instance.SetNewArray(&newArray_HDiskCatalog);
      instance.SetDelete(&delete_HDiskCatalog);
      instance.SetDeleteArray(&deleteArray_HDiskCatalog);
      instance.SetDestructor(&destruct_HDiskCatalog);
      instance.SetStreamerFunc(&streamer_HDiskCatalog);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDiskCatalog*)
   {
      return GenerateInitInstanceLocal((::HDiskCatalog*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDiskCatalog*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HFileSys_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HFileSys_Dictionary();
   static void *new_HFileSys(void *p = 0);
   static void *newArray_HFileSys(Long_t size, void *p);
   static void delete_HFileSys(void *p);
   static void deleteArray_HFileSys(void *p);
   static void destruct_HFileSys(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HFileSys*)
   {
      ::HFileSys *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HFileSys),0);
      static ::ROOT::TGenericClassInfo 
         instance("HFileSys", "./util/hdiskspace.h", 113,
                  typeid(::HFileSys), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &HFileSys_Dictionary, isa_proxy, 0,
                  sizeof(::HFileSys) );
      instance.SetNew(&new_HFileSys);
      instance.SetNewArray(&newArray_HFileSys);
      instance.SetDelete(&delete_HFileSys);
      instance.SetDeleteArray(&deleteArray_HFileSys);
      instance.SetDestructor(&destruct_HFileSys);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HFileSys*)
   {
      return GenerateInitInstanceLocal((::HFileSys*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HFileSys*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HFileSys_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HFileSys*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HDiskFile_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HDiskFile(void *p = 0);
   static void *newArray_HDiskFile(Long_t size, void *p);
   static void delete_HDiskFile(void *p);
   static void deleteArray_HDiskFile(void *p);
   static void destruct_HDiskFile(void *p);
   static void streamer_HDiskFile(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDiskFile*)
   {
      ::HDiskFile *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDiskFile >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDiskFile", ::HDiskFile::Class_Version(), "./util/hdiskspace.h", 151,
                  typeid(::HDiskFile), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDiskFile::Dictionary, isa_proxy, 0,
                  sizeof(::HDiskFile) );
      instance.SetNew(&new_HDiskFile);
      instance.SetNewArray(&newArray_HDiskFile);
      instance.SetDelete(&delete_HDiskFile);
      instance.SetDeleteArray(&deleteArray_HDiskFile);
      instance.SetDestructor(&destruct_HDiskFile);
      instance.SetStreamerFunc(&streamer_HDiskFile);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDiskFile*)
   {
      return GenerateInitInstanceLocal((::HDiskFile*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDiskFile*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HDiskDir_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HDiskDir(void *p = 0);
   static void *newArray_HDiskDir(Long_t size, void *p);
   static void delete_HDiskDir(void *p);
   static void deleteArray_HDiskDir(void *p);
   static void destruct_HDiskDir(void *p);
   static void streamer_HDiskDir(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDiskDir*)
   {
      ::HDiskDir *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDiskDir >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDiskDir", ::HDiskDir::Class_Version(), "./util/hdiskspace.h", 182,
                  typeid(::HDiskDir), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDiskDir::Dictionary, isa_proxy, 0,
                  sizeof(::HDiskDir) );
      instance.SetNew(&new_HDiskDir);
      instance.SetNewArray(&newArray_HDiskDir);
      instance.SetDelete(&delete_HDiskDir);
      instance.SetDeleteArray(&deleteArray_HDiskDir);
      instance.SetDestructor(&destruct_HDiskDir);
      instance.SetStreamerFunc(&streamer_HDiskDir);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDiskDir*)
   {
      return GenerateInitInstanceLocal((::HDiskDir*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDiskDir*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HDiskStat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HDiskStat(void *p = 0);
   static void *newArray_HDiskStat(Long_t size, void *p);
   static void delete_HDiskStat(void *p);
   static void deleteArray_HDiskStat(void *p);
   static void destruct_HDiskStat(void *p);
   static void streamer_HDiskStat(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HDiskStat*)
   {
      ::HDiskStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HDiskStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HDiskStat", ::HDiskStat::Class_Version(), "./util/hdiskspace.h", 345,
                  typeid(::HDiskStat), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HDiskStat::Dictionary, isa_proxy, 0,
                  sizeof(::HDiskStat) );
      instance.SetNew(&new_HDiskStat);
      instance.SetNewArray(&newArray_HDiskStat);
      instance.SetDelete(&delete_HDiskStat);
      instance.SetDeleteArray(&deleteArray_HDiskStat);
      instance.SetDestructor(&destruct_HDiskStat);
      instance.SetStreamerFunc(&streamer_HDiskStat);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HDiskStat*)
   {
      return GenerateInitInstanceLocal((::HDiskStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HDiskStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HTime_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HTime(void *p = 0);
   static void *newArray_HTime(Long_t size, void *p);
   static void delete_HTime(void *p);
   static void deleteArray_HTime(void *p);
   static void destruct_HTime(void *p);
   static void streamer_HTime(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HTime*)
   {
      ::HTime *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HTime >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HTime", ::HTime::Class_Version(), "./util/htime.h", 13,
                  typeid(::HTime), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HTime::Dictionary, isa_proxy, 0,
                  sizeof(::HTime) );
      instance.SetNew(&new_HTime);
      instance.SetNewArray(&newArray_HTime);
      instance.SetDelete(&delete_HTime);
      instance.SetDeleteArray(&deleteArray_HTime);
      instance.SetDestructor(&destruct_HTime);
      instance.SetStreamerFunc(&streamer_HTime);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HTime*)
   {
      return GenerateInitInstanceLocal((::HTime*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HTime*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSeed_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSeed(void *p = 0);
   static void *newArray_HSeed(Long_t size, void *p);
   static void delete_HSeed(void *p);
   static void deleteArray_HSeed(void *p);
   static void destruct_HSeed(void *p);
   static void streamer_HSeed(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSeed*)
   {
      ::HSeed *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSeed >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSeed", ::HSeed::Class_Version(), "./util/hseed.h", 9,
                  typeid(::HSeed), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSeed::Dictionary, isa_proxy, 0,
                  sizeof(::HSeed) );
      instance.SetNew(&new_HSeed);
      instance.SetNewArray(&newArray_HSeed);
      instance.SetDelete(&delete_HSeed);
      instance.SetDeleteArray(&deleteArray_HSeed);
      instance.SetDestructor(&destruct_HSeed);
      instance.SetStreamerFunc(&streamer_HSeed);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSeed*)
   {
      return GenerateInitInstanceLocal((::HSeed*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSeed*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HMultiPagePDF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HMultiPagePDF(void *p = 0);
   static void *newArray_HMultiPagePDF(Long_t size, void *p);
   static void delete_HMultiPagePDF(void *p);
   static void deleteArray_HMultiPagePDF(void *p);
   static void destruct_HMultiPagePDF(void *p);
   static void streamer_HMultiPagePDF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HMultiPagePDF*)
   {
      ::HMultiPagePDF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HMultiPagePDF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HMultiPagePDF", ::HMultiPagePDF::Class_Version(), "./util/hmultipagepdf.h", 17,
                  typeid(::HMultiPagePDF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HMultiPagePDF::Dictionary, isa_proxy, 0,
                  sizeof(::HMultiPagePDF) );
      instance.SetNew(&new_HMultiPagePDF);
      instance.SetNewArray(&newArray_HMultiPagePDF);
      instance.SetDelete(&delete_HMultiPagePDF);
      instance.SetDeleteArray(&deleteArray_HMultiPagePDF);
      instance.SetDestructor(&destruct_HMultiPagePDF);
      instance.SetStreamerFunc(&streamer_HMultiPagePDF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HMultiPagePDF*)
   {
      return GenerateInitInstanceLocal((::HMultiPagePDF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HMultiPagePDF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSUProgress_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSUProgress(void *p = 0);
   static void *newArray_HSUProgress(Long_t size, void *p);
   static void delete_HSUProgress(void *p);
   static void deleteArray_HSUProgress(void *p);
   static void destruct_HSUProgress(void *p);
   static void streamer_HSUProgress(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSUProgress*)
   {
      ::HSUProgress *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSUProgress >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSUProgress", ::HSUProgress::Class_Version(), "util/hsuprogress.h", 13,
                  typeid(::HSUProgress), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSUProgress::Dictionary, isa_proxy, 0,
                  sizeof(::HSUProgress) );
      instance.SetNew(&new_HSUProgress);
      instance.SetNewArray(&newArray_HSUProgress);
      instance.SetDelete(&delete_HSUProgress);
      instance.SetDeleteArray(&deleteArray_HSUProgress);
      instance.SetDestructor(&destruct_HSUProgress);
      instance.SetStreamerFunc(&streamer_HSUProgress);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSUProgress*)
   {
      return GenerateInitInstanceLocal((::HSUProgress*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSUProgress*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSUExeMacro_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSUExeMacro(void *p = 0);
   static void *newArray_HSUExeMacro(Long_t size, void *p);
   static void delete_HSUExeMacro(void *p);
   static void deleteArray_HSUExeMacro(void *p);
   static void destruct_HSUExeMacro(void *p);
   static void streamer_HSUExeMacro(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSUExeMacro*)
   {
      ::HSUExeMacro *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSUExeMacro >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSUExeMacro", ::HSUExeMacro::Class_Version(), "./util/hsuexemacro.h", 65,
                  typeid(::HSUExeMacro), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSUExeMacro::Dictionary, isa_proxy, 0,
                  sizeof(::HSUExeMacro) );
      instance.SetNew(&new_HSUExeMacro);
      instance.SetNewArray(&newArray_HSUExeMacro);
      instance.SetDelete(&delete_HSUExeMacro);
      instance.SetDeleteArray(&deleteArray_HSUExeMacro);
      instance.SetDestructor(&destruct_HSUExeMacro);
      instance.SetStreamerFunc(&streamer_HSUExeMacro);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSUExeMacro*)
   {
      return GenerateInitInstanceLocal((::HSUExeMacro*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSUExeMacro*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSUDummyRec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSUDummyRec(void *p = 0);
   static void *newArray_HSUDummyRec(Long_t size, void *p);
   static void delete_HSUDummyRec(void *p);
   static void deleteArray_HSUDummyRec(void *p);
   static void destruct_HSUDummyRec(void *p);
   static void streamer_HSUDummyRec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSUDummyRec*)
   {
      ::HSUDummyRec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSUDummyRec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSUDummyRec", ::HSUDummyRec::Class_Version(), "./util/hsudummyrec.h", 34,
                  typeid(::HSUDummyRec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSUDummyRec::Dictionary, isa_proxy, 0,
                  sizeof(::HSUDummyRec) );
      instance.SetNew(&new_HSUDummyRec);
      instance.SetNewArray(&newArray_HSUDummyRec);
      instance.SetDelete(&delete_HSUDummyRec);
      instance.SetDeleteArray(&deleteArray_HSUDummyRec);
      instance.SetDestructor(&destruct_HSUDummyRec);
      instance.SetStreamerFunc(&streamer_HSUDummyRec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSUDummyRec*)
   {
      return GenerateInitInstanceLocal((::HSUDummyRec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSUDummyRec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HSUIteratorObject_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HSUIteratorObject(void *p = 0);
   static void *newArray_HSUIteratorObject(Long_t size, void *p);
   static void delete_HSUIteratorObject(void *p);
   static void deleteArray_HSUIteratorObject(void *p);
   static void destruct_HSUIteratorObject(void *p);
   static void streamer_HSUIteratorObject(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HSUIteratorObject*)
   {
      ::HSUIteratorObject *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HSUIteratorObject >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HSUIteratorObject", ::HSUIteratorObject::Class_Version(), "./util/hsudummyrec.h", 142,
                  typeid(::HSUIteratorObject), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HSUIteratorObject::Dictionary, isa_proxy, 0,
                  sizeof(::HSUIteratorObject) );
      instance.SetNew(&new_HSUIteratorObject);
      instance.SetNewArray(&newArray_HSUIteratorObject);
      instance.SetDelete(&delete_HSUIteratorObject);
      instance.SetDeleteArray(&deleteArray_HSUIteratorObject);
      instance.SetDestructor(&destruct_HSUIteratorObject);
      instance.SetStreamerFunc(&streamer_HSUIteratorObject);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HSUIteratorObject*)
   {
      return GenerateInitInstanceLocal((::HSUIteratorObject*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HSUIteratorObject*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HHitFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HHitFilter(void *p = 0);
   static void *newArray_HHitFilter(Long_t size, void *p);
   static void delete_HHitFilter(void *p);
   static void deleteArray_HHitFilter(void *p);
   static void destruct_HHitFilter(void *p);
   static void streamer_HHitFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HHitFilter*)
   {
      ::HHitFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HHitFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HHitFilter", ::HHitFilter::Class_Version(), "./util/hgeantfilter.h", 40,
                  typeid(::HHitFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HHitFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HHitFilter) );
      instance.SetNew(&new_HHitFilter);
      instance.SetNewArray(&newArray_HHitFilter);
      instance.SetDelete(&delete_HHitFilter);
      instance.SetDeleteArray(&deleteArray_HHitFilter);
      instance.SetDestructor(&destruct_HHitFilter);
      instance.SetStreamerFunc(&streamer_HHitFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HHitFilter*)
   {
      return GenerateInitInstanceLocal((::HHitFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HHitFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeantFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HGeantFilter(void *p);
   static void deleteArray_HGeantFilter(void *p);
   static void destruct_HGeantFilter(void *p);
   static void streamer_HGeantFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeantFilter*)
   {
      ::HGeantFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeantFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeantFilter", ::HGeantFilter::Class_Version(), "./util/hgeantfilter.h", 14,
                  typeid(::HGeantFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeantFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HGeantFilter) );
      instance.SetDelete(&delete_HGeantFilter);
      instance.SetDeleteArray(&deleteArray_HGeantFilter);
      instance.SetDestructor(&destruct_HGeantFilter);
      instance.SetStreamerFunc(&streamer_HGeantFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeantFilter*)
   {
      return GenerateInitInstanceLocal((::HGeantFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeantFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HDebug::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDebug::Class_Name()
{
   return "HDebug";
}

//______________________________________________________________________________
const char *HDebug::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDebug*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDebug::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDebug*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDebug::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDebug*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDebug::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDebug*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HObjTable::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HObjTable::Class_Name()
{
   return "HObjTable";
}

//______________________________________________________________________________
const char *HObjTable::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HObjTable*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HObjTable::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HObjTable*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HObjTable::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HObjTable*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HObjTable::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HObjTable*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRunAnalizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRunAnalizer::Class_Name()
{
   return "HRunAnalizer";
}

//______________________________________________________________________________
const char *HRunAnalizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRunAnalizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRunAnalizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRunAnalizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRunAnalizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRunAnalizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRunAnalizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRunAnalizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSymMat::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSymMat::Class_Name()
{
   return "HSymMat";
}

//______________________________________________________________________________
const char *HSymMat::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSymMat::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSymMat::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSymMat::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSymMat2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSymMat2::Class_Name()
{
   return "HSymMat2";
}

//______________________________________________________________________________
const char *HSymMat2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSymMat2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSymMat2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSymMat2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSymMat3::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSymMat3::Class_Name()
{
   return "HSymMat3";
}

//______________________________________________________________________________
const char *HSymMat3::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat3*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSymMat3::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat3*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSymMat3::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat3*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSymMat3::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat3*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSymMat4::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSymMat4::Class_Name()
{
   return "HSymMat4";
}

//______________________________________________________________________________
const char *HSymMat4::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat4*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSymMat4::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat4*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSymMat4::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat4*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSymMat4::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat4*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSymMat5::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSymMat5::Class_Name()
{
   return "HSymMat5";
}

//______________________________________________________________________________
const char *HSymMat5::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat5*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSymMat5::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat5*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSymMat5::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat5*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSymMat5::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat5*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSymMat6::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSymMat6::Class_Name()
{
   return "HSymMat6";
}

//______________________________________________________________________________
const char *HSymMat6::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat6*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSymMat6::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat6*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSymMat6::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat6*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSymMat6::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSymMat6*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMessageMgr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMessageMgr::Class_Name()
{
   return "HMessageMgr";
}

//______________________________________________________________________________
const char *HMessageMgr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMessageMgr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMessageMgr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMessageMgr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMessageMgr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMessageMgr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMessageMgr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMessageMgr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSrcKeeper::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSrcKeeper::Class_Name()
{
   return "HSrcKeeper";
}

//______________________________________________________________________________
const char *HSrcKeeper::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSrcKeeper*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSrcKeeper::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSrcKeeper*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSrcKeeper::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSrcKeeper*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSrcKeeper::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSrcKeeper*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HNtuple::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HNtuple::Class_Name()
{
   return "HNtuple";
}

//______________________________________________________________________________
const char *HNtuple::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HNtuple*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HNtuple::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HNtuple*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HNtuple::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HNtuple*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HNtuple::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HNtuple*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HNtupleMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HNtupleMap::Class_Name()
{
   return "HNtupleMap";
}

//______________________________________________________________________________
const char *HNtupleMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HNtupleMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HNtupleMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HNtupleMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HNtupleMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HNtupleMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HNtupleMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HNtupleMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HArrayC::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HArrayC::Class_Name()
{
   return "HArrayC";
}

//______________________________________________________________________________
const char *HArrayC::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayC*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HArrayC::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayC*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HArrayC::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayC*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HArrayC::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayC*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HArrayS::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HArrayS::Class_Name()
{
   return "HArrayS";
}

//______________________________________________________________________________
const char *HArrayS::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayS*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HArrayS::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayS*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HArrayS::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayS*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HArrayS::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayS*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HArrayI::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HArrayI::Class_Name()
{
   return "HArrayI";
}

//______________________________________________________________________________
const char *HArrayI::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayI*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HArrayI::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayI*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HArrayI::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayI*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HArrayI::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayI*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HArrayL::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HArrayL::Class_Name()
{
   return "HArrayL";
}

//______________________________________________________________________________
const char *HArrayL::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HArrayL::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HArrayL::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HArrayL::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HArrayL64::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HArrayL64::Class_Name()
{
   return "HArrayL64";
}

//______________________________________________________________________________
const char *HArrayL64::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL64*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HArrayL64::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL64*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HArrayL64::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL64*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HArrayL64::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayL64*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HArrayF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HArrayF::Class_Name()
{
   return "HArrayF";
}

//______________________________________________________________________________
const char *HArrayF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HArrayF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HArrayF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HArrayF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HArrayD::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HArrayD::Class_Name()
{
   return "HArrayD";
}

//______________________________________________________________________________
const char *HArrayD::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayD*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HArrayD::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayD*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HArrayD::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayD*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HArrayD::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HArrayD*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTool::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTool::Class_Name()
{
   return "HTool";
}

//______________________________________________________________________________
const char *HTool::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTool::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTool::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTool::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTool*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HHistMap::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HHistMap::Class_Name()
{
   return "HHistMap";
}

//______________________________________________________________________________
const char *HHistMap::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HHistMap*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HHistMap::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HHistMap*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HHistMap::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HHistMap*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HHistMap::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HHistMap*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HFlex::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HFlex::Class_Name()
{
   return "HFlex";
}

//______________________________________________________________________________
const char *HFlex::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HFlex*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HFlex::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HFlex*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HFlex::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HFlex*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HFlex::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HFlex*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HFlexFiller::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HFlexFiller::Class_Name()
{
   return "HFlexFiller";
}

//______________________________________________________________________________
const char *HFlexFiller::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HFlexFiller*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HFlexFiller::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HFlexFiller*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HFlexFiller::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HFlexFiller*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HFlexFiller::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HFlexFiller*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPhysicsConstants::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPhysicsConstants::Class_Name()
{
   return "HPhysicsConstants";
}

//______________________________________________________________________________
const char *HPhysicsConstants::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPhysicsConstants*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPhysicsConstants::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPhysicsConstants*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPhysicsConstants::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPhysicsConstants*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPhysicsConstants::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPhysicsConstants*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HHistConverter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HHistConverter::Class_Name()
{
   return "HHistConverter";
}

//______________________________________________________________________________
const char *HHistConverter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HHistConverter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HHistConverter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HHistConverter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HHistConverter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HHistConverter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HHistConverter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HHistConverter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HBitMan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HBitMan::Class_Name()
{
   return "HBitMan";
}

//______________________________________________________________________________
const char *HBitMan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBitMan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HBitMan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBitMan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HBitMan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBitMan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HBitMan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBitMan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSTLTool::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSTLTool::Class_Name()
{
   return "HSTLTool";
}

//______________________________________________________________________________
const char *HSTLTool::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSTLTool*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSTLTool::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSTLTool*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSTLTool::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSTLTool*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSTLTool::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSTLTool*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HCategoryManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HCategoryManager::Class_Name()
{
   return "HCategoryManager";
}

//______________________________________________________________________________
const char *HCategoryManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HCategoryManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HCategoryManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HCategoryManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HCategoryManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HCategoryManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HCategoryManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HCategoryManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSectorSelector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSectorSelector::Class_Name()
{
   return "HSectorSelector";
}

//______________________________________________________________________________
const char *HSectorSelector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSectorSelector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSectorSelector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSectorSelector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSectorSelector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSectorSelector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSectorSelector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSectorSelector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HLoop::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HLoop::Class_Name()
{
   return "HLoop";
}

//______________________________________________________________________________
const char *HLoop::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLoop*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HLoop::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HLoop*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HLoop::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLoop*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HLoop::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HLoop*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HZip::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HZip::Class_Name()
{
   return "HZip";
}

//______________________________________________________________________________
const char *HZip::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HZip*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HZip::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HZip*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HZip::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HZip*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HZip::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HZip*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HDiskCatalog::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDiskCatalog::Class_Name()
{
   return "HDiskCatalog";
}

//______________________________________________________________________________
const char *HDiskCatalog::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskCatalog*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDiskCatalog::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskCatalog*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDiskCatalog::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskCatalog*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDiskCatalog::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskCatalog*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HDiskFile::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDiskFile::Class_Name()
{
   return "HDiskFile";
}

//______________________________________________________________________________
const char *HDiskFile::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskFile*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDiskFile::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskFile*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDiskFile::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskFile*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDiskFile::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskFile*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HDiskDir::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDiskDir::Class_Name()
{
   return "HDiskDir";
}

//______________________________________________________________________________
const char *HDiskDir::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskDir*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDiskDir::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskDir*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDiskDir::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskDir*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDiskDir::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskDir*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HDiskStat::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HDiskStat::Class_Name()
{
   return "HDiskStat";
}

//______________________________________________________________________________
const char *HDiskStat::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HDiskStat::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HDiskStat::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HDiskStat::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HDiskStat*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HTime::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HTime::Class_Name()
{
   return "HTime";
}

//______________________________________________________________________________
const char *HTime::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTime*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HTime::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HTime*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HTime::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTime*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HTime::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HTime*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSeed::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSeed::Class_Name()
{
   return "HSeed";
}

//______________________________________________________________________________
const char *HSeed::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeed*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSeed::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSeed*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSeed::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeed*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSeed::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSeed*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HMultiPagePDF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HMultiPagePDF::Class_Name()
{
   return "HMultiPagePDF";
}

//______________________________________________________________________________
const char *HMultiPagePDF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMultiPagePDF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HMultiPagePDF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HMultiPagePDF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HMultiPagePDF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMultiPagePDF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HMultiPagePDF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HMultiPagePDF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSUProgress::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSUProgress::Class_Name()
{
   return "HSUProgress";
}

//______________________________________________________________________________
const char *HSUProgress::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUProgress*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSUProgress::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUProgress*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSUProgress::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUProgress*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSUProgress::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUProgress*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSUExeMacro::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSUExeMacro::Class_Name()
{
   return "HSUExeMacro";
}

//______________________________________________________________________________
const char *HSUExeMacro::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUExeMacro*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSUExeMacro::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUExeMacro*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSUExeMacro::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUExeMacro*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSUExeMacro::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUExeMacro*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSUDummyRec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSUDummyRec::Class_Name()
{
   return "HSUDummyRec";
}

//______________________________________________________________________________
const char *HSUDummyRec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUDummyRec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSUDummyRec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUDummyRec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSUDummyRec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUDummyRec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSUDummyRec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUDummyRec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HSUIteratorObject::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HSUIteratorObject::Class_Name()
{
   return "HSUIteratorObject";
}

//______________________________________________________________________________
const char *HSUIteratorObject::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUIteratorObject*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HSUIteratorObject::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HSUIteratorObject*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HSUIteratorObject::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUIteratorObject*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HSUIteratorObject::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HSUIteratorObject*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HHitFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HHitFilter::Class_Name()
{
   return "HHitFilter";
}

//______________________________________________________________________________
const char *HHitFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HHitFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HHitFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HHitFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HHitFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HHitFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HHitFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HHitFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeantFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeantFilter::Class_Name()
{
   return "HGeantFilter";
}

//______________________________________________________________________________
const char *HGeantFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeantFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeantFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeantFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeantFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HDebug::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDebug.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fIdentLevel;
      R__b.CheckByteCount(R__s, R__c, HDebug::IsA());
   } else {
      R__c = R__b.WriteVersion(HDebug::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fIdentLevel;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDebug::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDebug.
      TClass *R__cl = ::HDebug::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIdentLevel", &fIdentLevel);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HDebug(void *p) {
      return  p ? new(p) ::HDebug : new ::HDebug;
   }
   static void *newArray_HDebug(Long_t nElements, void *p) {
      return p ? new(p) ::HDebug[nElements] : new ::HDebug[nElements];
   }
   // Wrapper around operator delete
   static void delete_HDebug(void *p) {
      delete ((::HDebug*)p);
   }
   static void deleteArray_HDebug(void *p) {
      delete [] ((::HDebug*)p);
   }
   static void destruct_HDebug(void *p) {
      typedef ::HDebug current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDebug(TBuffer &buf, void *obj) {
      ((::HDebug*)obj)->::HDebug::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDebug

//______________________________________________________________________________
void HObjTable::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HObjTable.
      TClass *R__cl = ::HObjTable::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_fData", &m_fData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nNIndexes", &m_nNIndexes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pIndexTab", &m_pIndexTab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pNullObject", &m_pNullObject);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_szClassName[40]", m_szClassName);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HObjTable(void *p) {
      return  p ? new(p) ::HObjTable : new ::HObjTable;
   }
   static void *newArray_HObjTable(Long_t nElements, void *p) {
      return p ? new(p) ::HObjTable[nElements] : new ::HObjTable[nElements];
   }
   // Wrapper around operator delete
   static void delete_HObjTable(void *p) {
      delete ((::HObjTable*)p);
   }
   static void deleteArray_HObjTable(void *p) {
      delete [] ((::HObjTable*)p);
   }
   static void destruct_HObjTable(void *p) {
      typedef ::HObjTable current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HObjTable(TBuffer &buf, void *obj) {
      ((::HObjTable*)obj)->::HObjTable::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HObjTable

//______________________________________________________________________________
void HRunAnalizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRunAnalizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRunAnalizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRunAnalizer.
      TClass *R__cl = ::HRunAnalizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEventHeader", &fEventHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotEvents", &fTotEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalEvents", &fCalEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstRun", &fFirstRun);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOut", &fOut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstEvent", &fFirstEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunStartDate", &fRunStartDate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunStartTime", &fRunStartTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunStopDate", &fRunStopDate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunStopTime", &fRunStopTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRunId", &fRunId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileName", &fFileName);
      R__insp.InspectMember(fFileName, "fFileName.");
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRunAnalizer(void *p) {
      delete ((::HRunAnalizer*)p);
   }
   static void deleteArray_HRunAnalizer(void *p) {
      delete [] ((::HRunAnalizer*)p);
   }
   static void destruct_HRunAnalizer(void *p) {
      typedef ::HRunAnalizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRunAnalizer(TBuffer &buf, void *obj) {
      ((::HRunAnalizer*)obj)->::HRunAnalizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRunAnalizer

//______________________________________________________________________________
void HSymMat::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSymMat.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> size;
      R__b >> dim;
      R__b.CheckByteCount(R__s, R__c, HSymMat::IsA());
   } else {
      R__c = R__b.WriteVersion(HSymMat::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << size;
      R__b << dim;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSymMat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSymMat.
      TClass *R__cl = ::HSymMat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pData", &pData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dim", &dim);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSymMat(void *p) {
      return  p ? new(p) ::HSymMat : new ::HSymMat;
   }
   static void *newArray_HSymMat(Long_t nElements, void *p) {
      return p ? new(p) ::HSymMat[nElements] : new ::HSymMat[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSymMat(void *p) {
      delete ((::HSymMat*)p);
   }
   static void deleteArray_HSymMat(void *p) {
      delete [] ((::HSymMat*)p);
   }
   static void destruct_HSymMat(void *p) {
      typedef ::HSymMat current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSymMat(TBuffer &buf, void *obj) {
      ((::HSymMat*)obj)->::HSymMat::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSymMat

//______________________________________________________________________________
void HSymMat2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSymMat2.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HSymMat::Streamer(R__b);
      R__b.ReadStaticArray((float*)data);
      R__b.CheckByteCount(R__s, R__c, HSymMat2::IsA());
   } else {
      R__c = R__b.WriteVersion(HSymMat2::IsA(), kTRUE);
      HSymMat::Streamer(R__b);
      R__b.WriteArray(data, 3);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSymMat2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSymMat2.
      TClass *R__cl = ::HSymMat2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[3]", data);
      HSymMat::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSymMat2(void *p) {
      return  p ? new(p) ::HSymMat2 : new ::HSymMat2;
   }
   static void *newArray_HSymMat2(Long_t nElements, void *p) {
      return p ? new(p) ::HSymMat2[nElements] : new ::HSymMat2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSymMat2(void *p) {
      delete ((::HSymMat2*)p);
   }
   static void deleteArray_HSymMat2(void *p) {
      delete [] ((::HSymMat2*)p);
   }
   static void destruct_HSymMat2(void *p) {
      typedef ::HSymMat2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSymMat2(TBuffer &buf, void *obj) {
      ((::HSymMat2*)obj)->::HSymMat2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSymMat2

//______________________________________________________________________________
void HSymMat3::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSymMat3.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HSymMat::Streamer(R__b);
      R__b.ReadStaticArray((float*)data);
      R__b.CheckByteCount(R__s, R__c, HSymMat3::IsA());
   } else {
      R__c = R__b.WriteVersion(HSymMat3::IsA(), kTRUE);
      HSymMat::Streamer(R__b);
      R__b.WriteArray(data, 6);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSymMat3::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSymMat3.
      TClass *R__cl = ::HSymMat3::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[6]", data);
      HSymMat::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSymMat3(void *p) {
      return  p ? new(p) ::HSymMat3 : new ::HSymMat3;
   }
   static void *newArray_HSymMat3(Long_t nElements, void *p) {
      return p ? new(p) ::HSymMat3[nElements] : new ::HSymMat3[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSymMat3(void *p) {
      delete ((::HSymMat3*)p);
   }
   static void deleteArray_HSymMat3(void *p) {
      delete [] ((::HSymMat3*)p);
   }
   static void destruct_HSymMat3(void *p) {
      typedef ::HSymMat3 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSymMat3(TBuffer &buf, void *obj) {
      ((::HSymMat3*)obj)->::HSymMat3::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSymMat3

//______________________________________________________________________________
void HSymMat4::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSymMat4.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HSymMat::Streamer(R__b);
      R__b.ReadStaticArray((float*)data);
      R__b.CheckByteCount(R__s, R__c, HSymMat4::IsA());
   } else {
      R__c = R__b.WriteVersion(HSymMat4::IsA(), kTRUE);
      HSymMat::Streamer(R__b);
      R__b.WriteArray(data, 10);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSymMat4::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSymMat4.
      TClass *R__cl = ::HSymMat4::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[10]", data);
      HSymMat::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSymMat4(void *p) {
      return  p ? new(p) ::HSymMat4 : new ::HSymMat4;
   }
   static void *newArray_HSymMat4(Long_t nElements, void *p) {
      return p ? new(p) ::HSymMat4[nElements] : new ::HSymMat4[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSymMat4(void *p) {
      delete ((::HSymMat4*)p);
   }
   static void deleteArray_HSymMat4(void *p) {
      delete [] ((::HSymMat4*)p);
   }
   static void destruct_HSymMat4(void *p) {
      typedef ::HSymMat4 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSymMat4(TBuffer &buf, void *obj) {
      ((::HSymMat4*)obj)->::HSymMat4::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSymMat4

//______________________________________________________________________________
void HSymMat5::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSymMat5.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HSymMat::Streamer(R__b);
      R__b.ReadStaticArray((float*)data);
      R__b.CheckByteCount(R__s, R__c, HSymMat5::IsA());
   } else {
      R__c = R__b.WriteVersion(HSymMat5::IsA(), kTRUE);
      HSymMat::Streamer(R__b);
      R__b.WriteArray(data, 15);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSymMat5::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSymMat5.
      TClass *R__cl = ::HSymMat5::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[15]", data);
      HSymMat::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSymMat5(void *p) {
      return  p ? new(p) ::HSymMat5 : new ::HSymMat5;
   }
   static void *newArray_HSymMat5(Long_t nElements, void *p) {
      return p ? new(p) ::HSymMat5[nElements] : new ::HSymMat5[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSymMat5(void *p) {
      delete ((::HSymMat5*)p);
   }
   static void deleteArray_HSymMat5(void *p) {
      delete [] ((::HSymMat5*)p);
   }
   static void destruct_HSymMat5(void *p) {
      typedef ::HSymMat5 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSymMat5(TBuffer &buf, void *obj) {
      ((::HSymMat5*)obj)->::HSymMat5::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSymMat5

//______________________________________________________________________________
void HSymMat6::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSymMat6.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HSymMat::Streamer(R__b);
      R__b.ReadStaticArray((float*)data);
      R__b.CheckByteCount(R__s, R__c, HSymMat6::IsA());
   } else {
      R__c = R__b.WriteVersion(HSymMat6::IsA(), kTRUE);
      HSymMat::Streamer(R__b);
      R__b.WriteArray(data, 21);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSymMat6::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSymMat6.
      TClass *R__cl = ::HSymMat6::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data[21]", data);
      HSymMat::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSymMat6(void *p) {
      return  p ? new(p) ::HSymMat6 : new ::HSymMat6;
   }
   static void *newArray_HSymMat6(Long_t nElements, void *p) {
      return p ? new(p) ::HSymMat6[nElements] : new ::HSymMat6[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSymMat6(void *p) {
      delete ((::HSymMat6*)p);
   }
   static void deleteArray_HSymMat6(void *p) {
      delete [] ((::HSymMat6*)p);
   }
   static void destruct_HSymMat6(void *p) {
      typedef ::HSymMat6 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSymMat6(TBuffer &buf, void *obj) {
      ((::HSymMat6*)obj)->::HSymMat6::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSymMat6

//______________________________________________________________________________
void HArrayC::Streamer(TBuffer &R__b)
{
   // Stream an object of class HArrayC.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> data;
      R__b.CheckByteCount(R__s, R__c, HArrayC::IsA());
   } else {
      R__c = R__b.WriteVersion(HArrayC::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << data;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HArrayC::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HArrayC.
      TClass *R__cl = ::HArrayC::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HArrayC(void *p) {
      return  p ? new(p) ::HArrayC : new ::HArrayC;
   }
   static void *newArray_HArrayC(Long_t nElements, void *p) {
      return p ? new(p) ::HArrayC[nElements] : new ::HArrayC[nElements];
   }
   // Wrapper around operator delete
   static void delete_HArrayC(void *p) {
      delete ((::HArrayC*)p);
   }
   static void deleteArray_HArrayC(void *p) {
      delete [] ((::HArrayC*)p);
   }
   static void destruct_HArrayC(void *p) {
      typedef ::HArrayC current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HArrayC(TBuffer &buf, void *obj) {
      ((::HArrayC*)obj)->::HArrayC::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HArrayC

//______________________________________________________________________________
void HArrayS::Streamer(TBuffer &R__b)
{
   // Stream an object of class HArrayS.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> data;
      R__b.CheckByteCount(R__s, R__c, HArrayS::IsA());
   } else {
      R__c = R__b.WriteVersion(HArrayS::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << data;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HArrayS::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HArrayS.
      TClass *R__cl = ::HArrayS::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HArrayS(void *p) {
      return  p ? new(p) ::HArrayS : new ::HArrayS;
   }
   static void *newArray_HArrayS(Long_t nElements, void *p) {
      return p ? new(p) ::HArrayS[nElements] : new ::HArrayS[nElements];
   }
   // Wrapper around operator delete
   static void delete_HArrayS(void *p) {
      delete ((::HArrayS*)p);
   }
   static void deleteArray_HArrayS(void *p) {
      delete [] ((::HArrayS*)p);
   }
   static void destruct_HArrayS(void *p) {
      typedef ::HArrayS current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HArrayS(TBuffer &buf, void *obj) {
      ((::HArrayS*)obj)->::HArrayS::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HArrayS

//______________________________________________________________________________
void HArrayI::Streamer(TBuffer &R__b)
{
   // Stream an object of class HArrayI.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> data;
      R__b.CheckByteCount(R__s, R__c, HArrayI::IsA());
   } else {
      R__c = R__b.WriteVersion(HArrayI::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << data;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HArrayI::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HArrayI.
      TClass *R__cl = ::HArrayI::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HArrayI(void *p) {
      return  p ? new(p) ::HArrayI : new ::HArrayI;
   }
   static void *newArray_HArrayI(Long_t nElements, void *p) {
      return p ? new(p) ::HArrayI[nElements] : new ::HArrayI[nElements];
   }
   // Wrapper around operator delete
   static void delete_HArrayI(void *p) {
      delete ((::HArrayI*)p);
   }
   static void deleteArray_HArrayI(void *p) {
      delete [] ((::HArrayI*)p);
   }
   static void destruct_HArrayI(void *p) {
      typedef ::HArrayI current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HArrayI(TBuffer &buf, void *obj) {
      ((::HArrayI*)obj)->::HArrayI::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HArrayI

//______________________________________________________________________________
void HArrayL::Streamer(TBuffer &R__b)
{
   // Stream an object of class HArrayL.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> data;
      R__b.CheckByteCount(R__s, R__c, HArrayL::IsA());
   } else {
      R__c = R__b.WriteVersion(HArrayL::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << data;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HArrayL::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HArrayL.
      TClass *R__cl = ::HArrayL::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HArrayL(void *p) {
      return  p ? new(p) ::HArrayL : new ::HArrayL;
   }
   static void *newArray_HArrayL(Long_t nElements, void *p) {
      return p ? new(p) ::HArrayL[nElements] : new ::HArrayL[nElements];
   }
   // Wrapper around operator delete
   static void delete_HArrayL(void *p) {
      delete ((::HArrayL*)p);
   }
   static void deleteArray_HArrayL(void *p) {
      delete [] ((::HArrayL*)p);
   }
   static void destruct_HArrayL(void *p) {
      typedef ::HArrayL current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HArrayL(TBuffer &buf, void *obj) {
      ((::HArrayL*)obj)->::HArrayL::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HArrayL

//______________________________________________________________________________
void HArrayL64::Streamer(TBuffer &R__b)
{
   // Stream an object of class HArrayL64.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> data;
      R__b.CheckByteCount(R__s, R__c, HArrayL64::IsA());
   } else {
      R__c = R__b.WriteVersion(HArrayL64::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << data;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HArrayL64::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HArrayL64.
      TClass *R__cl = ::HArrayL64::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HArrayL64(void *p) {
      return  p ? new(p) ::HArrayL64 : new ::HArrayL64;
   }
   static void *newArray_HArrayL64(Long_t nElements, void *p) {
      return p ? new(p) ::HArrayL64[nElements] : new ::HArrayL64[nElements];
   }
   // Wrapper around operator delete
   static void delete_HArrayL64(void *p) {
      delete ((::HArrayL64*)p);
   }
   static void deleteArray_HArrayL64(void *p) {
      delete [] ((::HArrayL64*)p);
   }
   static void destruct_HArrayL64(void *p) {
      typedef ::HArrayL64 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HArrayL64(TBuffer &buf, void *obj) {
      ((::HArrayL64*)obj)->::HArrayL64::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HArrayL64

//______________________________________________________________________________
void HArrayF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HArrayF.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> data;
      R__b.CheckByteCount(R__s, R__c, HArrayF::IsA());
   } else {
      R__c = R__b.WriteVersion(HArrayF::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << data;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HArrayF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HArrayF.
      TClass *R__cl = ::HArrayF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HArrayF(void *p) {
      return  p ? new(p) ::HArrayF : new ::HArrayF;
   }
   static void *newArray_HArrayF(Long_t nElements, void *p) {
      return p ? new(p) ::HArrayF[nElements] : new ::HArrayF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HArrayF(void *p) {
      delete ((::HArrayF*)p);
   }
   static void deleteArray_HArrayF(void *p) {
      delete [] ((::HArrayF*)p);
   }
   static void destruct_HArrayF(void *p) {
      typedef ::HArrayF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HArrayF(TBuffer &buf, void *obj) {
      ((::HArrayF*)obj)->::HArrayF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HArrayF

//______________________________________________________________________________
void HArrayD::Streamer(TBuffer &R__b)
{
   // Stream an object of class HArrayD.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> data;
      R__b.CheckByteCount(R__s, R__c, HArrayD::IsA());
   } else {
      R__c = R__b.WriteVersion(HArrayD::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << data;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HArrayD::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HArrayD.
      TClass *R__cl = ::HArrayD::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*data", &data);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HArrayD(void *p) {
      return  p ? new(p) ::HArrayD : new ::HArrayD;
   }
   static void *newArray_HArrayD(Long_t nElements, void *p) {
      return p ? new(p) ::HArrayD[nElements] : new ::HArrayD[nElements];
   }
   // Wrapper around operator delete
   static void delete_HArrayD(void *p) {
      delete ((::HArrayD*)p);
   }
   static void deleteArray_HArrayD(void *p) {
      delete [] ((::HArrayD*)p);
   }
   static void destruct_HArrayD(void *p) {
      typedef ::HArrayD current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HArrayD(TBuffer &buf, void *obj) {
      ((::HArrayD*)obj)->::HArrayD::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HArrayD

//______________________________________________________________________________
void HMessageMgr::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMessageMgr.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HMessageMgr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMessageMgr.
      TClass *R__cl = ::HMessageMgr::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugLevel", &debugLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "warningLevel", &warningLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "infoLevel", &infoLevel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*msgFile", &msgFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*errorFile", &errorFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*msgSocket", &msgSocket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*errorSocket", &errorSocket);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*thisHost", &thisHost);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detectorMsg", &detectorMsg);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*msg1", &msg1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*msg2", &msg2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*file", &file);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "line", &line);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "screen", &screen);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HMessageMgr(void *p) {
      delete ((::HMessageMgr*)p);
   }
   static void deleteArray_HMessageMgr(void *p) {
      delete [] ((::HMessageMgr*)p);
   }
   static void destruct_HMessageMgr(void *p) {
      typedef ::HMessageMgr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMessageMgr(TBuffer &buf, void *obj) {
      ((::HMessageMgr*)obj)->::HMessageMgr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMessageMgr

//______________________________________________________________________________
void HNtuple::Streamer(TBuffer &R__b)
{
   // Stream an object of class HNtuple.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HNtuple::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HNtuple.
      TClass *R__cl = ::HNtuple::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*outFile", &outFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cname", &cname);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ctitle", &ctitle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cbufsize", &cbufsize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ptrNt", &ptrNt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isNtuple", &isNtuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "varArrayN", &varArrayN);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*varArray", &varArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "varList", (void*)&varList);
      R__insp.InspectMember("string", (void*)&varList, "varList.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vKeyValue", (void*)&vKeyValue);
      R__insp.InspectMember("map<std::string,Float_t>", (void*)&vKeyValue, "vKeyValue.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vKeyOrder", (void*)&vKeyOrder);
      R__insp.InspectMember("map<std::string,Int_t>", (void*)&vKeyOrder, "vKeyOrder.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mIter", (void*)&mIter);
      R__insp.InspectMember("map<string,float,less<string>,allocator<pair<const string,float> > >::iterator", (void*)&mIter, "mIter.", true);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HNtuple(void *p) {
      return  p ? new(p) ::HNtuple : new ::HNtuple;
   }
   static void *newArray_HNtuple(Long_t nElements, void *p) {
      return p ? new(p) ::HNtuple[nElements] : new ::HNtuple[nElements];
   }
   // Wrapper around operator delete
   static void delete_HNtuple(void *p) {
      delete ((::HNtuple*)p);
   }
   static void deleteArray_HNtuple(void *p) {
      delete [] ((::HNtuple*)p);
   }
   static void destruct_HNtuple(void *p) {
      typedef ::HNtuple current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HNtuple(TBuffer &buf, void *obj) {
      ((::HNtuple*)obj)->::HNtuple::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HNtuple

//______________________________________________________________________________
void HNtupleMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class HNtupleMap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HNtupleMap::IsA());
   } else {
      R__c = R__b.WriteVersion(HNtupleMap::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HNtupleMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HNtupleMap.
      TClass *R__cl = ::HNtupleMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ntuple", &ntuple);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*file", &file);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "c", (void*)&c);
      R__insp.InspectMember("map<string,Int_t>", (void*)&c, "c.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*a", &a);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HNtupleMap(void *p) {
      return  p ? new(p) ::HNtupleMap : new ::HNtupleMap;
   }
   static void *newArray_HNtupleMap(Long_t nElements, void *p) {
      return p ? new(p) ::HNtupleMap[nElements] : new ::HNtupleMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_HNtupleMap(void *p) {
      delete ((::HNtupleMap*)p);
   }
   static void deleteArray_HNtupleMap(void *p) {
      delete [] ((::HNtupleMap*)p);
   }
   static void destruct_HNtupleMap(void *p) {
      typedef ::HNtupleMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HNtupleMap(TBuffer &buf, void *obj) {
      ((::HNtupleMap*)obj)->::HNtupleMap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HNtupleMap

//______________________________________________________________________________
void HHistMap::Streamer(TBuffer &R__b)
{
   // Stream an object of class HHistMap.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      {
         map<TString,TString> &R__stl =  hDir;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TObjArray> &R__stl =  hM;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TObjArray R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TObjArray > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hMask;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hTitle;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TArrayI> &R__stl =  hD;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TArrayI R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TArrayI > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hDirC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TObjArray> &R__stl =  hMC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TObjArray R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TObjArray > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hMaskC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hTitleC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TArrayI> &R__stl =  hDC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TArrayI R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TArrayI > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TArrayI> &R__stl =  hNpC;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TArrayI R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TArrayI > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hDirCut;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TCutG*> &R__stl =  hMCut;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(TCutG));
         if (R__tcl2==0) {
            Error("hMCut streamer","Missing the TClass object for TCutG!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TCutG* R__t2;
            R__t2 = (TCutG*)R__b.ReadObjectAny(R__tcl2);
            typedef TString Value_t;
            std::pair<Value_t const, TCutG* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hDirFit;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TF1*> &R__stl =  hMFit;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(TF1));
         if (R__tcl2==0) {
            Error("hMFit streamer","Missing the TClass object for TF1!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TF1* R__t2;
            R__t2 = (TF1*)R__b.ReadObjectAny(R__tcl2);
            typedef TString Value_t;
            std::pair<Value_t const, TF1* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hDirPar;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TObject*> &R__stl =  hMPar;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(TObject));
         if (R__tcl2==0) {
            Error("hMPar streamer","Missing the TClass object for TObject!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TObject* R__t2;
            R__t2 = (TObject*)R__b.ReadObjectAny(R__tcl2);
            typedef TString Value_t;
            std::pair<Value_t const, TObject* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TString> &R__stl =  hDirMacro;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef TString Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,TMacro*> &R__stl =  hMMacro;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(TMacro));
         if (R__tcl2==0) {
            Error("hMMacro streamer","Missing the TClass object for TMacro!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            TMacro* R__t2;
            R__t2 = (TMacro*)R__b.ReadObjectAny(R__tcl2);
            typedef TString Value_t;
            std::pair<Value_t const, TMacro* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HHistMap::IsA());
   } else {
      R__c = R__b.WriteVersion(HHistMap::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      {
         map<TString,TString> &R__stl =  hDir;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TObjArray> &R__stl =  hM;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TObjArray>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TObjArray&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hMask;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hTitle;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TArrayI> &R__stl =  hD;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TArrayI>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TArrayI&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hDirC;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TObjArray> &R__stl =  hMC;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TObjArray>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TObjArray&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hMaskC;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hTitleC;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TArrayI> &R__stl =  hDC;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TArrayI>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TArrayI&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TArrayI> &R__stl =  hNpC;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TArrayI>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TArrayI&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hDirCut;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TCutG*> &R__stl =  hMCut;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TCutG*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b << ((*R__k).second);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hDirFit;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TF1*> &R__stl =  hMFit;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TF1*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b << ((*R__k).second);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hDirPar;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TObject*> &R__stl =  hMPar;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TObject*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b << ((*R__k).second);
            }
         }
      }
      {
         map<TString,TString> &R__stl =  hDirMacro;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<TString,TMacro*> &R__stl =  hMMacro;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,TMacro*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b << ((*R__k).second);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HHistMap::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HHistMap.
      TClass *R__cl = ::HHistMap::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDir", (void*)&hDir);
      R__insp.InspectMember("map<TString,TString>", (void*)&hDir, "hDir.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hM", (void*)&hM);
      R__insp.InspectMember("map<TString,TObjArray>", (void*)&hM, "hM.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMask", (void*)&hMask);
      R__insp.InspectMember("map<TString,TString>", (void*)&hMask, "hMask.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hTitle", (void*)&hTitle);
      R__insp.InspectMember("map<TString,TString>", (void*)&hTitle, "hTitle.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hD", (void*)&hD);
      R__insp.InspectMember("map<TString,TArrayI>", (void*)&hD, "hD.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim1", (void*)&hDim1);
      R__insp.InspectMember("map<TString,TH1**>", (void*)&hDim1, "hDim1.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim2", (void*)&hDim2);
      R__insp.InspectMember("map<TString,TH1***>", (void*)&hDim2, "hDim2.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim3", (void*)&hDim3);
      R__insp.InspectMember("map<TString,TH1****>", (void*)&hDim3, "hDim3.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim4", (void*)&hDim4);
      R__insp.InspectMember("map<TString,TH1*****>", (void*)&hDim4, "hDim4.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim5", (void*)&hDim5);
      R__insp.InspectMember("map<TString,TH1******>", (void*)&hDim5, "hDim5.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDirC", (void*)&hDirC);
      R__insp.InspectMember("map<TString,TString>", (void*)&hDirC, "hDirC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMC", (void*)&hMC);
      R__insp.InspectMember("map<TString,TObjArray>", (void*)&hMC, "hMC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMaskC", (void*)&hMaskC);
      R__insp.InspectMember("map<TString,TString>", (void*)&hMaskC, "hMaskC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hTitleC", (void*)&hTitleC);
      R__insp.InspectMember("map<TString,TString>", (void*)&hTitleC, "hTitleC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDC", (void*)&hDC);
      R__insp.InspectMember("map<TString,TArrayI>", (void*)&hDC, "hDC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hNpC", (void*)&hNpC);
      R__insp.InspectMember("map<TString,TArrayI>", (void*)&hNpC, "hNpC.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim1C", (void*)&hDim1C);
      R__insp.InspectMember("map<TString,TCanvas**>", (void*)&hDim1C, "hDim1C.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim2C", (void*)&hDim2C);
      R__insp.InspectMember("map<TString,TCanvas***>", (void*)&hDim2C, "hDim2C.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim3C", (void*)&hDim3C);
      R__insp.InspectMember("map<TString,TCanvas****>", (void*)&hDim3C, "hDim3C.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim4C", (void*)&hDim4C);
      R__insp.InspectMember("map<TString,TCanvas*****>", (void*)&hDim4C, "hDim4C.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDim5C", (void*)&hDim5C);
      R__insp.InspectMember("map<TString,TCanvas******>", (void*)&hDim5C, "hDim5C.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDirCut", (void*)&hDirCut);
      R__insp.InspectMember("map<TString,TString>", (void*)&hDirCut, "hDirCut.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMCut", (void*)&hMCut);
      R__insp.InspectMember("map<TString,TCutG*>", (void*)&hMCut, "hMCut.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDirFit", (void*)&hDirFit);
      R__insp.InspectMember("map<TString,TString>", (void*)&hDirFit, "hDirFit.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMFit", (void*)&hMFit);
      R__insp.InspectMember("map<TString,TF1*>", (void*)&hMFit, "hMFit.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDirPar", (void*)&hDirPar);
      R__insp.InspectMember("map<TString,TString>", (void*)&hDirPar, "hDirPar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMPar", (void*)&hMPar);
      R__insp.InspectMember("map<TString,TObject*>", (void*)&hMPar, "hMPar.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hDirMacro", (void*)&hDirMacro);
      R__insp.InspectMember("map<TString,TString>", (void*)&hDirMacro, "hDirMacro.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hMMacro", (void*)&hMMacro);
      R__insp.InspectMember("map<TString,TMacro*>", (void*)&hMMacro, "hMMacro.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*output", &output);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDeleteObjects", &fDeleteObjects);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSilentFail", &fSilentFail);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HHistMap(void *p) {
      return  p ? new(p) ::HHistMap : new ::HHistMap;
   }
   static void *newArray_HHistMap(Long_t nElements, void *p) {
      return p ? new(p) ::HHistMap[nElements] : new ::HHistMap[nElements];
   }
   // Wrapper around operator delete
   static void delete_HHistMap(void *p) {
      delete ((::HHistMap*)p);
   }
   static void deleteArray_HHistMap(void *p) {
      delete [] ((::HHistMap*)p);
   }
   static void destruct_HHistMap(void *p) {
      typedef ::HHistMap current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HHistMap(TBuffer &buf, void *obj) {
      ((::HHistMap*)obj)->::HHistMap::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HHistMap

//______________________________________________________________________________
void HFlex::Streamer(TBuffer &R__b)
{
   // Stream an object of class HFlex.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         map<TString,Int_t> &R__stl =  mInt;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            int R__t2;
            R__b >> R__t2;
            typedef TString Value_t;
            std::pair<Value_t const, int > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<TString,Double_t> &R__stl =  mDouble;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            double R__t2;
            R__b >> R__t2;
            typedef TString Value_t;
            std::pair<Value_t const, double > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HFlex::IsA());
   } else {
      R__c = R__b.WriteVersion(HFlex::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         map<TString,Int_t> &R__stl =  mInt;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b << ((*R__k).second);
            }
         }
      }
      {
         map<TString,Double_t> &R__stl =  mDouble;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,Double_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b << ((*R__k).second);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HFlex::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HFlex.
      TClass *R__cl = ::HFlex::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mInt", (void*)&mInt);
      R__insp.InspectMember("map<TString,Int_t>", (void*)&mInt, "mInt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mDouble", (void*)&mDouble);
      R__insp.InspectMember("map<TString,Double_t>", (void*)&mDouble, "mDouble.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HFlex(void *p) {
      return  p ? new(p) ::HFlex : new ::HFlex;
   }
   static void *newArray_HFlex(Long_t nElements, void *p) {
      return p ? new(p) ::HFlex[nElements] : new ::HFlex[nElements];
   }
   // Wrapper around operator delete
   static void delete_HFlex(void *p) {
      delete ((::HFlex*)p);
   }
   static void deleteArray_HFlex(void *p) {
      delete [] ((::HFlex*)p);
   }
   static void destruct_HFlex(void *p) {
      typedef ::HFlex current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HFlex(TBuffer &buf, void *obj) {
      ((::HFlex*)obj)->::HFlex::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HFlex

//______________________________________________________________________________
void HFlexFiller::Streamer(TBuffer &R__b)
{
   // Stream an object of class HFlexFiller.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HFlexFiller::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HFlexFiller.
      TClass *R__cl = ::HFlexFiller::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "createCat", &createCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hM", &hM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*parameters", &parameters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pUserFill", &pUserFill);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HFlexFiller(void *p) {
      return  p ? new(p) ::HFlexFiller : new ::HFlexFiller;
   }
   static void *newArray_HFlexFiller(Long_t nElements, void *p) {
      return p ? new(p) ::HFlexFiller[nElements] : new ::HFlexFiller[nElements];
   }
   // Wrapper around operator delete
   static void delete_HFlexFiller(void *p) {
      delete ((::HFlexFiller*)p);
   }
   static void deleteArray_HFlexFiller(void *p) {
      delete [] ((::HFlexFiller*)p);
   }
   static void destruct_HFlexFiller(void *p) {
      typedef ::HFlexFiller current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HFlexFiller(TBuffer &buf, void *obj) {
      ((::HFlexFiller*)obj)->::HFlexFiller::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HFlexFiller

//______________________________________________________________________________
void HPhysicsConstants::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPhysicsConstants.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HPhysicsConstants::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPhysicsConstants.
      TClass *R__cl = ::HPhysicsConstants::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPhysicsConstants(void *p) {
      return  p ? new(p) ::HPhysicsConstants : new ::HPhysicsConstants;
   }
   static void *newArray_HPhysicsConstants(Long_t nElements, void *p) {
      return p ? new(p) ::HPhysicsConstants[nElements] : new ::HPhysicsConstants[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPhysicsConstants(void *p) {
      delete ((::HPhysicsConstants*)p);
   }
   static void deleteArray_HPhysicsConstants(void *p) {
      delete [] ((::HPhysicsConstants*)p);
   }
   static void destruct_HPhysicsConstants(void *p) {
      typedef ::HPhysicsConstants current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPhysicsConstants(TBuffer &buf, void *obj) {
      ((::HPhysicsConstants*)obj)->::HPhysicsConstants::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPhysicsConstants

//______________________________________________________________________________
void HTool::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTool.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HTool::IsA());
   } else {
      R__c = R__b.WriteVersion(HTool::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HTool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTool.
      TClass *R__cl = ::HTool::IsA();
      if (R__cl || R__insp.IsA()) { }
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTool(void *p) {
      return  p ? new(p) ::HTool : new ::HTool;
   }
   static void *newArray_HTool(Long_t nElements, void *p) {
      return p ? new(p) ::HTool[nElements] : new ::HTool[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTool(void *p) {
      delete ((::HTool*)p);
   }
   static void deleteArray_HTool(void *p) {
      delete [] ((::HTool*)p);
   }
   static void destruct_HTool(void *p) {
      typedef ::HTool current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTool(TBuffer &buf, void *obj) {
      ((::HTool*)obj)->::HTool::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTool

//______________________________________________________________________________
void HHistConverter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HHistConverter.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HHistConverter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HHistConverter.
      TClass *R__cl = ::HHistConverter::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HHistConverter(void *p) {
      return  p ? new(p) ::HHistConverter : new ::HHistConverter;
   }
   static void *newArray_HHistConverter(Long_t nElements, void *p) {
      return p ? new(p) ::HHistConverter[nElements] : new ::HHistConverter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HHistConverter(void *p) {
      delete ((::HHistConverter*)p);
   }
   static void deleteArray_HHistConverter(void *p) {
      delete [] ((::HHistConverter*)p);
   }
   static void destruct_HHistConverter(void *p) {
      typedef ::HHistConverter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HHistConverter(TBuffer &buf, void *obj) {
      ((::HHistConverter*)obj)->::HHistConverter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HHistConverter

//______________________________________________________________________________
void HBitMan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HBitMan.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HBitMan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HBitMan.
      TClass *R__cl = ::HBitMan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "list", (void*)&list);
      R__insp.InspectMember("vector<word>", (void*)&list, "list.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wordmap", (void*)&wordmap);
      R__insp.InspectMember("map<TString,word>", (void*)&wordmap, "wordmap.", true);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HBitMan(void *p) {
      return  p ? new(p) ::HBitMan : new ::HBitMan;
   }
   static void *newArray_HBitMan(Long_t nElements, void *p) {
      return p ? new(p) ::HBitMan[nElements] : new ::HBitMan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HBitMan(void *p) {
      delete ((::HBitMan*)p);
   }
   static void deleteArray_HBitMan(void *p) {
      delete [] ((::HBitMan*)p);
   }
   static void destruct_HBitMan(void *p) {
      typedef ::HBitMan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HBitMan(TBuffer &buf, void *obj) {
      ((::HBitMan*)obj)->::HBitMan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HBitMan

//______________________________________________________________________________
void HSTLTool::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSTLTool.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HSTLTool::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSTLTool.
      TClass *R__cl = ::HSTLTool::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSTLTool(void *p) {
      return  p ? new(p) ::HSTLTool : new ::HSTLTool;
   }
   static void *newArray_HSTLTool(Long_t nElements, void *p) {
      return p ? new(p) ::HSTLTool[nElements] : new ::HSTLTool[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSTLTool(void *p) {
      delete ((::HSTLTool*)p);
   }
   static void deleteArray_HSTLTool(void *p) {
      delete [] ((::HSTLTool*)p);
   }
   static void destruct_HSTLTool(void *p) {
      typedef ::HSTLTool current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSTLTool(TBuffer &buf, void *obj) {
      ((::HSTLTool*)obj)->::HSTLTool::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSTLTool

//______________________________________________________________________________
void HCategoryManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class HCategoryManager.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HCategoryManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HCategoryManager.
      TClass *R__cl = ::HCategoryManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HCategoryManager(void *p) {
      return  p ? new(p) ::HCategoryManager : new ::HCategoryManager;
   }
   static void *newArray_HCategoryManager(Long_t nElements, void *p) {
      return p ? new(p) ::HCategoryManager[nElements] : new ::HCategoryManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_HCategoryManager(void *p) {
      delete ((::HCategoryManager*)p);
   }
   static void deleteArray_HCategoryManager(void *p) {
      delete [] ((::HCategoryManager*)p);
   }
   static void destruct_HCategoryManager(void *p) {
      typedef ::HCategoryManager current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HCategoryManager(TBuffer &buf, void *obj) {
      ((::HCategoryManager*)obj)->::HCategoryManager::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HCategoryManager

//______________________________________________________________________________
void HSectorSelector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSectorSelector.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HSectorSelector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSectorSelector.
      TClass *R__cl = ::HSectorSelector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "goodSectors", (void*)&goodSectors);
      R__insp.InspectMember("map<TString,TArrayI>", (void*)&goodSectors, "goodSectors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "defaultVal", &defaultVal);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSectorSelector(void *p) {
      return  p ? new(p) ::HSectorSelector : new ::HSectorSelector;
   }
   static void *newArray_HSectorSelector(Long_t nElements, void *p) {
      return p ? new(p) ::HSectorSelector[nElements] : new ::HSectorSelector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSectorSelector(void *p) {
      delete ((::HSectorSelector*)p);
   }
   static void deleteArray_HSectorSelector(void *p) {
      delete [] ((::HSectorSelector*)p);
   }
   static void destruct_HSectorSelector(void *p) {
      typedef ::HSectorSelector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSectorSelector(TBuffer &buf, void *obj) {
      ((::HSectorSelector*)obj)->::HSectorSelector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSectorSelector

//______________________________________________________________________________
void HLoop::Streamer(TBuffer &R__b)
{
   // Stream an object of class HLoop.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HLoop::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HLoop.
      TClass *R__cl = ::HLoop::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fChain", &fChain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHead", &fHead);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantMedia", &fGeantMedia);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEvent", (void*)&fEvent);
      R__insp.InspectMember("map<TString,HCategory*>", (void*)&fEvent, "fEvent.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPartial", (void*)&fPartial);
      R__insp.InspectMember("map<TString,HPartialEvent*>", (void*)&fPartial, "fPartial.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStatus", (void*)&fStatus);
      R__insp.InspectMember("map<TString,Int_t>", (void*)&fStatus, "fStatus.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPartialN", (void*)&fPartialN);
      R__insp.InspectMember("map<TString,TString>", (void*)&fPartialN, "fPartialN.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNameToCat", (void*)&fNameToCat);
      R__insp.InspectMember("map<TString,Short_t>", (void*)&fNameToCat, "fNameToCat.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxEntries", &fMaxEntries);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentEntry", &fCurrentEntry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurrentName", &fCurrentName);
      R__insp.InspectMember(fCurrentName, "fCurrentName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fFileCurrent", &fFileCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTree", &fTree);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRecEvent", &fRecEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSectorSelector", &fSectorSelector);
      R__insp.InspectMember(fSectorSelector, "fSectorSelector.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fsectors[6]", fsectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefID", &fRefID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstEvent", &fFirstEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHasCreatedHades", &fHasCreatedHades);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsNewFile", &fIsNewFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSkipped", &fIsSkipped);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseTaskSet", &fUseTaskSet);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HLoop(void *p) {
      return  p ? new(p) ::HLoop : new ::HLoop;
   }
   static void *newArray_HLoop(Long_t nElements, void *p) {
      return p ? new(p) ::HLoop[nElements] : new ::HLoop[nElements];
   }
   // Wrapper around operator delete
   static void delete_HLoop(void *p) {
      delete ((::HLoop*)p);
   }
   static void deleteArray_HLoop(void *p) {
      delete [] ((::HLoop*)p);
   }
   static void destruct_HLoop(void *p) {
      typedef ::HLoop current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HLoop(TBuffer &buf, void *obj) {
      ((::HLoop*)obj)->::HLoop::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HLoop

//______________________________________________________________________________
void HZip::Streamer(TBuffer &R__b)
{
   // Stream an object of class HZip.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HZip::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HZip.
      TClass *R__cl = ::HZip::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HZip(void *p) {
      return  p ? new(p) ::HZip : new ::HZip;
   }
   static void *newArray_HZip(Long_t nElements, void *p) {
      return p ? new(p) ::HZip[nElements] : new ::HZip[nElements];
   }
   // Wrapper around operator delete
   static void delete_HZip(void *p) {
      delete ((::HZip*)p);
   }
   static void deleteArray_HZip(void *p) {
      delete [] ((::HZip*)p);
   }
   static void destruct_HZip(void *p) {
      typedef ::HZip current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HZip(TBuffer &buf, void *obj) {
      ((::HZip*)obj)->::HZip::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HZip

//______________________________________________________________________________
void HTime::Streamer(TBuffer &R__b)
{
   // Stream an object of class HTime.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HTime::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HTime.
      TClass *R__cl = ::HTime::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HTime(void *p) {
      return  p ? new(p) ::HTime : new ::HTime;
   }
   static void *newArray_HTime(Long_t nElements, void *p) {
      return p ? new(p) ::HTime[nElements] : new ::HTime[nElements];
   }
   // Wrapper around operator delete
   static void delete_HTime(void *p) {
      delete ((::HTime*)p);
   }
   static void deleteArray_HTime(void *p) {
      delete [] ((::HTime*)p);
   }
   static void destruct_HTime(void *p) {
      typedef ::HTime current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HTime(TBuffer &buf, void *obj) {
      ((::HTime*)obj)->::HTime::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HTime

//______________________________________________________________________________
void HSrcKeeper::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSrcKeeper.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      source.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HSrcKeeper::IsA());
   } else {
      R__c = R__b.WriteVersion(HSrcKeeper::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      source.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSrcKeeper::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSrcKeeper.
      TClass *R__cl = ::HSrcKeeper::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "source", &source);
      R__insp.InspectMember(source, "source.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSrcKeeper(void *p) {
      return  p ? new(p) ::HSrcKeeper : new ::HSrcKeeper;
   }
   static void *newArray_HSrcKeeper(Long_t nElements, void *p) {
      return p ? new(p) ::HSrcKeeper[nElements] : new ::HSrcKeeper[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSrcKeeper(void *p) {
      delete ((::HSrcKeeper*)p);
   }
   static void deleteArray_HSrcKeeper(void *p) {
      delete [] ((::HSrcKeeper*)p);
   }
   static void destruct_HSrcKeeper(void *p) {
      typedef ::HSrcKeeper current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSrcKeeper(TBuffer &buf, void *obj) {
      ((::HSrcKeeper*)obj)->::HSrcKeeper::Streamer(buf);
   }
   // Wrapper around the merge function.
   static Long64_t  merge_HSrcKeeper(void *obj,TCollection *coll,TFileMergeInfo *) {
      return ((::HSrcKeeper*)obj)->Merge(coll);
   }
} // end of namespace ROOTDict for class ::HSrcKeeper

//______________________________________________________________________________
void HSeed::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSeed.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fMethod;
      R__b >> fFallBack;
      R__b >> fNoBlock;
      R__b >> fFixedSeed;
      R__b >> fInitialSeed;
      R__b >> fFirstSeed;
      fHostname.Streamer(R__b);
      R__b >> fAddress;
      R__b >> fPid;
      R__b.CheckByteCount(R__s, R__c, HSeed::IsA());
   } else {
      R__c = R__b.WriteVersion(HSeed::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fMethod;
      R__b << fFallBack;
      R__b << fNoBlock;
      R__b << fFixedSeed;
      R__b << fInitialSeed;
      R__b << fFirstSeed;
      fHostname.Streamer(R__b);
      R__b << fAddress;
      R__b << fPid;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSeed::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSeed.
      TClass *R__cl = ::HSeed::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMethod", &fMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFallBack", &fFallBack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoBlock", &fNoBlock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFixedSeed", &fFixedSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fInitialSeed", &fInitialSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFirstSeed", &fFirstSeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHostname", &fHostname);
      R__insp.InspectMember(fHostname, "fHostname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAddress", &fAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPid", &fPid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGenerator", &fGenerator);
      R__insp.InspectMember(fGenerator, "fGenerator.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFileHandle", &fFileHandle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*frandom", &frandom);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSeed(void *p) {
      return  p ? new(p) ::HSeed : new ::HSeed;
   }
   static void *newArray_HSeed(Long_t nElements, void *p) {
      return p ? new(p) ::HSeed[nElements] : new ::HSeed[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSeed(void *p) {
      delete ((::HSeed*)p);
   }
   static void deleteArray_HSeed(void *p) {
      delete [] ((::HSeed*)p);
   }
   static void destruct_HSeed(void *p) {
      typedef ::HSeed current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSeed(TBuffer &buf, void *obj) {
      ((::HSeed*)obj)->::HSeed::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSeed

//______________________________________________________________________________
void HMultiPagePDF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HMultiPagePDF.

   TPDF::Streamer(R__b);
}

//______________________________________________________________________________
void HMultiPagePDF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HMultiPagePDF.
      TClass *R__cl = ::HMultiPagePDF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", &name);
      R__insp.InspectMember(name, "name.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*c", &c);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pageCt", &pageCt);
      TPDF::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HMultiPagePDF(void *p) {
      return  p ? new(p) ::HMultiPagePDF : new ::HMultiPagePDF;
   }
   static void *newArray_HMultiPagePDF(Long_t nElements, void *p) {
      return p ? new(p) ::HMultiPagePDF[nElements] : new ::HMultiPagePDF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HMultiPagePDF(void *p) {
      delete ((::HMultiPagePDF*)p);
   }
   static void deleteArray_HMultiPagePDF(void *p) {
      delete [] ((::HMultiPagePDF*)p);
   }
   static void destruct_HMultiPagePDF(void *p) {
      typedef ::HMultiPagePDF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HMultiPagePDF(TBuffer &buf, void *obj) {
      ((::HMultiPagePDF*)obj)->::HMultiPagePDF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HMultiPagePDF

//______________________________________________________________________________
void HGeantFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeantFilter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HReconstructor::Streamer(R__b);
      R__b >> particleId;
      R__b >> accepted;
      R__b.CheckByteCount(R__s, R__c, HGeantFilter::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeantFilter::IsA(), kTRUE);
      HReconstructor::Streamer(R__b);
      R__b << particleId;
      R__b << accepted;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeantFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeantFilter.
      TClass *R__cl = ::HGeantFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "particleId", &particleId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "accepted", &accepted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catKine", &catKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catMdc", &catMdc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catTof", &catTof);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catShower", &catShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catRichPhoton", &catRichPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catRichDirect", &catRichDirect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catRichMirror", &catRichMirror);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HGeantFilter(void *p) {
      delete ((::HGeantFilter*)p);
   }
   static void deleteArray_HGeantFilter(void *p) {
      delete [] ((::HGeantFilter*)p);
   }
   static void destruct_HGeantFilter(void *p) {
      typedef ::HGeantFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeantFilter(TBuffer &buf, void *obj) {
      ((::HGeantFilter*)obj)->::HGeantFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeantFilter

//______________________________________________________________________________
void HHitFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HHitFilter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HFilter::Streamer(R__b);
      R__b >> pKineCat;
      R__b.CheckByteCount(R__s, R__c, HHitFilter::IsA());
   } else {
      R__c = R__b.WriteVersion(HHitFilter::IsA(), kTRUE);
      HFilter::Streamer(R__b);
      R__b << pKineCat;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HHitFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HHitFilter.
      TClass *R__cl = ::HHitFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pKineCat", &pKineCat);
      HFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HHitFilter(void *p) {
      return  p ? new(p) ::HHitFilter : new ::HHitFilter;
   }
   static void *newArray_HHitFilter(Long_t nElements, void *p) {
      return p ? new(p) ::HHitFilter[nElements] : new ::HHitFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HHitFilter(void *p) {
      delete ((::HHitFilter*)p);
   }
   static void deleteArray_HHitFilter(void *p) {
      delete [] ((::HHitFilter*)p);
   }
   static void destruct_HHitFilter(void *p) {
      typedef ::HHitFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HHitFilter(TBuffer &buf, void *obj) {
      ((::HHitFilter*)obj)->::HHitFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HHitFilter

//______________________________________________________________________________
void HSUExeMacro::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSUExeMacro.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HSUExeMacro::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSUExeMacro.
      TClass *R__cl = ::HSUExeMacro::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChain", &m_pChain);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iCurrentFile", &m_iCurrentFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pProgress", &m_pProgress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pOutputFile", &m_pOutputFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pActiveBranches", &m_pActiveBranches);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bExitOnError", &m_bExitOnError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_sOutputName", &m_sOutputName);
      R__insp.InspectMember(m_sOutputName, "m_sOutputName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pInputArray", &m_pInputArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iEvents", &m_iEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iEvent", &m_iEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_sParamFileName", &m_sParamFileName);
      R__insp.InspectMember(m_sParamFileName, "m_sParamFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pParamFile", &m_pParamFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_sOptString", &m_sOptString);
      R__insp.InspectMember(m_sOptString, "m_sOptString.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iOptInt", &m_iOptInt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fOptFloat", &m_fOptFloat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bOptBool", &m_bOptBool);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bNotFileChange", &m_bNotFileChange);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSUExeMacro(void *p) {
      return  p ? new(p) ::HSUExeMacro : new ::HSUExeMacro;
   }
   static void *newArray_HSUExeMacro(Long_t nElements, void *p) {
      return p ? new(p) ::HSUExeMacro[nElements] : new ::HSUExeMacro[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSUExeMacro(void *p) {
      delete ((::HSUExeMacro*)p);
   }
   static void deleteArray_HSUExeMacro(void *p) {
      delete [] ((::HSUExeMacro*)p);
   }
   static void destruct_HSUExeMacro(void *p) {
      typedef ::HSUExeMacro current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSUExeMacro(TBuffer &buf, void *obj) {
      ((::HSUExeMacro*)obj)->::HSUExeMacro::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSUExeMacro

//______________________________________________________________________________
void HSUProgress::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSUProgress.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      R__b >> m_iMax;
      R__b >> m_iLast;
      R__b >> m_bSpin;
      R__b >> m_bSpinInPer;
      R__b >> m_fSpinSet;
      R__b >> m_fSpinReal;
      m_psSpinChars.Streamer(R__b);
      R__b >> m_iSpinLen;
      R__b >> m_bProgress;
      R__b >> m_bProgressInPer;
      R__b >> m_fProgressSet;
      R__b >> m_fProgressReal;
      R__b >> m_cProgressChar;
      R__b >> m_bTimer;
      R__b >> m_bTimerInPer;
      R__b >> m_fTimerSet;
      R__b >> m_fTimerReal;
      R__b >> m_bFullTimer;
      tTimer.Streamer(R__b);
      R__b >> m_bWasOutOfRange;
      R__b.CheckByteCount(R__s, R__c, HSUProgress::IsA());
   } else {
      R__c = R__b.WriteVersion(HSUProgress::IsA(), kTRUE);
      R__b << m_iMax;
      R__b << m_iLast;
      R__b << m_bSpin;
      R__b << m_bSpinInPer;
      R__b << m_fSpinSet;
      R__b << m_fSpinReal;
      m_psSpinChars.Streamer(R__b);
      R__b << m_iSpinLen;
      R__b << m_bProgress;
      R__b << m_bProgressInPer;
      R__b << m_fProgressSet;
      R__b << m_fProgressReal;
      R__b << m_cProgressChar;
      R__b << m_bTimer;
      R__b << m_bTimerInPer;
      R__b << m_fTimerSet;
      R__b << m_fTimerReal;
      R__b << m_bFullTimer;
      tTimer.Streamer(R__b);
      R__b << m_bWasOutOfRange;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HSUProgress::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSUProgress.
      TClass *R__cl = ::HSUProgress::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iMax", &m_iMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iLast", &m_iLast);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bSpin", &m_bSpin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bSpinInPer", &m_bSpinInPer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSpinSet", &m_fSpinSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSpinReal", &m_fSpinReal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_psSpinChars", &m_psSpinChars);
      R__insp.InspectMember(m_psSpinChars, "m_psSpinChars.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iSpinLen", &m_iSpinLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bProgress", &m_bProgress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bProgressInPer", &m_bProgressInPer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fProgressSet", &m_fProgressSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fProgressReal", &m_fProgressReal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_cProgressChar", &m_cProgressChar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bTimer", &m_bTimer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bTimerInPer", &m_bTimerInPer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fTimerSet", &m_fTimerSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fTimerReal", &m_fTimerReal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bFullTimer", &m_bFullTimer);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tTimer", &tTimer);
      R__insp.InspectMember(tTimer, "tTimer.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bWasOutOfRange", &m_bWasOutOfRange);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSUProgress(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HSUProgress : new ::HSUProgress;
   }
   static void *newArray_HSUProgress(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HSUProgress[nElements] : new ::HSUProgress[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSUProgress(void *p) {
      delete ((::HSUProgress*)p);
   }
   static void deleteArray_HSUProgress(void *p) {
      delete [] ((::HSUProgress*)p);
   }
   static void destruct_HSUProgress(void *p) {
      typedef ::HSUProgress current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSUProgress(TBuffer &buf, void *obj) {
      ((::HSUProgress*)obj)->::HSUProgress::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSUProgress

//______________________________________________________________________________
void HSUDummyRec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSUDummyRec.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HSUDummyRec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSUDummyRec.
      TClass *R__cl = ::HSUDummyRec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lToDelete", &lToDelete);
      R__insp.InspectMember(lToDelete, "lToDelete.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lToWrite", &lToWrite);
      R__insp.InspectMember(lToWrite, "lToWrite.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bVerbose", &bVerbose);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bInitOk", &bInitOk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pOutFile", &pOutFile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sOutFileName", &sOutFileName);
      R__insp.InspectMember(sOutFileName, "sOutFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEvents", &iEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "bWriteEvents", &bWriteEvents);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSUDummyRec(void *p) {
      return  p ? new(p) ::HSUDummyRec : new ::HSUDummyRec;
   }
   static void *newArray_HSUDummyRec(Long_t nElements, void *p) {
      return p ? new(p) ::HSUDummyRec[nElements] : new ::HSUDummyRec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSUDummyRec(void *p) {
      delete ((::HSUDummyRec*)p);
   }
   static void deleteArray_HSUDummyRec(void *p) {
      delete [] ((::HSUDummyRec*)p);
   }
   static void destruct_HSUDummyRec(void *p) {
      typedef ::HSUDummyRec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSUDummyRec(TBuffer &buf, void *obj) {
      ((::HSUDummyRec*)obj)->::HSUDummyRec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSUDummyRec

//______________________________________________________________________________
void HSUIteratorObject::Streamer(TBuffer &R__b)
{
   // Stream an object of class HSUIteratorObject.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HSUIteratorObject::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HSUIteratorObject.
      TClass *R__cl = ::HSUIteratorObject::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pIter", &pIter);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HSUIteratorObject(void *p) {
      return  p ? new(p) ::HSUIteratorObject : new ::HSUIteratorObject;
   }
   static void *newArray_HSUIteratorObject(Long_t nElements, void *p) {
      return p ? new(p) ::HSUIteratorObject[nElements] : new ::HSUIteratorObject[nElements];
   }
   // Wrapper around operator delete
   static void delete_HSUIteratorObject(void *p) {
      delete ((::HSUIteratorObject*)p);
   }
   static void deleteArray_HSUIteratorObject(void *p) {
      delete [] ((::HSUIteratorObject*)p);
   }
   static void destruct_HSUIteratorObject(void *p) {
      typedef ::HSUIteratorObject current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HSUIteratorObject(TBuffer &buf, void *obj) {
      ((::HSUIteratorObject*)obj)->::HSUIteratorObject::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HSUIteratorObject

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HFileSys(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HFileSys : new ::HFileSys;
   }
   static void *newArray_HFileSys(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HFileSys[nElements] : new ::HFileSys[nElements];
   }
   // Wrapper around operator delete
   static void delete_HFileSys(void *p) {
      delete ((::HFileSys*)p);
   }
   static void deleteArray_HFileSys(void *p) {
      delete [] ((::HFileSys*)p);
   }
   static void destruct_HFileSys(void *p) {
      typedef ::HFileSys current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::HFileSys

//______________________________________________________________________________
void HDiskFile::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDiskFile.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> size;
      R__b >> group;
      R__b >> owner;
      R__b >> lastmod;
      R__b >> dir;
      R__b.CheckByteCount(R__s, R__c, HDiskFile::IsA());
   } else {
      R__c = R__b.WriteVersion(HDiskFile::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << size;
      R__b << group;
      R__b << owner;
      R__b << lastmod;
      R__b << dir;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDiskFile::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDiskFile.
      TClass *R__cl = ::HDiskFile::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "group", &group);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "owner", &owner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastmod", &lastmod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dir", &dir);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HDiskFile(void *p) {
      return  p ? new(p) ::HDiskFile : new ::HDiskFile;
   }
   static void *newArray_HDiskFile(Long_t nElements, void *p) {
      return p ? new(p) ::HDiskFile[nElements] : new ::HDiskFile[nElements];
   }
   // Wrapper around operator delete
   static void delete_HDiskFile(void *p) {
      delete ((::HDiskFile*)p);
   }
   static void deleteArray_HDiskFile(void *p) {
      delete [] ((::HDiskFile*)p);
   }
   static void destruct_HDiskFile(void *p) {
      typedef ::HDiskFile current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDiskFile(TBuffer &buf, void *obj) {
      ((::HDiskFile*)obj)->::HDiskFile::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDiskFile

//______________________________________________________________________________
void HDiskDir::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDiskDir.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      R__b >> size;
      R__b >> group;
      R__b >> owner;
      R__b >> lastmod;
      R__b >> nFilesSmallerLimit;
      R__b >> nFilesSmallerLimitTotal;
      R__b >> nFilesTotal;
      R__b >> nEmptyDirs;
      R__b >> nDirsTotal;
      R__b >> nEmptyDirsTotal;
      R__b >> level;
      R__b >> mother;
      {
         vector<HDiskFile> &R__stl =  files;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            HDiskFile R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  dirs;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HDiskDir::IsA());
   } else {
      R__c = R__b.WriteVersion(HDiskDir::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      R__b << size;
      R__b << group;
      R__b << owner;
      R__b << lastmod;
      R__b << nFilesSmallerLimit;
      R__b << nFilesSmallerLimitTotal;
      R__b << nFilesTotal;
      R__b << nEmptyDirs;
      R__b << nDirsTotal;
      R__b << nEmptyDirsTotal;
      R__b << level;
      R__b << mother;
      {
         vector<HDiskFile> &R__stl =  files;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<HDiskFile>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((HDiskFile&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  dirs;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDiskDir::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDiskDir.
      TClass *R__cl = ::HDiskDir::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "size", &size);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "group", &group);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "owner", &owner);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastmod", &lastmod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFilesSmallerLimit", &nFilesSmallerLimit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFilesSmallerLimitTotal", &nFilesSmallerLimitTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFilesTotal", &nFilesTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEmptyDirs", &nEmptyDirs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nDirsTotal", &nDirsTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEmptyDirsTotal", &nEmptyDirsTotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "level", &level);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mother", &mother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "files", (void*)&files);
      R__insp.InspectMember("vector<HDiskFile>", (void*)&files, "files.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dirs", (void*)&dirs);
      R__insp.InspectMember("vector<Int_t>", (void*)&dirs, "dirs.", false);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HDiskDir(void *p) {
      return  p ? new(p) ::HDiskDir : new ::HDiskDir;
   }
   static void *newArray_HDiskDir(Long_t nElements, void *p) {
      return p ? new(p) ::HDiskDir[nElements] : new ::HDiskDir[nElements];
   }
   // Wrapper around operator delete
   static void delete_HDiskDir(void *p) {
      delete ((::HDiskDir*)p);
   }
   static void deleteArray_HDiskDir(void *p) {
      delete [] ((::HDiskDir*)p);
   }
   static void destruct_HDiskDir(void *p) {
      typedef ::HDiskDir current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDiskDir(TBuffer &buf, void *obj) {
      ((::HDiskDir*)obj)->::HDiskDir::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDiskDir

//______________________________________________________________________________
void HDiskCatalog::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDiskCatalog.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      diskname.Streamer(R__b);
      R__b >> list;
      {
         map<uid_t,TString> &R__stl =  musers;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned int R__t;
            R__b >> R__t;
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef unsigned int Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<gid_t,TString> &R__stl =  mgroups;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            unsigned int R__t;
            R__b >> R__t;
            TString R__t2;
            R__t2.Streamer(R__b);
            typedef unsigned int Value_t;
            std::pair<Value_t const, TString > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b >> lastScanStart;
      R__b >> lastScanStop;
      {
         map<TString,Int_t> &R__stl =  mDirToInd;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            int R__t2;
            R__b >> R__t2;
            typedef TString Value_t;
            std::pair<Value_t const, int > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HDiskCatalog::IsA());
   } else {
      R__c = R__b.WriteVersion(HDiskCatalog::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      diskname.Streamer(R__b);
      R__b << list;
      {
         map<uid_t,TString> &R__stl =  musers;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<uid_t,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      {
         map<gid_t,TString> &R__stl =  mgroups;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<gid_t,TString>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            ((TString&)((*R__k).second)).Streamer(R__b);
            }
         }
      }
      R__b << lastScanStart;
      R__b << lastScanStop;
      {
         map<TString,Int_t> &R__stl =  mDirToInd;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<TString,Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b << ((*R__k).second);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDiskCatalog::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDiskCatalog.
      TClass *R__cl = ::HDiskCatalog::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diskname", &diskname);
      R__insp.InspectMember(diskname, "diskname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*list", &list);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "musers", (void*)&musers);
      R__insp.InspectMember("map<uid_t,TString>", (void*)&musers, "musers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mgroups", (void*)&mgroups);
      R__insp.InspectMember("map<gid_t,TString>", (void*)&mgroups, "mgroups.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastScanStart", &lastScanStart);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lastScanStop", &lastScanStop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mDirToInd", (void*)&mDirToInd);
      R__insp.InspectMember("map<TString,Int_t>", (void*)&mDirToInd, "mDirToInd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mDirOld", (void*)&mDirOld);
      R__insp.InspectMember("map<TString,HDiskDir*>", (void*)&mDirOld, "mDirOld.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnfiles", &fnfiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnfilestotal", &fnfilestotal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fndirs", &fndirs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*flisttmp", &flisttmp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "status", (void*)&status);
      R__insp.InspectMember("stat", (void*)&status, "status.", true);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HDiskCatalog(void *p) {
      return  p ? new(p) ::HDiskCatalog : new ::HDiskCatalog;
   }
   static void *newArray_HDiskCatalog(Long_t nElements, void *p) {
      return p ? new(p) ::HDiskCatalog[nElements] : new ::HDiskCatalog[nElements];
   }
   // Wrapper around operator delete
   static void delete_HDiskCatalog(void *p) {
      delete ((::HDiskCatalog*)p);
   }
   static void deleteArray_HDiskCatalog(void *p) {
      delete [] ((::HDiskCatalog*)p);
   }
   static void destruct_HDiskCatalog(void *p) {
      typedef ::HDiskCatalog current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDiskCatalog(TBuffer &buf, void *obj) {
      ((::HDiskCatalog*)obj)->::HDiskCatalog::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDiskCatalog

//______________________________________________________________________________
void HDiskStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class HDiskStat.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TNamed::Streamer(R__b);
      {
         map<TString,vector<TGraph> > &R__stl =  mDirToVal;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(vector<TGraph,allocator<TGraph> >));
         if (R__tcl2==0) {
            Error("mDirToVal streamer","Missing the TClass object for vector<TGraph,allocator<TGraph> >!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            TString R__t;
            R__t.Streamer(R__b);
            vector<TGraph,allocator<TGraph> > R__t2;
            R__b.StreamObject(&R__t2,R__tcl2);
            typedef TString Value_t;
            std::pair<Value_t const, vector<TGraph,allocator<TGraph> > > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         vector<Int_t> &R__stl =  vcolors;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  vmarkers;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<Int_t> &R__stl =  vstyles;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> unit;
      diskname.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HDiskStat::IsA());
   } else {
      R__c = R__b.WriteVersion(HDiskStat::IsA(), kTRUE);
      TNamed::Streamer(R__b);
      {
         map<TString,vector<TGraph> > &R__stl =  mDirToVal;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl2 = TBuffer::GetClass(typeid(vector<TGraph,allocator<TGraph> >));
         if (R__tcl2==0) {
            Error("mDirToValstreamer","Missing the TClass object for vector<TGraph,allocator<TGraph> >!");
            return;
         }
            map<TString,vector<TGraph> >::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((TString&)((*R__k).first )).Streamer(R__b);
            R__b.StreamObject((vector<TGraph,allocator<TGraph> >*)&((*R__k).second),R__tcl2);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  vcolors;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  vmarkers;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  vstyles;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << unit;
      diskname.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HDiskStat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HDiskStat.
      TClass *R__cl = ::HDiskStat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mDirToVal", (void*)&mDirToVal);
      R__insp.InspectMember("map<TString,vector<TGraph> >", (void*)&mDirToVal, "mDirToVal.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vcolors", (void*)&vcolors);
      R__insp.InspectMember("vector<Int_t>", (void*)&vcolors, "vcolors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vmarkers", (void*)&vmarkers);
      R__insp.InspectMember("vector<Int_t>", (void*)&vmarkers, "vmarkers.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vstyles", (void*)&vstyles);
      R__insp.InspectMember("vector<Int_t>", (void*)&vstyles, "vstyles.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "unit", &unit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "diskname", &diskname);
      R__insp.InspectMember(diskname, "diskname.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HDiskStat(void *p) {
      return  p ? new(p) ::HDiskStat : new ::HDiskStat;
   }
   static void *newArray_HDiskStat(Long_t nElements, void *p) {
      return p ? new(p) ::HDiskStat[nElements] : new ::HDiskStat[nElements];
   }
   // Wrapper around operator delete
   static void delete_HDiskStat(void *p) {
      delete ((::HDiskStat*)p);
   }
   static void deleteArray_HDiskStat(void *p) {
      delete [] ((::HDiskStat*)p);
   }
   static void destruct_HDiskStat(void *p) {
      typedef ::HDiskStat current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HDiskStat(TBuffer &buf, void *obj) {
      ((::HDiskStat*)obj)->::HDiskStat::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HDiskStat

namespace ROOTDict {
   void maplETStringcOTArrayIgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTArrayIgR_Dictionary();
   static void *new_maplETStringcOTArrayIgR(void *p = 0);
   static void *newArray_maplETStringcOTArrayIgR(Long_t size, void *p);
   static void delete_maplETStringcOTArrayIgR(void *p);
   static void deleteArray_maplETStringcOTArrayIgR(void *p);
   static void destruct_maplETStringcOTArrayIgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TArrayI>*)
   {
      map<TString,TArrayI> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TArrayI>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TArrayI>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TArrayI>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTArrayIgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TArrayI>) );
      instance.SetNew(&new_maplETStringcOTArrayIgR);
      instance.SetNewArray(&newArray_maplETStringcOTArrayIgR);
      instance.SetDelete(&delete_maplETStringcOTArrayIgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTArrayIgR);
      instance.SetDestructor(&destruct_maplETStringcOTArrayIgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TArrayI> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TArrayI>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTArrayIgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TArrayI>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTArrayIgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TArrayI> : new map<TString,TArrayI>;
   }
   static void *newArray_maplETStringcOTArrayIgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TArrayI>[nElements] : new map<TString,TArrayI>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTArrayIgR(void *p) {
      delete ((map<TString,TArrayI>*)p);
   }
   static void deleteArray_maplETStringcOTArrayIgR(void *p) {
      delete [] ((map<TString,TArrayI>*)p);
   }
   static void destruct_maplETStringcOTArrayIgR(void *p) {
      typedef map<TString,TArrayI> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TArrayI>

namespace ROOTDict {
   void maplETStringcOTCutGmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTCutGmUgR_Dictionary();
   static void *new_maplETStringcOTCutGmUgR(void *p = 0);
   static void *newArray_maplETStringcOTCutGmUgR(Long_t size, void *p);
   static void delete_maplETStringcOTCutGmUgR(void *p);
   static void deleteArray_maplETStringcOTCutGmUgR(void *p);
   static void destruct_maplETStringcOTCutGmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TCutG*>*)
   {
      map<TString,TCutG*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TCutG*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TCutG*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TCutG*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTCutGmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TCutG*>) );
      instance.SetNew(&new_maplETStringcOTCutGmUgR);
      instance.SetNewArray(&newArray_maplETStringcOTCutGmUgR);
      instance.SetDelete(&delete_maplETStringcOTCutGmUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTCutGmUgR);
      instance.SetDestructor(&destruct_maplETStringcOTCutGmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TCutG*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TCutG*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTCutGmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TCutG*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTCutGmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TCutG*> : new map<TString,TCutG*>;
   }
   static void *newArray_maplETStringcOTCutGmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TCutG*>[nElements] : new map<TString,TCutG*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTCutGmUgR(void *p) {
      delete ((map<TString,TCutG*>*)p);
   }
   static void deleteArray_maplETStringcOTCutGmUgR(void *p) {
      delete [] ((map<TString,TCutG*>*)p);
   }
   static void destruct_maplETStringcOTCutGmUgR(void *p) {
      typedef map<TString,TCutG*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TCutG*>

namespace ROOTDict {
   void maplETStringcOTF1mUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTF1mUgR_Dictionary();
   static void *new_maplETStringcOTF1mUgR(void *p = 0);
   static void *newArray_maplETStringcOTF1mUgR(Long_t size, void *p);
   static void delete_maplETStringcOTF1mUgR(void *p);
   static void deleteArray_maplETStringcOTF1mUgR(void *p);
   static void destruct_maplETStringcOTF1mUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TF1*>*)
   {
      map<TString,TF1*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TF1*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TF1*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TF1*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTF1mUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TF1*>) );
      instance.SetNew(&new_maplETStringcOTF1mUgR);
      instance.SetNewArray(&newArray_maplETStringcOTF1mUgR);
      instance.SetDelete(&delete_maplETStringcOTF1mUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTF1mUgR);
      instance.SetDestructor(&destruct_maplETStringcOTF1mUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TF1*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TF1*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTF1mUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TF1*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTF1mUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TF1*> : new map<TString,TF1*>;
   }
   static void *newArray_maplETStringcOTF1mUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TF1*>[nElements] : new map<TString,TF1*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTF1mUgR(void *p) {
      delete ((map<TString,TF1*>*)p);
   }
   static void deleteArray_maplETStringcOTF1mUgR(void *p) {
      delete [] ((map<TString,TF1*>*)p);
   }
   static void destruct_maplETStringcOTF1mUgR(void *p) {
      typedef map<TString,TF1*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TF1*>

namespace ROOTDict {
   void maplETStringcOTMacromUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTMacromUgR_Dictionary();
   static void *new_maplETStringcOTMacromUgR(void *p = 0);
   static void *newArray_maplETStringcOTMacromUgR(Long_t size, void *p);
   static void delete_maplETStringcOTMacromUgR(void *p);
   static void deleteArray_maplETStringcOTMacromUgR(void *p);
   static void destruct_maplETStringcOTMacromUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TMacro*>*)
   {
      map<TString,TMacro*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TMacro*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TMacro*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TMacro*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTMacromUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TMacro*>) );
      instance.SetNew(&new_maplETStringcOTMacromUgR);
      instance.SetNewArray(&newArray_maplETStringcOTMacromUgR);
      instance.SetDelete(&delete_maplETStringcOTMacromUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTMacromUgR);
      instance.SetDestructor(&destruct_maplETStringcOTMacromUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TMacro*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TMacro*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTMacromUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TMacro*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTMacromUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TMacro*> : new map<TString,TMacro*>;
   }
   static void *newArray_maplETStringcOTMacromUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TMacro*>[nElements] : new map<TString,TMacro*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTMacromUgR(void *p) {
      delete ((map<TString,TMacro*>*)p);
   }
   static void deleteArray_maplETStringcOTMacromUgR(void *p) {
      delete [] ((map<TString,TMacro*>*)p);
   }
   static void destruct_maplETStringcOTMacromUgR(void *p) {
      typedef map<TString,TMacro*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TMacro*>

namespace ROOTDict {
   void maplETStringcOTObjArraygR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTObjArraygR_Dictionary();
   static void *new_maplETStringcOTObjArraygR(void *p = 0);
   static void *newArray_maplETStringcOTObjArraygR(Long_t size, void *p);
   static void delete_maplETStringcOTObjArraygR(void *p);
   static void deleteArray_maplETStringcOTObjArraygR(void *p);
   static void destruct_maplETStringcOTObjArraygR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TObjArray>*)
   {
      map<TString,TObjArray> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TObjArray>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TObjArray>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TObjArray>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTObjArraygR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TObjArray>) );
      instance.SetNew(&new_maplETStringcOTObjArraygR);
      instance.SetNewArray(&newArray_maplETStringcOTObjArraygR);
      instance.SetDelete(&delete_maplETStringcOTObjArraygR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTObjArraygR);
      instance.SetDestructor(&destruct_maplETStringcOTObjArraygR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TObjArray> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TObjArray>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTObjArraygR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TObjArray>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTObjArraygR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TObjArray> : new map<TString,TObjArray>;
   }
   static void *newArray_maplETStringcOTObjArraygR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TObjArray>[nElements] : new map<TString,TObjArray>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTObjArraygR(void *p) {
      delete ((map<TString,TObjArray>*)p);
   }
   static void deleteArray_maplETStringcOTObjArraygR(void *p) {
      delete [] ((map<TString,TObjArray>*)p);
   }
   static void destruct_maplETStringcOTObjArraygR(void *p) {
      typedef map<TString,TObjArray> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TObjArray>

namespace ROOTDict {
   void maplETStringcOTObjectmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTObjectmUgR_Dictionary();
   static void *new_maplETStringcOTObjectmUgR(void *p = 0);
   static void *newArray_maplETStringcOTObjectmUgR(Long_t size, void *p);
   static void delete_maplETStringcOTObjectmUgR(void *p);
   static void deleteArray_maplETStringcOTObjectmUgR(void *p);
   static void destruct_maplETStringcOTObjectmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TObject*>*)
   {
      map<TString,TObject*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TObject*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TObject*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TObject*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTObjectmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TObject*>) );
      instance.SetNew(&new_maplETStringcOTObjectmUgR);
      instance.SetNewArray(&newArray_maplETStringcOTObjectmUgR);
      instance.SetDelete(&delete_maplETStringcOTObjectmUgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTObjectmUgR);
      instance.SetDestructor(&destruct_maplETStringcOTObjectmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TObject*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TObject*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTObjectmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TObject*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTObjectmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TObject*> : new map<TString,TObject*>;
   }
   static void *newArray_maplETStringcOTObjectmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TObject*>[nElements] : new map<TString,TObject*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTObjectmUgR(void *p) {
      delete ((map<TString,TObject*>*)p);
   }
   static void deleteArray_maplETStringcOTObjectmUgR(void *p) {
      delete [] ((map<TString,TObject*>*)p);
   }
   static void destruct_maplETStringcOTObjectmUgR(void *p) {
      typedef map<TString,TObject*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TObject*>

namespace ROOTDict {
   void maplETStringcOTStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOTStringgR_Dictionary();
   static void *new_maplETStringcOTStringgR(void *p = 0);
   static void *newArray_maplETStringcOTStringgR(Long_t size, void *p);
   static void delete_maplETStringcOTStringgR(void *p);
   static void deleteArray_maplETStringcOTStringgR(void *p);
   static void destruct_maplETStringcOTStringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,TString>*)
   {
      map<TString,TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,TString>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,TString>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOTStringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,TString>) );
      instance.SetNew(&new_maplETStringcOTStringgR);
      instance.SetNewArray(&newArray_maplETStringcOTStringgR);
      instance.SetDelete(&delete_maplETStringcOTStringgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOTStringgR);
      instance.SetDestructor(&destruct_maplETStringcOTStringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOTStringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,TString>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOTStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TString> : new map<TString,TString>;
   }
   static void *newArray_maplETStringcOTStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,TString>[nElements] : new map<TString,TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOTStringgR(void *p) {
      delete ((map<TString,TString>*)p);
   }
   static void deleteArray_maplETStringcOTStringgR(void *p) {
      delete [] ((map<TString,TString>*)p);
   }
   static void destruct_maplETStringcOTStringgR(void *p) {
      typedef map<TString,TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,TString>

namespace ROOTDict {
   void maplETStringcOdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOdoublegR_Dictionary();
   static void *new_maplETStringcOdoublegR(void *p = 0);
   static void *newArray_maplETStringcOdoublegR(Long_t size, void *p);
   static void delete_maplETStringcOdoublegR(void *p);
   static void deleteArray_maplETStringcOdoublegR(void *p);
   static void destruct_maplETStringcOdoublegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,double>*)
   {
      map<TString,double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,double>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,double>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,double>) );
      instance.SetNew(&new_maplETStringcOdoublegR);
      instance.SetNewArray(&newArray_maplETStringcOdoublegR);
      instance.SetDelete(&delete_maplETStringcOdoublegR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOdoublegR);
      instance.SetDestructor(&destruct_maplETStringcOdoublegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOdoublegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,double>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,double> : new map<TString,double>;
   }
   static void *newArray_maplETStringcOdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,double>[nElements] : new map<TString,double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOdoublegR(void *p) {
      delete ((map<TString,double>*)p);
   }
   static void deleteArray_maplETStringcOdoublegR(void *p) {
      delete [] ((map<TString,double>*)p);
   }
   static void destruct_maplETStringcOdoublegR(void *p) {
      typedef map<TString,double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,double>

namespace ROOTDict {
   void maplETStringcOintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOintgR_Dictionary();
   static void *new_maplETStringcOintgR(void *p = 0);
   static void *newArray_maplETStringcOintgR(Long_t size, void *p);
   static void delete_maplETStringcOintgR(void *p);
   static void deleteArray_maplETStringcOintgR(void *p);
   static void destruct_maplETStringcOintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,int>*)
   {
      map<TString,int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,int>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOintgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,int>) );
      instance.SetNew(&new_maplETStringcOintgR);
      instance.SetNewArray(&newArray_maplETStringcOintgR);
      instance.SetDelete(&delete_maplETStringcOintgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOintgR);
      instance.SetDestructor(&destruct_maplETStringcOintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,int> : new map<TString,int>;
   }
   static void *newArray_maplETStringcOintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,int>[nElements] : new map<TString,int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOintgR(void *p) {
      delete ((map<TString,int>*)p);
   }
   static void deleteArray_maplETStringcOintgR(void *p) {
      delete [] ((map<TString,int>*)p);
   }
   static void destruct_maplETStringcOintgR(void *p) {
      typedef map<TString,int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,int>

namespace ROOTDict {
   void maplETStringcOvectorlETGraphgRsPgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplETStringcOvectorlETGraphgRsPgR_Dictionary();
   static void *new_maplETStringcOvectorlETGraphgRsPgR(void *p = 0);
   static void *newArray_maplETStringcOvectorlETGraphgRsPgR(Long_t size, void *p);
   static void delete_maplETStringcOvectorlETGraphgRsPgR(void *p);
   static void deleteArray_maplETStringcOvectorlETGraphgRsPgR(void *p);
   static void destruct_maplETStringcOvectorlETGraphgRsPgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<TString,vector<TGraph> >*)
   {
      map<TString,vector<TGraph> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<TString,vector<TGraph> >),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<TString,vector<TGraph> >", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<TString,vector<TGraph> >), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplETStringcOvectorlETGraphgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(map<TString,vector<TGraph> >) );
      instance.SetNew(&new_maplETStringcOvectorlETGraphgRsPgR);
      instance.SetNewArray(&newArray_maplETStringcOvectorlETGraphgRsPgR);
      instance.SetDelete(&delete_maplETStringcOvectorlETGraphgRsPgR);
      instance.SetDeleteArray(&deleteArray_maplETStringcOvectorlETGraphgRsPgR);
      instance.SetDestructor(&destruct_maplETStringcOvectorlETGraphgRsPgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<TString,vector<TGraph> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<TString,vector<TGraph> >*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplETStringcOvectorlETGraphgRsPgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<TString,vector<TGraph> >*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplETStringcOvectorlETGraphgRsPgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,vector<TGraph> > : new map<TString,vector<TGraph> >;
   }
   static void *newArray_maplETStringcOvectorlETGraphgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<TString,vector<TGraph> >[nElements] : new map<TString,vector<TGraph> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplETStringcOvectorlETGraphgRsPgR(void *p) {
      delete ((map<TString,vector<TGraph> >*)p);
   }
   static void deleteArray_maplETStringcOvectorlETGraphgRsPgR(void *p) {
      delete [] ((map<TString,vector<TGraph> >*)p);
   }
   static void destruct_maplETStringcOvectorlETGraphgRsPgR(void *p) {
      typedef map<TString,vector<TGraph> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<TString,vector<TGraph> >

namespace ROOTDict {
   void maplEunsignedsPintcOTStringgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEunsignedsPintcOTStringgR_Dictionary();
   static void *new_maplEunsignedsPintcOTStringgR(void *p = 0);
   static void *newArray_maplEunsignedsPintcOTStringgR(Long_t size, void *p);
   static void delete_maplEunsignedsPintcOTStringgR(void *p);
   static void deleteArray_maplEunsignedsPintcOTStringgR(void *p);
   static void destruct_maplEunsignedsPintcOTStringgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<unsigned int,TString>*)
   {
      map<unsigned int,TString> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<unsigned int,TString>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<unsigned int,TString>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<unsigned int,TString>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEunsignedsPintcOTStringgR_Dictionary, isa_proxy, 0,
                  sizeof(map<unsigned int,TString>) );
      instance.SetNew(&new_maplEunsignedsPintcOTStringgR);
      instance.SetNewArray(&newArray_maplEunsignedsPintcOTStringgR);
      instance.SetDelete(&delete_maplEunsignedsPintcOTStringgR);
      instance.SetDeleteArray(&deleteArray_maplEunsignedsPintcOTStringgR);
      instance.SetDestructor(&destruct_maplEunsignedsPintcOTStringgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<unsigned int,TString> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<unsigned int,TString>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEunsignedsPintcOTStringgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<unsigned int,TString>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEunsignedsPintcOTStringgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<unsigned int,TString> : new map<unsigned int,TString>;
   }
   static void *newArray_maplEunsignedsPintcOTStringgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<unsigned int,TString>[nElements] : new map<unsigned int,TString>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEunsignedsPintcOTStringgR(void *p) {
      delete ((map<unsigned int,TString>*)p);
   }
   static void deleteArray_maplEunsignedsPintcOTStringgR(void *p) {
      delete [] ((map<unsigned int,TString>*)p);
   }
   static void destruct_maplEunsignedsPintcOTStringgR(void *p) {
      typedef map<unsigned int,TString> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<unsigned int,TString>

namespace ROOTDict {
   void vectorlEHDiskFilegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEHDiskFilegR_Dictionary();
   static void *new_vectorlEHDiskFilegR(void *p = 0);
   static void *newArray_vectorlEHDiskFilegR(Long_t size, void *p);
   static void delete_vectorlEHDiskFilegR(void *p);
   static void deleteArray_vectorlEHDiskFilegR(void *p);
   static void destruct_vectorlEHDiskFilegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<HDiskFile>*)
   {
      vector<HDiskFile> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<HDiskFile>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<HDiskFile>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<HDiskFile>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEHDiskFilegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<HDiskFile>) );
      instance.SetNew(&new_vectorlEHDiskFilegR);
      instance.SetNewArray(&newArray_vectorlEHDiskFilegR);
      instance.SetDelete(&delete_vectorlEHDiskFilegR);
      instance.SetDeleteArray(&deleteArray_vectorlEHDiskFilegR);
      instance.SetDestructor(&destruct_vectorlEHDiskFilegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<HDiskFile> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<HDiskFile>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEHDiskFilegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<HDiskFile>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEHDiskFilegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HDiskFile> : new vector<HDiskFile>;
   }
   static void *newArray_vectorlEHDiskFilegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HDiskFile>[nElements] : new vector<HDiskFile>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEHDiskFilegR(void *p) {
      delete ((vector<HDiskFile>*)p);
   }
   static void deleteArray_vectorlEHDiskFilegR(void *p) {
      delete [] ((vector<HDiskFile>*)p);
   }
   static void destruct_vectorlEHDiskFilegR(void *p) {
      typedef vector<HDiskFile> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<HDiskFile>

namespace ROOTDict {
   void vectorlETGraphgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlETGraphgR_Dictionary();
   static void *new_vectorlETGraphgR(void *p = 0);
   static void *newArray_vectorlETGraphgR(Long_t size, void *p);
   static void delete_vectorlETGraphgR(void *p);
   static void deleteArray_vectorlETGraphgR(void *p);
   static void destruct_vectorlETGraphgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<TGraph>*)
   {
      vector<TGraph> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<TGraph>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<TGraph>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<TGraph>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlETGraphgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<TGraph>) );
      instance.SetNew(&new_vectorlETGraphgR);
      instance.SetNewArray(&newArray_vectorlETGraphgR);
      instance.SetDelete(&delete_vectorlETGraphgR);
      instance.SetDeleteArray(&deleteArray_vectorlETGraphgR);
      instance.SetDestructor(&destruct_vectorlETGraphgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<TGraph> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<TGraph>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlETGraphgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<TGraph>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlETGraphgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGraph> : new vector<TGraph>;
   }
   static void *newArray_vectorlETGraphgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<TGraph>[nElements] : new vector<TGraph>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlETGraphgR(void *p) {
      delete ((vector<TGraph>*)p);
   }
   static void deleteArray_vectorlETGraphgR(void *p) {
      delete [] ((vector<TGraph>*)p);
   }
   static void destruct_vectorlETGraphgR(void *p) {
      typedef vector<TGraph> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<TGraph>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

/********************************************************
* ../build/pc/UtilDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableUtilDict();

extern "C" void G__set_cpp_environmentUtilDict() {
  G__cpp_reset_tagtableUtilDict();
}
#include <new>
extern "C" int G__cpp_dllrevUtilDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HDebug */
static int G__UtilDict_168_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDebug* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDebug[n];
     } else {
       p = new((void*) gvp) HDebug[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDebug;
     } else {
       p = new((void*) gvp) HDebug;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDebug));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDebug*) G__getstructoffset())->setIdentLevel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDebug*) G__getstructoffset())->getIdentLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDebug*) G__getstructoffset())->incIdentLevel();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDebug*) G__getstructoffset())->decIdentLevel();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("message: more than 56 var args\n");
   }
      ((HDebug*) G__getstructoffset())->message((const Text_t*) G__int(libp->para[0]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[2], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDebug*) G__getstructoffset())->enterFunc((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDebug*) G__getstructoffset())->leaveFunc((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDebug::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDebug::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDebug::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDebug::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDebug*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDebug::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDebug::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDebug::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_168_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDebug::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_168_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HDebug* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HDebug(*(HDebug*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDebug));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDebug G__THDebug;
static int G__UtilDict_168_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDebug*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDebug*) (soff+(sizeof(HDebug)*i)))->~G__THDebug();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDebug*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDebug*) (soff))->~G__THDebug();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_168_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDebug* dest = (HDebug*) G__getstructoffset();
   *dest = *(HDebug*) libp->para[0].ref;
   const HDebug& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HObjTable */
static int G__UtilDict_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HObjTable* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HObjTable[n];
     } else {
       p = new((void*) gvp) HObjTable[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HObjTable;
     } else {
       p = new((void*) gvp) HObjTable;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HObjTable));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HObjTable*) G__getstructoffset())->setSizes((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("set: more than 56 var args\n");
   }
      ((HObjTable*) G__getstructoffset())->set((Int_t) G__int(libp->para[0]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[2], lval[3], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HObjTable*) G__getstructoffset())->setCellClassName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HObjTable*) G__getstructoffset())->getCellClassName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HObjTable*) G__getstructoffset())->getObject((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HObjTable*) G__getstructoffset())->getObject(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TObject*& obj = ((HObjTable*) G__getstructoffset())->getSlot(*(HLocation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TObject*& obj = ((HObjTable*) G__getstructoffset())->getSlot((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HObjTable*) G__getstructoffset())->getClones(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HObjTable*) G__getstructoffset())->makeObjTable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HObjTable*) G__getstructoffset())->deleteTab();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HObjTable::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HObjTable::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HObjTable::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HObjTable::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HObjTable*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HObjTable::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HObjTable::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HObjTable::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_196_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HObjTable::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_196_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HObjTable* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HObjTable(*(HObjTable*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HObjTable));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HObjTable G__THObjTable;
static int G__UtilDict_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HObjTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HObjTable*) (soff+(sizeof(HObjTable)*i)))->~G__THObjTable();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HObjTable*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HObjTable*) (soff))->~G__THObjTable();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HObjTable* dest = (HObjTable*) G__getstructoffset();
   *dest = *(HObjTable*) libp->para[0].ref;
   const HObjTable& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRunAnalizer */
static int G__UtilDict_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRunAnalizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRunAnalizer(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Text_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRunAnalizer(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Text_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRunAnalizer((Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRunAnalizer((Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRunAnalizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRunAnalizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRunAnalizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRunAnalizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRunAnalizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRunAnalizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRunAnalizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRunAnalizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_207_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRunAnalizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRunAnalizer G__THRunAnalizer;
static int G__UtilDict_207_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRunAnalizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRunAnalizer*) (soff+(sizeof(HRunAnalizer)*i)))->~G__THRunAnalizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRunAnalizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRunAnalizer*) (soff))->~G__THRunAnalizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSymMat */
static int G__UtilDict_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat[n];
     } else {
       p = new((void*) gvp) HSymMat[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat;
     } else {
       p = new((void*) gvp) HSymMat;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((HSymMat*) G__getstructoffset())->operator()((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->setElement((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->setElement((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->setErr((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->setCov(*(HSymMat*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HSymMat*) G__getstructoffset())->getElement((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HSymMat*) G__getstructoffset())->getElement((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HSymMat*) G__getstructoffset())->getErr((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HSymMat*) G__getstructoffset())->getDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->getCov(*(HSymMat*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HSymMat*) G__getstructoffset())->convolution((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->transform(*(HSymMat*) libp->para[0].ref, (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSymMat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSymMat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSymMat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_209_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_209_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSymMat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSymMat(*(HSymMat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSymMat G__THSymMat;
static int G__UtilDict_209_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSymMat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSymMat*) (soff+(sizeof(HSymMat)*i)))->~G__THSymMat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSymMat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSymMat*) (soff))->~G__THSymMat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_209_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat* dest = (HSymMat*) G__getstructoffset();
   *dest = *(HSymMat*) libp->para[0].ref;
   const HSymMat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSymMat2 */
static int G__UtilDict_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat2* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat2[n];
     } else {
       p = new((void*) gvp) HSymMat2[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat2;
     } else {
       p = new((void*) gvp) HSymMat2;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSymMat2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSymMat2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSymMat2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_210_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSymMat2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSymMat2(*(HSymMat2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSymMat2 G__THSymMat2;
static int G__UtilDict_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSymMat2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSymMat2*) (soff+(sizeof(HSymMat2)*i)))->~G__THSymMat2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSymMat2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSymMat2*) (soff))->~G__THSymMat2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat2* dest = (HSymMat2*) G__getstructoffset();
   *dest = *(HSymMat2*) libp->para[0].ref;
   const HSymMat2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSymMat3 */
static int G__UtilDict_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat3* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat3[n];
     } else {
       p = new((void*) gvp) HSymMat3[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat3;
     } else {
       p = new((void*) gvp) HSymMat3;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat3));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSymMat3::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat3::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSymMat3::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSymMat3::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat3*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat3::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat3::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat3::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat3::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_211_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSymMat3* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSymMat3(*(HSymMat3*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat3));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSymMat3 G__THSymMat3;
static int G__UtilDict_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSymMat3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSymMat3*) (soff+(sizeof(HSymMat3)*i)))->~G__THSymMat3();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSymMat3*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSymMat3*) (soff))->~G__THSymMat3();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat3* dest = (HSymMat3*) G__getstructoffset();
   *dest = *(HSymMat3*) libp->para[0].ref;
   const HSymMat3& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSymMat4 */
static int G__UtilDict_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat4* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat4[n];
     } else {
       p = new((void*) gvp) HSymMat4[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat4;
     } else {
       p = new((void*) gvp) HSymMat4;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat4));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSymMat4::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat4::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSymMat4::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSymMat4::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat4*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat4::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat4::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat4::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat4::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSymMat4* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSymMat4(*(HSymMat4*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat4));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSymMat4 G__THSymMat4;
static int G__UtilDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSymMat4*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSymMat4*) (soff+(sizeof(HSymMat4)*i)))->~G__THSymMat4();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSymMat4*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSymMat4*) (soff))->~G__THSymMat4();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat4* dest = (HSymMat4*) G__getstructoffset();
   *dest = *(HSymMat4*) libp->para[0].ref;
   const HSymMat4& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSymMat5 */
static int G__UtilDict_213_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat5* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat5[n];
     } else {
       p = new((void*) gvp) HSymMat5[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat5;
     } else {
       p = new((void*) gvp) HSymMat5;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat5));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSymMat5::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat5::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSymMat5::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSymMat5::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat5*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat5::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat5::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat5::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_213_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat5::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_213_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSymMat5* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSymMat5(*(HSymMat5*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat5));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSymMat5 G__THSymMat5;
static int G__UtilDict_213_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSymMat5*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSymMat5*) (soff+(sizeof(HSymMat5)*i)))->~G__THSymMat5();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSymMat5*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSymMat5*) (soff))->~G__THSymMat5();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat5* dest = (HSymMat5*) G__getstructoffset();
   *dest = *(HSymMat5*) libp->para[0].ref;
   const HSymMat5& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSymMat6 */
static int G__UtilDict_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat6* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat6[n];
     } else {
       p = new((void*) gvp) HSymMat6[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSymMat6;
     } else {
       p = new((void*) gvp) HSymMat6;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat6));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSymMat6::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat6::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSymMat6::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSymMat6::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSymMat6*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat6::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat6::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSymMat6::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_214_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSymMat6::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSymMat6* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSymMat6(*(HSymMat6*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSymMat6));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSymMat6 G__THSymMat6;
static int G__UtilDict_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSymMat6*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSymMat6*) (soff+(sizeof(HSymMat6)*i)))->~G__THSymMat6();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSymMat6*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSymMat6*) (soff))->~G__THSymMat6();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSymMat6* dest = (HSymMat6*) G__getstructoffset();
   *dest = *(HSymMat6*) libp->para[0].ref;
   const HSymMat6& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMessageMgr */
static int G__UtilDict_594_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMessageMgr* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HMessageMgr((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HMessageMgr((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMessageMgr*) G__getstructoffset())->setDefault());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMessageMgr*) G__getstructoffset())->setFile((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMessageMgr*) G__getstructoffset())->setPort((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HMessageMgr*) G__getstructoffset())->switchOff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->setDebugLevel((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->setInfoLevel((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->setWarningLevel((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->enableDetectorMsg((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->messageSeperator((const Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMessageMgr::hydraErrorHandler((Int_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->debug((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->error((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->warning((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->info((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("debug: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->debug((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("error: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->error((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("warning: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->warning((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("info: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->info((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("debugB: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->debugB((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("errorB: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->errorB((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("warningB: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->warningB((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("infoB: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->infoB((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], lval[4], lval[5], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   const int imax = 6, dmax = 8, umax = 50;
   int objsize, type, i, icnt = 0, dcnt = 0, ucnt = 0;
   G__value *pval;
   G__int64 lval[imax] = {0};
   double dval[dmax] = {0};
   union { G__int64 lval; double dval; } u[umax] = {{0}};
   lval[icnt] = G__getstructoffset(); icnt++; // this pointer
   for (i = 0; i < libp->paran; i++) {
      type = G__value_get_type(&libp->para[i]);
      pval = &libp->para[i];
      if (isupper(type))
         objsize = G__LONGALLOC;
      else
         objsize = G__sizeof(pval);
      switch (type) {
         case 'c': case 'b': case 's': case 'r': objsize = sizeof(int); break;
         case 'f': objsize = sizeof(double); break;
      }
#ifdef G__VAARG_PASS_BY_REFERENCE
      if (objsize > G__VAARG_PASS_BY_REFERENCE) {
         if (pval->ref > 0x1000) {
            if (icnt < imax) {
               lval[icnt] = pval->ref; icnt++;
            } else {
               u[ucnt].lval = pval->ref; ucnt++;
            }
         } else {
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            }
         }
         type = 'z';
      }
#endif
      switch (type) {
         case 'n': case 'm':
            if (icnt < imax) {
               lval[icnt] = (G__int64)G__Longlong(*pval); icnt++;
            } else {
               u[ucnt].lval = (G__int64)G__Longlong(*pval); ucnt++;
            } break;
         case 'f': case 'd':
            if (dcnt < dmax) {
               dval[dcnt] = G__double(*pval); dcnt++;
            } else {
               u[ucnt].dval = G__double(*pval); ucnt++;
            } break;
         case 'z': break;
         case 'u':
            if (objsize >= 16) {
               memcpy(&u[ucnt].lval, (void*)pval->obj.i, objsize);
               ucnt += objsize/8;
               break;
            }
            // objsize < 16 -> fall through
         case 'g': case 'c': case 'b': case 'r': case 's': case 'h': case 'i':
         case 'k': case 'l':
         default:
            if (icnt < imax) {
               lval[icnt] = G__int(*pval); icnt++;
            } else {
               u[ucnt].lval = G__int(*pval); ucnt++;
            } break;
      }
      if (ucnt >= 50) printf("debug: more than 56 var args\n");
   }
      ((HMessageMgr*) G__getstructoffset())->debug((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (const Char_t*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (const Char_t*) G__int(libp->para[5]), dval[0], dval[1], dval[2], dval[3], dval[4], dval[5], dval[6], dval[7], u[0].lval, u[1].lval, u[2].lval, u[3].lval, u[4].lval, u[5].lval, u[6].lval, u[7].lval, u[8].lval, u[9].lval, u[10].lval, u[11].lval, u[12].lval, u[13].lval, u[14].lval, u[15].lval, u[16].lval, u[17].lval, u[18].lval, u[19].lval, u[20].lval, u[21].lval, u[22].lval, u[23].lval, u[24].lval, u[25].lval, u[26].lval, u[27].lval, u[28].lval, u[29].lval, u[30].lval, u[31].lval, u[32].lval, u[33].lval, u[34].lval, u[35].lval, u[36].lval, u[37].lval, u[38].lval, u[39].lval, u[40].lval, u[41].lval, u[42].lval, u[43].lval, u[44].lval, u[45].lval, u[46].lval, u[47].lval, u[48].lval, u[49].lval);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->setF((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->setL((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HMessageMgr*) G__getstructoffset())->setScreenOutput((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HMessageMgr*) G__getstructoffset())->setScreenOutput();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMessageMgr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMessageMgr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMessageMgr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMessageMgr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMessageMgr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMessageMgr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMessageMgr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMessageMgr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_594_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMessageMgr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_594_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HMessageMgr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HMessageMgr(*(HMessageMgr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMessageMgr G__THMessageMgr;
static int G__UtilDict_594_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMessageMgr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMessageMgr*) (soff+(sizeof(HMessageMgr)*i)))->~G__THMessageMgr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMessageMgr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMessageMgr*) (soff))->~G__THMessageMgr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_594_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMessageMgr* dest = (HMessageMgr*) G__getstructoffset();
   *dest = *(HMessageMgr*) libp->para[0].ref;
   const HMessageMgr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSrcKeeper */
static int G__UtilDict_596_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSrcKeeper* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSrcKeeper((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HSrcKeeper((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSrcKeeper((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HSrcKeeper((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSrcKeeper[n];
       } else {
         p = new((void*) gvp) HSrcKeeper[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSrcKeeper;
       } else {
         p = new((void*) gvp) HSrcKeeper;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSrcKeeper));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSrcKeeper*) G__getstructoffset())->addSourceFile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HSrcKeeper*) G__getstructoffset())->addSourceFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HSrcKeeper*) G__getstructoffset())->addSourceFiles(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HSrcKeeper*) G__getstructoffset())->addSourceFilesRecursive(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HSrcKeeper*) G__getstructoffset())->addSourceFilesRecursive(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TObjArray& obj = ((HSrcKeeper*) G__getstructoffset())->getSource();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HSrcKeeper*) G__getstructoffset())->print(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HSrcKeeper*) G__getstructoffset())->print(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HSrcKeeper*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HSrcKeeper*) G__getstructoffset())->extract(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((HSrcKeeper*) G__getstructoffset())->extract(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HSrcKeeper*) G__getstructoffset())->extract(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HSrcKeeper*) G__getstructoffset())->getFile(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HSrcKeeper*) G__getstructoffset())->getFile(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((HSrcKeeper*) G__getstructoffset())->Merge((TCollection*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSrcKeeper::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSrcKeeper::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSrcKeeper::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSrcKeeper::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSrcKeeper*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSrcKeeper::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSrcKeeper::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSrcKeeper::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_596_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSrcKeeper::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSrcKeeper G__THSrcKeeper;
static int G__UtilDict_596_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSrcKeeper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSrcKeeper*) (soff+(sizeof(HSrcKeeper)*i)))->~G__THSrcKeeper();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSrcKeeper*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSrcKeeper*) (soff))->~G__THSrcKeeper();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HNtuple */
static int G__UtilDict_611_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HNtuple* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtuple[n];
     } else {
       p = new((void*) gvp) HNtuple[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtuple;
     } else {
       p = new((void*) gvp) HNtuple;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HNtuple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HNtuple* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtuple(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HNtuple(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtuple((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HNtuple((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HNtuple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HNtuple* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtuple(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HNtuple(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtuple(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HNtuple(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HNtuple));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((HNtuple*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((const HNtuple*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HNtuple*) G__getstructoffset())->fill());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HNtuple*) G__getstructoffset())->SetDirectory((TDirectory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const HNtuple*) G__getstructoffset())->getName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((const HNtuple*) G__getstructoffset())->getTitle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HNtuple*) G__getstructoffset())->setFile((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HNtuple::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HNtuple::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HNtuple::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HNtuple::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HNtuple*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HNtuple::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HNtuple::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HNtuple::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_611_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HNtuple::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_611_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HNtuple* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HNtuple(*(HNtuple*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HNtuple));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HNtuple G__THNtuple;
static int G__UtilDict_611_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HNtuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HNtuple*) (soff+(sizeof(HNtuple)*i)))->~G__THNtuple();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HNtuple*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HNtuple*) (soff))->~G__THNtuple();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HNtupleMap */
static int G__UtilDict_612_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HNtupleMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtupleMap[n];
     } else {
       p = new((void*) gvp) HNtupleMap[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HNtupleMap;
     } else {
       p = new((void*) gvp) HNtupleMap;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HNtupleMap*) G__getstructoffset())->createMap(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HNtupleMap*) G__getstructoffset())->printMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((HNtupleMap*) G__getstructoffset())->operator[](*(string*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HNtupleMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HNtupleMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HNtupleMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HNtupleMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HNtupleMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HNtupleMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HNtupleMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HNtupleMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_612_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HNtupleMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_612_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HNtupleMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HNtupleMap(*(HNtupleMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HNtupleMap G__THNtupleMap;
static int G__UtilDict_612_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HNtupleMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HNtupleMap*) (soff+(sizeof(HNtupleMap)*i)))->~G__THNtupleMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HNtupleMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HNtupleMap*) (soff))->~G__THNtupleMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_612_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HNtupleMap* dest = (HNtupleMap*) G__getstructoffset();
   *dest = *(HNtupleMap*) libp->para[0].ref;
   const HNtupleMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HArrayC */
static int G__UtilDict_616_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayC* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayC[n];
     } else {
       p = new((void*) gvp) HArrayC[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayC;
     } else {
       p = new((void*) gvp) HArrayC;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayC((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HArrayC((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayC((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HArrayC((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayC* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayC(*(TArrayC*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HArrayC(*(TArrayC*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayC));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Char_t& obj = ((HArrayC*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'c', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HArrayC*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HArrayC*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HArrayC*) G__getstructoffset())->getArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HArrayC*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HArrayC*) G__getstructoffset())->reset((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HArrayC*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayC*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HArrayC::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayC::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HArrayC::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HArrayC::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayC*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayC::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayC::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayC::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_616_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayC::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_616_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HArrayC* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HArrayC(*(HArrayC*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayC));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HArrayC G__THArrayC;
static int G__UtilDict_616_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HArrayC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HArrayC*) (soff+(sizeof(HArrayC)*i)))->~G__THArrayC();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HArrayC*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HArrayC*) (soff))->~G__THArrayC();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_616_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayC* dest = (HArrayC*) G__getstructoffset();
   *dest = *(HArrayC*) libp->para[0].ref;
   const HArrayC& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HArrayS */
static int G__UtilDict_617_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayS* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayS[n];
     } else {
       p = new((void*) gvp) HArrayS[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayS;
     } else {
       p = new((void*) gvp) HArrayS;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayS((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HArrayS((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayS((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HArrayS((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayS* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayS(*(TArrayS*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HArrayS(*(TArrayS*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayS));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Short_t& obj = ((HArrayS*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 's', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HArrayS*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HArrayS*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 83, (long) ((HArrayS*) G__getstructoffset())->getArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HArrayS*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HArrayS*) G__getstructoffset())->reset((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HArrayS*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayS*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HArrayS::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayS::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HArrayS::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HArrayS::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayS*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayS::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayS::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayS::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_617_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayS::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_617_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HArrayS* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HArrayS(*(HArrayS*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayS));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HArrayS G__THArrayS;
static int G__UtilDict_617_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HArrayS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HArrayS*) (soff+(sizeof(HArrayS)*i)))->~G__THArrayS();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HArrayS*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HArrayS*) (soff))->~G__THArrayS();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_617_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayS* dest = (HArrayS*) G__getstructoffset();
   *dest = *(HArrayS*) libp->para[0].ref;
   const HArrayS& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HArrayI */
static int G__UtilDict_618_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayI* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayI[n];
     } else {
       p = new((void*) gvp) HArrayI[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayI;
     } else {
       p = new((void*) gvp) HArrayI;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayI* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayI((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HArrayI((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayI* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayI((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HArrayI((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayI* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayI(*(TArrayI*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HArrayI(*(TArrayI*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayI));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Int_t& obj = ((HArrayI*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'i', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HArrayI*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HArrayI*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HArrayI*) G__getstructoffset())->getArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HArrayI*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HArrayI*) G__getstructoffset())->reset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HArrayI*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayI*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HArrayI::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayI::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HArrayI::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HArrayI::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayI*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayI::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayI::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayI::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_618_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayI::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_618_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HArrayI* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HArrayI(*(HArrayI*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayI));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HArrayI G__THArrayI;
static int G__UtilDict_618_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HArrayI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HArrayI*) (soff+(sizeof(HArrayI)*i)))->~G__THArrayI();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HArrayI*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HArrayI*) (soff))->~G__THArrayI();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_618_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayI* dest = (HArrayI*) G__getstructoffset();
   *dest = *(HArrayI*) libp->para[0].ref;
   const HArrayI& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HArrayL */
static int G__UtilDict_619_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayL[n];
     } else {
       p = new((void*) gvp) HArrayL[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayL;
     } else {
       p = new((void*) gvp) HArrayL;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayL((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HArrayL((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayL((Int_t) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HArrayL((Int_t) G__int(libp->para[0]), (Long_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayL(*(TArrayL*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HArrayL(*(TArrayL*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Long_t& obj = ((HArrayL*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'l', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((const HArrayL*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HArrayL*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 76, (long) ((HArrayL*) G__getstructoffset())->getArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HArrayL*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HArrayL*) G__getstructoffset())->reset((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HArrayL*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayL*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HArrayL::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayL::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HArrayL::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HArrayL::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayL*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayL::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayL::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayL::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_619_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayL::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_619_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HArrayL* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HArrayL(*(HArrayL*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HArrayL G__THArrayL;
static int G__UtilDict_619_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HArrayL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HArrayL*) (soff+(sizeof(HArrayL)*i)))->~G__THArrayL();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HArrayL*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HArrayL*) (soff))->~G__THArrayL();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_619_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL* dest = (HArrayL*) G__getstructoffset();
   *dest = *(HArrayL*) libp->para[0].ref;
   const HArrayL& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HArrayL64 */
static int G__UtilDict_620_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL64* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayL64[n];
     } else {
       p = new((void*) gvp) HArrayL64[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayL64;
     } else {
       p = new((void*) gvp) HArrayL64;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL64));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL64* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayL64((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HArrayL64((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL64));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL64* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayL64((Int_t) G__int(libp->para[0]), (Long64_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HArrayL64((Int_t) G__int(libp->para[0]), (Long64_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL64));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL64* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayL64(*(TArrayL64*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HArrayL64(*(TArrayL64*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL64));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Long64_t& obj = ((HArrayL64*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         G__letint(result7, 'n', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((const HArrayL64*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HArrayL64*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 78, (long) ((HArrayL64*) G__getstructoffset())->getArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HArrayL64*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HArrayL64*) G__getstructoffset())->reset((Long64_t) G__Longlong(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HArrayL64*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayL64*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HArrayL64::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayL64::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HArrayL64::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HArrayL64::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayL64*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayL64::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayL64::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayL64::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_620_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayL64::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_620_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HArrayL64* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HArrayL64(*(HArrayL64*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayL64));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HArrayL64 G__THArrayL64;
static int G__UtilDict_620_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HArrayL64*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HArrayL64*) (soff+(sizeof(HArrayL64)*i)))->~G__THArrayL64();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HArrayL64*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HArrayL64*) (soff))->~G__THArrayL64();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_620_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayL64* dest = (HArrayL64*) G__getstructoffset();
   *dest = *(HArrayL64*) libp->para[0].ref;
   const HArrayL64& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HArrayF */
static int G__UtilDict_621_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayF[n];
     } else {
       p = new((void*) gvp) HArrayF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayF;
     } else {
       p = new((void*) gvp) HArrayF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayF((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HArrayF((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayF((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HArrayF((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayF(*(TArrayF*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HArrayF(*(TArrayF*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Float_t& obj = ((HArrayF*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HArrayF*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HArrayF*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HArrayF*) G__getstructoffset())->getArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HArrayF*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HArrayF*) G__getstructoffset())->reset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HArrayF*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayF*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HArrayF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HArrayF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HArrayF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_621_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_621_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HArrayF* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HArrayF(*(HArrayF*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayF));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HArrayF G__THArrayF;
static int G__UtilDict_621_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HArrayF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HArrayF*) (soff+(sizeof(HArrayF)*i)))->~G__THArrayF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HArrayF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HArrayF*) (soff))->~G__THArrayF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_621_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayF* dest = (HArrayF*) G__getstructoffset();
   *dest = *(HArrayF*) libp->para[0].ref;
   const HArrayF& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HArrayD */
static int G__UtilDict_622_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayD* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayD[n];
     } else {
       p = new((void*) gvp) HArrayD[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HArrayD;
     } else {
       p = new((void*) gvp) HArrayD;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayD((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HArrayD((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayD((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HArrayD((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayD* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HArrayD(*(TArrayD*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HArrayD(*(TArrayD*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayD));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Double_t& obj = ((HArrayD*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.d = (double) (obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HArrayD*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HArrayD*) G__getstructoffset())->getData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HArrayD*) G__getstructoffset())->getArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HArrayD*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HArrayD*) G__getstructoffset())->reset((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HArrayD*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayD*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HArrayD::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayD::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HArrayD::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HArrayD::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HArrayD*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayD::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayD::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HArrayD::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_622_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HArrayD::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_622_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HArrayD* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HArrayD(*(HArrayD*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HArrayD));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HArrayD G__THArrayD;
static int G__UtilDict_622_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HArrayD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HArrayD*) (soff+(sizeof(HArrayD)*i)))->~G__THArrayD();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HArrayD*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HArrayD*) (soff))->~G__THArrayD();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_622_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HArrayD* dest = (HArrayD*) G__getstructoffset();
   *dest = *(HArrayD*) libp->para[0].ref;
   const HArrayD& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTool */
static int G__UtilDict_720_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTool((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HTool((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTool((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HTool((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTool[n];
       } else {
         p = new((void*) gvp) HTool[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HTool;
       } else {
         p = new((void*) gvp) HTool;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HTool::open((TFile**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HTool::close((TFile**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HTool::openAscii((FILE**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HTool::closeAscii((FILE**) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTool::glob(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), *((TString*) G__int(libp->para[5]))
, (Long64_t) G__Longlong(libp->para[6]), (Long64_t) G__Longlong(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), *((TString*) G__int(libp->para[5]))
, (Long64_t) G__Longlong(libp->para[6]), (Long64_t) G__Longlong(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), *((TString*) G__int(libp->para[5]))
, (Long64_t) G__Longlong(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::writeNtupleToAscii());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      HTool::createNtupleMap(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      HTool::createNtupleMap(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      HTool::createNtupleMap(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      HTool::createNtupleMap(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      HTool::createNtupleMap();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTool::backTrace((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) HTool::printBaskets(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) HTool::printBaskets(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::printBaskets(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::printBaskets(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::printBaskets());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      HTool::printProgress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      HTool::printProgress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::printProgress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HTool::printProgress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HTool::printProgress();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) HTool::Mkdir((TDirectory*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::Mkdir((TDirectory*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTool::changeToDir(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HTool::checkDir(*((TString*) G__int(libp->para[0])), (TFile*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTool::getListOfAllDataMembers((TClass*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTool::scanOracle(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 100, (double) HTool::roundDigits((Double_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) HTool::roundDigits((Double_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letdouble(result7, 102, (double) HTool::roundDigits((Float_t) G__double(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 102, (double) HTool::roundDigits((Float_t) G__double(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTool::exec(*((TString*) G__int(libp->para[0])), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 105, (long) HTool::getLinearIndex(
(Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (UInt_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 105, (long) HTool::getLinearIndex(
(Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 105, (long) HTool::getLinearIndex(
(Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) HTool::getLinearIndex(
(Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) HTool::getLinearIndex((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (UInt_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 105, (long) HTool::getLinearIndex((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) HTool::getLinearIndex((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) HTool::getLinearIndex((Int_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      G__letint(result7, 105, (long) HTool::getDimIndex(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]), (UInt_t) G__int(libp->para[9])
, (UInt_t) G__int(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 105, (long) HTool::getDimIndex(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8]), (UInt_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 105, (long) HTool::getDimIndex(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])
, (UInt_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 105, (long) HTool::getDimIndex(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, (UInt_t) G__int(libp->para[6]), (UInt_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 105, (long) HTool::getDimIndex(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, (UInt_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 105, (long) HTool::getDimIndex((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HTool::sort((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sort((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sort((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::sort((Int_t) G__int(libp->para[0]), (Char_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HTool::sort((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sort((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sort((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::sort((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HTool::sort((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sort((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sort((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::sort((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HTool::sort((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sort((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sort((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::sort((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HTool::sort((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sort((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sort((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::sort((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Short_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::sortParallel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::kurtosis((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::kurtosis((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::kurtosis((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::kurtosis((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::skewness((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::skewness((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::skewness((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::skewness((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMean((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Short_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMean((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMean((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMean((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedSigma((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedSigma((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedSigma((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedSigma((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMeanAndSigma((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Short_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMeanAndSigma((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMeanAndSigma((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::weightedMeanAndSigma((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedMean((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Short_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::truncatedSigma((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HTool::truncatedIndex((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HTool::truncatedIndex((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::chi2DistributionNorm((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::chi2Distribution((Double_t*) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) HTool::chi2Distribution((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::chi2Distribution((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::chi2Distribution((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::chi2Distribution((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::chi2Distribution());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTool::deleteObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTool::writeObject((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      HTool::roundHist((TH2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::roundHist((TH2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HTool::roundHist((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HTool::roundHist();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTool::getHist((TFile*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      HTool::smooth((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HTool::smooth((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::smooth((TH1F*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HTool::smooth((TH1F*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HTool::smooth();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      G__letint(result7, 85, (long) HTool::slices(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Float_t) G__double(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 85, (long) HTool::slices(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HTool::slices(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HTool::slices(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))));
      break;
   case 7:
      G__letint(result7, 85, (long) HTool::slices(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6]))));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::slices((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::slices((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::slices((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::slices((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::slices((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::slices((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::slices());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 85, (long) HTool::projections(
(TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))
, *((TString*) G__int(libp->para[6])), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HTool::projections(
(TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))
, *((TString*) G__int(libp->para[6])), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HTool::projections(
(TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))
, *((TString*) G__int(libp->para[6])), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HTool::projections(
(TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))
, *((TString*) G__int(libp->para[6]))));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::projections((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::projections((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::projections((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::projections((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::projections((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::projections((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      G__letint(result7, 85, (long) HTool::fitArray(
(TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Float_t) G__double(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 85, (long) HTool::fitArray(
(TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HTool::fitArray(
(TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HTool::fitArray(
(TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HTool::fitArray(
(TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::fitArray((TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::fitArray((TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::fitArray((TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::fitArray((TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::fitArray((TObjArray*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::fitArray((TObjArray*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::fitArray());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 85, (long) HTool::projectY(
(TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Float_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HTool::projectY(
(TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HTool::projectY(
(TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HTool::projectY(
(TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::projectY((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::projectY((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::projectY((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::projectY((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::projectY((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::projectY((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::projectY());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 85, (long) HTool::fitScatter(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8]), (Bool_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HTool::fitScatter(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])
, (Float_t) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) HTool::fitScatter(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]), (Float_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) HTool::fitScatter(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::fitScatter((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::fitScatter((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::fitScatter((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::fitScatter((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::fitScatter((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::fitScatter((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::fitScatter());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      HTool::cleanHist((TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::cleanHist((TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HTool::cleanHist((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) HTool::removeEnds((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) HTool::removeEnds((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HTool::removeEnds((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTool::findFilledRange((TH1*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      HTool::resetHist((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HTool::resetHist((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HTool::resetHist((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) HTool::copyHist((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::copyHist((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::copyHist((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::copyHist((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) HTool::copyHistRange((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::copyHistRange((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::copyHistRange((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::copyHistRange((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::copyHistRange((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::copyHistRange((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, *((TString*) G__int(libp->para[8])), (Float_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, *((TString*) G__int(libp->para[8]))));
      break;
   case 8:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))));
      break;
   case 7:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6]))));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::cleanHistBelowLine((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 11:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, *((TString*) G__int(libp->para[8])), (Float_t) G__double(libp->para[9])
, (Float_t) G__double(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, *((TString*) G__int(libp->para[8])), (Float_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))
, *((TString*) G__int(libp->para[8]))));
      break;
   case 8:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6])), *((TString*) G__int(libp->para[7]))));
      break;
   case 7:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine(
(TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6]))));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine((TH2*) G__int(libp->para[0]), (TF1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::cleanHistArroundLine((TH2*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HTool::cleanHistCutG((TH2*) G__int(libp->para[0]), (TCutG*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::cleanHistCutG((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::cleanHistCutG());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTool::setHistErrors((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::getMaxHistArray((TH1**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HTool::getMinHistArray((TH1**) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) HTool::reBin((TH2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::reBin((TH2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::reBin((TH2*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::reBin((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::reBin());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) HTool::exchangeXY((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::exchangeXY((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::exchangeXY());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HTool::flipAxis((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::flipAxis((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::flipAxis());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HTool::shiftHistByBin((TH1*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::shiftHistByBin((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::shiftHistByBin());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HTool::shiftHist((TH1*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::shiftHist((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::shiftHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HTool::normalize_max((TH2*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 105, (long) HTool::normalize_max((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) HTool::normalize_max());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) HTool::histToGraph((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::histToGraph((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::histToGraph((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::histToGraph((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::histToGraph((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::histToGraph((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::histToGraph());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) HTool::histToGraphErrors((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::histToGraphErrors((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::histToGraphErrors((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::histToGraphErrors((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::histToGraphErrors((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::histToGraphErrors((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::histToGraphErrors());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) HTool::hist2DToGraph((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::hist2DToGraph((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::hist2DToGraph((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::hist2DToGraph((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::hist2DToGraph((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::hist2DToGraph());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) HTool::hist2DToGraphErrors((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::hist2DToGraphErrors((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::hist2DToGraphErrors((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::hist2DToGraphErrors((TH2*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::hist2DToGraphErrors((TH2*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::hist2DToGraphErrors());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) HTool::toNonConstBinHist((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::toNonConstBinHist((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::toNonConstBinHist((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::toNonConstBinHist((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::toNonConstBinHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) HTool::inverseRebinBinHist((TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::inverseRebinBinHist((TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::inverseRebinBinHist((TH1*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::inverseRebinBinHist((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::inverseRebinBinHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      HTool::printHist((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      HTool::printHist();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      HTool::histToText((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      HTool::histToText((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) HTool::graphToHist(
(TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::graphToHist((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::graphToHist((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::graphToHist((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::graphToHist((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::graphToHist((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::graphToHist((TGraph*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::graphToHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist(
(TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Float_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist((TGraphErrors*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) HTool::graphErrorsToHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) HTool::exchangeXYGraph((TGraph*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::exchangeXYGraph());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) HTool::exchangeXYGraphErrors((TGraphErrors*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::exchangeXYGraphErrors());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 100, (double) HTool::integralGraph((TGraph*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 100, (double) HTool::integralGraph((TGraph*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letdouble(result7, 100, (double) HTool::integralGraph((TGraph*) G__int(libp->para[0])));
      break;
   case 0:
      G__letdouble(result7, 100, (double) HTool::integralGraph());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HTool::scaleGraph((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::scaleGraph((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::scaleGraph((TGraph*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::scaleGraph());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HTool::scaleGraphErrors((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HTool::scaleGraphErrors((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HTool::scaleGraphErrors((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::scaleGraphErrors((TGraphErrors*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::scaleGraphErrors((TGraphErrors*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::scaleGraphErrors());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HTool::shiftGraph((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::shiftGraph((TGraph*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::shiftGraph((TGraph*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::shiftGraph());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) HTool::parseString(*((TString*) G__int(libp->para[0])), *(Int_t*) G__Intref(&libp->para[1])
, *((TString*) G__int(libp->para[2])), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) HTool::parseString(*((TString*) G__int(libp->para[0])), *(Int_t*) G__Intref(&libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HTool::parseString(*((TString*) G__int(libp->para[0])), *(Int_t*) G__Intref(&libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HTool::findString((TString*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) HTool::readHistsDescription(*((TString*) G__int(libp->para[0])), (TObjArray*) G__int(libp->para[1])
, (TString*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HTool::readHistsDescription(*((TString*) G__int(libp->para[0])), (TObjArray*) G__int(libp->para[1])
, (TString*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::readHistsDescription(*((TString*) G__int(libp->para[0])), (TObjArray*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) HTool::makeHists(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) HTool::makeHists(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::makeHists(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::makeHists(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::makeHists());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HTool::drawHistComp(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (TCanvas*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HTool::drawHistComp(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (TCanvas*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HTool::drawHistComp(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::drawHistComp(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::drawHistComp(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::drawHistComp());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_114(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HTool::compHistFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::compHistFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::compHistFiles(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::compHistFiles());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_115(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) HTool::printHistInfo((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::printHistInfo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_116(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HTool::printCompHistInfo((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HTool::printCompHistInfo((TH1*) G__int(libp->para[0]), (TH1*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::printCompHistInfo((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::printCompHistInfo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HTool::writeHistInfo((TH1*) G__int(libp->para[0]), (FILE*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTool::writeHistInfo((TH1*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HTool::writeHistInfo());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_125(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_126(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_127(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_128(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_720_0_129(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_720_0_130(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTool(*(HTool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTool G__THTool;
static int G__UtilDict_720_0_131(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTool*) (soff+(sizeof(HTool)*i)))->~G__THTool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTool*) (soff))->~G__THTool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_720_0_132(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTool* dest = (HTool*) G__getstructoffset();
   *dest = *(HTool*) libp->para[0].ref;
   const HTool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HHistMap */
static int G__UtilDict_731_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HHistMap* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HHistMap(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HHistMap(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HHistMap[n];
       } else {
         p = new((void*) gvp) HHistMap[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HHistMap;
       } else {
         p = new((void*) gvp) HHistMap;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HHistMap));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->setDeleteObjects((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->getDeleteObjects());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->setCurrentMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->setSilentFail((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getMap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->printMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->printCanvasMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->printCutMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->printFitMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->printParameterMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->printMacroMap();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->addHistContent(*(HHistMap*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addFile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addFiles(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addFilesList(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addMultFiles(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HHistMap::addHistMap(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HHistMap::addHistMap(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) HHistMap::addHistMap());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist((TH1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist((TH1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 16:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))));
      break;
   case 15:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14]))));
      break;
   case 14:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))));
      break;
   case 13:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, *((TString*) G__int(libp->para[12]))));
      break;
   case 12:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 13:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]), *((TString*) G__int(libp->para[9]))
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12]))));
      break;
   case 12:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]), *((TString*) G__int(libp->para[9]))
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))));
      break;
   case 11:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]), *((TString*) G__int(libp->para[9]))
, *((TString*) G__int(libp->para[10]))));
      break;
   case 10:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]), *((TString*) G__int(libp->para[9]))));
      break;
   case 9:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistN());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeHist(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 15:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14]))));
      break;
   case 14:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))));
      break;
   case 13:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])
, *((TString*) G__int(libp->para[12]))));
      break;
   case 12:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10]), (Double_t) G__double(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Double_t) G__double(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t) G__double(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHist());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 12:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]), *((TString*) G__int(libp->para[9]))
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))));
      break;
   case 11:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]), *((TString*) G__int(libp->para[9]))
, *((TString*) G__int(libp->para[10]))));
      break;
   case 10:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8]), *((TString*) G__int(libp->para[9]))));
      break;
   case 9:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t*) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Double_t*) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Double_t*) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->createHistN());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
(TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
(TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
(TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
(TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray((TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray((TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray((TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray((TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray((TH1**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 27:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Int_t) G__int(libp->para[21])
, *((TString*) G__int(libp->para[22])), *((TString*) G__int(libp->para[23]))
, *((TString*) G__int(libp->para[24])), *((TString*) G__int(libp->para[25]))
, *((TString*) G__int(libp->para[26]))));
      break;
   case 26:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Int_t) G__int(libp->para[21])
, *((TString*) G__int(libp->para[22])), *((TString*) G__int(libp->para[23]))
, *((TString*) G__int(libp->para[24])), *((TString*) G__int(libp->para[25]))));
      break;
   case 25:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Int_t) G__int(libp->para[21])
, *((TString*) G__int(libp->para[22])), *((TString*) G__int(libp->para[23]))
, *((TString*) G__int(libp->para[24]))));
      break;
   case 24:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Int_t) G__int(libp->para[21])
, *((TString*) G__int(libp->para[22])), *((TString*) G__int(libp->para[23]))));
      break;
   case 23:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Int_t) G__int(libp->para[21])
, *((TString*) G__int(libp->para[22]))));
      break;
   case 22:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20]), (Int_t) G__int(libp->para[21])));
      break;
   case 21:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])
, (Int_t) G__int(libp->para[20])));
      break;
   case 20:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), (Int_t) G__int(libp->para[19])));
      break;
   case 19:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18])));
      break;
   case 18:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), (Int_t) G__int(libp->para[17])));
      break;
   case 17:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16]))));
      break;
   case 16:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))));
      break;
   case 15:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14]))));
      break;
   case 14:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12]), *((TString*) G__int(libp->para[13]))));
      break;
   case 13:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])
, (Double_t) G__double(libp->para[12])));
      break;
   case 12:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Double_t) G__double(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])
, (Int_t) G__int(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8]), (Double_t) G__double(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Double_t) G__double(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArray());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 24:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), *((TString*) G__int(libp->para[19]))
, *((TString*) G__int(libp->para[20])), *((TString*) G__int(libp->para[21]))
, *((TString*) G__int(libp->para[22])), *((TString*) G__int(libp->para[23]))));
      break;
   case 23:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), *((TString*) G__int(libp->para[19]))
, *((TString*) G__int(libp->para[20])), *((TString*) G__int(libp->para[21]))
, *((TString*) G__int(libp->para[22]))));
      break;
   case 22:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), *((TString*) G__int(libp->para[19]))
, *((TString*) G__int(libp->para[20])), *((TString*) G__int(libp->para[21]))));
      break;
   case 21:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), *((TString*) G__int(libp->para[19]))
, *((TString*) G__int(libp->para[20]))));
      break;
   case 20:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18]), *((TString*) G__int(libp->para[19]))));
      break;
   case 19:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])
, (Int_t) G__int(libp->para[18])));
      break;
   case 18:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16]), (Int_t) G__int(libp->para[17])));
      break;
   case 17:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])
, (Int_t) G__int(libp->para[16])));
      break;
   case 16:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14]), (Int_t) G__int(libp->para[15])));
      break;
   case 15:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))
, (Int_t) G__int(libp->para[14])));
      break;
   case 14:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12])), *((TString*) G__int(libp->para[13]))));
      break;
   case 13:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))
, *((TString*) G__int(libp->para[12]))));
      break;
   case 12:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10])), *((TString*) G__int(libp->para[11]))));
      break;
   case 11:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])
, *((TString*) G__int(libp->para[10]))));
      break;
   case 10:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]), (Double_t*) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Double_t*) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Double_t*) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addHistArrayN());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get2(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get2(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get2(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get2(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get2(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get2(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get3(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get3(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get3(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get3(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get3(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->get3(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingHistLabels(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingHistLabels(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingHistLabels(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         vector<TH1*>* pobj;
         vector<TH1*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingHists(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
         pobj = new vector<TH1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         vector<TH1*>* pobj;
         vector<TH1*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingHists(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
         pobj = new vector<TH1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<TH1*>* pobj;
         vector<TH1*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingHists(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TH1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HHistMap*) G__getstructoffset())->resetAllHists(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HHistMap*) G__getstructoffset())->resetAllHists();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->disconnectAllHists();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->cloneArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Bool_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->cloneArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->cloneArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->cloneArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->cloneArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->cloneArray(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->resetArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->resetArray(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HHistMap::resetArray((TObjArray*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HHistMap::resetArray((TObjArray*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->scaleArray(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HHistMap::scaleArray((TObjArray*) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->sumW2Array(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HHistMap::sumW2Array((TObjArray*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->divideArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HHistMap::divideArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->multiplyArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HHistMap::multiplyArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HHistMap::addArray((TObjArray*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->functionArray(*((TString*) G__int(libp->para[0])), (Bool_t (*)(TH1*,TString name,HHistMap* map, TObjArray* params)) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HHistMap::functionArray((TObjArray*) G__int(libp->para[0]), (Bool_t (*)(TH1*,TObjArray* array,TObjArray* params)) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getHistArray(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getDimArray(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getDimAddress(*((TString*) G__int(libp->para[0])), (TH1*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getDimAddress(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HHistMap*) G__getstructoffset())->getIndex(*((TString*) G__int(libp->para[0])), (TH1*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HHistMap*) G__getstructoffset())->getIndex(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getDir(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getTitle(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getMask(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas((TCanvas*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), *((TString*) G__int(libp->para[5]))));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas((TCanvas*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas((TCanvas*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas((TCanvas*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas((TCanvas*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas((TCanvas*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, *((TString*) G__int(libp->para[6]))));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvas());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeCanvas(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 14:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, *((TString*) G__int(libp->para[8])), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), (Int_t) G__int(libp->para[13])));
      break;
   case 13:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, *((TString*) G__int(libp->para[8])), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12])));
      break;
   case 12:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, *((TString*) G__int(libp->para[8])), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, *((TString*) G__int(libp->para[8])), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, *((TString*) G__int(libp->para[8])), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, *((TString*) G__int(libp->para[8]))));
      break;
   case 8:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
(TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray((TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray((TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray((TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray((TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray((TCanvas**) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 18:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16])), *((TString*) G__int(libp->para[17]))));
      break;
   case 17:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))
, *((TString*) G__int(libp->para[16]))));
      break;
   case 16:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14])), *((TString*) G__int(libp->para[15]))));
      break;
   case 15:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), *((TString*) G__int(libp->para[13]))
, *((TString*) G__int(libp->para[14]))));
      break;
   case 14:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12]), *((TString*) G__int(libp->para[13]))));
      break;
   case 13:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])
, (Int_t) G__int(libp->para[12])));
      break;
   case 12:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10]), (Int_t) G__int(libp->para[11])));
      break;
   case 11:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])
, (Int_t) G__int(libp->para[10])));
      break;
   case 10:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8]), (Int_t) G__int(libp->para[9])));
      break;
   case 9:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))
, (Int_t) G__int(libp->para[8])));
      break;
   case 8:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), *((TString*) G__int(libp->para[7]))));
      break;
   case 7:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(
*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
      break;
   case 6:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCanvasArray());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvas(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvas(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvas(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvas(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvas(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvas(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvasArray(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvasDimArray(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getCanvasDir(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getCanvasTitle(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getCanvasMask(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCanvasPropertiesArray(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingCanvasLabels(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingCanvasLabels(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         vector<TCanvas*>* pobj;
         vector<TCanvas*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingCanvas(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
         pobj = new vector<TCanvas*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         vector<TCanvas*>* pobj;
         vector<TCanvas*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingCanvas(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TCanvas*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCut(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCut(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2]), (Double_t*) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCut(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCut(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCut(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCut((TCutG*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addCut((TCutG*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeCut(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeCut(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getCut(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getCutDir(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->isInsideCut(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingCutLabels(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TCutG*>* pobj;
         vector<TCutG*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingCuts(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TCutG*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addFit((TF1*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addFit((TF1*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeFit(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeFit(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getFit(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getFitDir(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingFitLabels(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TF1*>* pobj;
         vector<TF1*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingFits(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TF1*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_96(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addPar((TObject*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addPar((TObject*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_97(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removePar(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removePar(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_98(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getPar(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getParDir(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingParLabels(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TObject*>* pobj;
         vector<TObject*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingPars(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TObject*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addMacro((TMacro*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->addMacro((TMacro*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeMacro(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->removeMacro(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HHistMap*) G__getstructoffset())->getMacro(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_105(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HHistMap*) G__getstructoffset())->getMacroDir(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_106(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TString>* pobj;
         vector<TString> xobj = ((HHistMap*) G__getstructoffset())->getMatchingMacroLabels(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_107(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<TMacro*>* pobj;
         vector<TMacro*> xobj = ((HHistMap*) G__getstructoffset())->getMatchingMacros(*((TString*) G__int(libp->para[0])));
         pobj = new vector<TMacro*>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_108(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->setOutputFile(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->setOutputFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_109(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->writeHists(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HHistMap*) G__getstructoffset())->writeHists());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_110(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HHistMap::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_111(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHistMap::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_112(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HHistMap::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_113(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HHistMap::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_117(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistMap*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_118(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHistMap::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_119(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HHistMap::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_120(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHistMap::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_731_0_121(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HHistMap::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_731_0_122(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HHistMap* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HHistMap(*(HHistMap*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HHistMap));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HHistMap G__THHistMap;
static int G__UtilDict_731_0_123(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HHistMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HHistMap*) (soff+(sizeof(HHistMap)*i)))->~G__THHistMap();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HHistMap*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HHistMap*) (soff))->~G__THHistMap();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_731_0_124(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HHistMap* dest = (HHistMap*) G__getstructoffset();
   *dest = *(HHistMap*) libp->para[0].ref;
   const HHistMap& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HFlex */
static int G__UtilDict_877_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HFlex* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HFlex[n];
     } else {
       p = new((void*) gvp) HFlex[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HFlex;
     } else {
       p = new((void*) gvp) HFlex;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HFlex));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HFlex*) G__getstructoffset())->addVars(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HFlex*) G__getstructoffset())->addVars(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HFlex*) G__getstructoffset())->addVars();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HFlex*) G__getstructoffset())->getI(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HFlex*) G__getstructoffset())->getD(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HFlex*) G__getstructoffset())->setI(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HFlex*) G__getstructoffset())->setI(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HFlex*) G__getstructoffset())->setD(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HFlex*) G__getstructoffset())->setD(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HFlex*) G__getstructoffset())->print(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HFlex*) G__getstructoffset())->print(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   case 0:
      ((HFlex*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HFlex::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFlex::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HFlex::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFlex::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HFlex*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFlex::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HFlex::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFlex::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_877_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HFlex::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_877_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HFlex* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HFlex(*(HFlex*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HFlex));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HFlex G__THFlex;
static int G__UtilDict_877_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HFlex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HFlex*) (soff+(sizeof(HFlex)*i)))->~G__THFlex();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HFlex*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HFlex*) (soff))->~G__THFlex();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_877_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HFlex* dest = (HFlex*) G__getstructoffset();
   *dest = *(HFlex*) libp->para[0].ref;
   const HFlex& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HFlexFiller */
static int G__UtilDict_894_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HFlexFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HFlexFiller[n];
     } else {
       p = new((void*) gvp) HFlexFiller[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HFlexFiller;
     } else {
       p = new((void*) gvp) HFlexFiller;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HFlexFiller* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HFlexFiller((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HFlexFiller((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HFlexFiller*) G__getstructoffset())->setUserFill((Int_t (*)(HHistMap*,TObjArray*)) G__int(libp->para[0]), (HHistMap*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HFlexFiller*) G__getstructoffset())->setUserFill((Int_t (*)(HHistMap*,TObjArray*)) G__int(libp->para[0]), (HHistMap*) G__int(libp->para[1])
, (TObjArray*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HFlexFiller*) G__getstructoffset())->setUserFill((Int_t (*)(HHistMap*,TObjArray*)) G__int(libp->para[0]), (HHistMap*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HFlexFiller*) G__getstructoffset())->setUserFill((Int_t (*)(HHistMap*,TObjArray*)) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HFlexFiller::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFlexFiller::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HFlexFiller::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFlexFiller::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HFlexFiller*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFlexFiller::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HFlexFiller::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HFlexFiller::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_894_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HFlexFiller::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HFlexFiller G__THFlexFiller;
static int G__UtilDict_894_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HFlexFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HFlexFiller*) (soff+(sizeof(HFlexFiller)*i)))->~G__THFlexFiller();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HFlexFiller*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HFlexFiller*) (soff))->~G__THFlexFiller();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPhysicsConstants */
static int G__UtilDict_897_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::pid((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPhysicsConstants::pid((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::charge((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::charge((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::leptonCharge((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::leptonCharge((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::baryonCharge((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::baryonCharge((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::strangeness((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::strangeness((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HPhysicsConstants::mass((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) HPhysicsConstants::mass((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::lineColor((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::lineColor((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::lineStyle((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::lineStyle((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HPhysicsConstants::isFake((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HPhysicsConstants::isArtificial((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPhysicsConstants::geantProcess((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HPhysicsConstants::addParticle(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HPhysicsConstants::addParticle(*((particleproperties*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HPhysicsConstants::removeParticle((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HPhysicsConstants::moveParticle((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HPhysicsConstants::cpParticle((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPhysicsConstants::clearParticles();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         particleproperties* pobj;
         particleproperties xobj = HPhysicsConstants::createParticle(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Double_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
         pobj = new particleproperties(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPhysicsConstants::setGraphic((Short_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPhysicsConstants::setDefaultGraphic((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<Int_t,particleproperties>* pobj;
         map<Int_t,particleproperties> xobj = HPhysicsConstants::initParticleID();
         pobj = new map<Int_t,particleproperties>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<TString,particleproperties>* pobj;
         map<TString,particleproperties> xobj = HPhysicsConstants::initParticleName();
         pobj = new map<TString,particleproperties>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         map<Int_t,TString>* pobj;
         map<Int_t,TString> xobj = HPhysicsConstants::initGeantProcess();
         pobj = new map<Int_t,TString>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPhysicsConstants::loadGeantIons();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPhysicsConstants::print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPhysicsConstants::artificialPos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPhysicsConstants::artificialNeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPhysicsConstants::fakePos());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPhysicsConstants::fakeNeg());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPhysicsConstants::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPhysicsConstants::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPhysicsConstants::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPhysicsConstants::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPhysicsConstants*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPhysicsConstants::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPhysicsConstants::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_897_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPhysicsConstants::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__UtilDict_897_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPhysicsConstants *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPhysicsConstants[n];
     } else {
       p = new((void*) gvp) HPhysicsConstants[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPhysicsConstants;
     } else {
       p = new((void*) gvp) HPhysicsConstants;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_897_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPhysicsConstants* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPhysicsConstants(*(HPhysicsConstants*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPhysicsConstants G__THPhysicsConstants;
static int G__UtilDict_897_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPhysicsConstants*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPhysicsConstants*) (soff+(sizeof(HPhysicsConstants)*i)))->~G__THPhysicsConstants();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPhysicsConstants*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPhysicsConstants*) (soff))->~G__THPhysicsConstants();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_897_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPhysicsConstants* dest = (HPhysicsConstants*) G__getstructoffset();
   *dest = *(HPhysicsConstants*) libp->para[0].ref;
   const HPhysicsConstants& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HHistConverter */
static int G__UtilDict_919_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HHistConverter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HHistConverter[n];
     } else {
       p = new((void*) gvp) HHistConverter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HHistConverter;
     } else {
       p = new((void*) gvp) HHistConverter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HHistConverter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HHistConverter::printArray(*(TArray*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HHistConverter::printArray(*(TArray*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HHistConverter::printArray(*(TArray*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HHistConverter::printArray(*(TArray*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HHistConverter::printArray(*(TArray*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      HHistConverter::writeArray(*(ofstream*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, *(TArray*) libp->para[2].ref, (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HHistConverter::writeArray(*(ofstream*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, *(TArray*) libp->para[2].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HHistConverter::printArrayInfo(*(TArrayD*) libp->para[0].ref, *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HHistConverter::createHist(*((TString*) G__int(libp->para[0])), *(TArrayD*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      HHistConverter::fillArray((TH1*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Bool_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HHistConverter::fillArray((TH1*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HHistConverter::fillArray((TH1*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HHistConverter::fillArray((TH1*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      HHistConverter::fillArray((TH1*) G__int(libp->para[0]), *(TArrayD*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HHistConverter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHistConverter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HHistConverter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HHistConverter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHistConverter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHistConverter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HHistConverter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHistConverter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_919_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HHistConverter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_919_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HHistConverter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HHistConverter(*(HHistConverter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HHistConverter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HHistConverter G__THHistConverter;
static int G__UtilDict_919_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HHistConverter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HHistConverter*) (soff+(sizeof(HHistConverter)*i)))->~G__THHistConverter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HHistConverter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HHistConverter*) (soff))->~G__THHistConverter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_919_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HHistConverter* dest = (HHistConverter*) G__getstructoffset();
   *dest = *(HHistConverter*) libp->para[0].ref;
   const HHistConverter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HBitMan */
static int G__UtilDict_920_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBitMan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBitMan[n];
     } else {
       p = new((void*) gvp) HBitMan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBitMan;
     } else {
       p = new((void*) gvp) HBitMan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HBitMan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBitMan::printBits((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBitMan::setBit(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBitMan::unsetBit(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HBitMan::getBit(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HBitMan::setWord(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HBitMan::setWord(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBitMan::unsetWord(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) ((HBitMan*) G__getstructoffset())->getWord(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HBitMan*) G__getstructoffset())->getWord(*(UInt_t*) G__UIntref(&libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HBitMan*) G__getstructoffset())->createWord(*((const TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HBitMan*) G__getstructoffset())->createWord(*((const TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBitMan*) G__getstructoffset())->init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBitMan*) G__getstructoffset())->setWord(*(UInt_t*) G__UIntref(&libp->para[0]), *((const TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBitMan*) G__getstructoffset())->unsetWord(*(UInt_t*) G__UIntref(&libp->para[0]), *((const TString*) G__int(libp->para[1])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HBitMan*) G__getstructoffset())->getWord(*(UInt_t*) G__UIntref(&libp->para[0]), *((const TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HBitMan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBitMan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HBitMan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBitMan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBitMan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBitMan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBitMan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBitMan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_920_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBitMan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_920_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HBitMan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HBitMan(*(HBitMan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HBitMan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HBitMan G__THBitMan;
static int G__UtilDict_920_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HBitMan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HBitMan*) (soff+(sizeof(HBitMan)*i)))->~G__THBitMan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HBitMan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HBitMan*) (soff))->~G__THBitMan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_920_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBitMan* dest = (HBitMan*) G__getstructoffset();
   *dest = *(HBitMan*) libp->para[0].ref;
   const HBitMan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSTLTool */
static int G__UtilDict_933_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSTLTool* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSTLTool[n];
     } else {
       p = new((void*) gvp) HSTLTool[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSTLTool;
     } else {
       p = new((void*) gvp) HSTLTool;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSTLTool));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSTLTool::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSTLTool::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSTLTool::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSTLTool::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSTLTool*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSTLTool::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSTLTool::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSTLTool::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_933_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSTLTool::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_933_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSTLTool* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSTLTool(*(HSTLTool*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSTLTool));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSTLTool G__THSTLTool;
static int G__UtilDict_933_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSTLTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSTLTool*) (soff+(sizeof(HSTLTool)*i)))->~G__THSTLTool();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSTLTool*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSTLTool*) (soff))->~G__THSTLTool();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_933_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSTLTool* dest = (HSTLTool*) G__getstructoffset();
   *dest = *(HSTLTool*) libp->para[0].ref;
   const HSTLTool& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HCategoryManager */
static int G__UtilDict_939_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCategoryManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCategoryManager[n];
     } else {
       p = new((void*) gvp) HCategoryManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HCategoryManager;
     } else {
       p = new((void*) gvp) HCategoryManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) HCategoryManager::getCategory((Short_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 85, (long) HCategoryManager::getCategory((Short_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HCategoryManager::getCategory((Short_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 85, (long) HCategoryManager::addCategory((Short_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))
, (Bool_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 85, (long) HCategoryManager::addCategory((Short_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 85, (long) HCategoryManager::addCategory((Short_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) HCategoryManager::addCategory((Short_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) HCategoryManager::addCategory((Short_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HCategoryManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCategoryManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HCategoryManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HCategoryManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HCategoryManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCategoryManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCategoryManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HCategoryManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_939_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HCategoryManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_939_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HCategoryManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HCategoryManager(*(HCategoryManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HCategoryManager G__THCategoryManager;
static int G__UtilDict_939_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HCategoryManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HCategoryManager*) (soff+(sizeof(HCategoryManager)*i)))->~G__THCategoryManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HCategoryManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HCategoryManager*) (soff))->~G__THCategoryManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_939_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HCategoryManager* dest = (HCategoryManager*) G__getstructoffset();
   *dest = *(HCategoryManager*) libp->para[0].ref;
   const HCategoryManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSectorSelector */
static int G__UtilDict_971_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSectorSelector* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSectorSelector((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HSectorSelector((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSectorSelector[n];
       } else {
         p = new((void*) gvp) HSectorSelector[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSectorSelector;
       } else {
         p = new((void*) gvp) HSectorSelector;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSectorSelector*) G__getstructoffset())->setDefaultVal((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HSectorSelector*) G__getstructoffset())->readInput(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HSectorSelector*) G__getstructoffset())->readInput(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HSectorSelector*) G__getstructoffset())->readInput());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSectorSelector*) G__getstructoffset())->getNFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSectorSelector*) G__getstructoffset())->getSectors((Int_t*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSectorSelector*) G__getstructoffset())->printFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSectorSelector*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSectorSelector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSectorSelector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSectorSelector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSectorSelector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSectorSelector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSectorSelector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSectorSelector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSectorSelector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_971_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSectorSelector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_971_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSectorSelector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSectorSelector(*(HSectorSelector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSectorSelector G__THSectorSelector;
static int G__UtilDict_971_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSectorSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSectorSelector*) (soff+(sizeof(HSectorSelector)*i)))->~G__THSectorSelector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSectorSelector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSectorSelector*) (soff))->~G__THSectorSelector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_971_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSectorSelector* dest = (HSectorSelector*) G__getstructoffset();
   *dest = *(HSectorSelector*) libp->para[0].ref;
   const HSectorSelector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HLoop */
static int G__UtilDict_972_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLoop* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HLoop((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HLoop((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HLoop[n];
       } else {
         p = new((void*) gvp) HLoop[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HLoop;
       } else {
         p = new((void*) gvp) HLoop;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HLoop));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->setCurrentLoop();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->addFile(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->addFiles(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->addFilesList(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->addMultFiles(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->readSectorFileList(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->readSectorFileList(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->readSectorFileList(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HSectorSelector& obj = ((HLoop*) G__getstructoffset())->getSectorSelector();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->getSectors((Int_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->goodSector((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getEventHeader());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getGeantMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getChain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letLonglong(result7, 110, (G__int64) ((HLoop*) G__getstructoffset())->getEntries());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getCategory(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getCategory(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->getCategoryStatus(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->getCategoryStatus(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getPartialEvent(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getPartialEvent(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getGeantHeader((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getGeantHeader());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getFromInputFile(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HLoop*) G__getstructoffset())->getFromInputFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->isSkippedEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->isNewFile(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->setInput(*((TString*) G__int(libp->para[0]))));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HLoop*) G__getstructoffset())->setInput());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->clearCategories();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HLoop*) G__getstructoffset())->nextEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->setRefID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->printCategories();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->printChain();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->printBranchStatus();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HLoop::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLoop::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HLoop::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HLoop::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HLoop*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLoop::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLoop::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HLoop::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_972_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HLoop::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_972_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HLoop* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HLoop(*(HLoop*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HLoop));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HLoop G__THLoop;
static int G__UtilDict_972_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HLoop*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HLoop*) (soff+(sizeof(HLoop)*i)))->~G__THLoop();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HLoop*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HLoop*) (soff))->~G__THLoop();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_972_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HLoop* dest = (HLoop*) G__getstructoffset();
   *dest = *(HLoop*) libp->para[0].ref;
   const HLoop& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HZip */
static int G__UtilDict_999_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HZip* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HZip[n];
     } else {
       p = new((void*) gvp) HZip[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HZip;
     } else {
       p = new((void*) gvp) HZip;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HZip));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HZip::glob(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HZip::readFileList(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HZip::chainToTObjArray((TChain*) G__int(libp->para[0]), (TObjArray*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HZip::chainToTObjArray((TChain*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) HZip::chainToTObjArray());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HZip::exists(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HZip::exists(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HZip::exists(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HZip::splitName(*((TString*) G__int(libp->para[0])), *(TString*) libp->para[1].ref
, *(TString*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HZip::isInside(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HZip::isInside(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HZip::isInside(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HZip::isInside(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 105, (long) HZip::list(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) HZip::list(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) HZip::list(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 105, (long) HZip::list(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) HZip::getList(*((TString*) G__int(libp->para[0])), (TList*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) HZip::getList(*((TString*) G__int(libp->para[0])), (TList*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) HZip::getList(*((TString*) G__int(libp->para[0])), (TList*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 105, (long) HZip::getList(*((TString*) G__int(libp->para[0])), (TList*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HZip::makeChain(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HZip::makeChain(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HZip::makeChain(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HZip::makeChain(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HZip::makeChain(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HZip::makeChainGlob(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HZip::makeChainGlob(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HZip::makeChainGlob(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HZip::makeChainGlob(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HZip::makeChainGlob(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 103, (long) HZip::makeChainList(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 103, (long) HZip::makeChainList(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2])), (Int_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) HZip::makeChainList(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 103, (long) HZip::makeChainList(*((TString*) G__int(libp->para[0])), (TChain*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HZip::makeChainList(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HZip::addFile(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HZip::addFile(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HZip::addFiles(*((TString*) G__int(libp->para[0])), (TList*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HZip::addFiles(*((TString*) G__int(libp->para[0])), (TList*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HZip::test(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) HZip::unzip(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 103, (long) HZip::unzip(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HZip::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HZip::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HZip::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HZip::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HZip*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HZip::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HZip::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HZip::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_999_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HZip::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_999_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HZip* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HZip(*(HZip*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HZip));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HZip G__THZip;
static int G__UtilDict_999_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HZip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HZip*) (soff+(sizeof(HZip)*i)))->~G__THZip();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HZip*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HZip*) (soff))->~G__THZip();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_999_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HZip* dest = (HZip*) G__getstructoffset();
   *dest = *(HZip*) libp->para[0].ref;
   const HZip& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HDiskCatalog */
static int G__UtilDict_1006_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskCatalog* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDiskCatalog(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HDiskCatalog(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskCatalog[n];
       } else {
         p = new((void*) gvp) HDiskCatalog[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskCatalog;
       } else {
         p = new((void*) gvp) HDiskCatalog;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HDiskCatalog*) G__getstructoffset())->getDiskName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HDiskCatalog*) G__getstructoffset())->getList());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((HDiskCatalog*) G__getstructoffset())->getLastScanStart());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((HDiskCatalog*) G__getstructoffset())->getLastScanStop());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<uid_t,TString>& obj = ((HDiskCatalog*) G__getstructoffset())->getUserMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<gid_t,TString>& obj = ((HDiskCatalog*) G__getstructoffset())->getGroupMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskCatalog*) G__getstructoffset())->getUser((uid_t) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskCatalog*) G__getstructoffset())->getGroup((gid_t) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->setLastScanStart((time_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->setLastScanStop((time_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->setUserMap(*(map<uid_t,TString>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->setGroupMap(*(map<gid_t,TString>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->setCurrentCatalog();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskCatalog*) G__getstructoffset())->scan());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HDiskCatalog*) G__getstructoffset())->addDir((HDiskDir*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->updateDirIndices();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HDiskCatalog*) G__getstructoffset())->getDir(*((TString*) G__int(libp->para[0])), (Int_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HDiskCatalog*) G__getstructoffset())->getDir(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->getDaughterDirs((HDiskDir*) G__int(libp->para[0]), *(vector<HDiskDir*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->getDaughterDirsRecursive((HDiskDir*) G__int(libp->para[0]), *(vector<HDiskDir*>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->sortDirs((HDiskDir*) G__int(libp->para[0]), *(vector<HDiskDir*>*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->sortDirsRecursive((HDiskDir*) G__int(libp->para[0]), *(vector<HDiskDir*>*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HDiskCatalog*) G__getstructoffset())->print((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HDiskCatalog*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HDiskCatalog*) G__getstructoffset())->printDisk((UChar_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      ((HDiskCatalog*) G__getstructoffset())->printDisk((UChar_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HDiskCatalog*) G__getstructoffset())->printDisk((UChar_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HDiskCatalog*) G__getstructoffset())->printDisk((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HDiskCatalog*) G__getstructoffset())->printDisk();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->printExecution();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterDirs(*((TString*) G__int(libp->para[0])), *(vector<HDiskDir*>*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Long64_t) G__Longlong(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterDirs(*((TString*) G__int(libp->para[0])), *(vector<HDiskDir*>*) libp->para[1].ref
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterDirs(*((TString*) G__int(libp->para[0])), *(vector<HDiskDir*>*) libp->para[1].ref
, *((TString*) G__int(libp->para[2]))));
      break;
   case 2:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterDirs(*((TString*) G__int(libp->para[0])), *(vector<HDiskDir*>*) libp->para[1].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *(vector<HDiskFile*>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4])), (Long64_t) G__Longlong(libp->para[5])));
      break;
   case 5:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *(vector<HDiskFile*>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))
, *((TString*) G__int(libp->para[4]))));
      break;
   case 4:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *(vector<HDiskFile*>*) libp->para[2].ref, *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 104, (long) ((HDiskCatalog*) G__getstructoffset())->filterFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *(vector<HDiskFile*>*) libp->para[2].ref));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HDiskCatalog*) G__getstructoffset())->printDirs(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), (Long64_t) G__Longlong(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HDiskCatalog*) G__getstructoffset())->printDirs(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((HDiskCatalog*) G__getstructoffset())->printDirs(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HDiskCatalog*) G__getstructoffset())->printDirs(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HDiskCatalog*) G__getstructoffset())->printFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3]))
, (Long64_t) G__Longlong(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HDiskCatalog*) G__getstructoffset())->printFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])), *((TString*) G__int(libp->para[3])));
      G__setnull(result7);
      break;
   case 3:
      ((HDiskCatalog*) G__getstructoffset())->printFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))
, *((TString*) G__int(libp->para[2])));
      G__setnull(result7);
      break;
   case 2:
      ((HDiskCatalog*) G__getstructoffset())->printFiles(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDiskCatalog::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskCatalog::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDiskCatalog::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDiskCatalog::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskCatalog*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskCatalog::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskCatalog::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskCatalog::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1006_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskCatalog::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1006_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HDiskCatalog* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HDiskCatalog(*(HDiskCatalog*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDiskCatalog G__THDiskCatalog;
static int G__UtilDict_1006_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDiskCatalog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDiskCatalog*) (soff+(sizeof(HDiskCatalog)*i)))->~G__THDiskCatalog();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDiskCatalog*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDiskCatalog*) (soff))->~G__THDiskCatalog();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1006_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskCatalog* dest = (HDiskCatalog*) G__getstructoffset();
   *dest = *(HDiskCatalog*) libp->para[0].ref;
   const HDiskCatalog& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HFileSys */
static int G__UtilDict_1009_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) HFileSys::getSmallerLimit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<uid_t,TString>& obj = HFileSys::getUserMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const map<gid_t,TString>& obj = HFileSys::getGroupMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::setUnit((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) HFileSys::getUnitK());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) HFileSys::getUnitT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) HFileSys::getUnitG());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) HFileSys::getUnitM());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::getUsers(*(map<uid_t,TString>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::getGroups(*(map<gid_t,TString>*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::fillSysInfo();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HFileSys::getUser((uid_t) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) HFileSys::getGroup((gid_t) G__int(libp->para[0]), *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::getModTime((time_t) G__int(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::getFileSize((ULong64_t) G__ULonglong(libp->para[0]), *(TString*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      HFileSys::lsFiles(*((TString*) G__int(libp->para[0])), *(vector<TString>*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HFileSys::lsFiles(*((TString*) G__int(libp->para[0])), *(vector<TString>*) libp->para[1].ref
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HFileSys::lsFiles(*((TString*) G__int(libp->para[0])), *(vector<TString>*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::lsFilesRecursive(*((TString*) G__int(libp->para[0])), *(vector<TString>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::lsDirectory(*((TString*) G__int(libp->para[0])), *(vector<TString>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1009_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HFileSys::lsDirectoryRecursive(*((TString*) G__int(libp->para[0])), *(vector<TString>*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__UtilDict_1009_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HFileSys *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HFileSys[n];
     } else {
       p = new((void*) gvp) HFileSys[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HFileSys;
     } else {
       p = new((void*) gvp) HFileSys;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HFileSys));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1009_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HFileSys* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HFileSys(*(HFileSys*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HFileSys));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HFileSys G__THFileSys;
static int G__UtilDict_1009_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HFileSys*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HFileSys*) (soff+(sizeof(HFileSys)*i)))->~G__THFileSys();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HFileSys*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HFileSys*) (soff))->~G__THFileSys();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1009_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HFileSys* dest = (HFileSys*) G__getstructoffset();
   *dest = *(HFileSys*) libp->para[0].ref;
   const HFileSys& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HDiskFile */
static int G__UtilDict_1019_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskFile* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDiskFile(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HDiskFile(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskFile[n];
       } else {
         p = new((void*) gvp) HDiskFile[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskFile;
       } else {
         p = new((void*) gvp) HDiskFile;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskFile));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((HDiskFile*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskFile*) G__getstructoffset())->getGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskFile*) G__getstructoffset())->getOwner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((HDiskFile*) G__getstructoffset())->getLastMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskFile*) G__getstructoffset())->getDir());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskFile*) G__getstructoffset())->setSize((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskFile*) G__getstructoffset())->setGroup((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskFile*) G__getstructoffset())->setOwner((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskFile*) G__getstructoffset())->setLastMod((time_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskFile*) G__getstructoffset())->setDir((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HDiskFile*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HDiskFile*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskFile*) G__getstructoffset())->isToSmall());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDiskFile::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskFile::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDiskFile::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDiskFile::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskFile*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskFile::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskFile::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskFile::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1019_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskFile::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1019_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HDiskFile* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HDiskFile(*(HDiskFile*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskFile));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDiskFile G__THDiskFile;
static int G__UtilDict_1019_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDiskFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDiskFile*) (soff+(sizeof(HDiskFile)*i)))->~G__THDiskFile();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDiskFile*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDiskFile*) (soff))->~G__THDiskFile();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1019_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskFile* dest = (HDiskFile*) G__getstructoffset();
   *dest = *(HDiskFile*) libp->para[0].ref;
   const HDiskFile& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HDiskDir */
static int G__UtilDict_1020_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskDir* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDiskDir(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HDiskDir(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskDir[n];
       } else {
         p = new((void*) gvp) HDiskDir[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskDir;
       } else {
         p = new((void*) gvp) HDiskDir;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskDir));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letULonglong(result7, 109, (G__uint64) ((HDiskDir*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getGroup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getOwner());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((HDiskDir*) G__getstructoffset())->getLastMod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNFilesTotal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNSmallFiles());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNSmallFilesTotal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNEmptyDirs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNDirsTotal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNEmptyDirsTotal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getNDirs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((HDiskDir*) G__getstructoffset())->getLevel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HDiskDir*) G__getstructoffset())->getMother());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HDiskFile>& obj = ((HDiskDir*) G__getstructoffset())->getFiles();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<Int_t>& obj = ((HDiskDir*) G__getstructoffset())->getDirs();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setSize((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setGroup((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setOwner((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setLastMod((time_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setNFilesTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setNSmallFiles((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setNSmallFilesTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setNEmptyDirs((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setNDirsTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setNEmptyDirsTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setLevel((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setMother((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->setDirToFiles((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addSize((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addNFilesTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addNSmallFiles((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addNSmallFilesTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addNEmptyDirs((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addNDirsTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addNEmptyDirsTotal((UInt_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addFile(*((HDiskFile*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->addDir((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->resetDirs();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->update();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HDiskDir*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HDiskDir*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HDiskDir*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HDiskDir*) G__getstructoffset())->printFiles((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HDiskDir*) G__getstructoffset())->printFiles();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HDiskDir*) G__getstructoffset())->printDirs((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HDiskDir*) G__getstructoffset())->printDirs((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HDiskDir*) G__getstructoffset())->printDirs();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskDir*) G__getstructoffset())->scan((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskDir*) G__getstructoffset())->scan(*(mystat*) libp->para[0].ref, (UInt_t) G__int(libp->para[1])
, *(vector<TString>*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskDir*) G__getstructoffset())->isDaughter((HDiskDir*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskDir*) G__getstructoffset())->isEmpty());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDiskDir::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskDir::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDiskDir::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDiskDir::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskDir*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskDir::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskDir::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskDir::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1020_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskDir::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1020_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HDiskDir* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HDiskDir(*(HDiskDir*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskDir));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDiskDir G__THDiskDir;
static int G__UtilDict_1020_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDiskDir*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDiskDir*) (soff+(sizeof(HDiskDir)*i)))->~G__THDiskDir();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDiskDir*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDiskDir*) (soff))->~G__THDiskDir();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1020_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskDir* dest = (HDiskDir*) G__getstructoffset();
   *dest = *(HDiskDir*) libp->para[0].ref;
   const HDiskDir& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HDiskStat */
static int G__UtilDict_1044_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskStat* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HDiskStat(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HDiskStat(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskStat[n];
       } else {
         p = new((void*) gvp) HDiskStat[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HDiskStat;
       } else {
         p = new((void*) gvp) HDiskStat;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskStat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskStat*) G__getstructoffset())->setDiskName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskStat*) G__getstructoffset())->setUnit((ULong64_t) G__ULonglong(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HDiskStat*) G__getstructoffset())->getDiskName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HDiskStat*) G__getstructoffset())->getDir(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1]))));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HDiskStat*) G__getstructoffset())->getDir(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HDiskStat*) G__getstructoffset())->getDirVec(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskStat*) G__getstructoffset())->addEntry((time_t) G__int(libp->para[0]), (HDiskDir*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskStat*) G__getstructoffset())->findMinMaxGraph(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, (TGraph*) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskStat*) G__getstructoffset())->findMinMaxAll(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *((TString*) G__int(libp->para[4]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HDiskStat*) G__getstructoffset())->findMinMaxAll(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]), *(Double_t*) G__Doubleref(&libp->para[3])
, *(vector<TGraph*>*) libp->para[4].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 85, (long) ((HDiskStat*) G__getstructoffset())->draw(*((TString*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2]), *((TString*) G__int(libp->para[3]))));
      break;
   case 3:
      G__letint(result7, 85, (long) ((HDiskStat*) G__getstructoffset())->draw(*((TString*) G__int(libp->para[0])), (UInt_t) G__int(libp->para[1])
, (ULong64_t) G__ULonglong(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HDiskStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HDiskStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HDiskStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HDiskStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HDiskStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1044_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HDiskStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1044_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HDiskStat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HDiskStat(*(HDiskStat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HDiskStat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HDiskStat G__THDiskStat;
static int G__UtilDict_1044_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HDiskStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HDiskStat*) (soff+(sizeof(HDiskStat)*i)))->~G__THDiskStat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HDiskStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HDiskStat*) (soff))->~G__THDiskStat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1044_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HDiskStat* dest = (HDiskStat*) G__getstructoffset();
   *dest = *(HDiskStat*) libp->para[0].ref;
   const HDiskStat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HTime */
static int G__UtilDict_1060_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTime* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTime[n];
     } else {
       p = new((void*) gvp) HTime[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HTime;
     } else {
       p = new((void*) gvp) HTime;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HTime));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) HTime::isHldName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) HTime::isHldName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) HTime::isHldName(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      {
         TString* pobj;
         TString xobj = HTime::stripFileName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 2:
      {
         TString* pobj;
         TString xobj = HTime::stripFileName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TString* pobj;
         TString xobj = HTime::stripFileName(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HTime::dayOfYearToDate((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTime::dayOfYearToDate((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      HTime::splitFileName(
*((TString*) G__int(libp->para[0])), *(TString*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), *(Int_t*) G__Intref(&libp->para[7])
, (Bool_t) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      HTime::splitFileName(
*((TString*) G__int(libp->para[0])), *(TString*) libp->para[1].ref
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), *(Int_t*) G__Intref(&libp->para[7]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      {
         TString* pobj;
         TString xobj = HTime::getTypeFileName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   case 1:
      {
         TString* pobj;
         TString xobj = HTime::getTypeFileName(*((TString*) G__int(libp->para[0])));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HTime::getYearFileName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HTime::getYearFileName(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HTime::getDayFileName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HTime::getDayFileName(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HTime::getTimeFileName(*((TString*) G__int(libp->para[0])), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HTime::getTimeFileName(*((TString*) G__int(libp->para[0])), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) HTime::getEvtBuilderFileName(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) HTime::getEvtBuilderFileName(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 108, (long) HTime::fileNameToTime(*((TString*) G__int(libp->para[0])), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) HTime::fileNameToTime(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 108, (long) HTime::runIdToTime((time_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 108, (long) HTime::runIdToTime((time_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 108, (long) HTime::runIdToTime((time_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      HTime::runIdToBrokenTime(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), (Int_t) G__int(libp->para[7])
, (Bool_t) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      HTime::runIdToBrokenTime(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      HTime::runIdToBrokenTime(
(Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]), *(Int_t*) G__Intref(&libp->para[3])
, *(Int_t*) G__Intref(&libp->para[4]), *(Int_t*) G__Intref(&libp->para[5])
, *(Int_t*) G__Intref(&libp->para[6]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTime::isDST(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HTime::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTime::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HTime::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HTime::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HTime*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTime::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTime::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HTime::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1060_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HTime::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1060_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HTime* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HTime(*(HTime*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HTime));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HTime G__THTime;
static int G__UtilDict_1060_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HTime*) (soff+(sizeof(HTime)*i)))->~G__THTime();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HTime*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HTime*) (soff))->~G__THTime();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1060_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HTime* dest = (HTime*) G__getstructoffset();
   *dest = *(HTime*) libp->para[0].ref;
   const HTime& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSeed */
static int G__UtilDict_1063_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeed* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeed(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HSeed(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeed(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HSeed(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeed((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HSeed((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSeed((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HSeed((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSeed[n];
       } else {
         p = new((void*) gvp) HSeed[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSeed;
       } else {
         p = new((void*) gvp) HSeed;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSeed));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HSeed*) G__getstructoffset())->getPid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HSeed*) G__getstructoffset())->getIP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 104, (long) ((HSeed*) G__getstructoffset())->getIPPart((UInt_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 104, (long) ((HSeed*) G__getstructoffset())->getIPPart());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSeed*) G__getstructoffset())->getSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSeed*) G__getstructoffset())->getMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSeed*) G__getstructoffset())->getFallBack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSeed*) G__getstructoffset())->getFixedSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSeed*) G__getstructoffset())->getInitialSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSeed*) G__getstructoffset())->getFirstSeed());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HSeed*) G__getstructoffset())->getHostName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 104, (long) ((HSeed*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeed*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSeed::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeed::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSeed::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSeed::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSeed*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeed::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeed::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSeed::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1063_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSeed::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1063_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSeed* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSeed(*(HSeed*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSeed));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSeed G__THSeed;
static int G__UtilDict_1063_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSeed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSeed*) (soff+(sizeof(HSeed)*i)))->~G__THSeed();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSeed*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSeed*) (soff))->~G__THSeed();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1063_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSeed* dest = (HSeed*) G__getstructoffset();
   *dest = *(HSeed*) libp->para[0].ref;
   const HSeed& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HMultiPagePDF */
static int G__UtilDict_1068_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HMultiPagePDF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMultiPagePDF(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) HMultiPagePDF(*((TString*) G__int(libp->para[0])), *((TString*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HMultiPagePDF(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HMultiPagePDF(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMultiPagePDF[n];
       } else {
         p = new((void*) gvp) HMultiPagePDF[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HMultiPagePDF;
       } else {
         p = new((void*) gvp) HMultiPagePDF;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HMultiPagePDF*) G__getstructoffset())->addPage((TCanvas*) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
      G__setnull(result7);
      break;
   case 1:
      ((HMultiPagePDF*) G__getstructoffset())->addPage((TCanvas*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMultiPagePDF*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HMultiPagePDF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMultiPagePDF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HMultiPagePDF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HMultiPagePDF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HMultiPagePDF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMultiPagePDF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMultiPagePDF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HMultiPagePDF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1068_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HMultiPagePDF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HMultiPagePDF G__THMultiPagePDF;
static int G__UtilDict_1068_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HMultiPagePDF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HMultiPagePDF*) (soff+(sizeof(HMultiPagePDF)*i)))->~G__THMultiPagePDF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HMultiPagePDF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HMultiPagePDF*) (soff))->~G__THMultiPagePDF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSUProgress */
static int G__UtilDict_1069_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUProgress* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUProgress((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HSUProgress((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSUProgress[n];
       } else {
         p = new((void*) gvp) HSUProgress[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSUProgress;
       } else {
         p = new((void*) gvp) HSUProgress;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUProgress));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetMaxValue((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSUProgress*) G__getstructoffset())->GetMaxValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->Restart();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSUProgress*) G__getstructoffset())->GetLast());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HSUProgress*) G__getstructoffset())->Next((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HSUProgress*) G__getstructoffset())->Next();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->Final();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetSpinOn((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUProgress*) G__getstructoffset())->GetSpinOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetSpinPer((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetSpinEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HSUProgress*) G__getstructoffset())->GetSpinChars());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetSpinChars((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetSpinChars((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HSUProgress*) G__getstructoffset())->GetSpinReal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetProgressOn((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUProgress*) G__getstructoffset())->GetProgressOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetProgressPer((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetProgressEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HSUProgress*) G__getstructoffset())->GetProgressChar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetProgressChar((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HSUProgress*) G__getstructoffset())->GetProgressReal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetTimerOn((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUProgress*) G__getstructoffset())->GetTimerOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetTimerPer((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetTimerEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HSUProgress*) G__getstructoffset())->GetTimerReal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->SetFullTimerOn((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUProgress*) G__getstructoffset())->GetFullTimerOn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSUProgress::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUProgress::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSUProgress::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSUProgress::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HSUProgress*) G__getstructoffset())->IsA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->ShowMembers(*(TMemberInspector*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->Streamer(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUProgress*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUProgress::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUProgress::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUProgress::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1069_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUProgress::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1069_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSUProgress* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSUProgress(*(HSUProgress*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUProgress));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSUProgress G__THSUProgress;
static int G__UtilDict_1069_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSUProgress*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSUProgress*) (soff+(sizeof(HSUProgress)*i)))->~G__THSUProgress();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSUProgress*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSUProgress*) (soff))->~G__THSUProgress();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1069_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUProgress* dest = (HSUProgress*) G__getstructoffset();
   *dest = *(HSUProgress*) libp->para[0].ref;
   const HSUProgress& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSUExeMacro */
static int G__UtilDict_1070_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUExeMacro* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUExeMacro[n];
     } else {
       p = new((void*) gvp) HSUExeMacro[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUExeMacro;
     } else {
       p = new((void*) gvp) HSUExeMacro;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSUExeMacro*) G__getstructoffset())->loadArgs((Int_t) G__int(libp->para[0]), (Char_t**) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->openInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->addInputFile((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->addFilesFromList((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->openOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->writeOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSUExeMacro*) G__getstructoffset())->loadTree((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->checkBranches());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUExeMacro*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUExeMacro*) G__getstructoffset())->getBranchesEntry((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSUExeMacro*) G__getstructoffset())->getEvent((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSUExeMacro*) G__getstructoffset())->nextEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSUExeMacro*) G__getstructoffset())->getTClonesArray((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSUExeMacro*) G__getstructoffset())->getHCategory((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSUExeMacro*) G__getstructoffset())->getBranch((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HSUExeMacro*) G__getstructoffset())->printInfo((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HSUExeMacro*) G__getstructoffset())->getExitOnError());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HSUExeMacro*) G__getstructoffset())->setExitOnError((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HSUExeMacro*) G__getstructoffset())->setExitOnError();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUExeMacro*) G__getstructoffset())->setProgress((HSUProgress*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HSUExeMacro*) G__getstructoffset())->setProgress((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HSUExeMacro*) G__getstructoffset())->setProgress();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HSUExeMacro*) G__getstructoffset())->getProgress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUExeMacro*) G__getstructoffset())->deleteProgress();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->openParamFile((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->openParamFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HSUExeMacro*) G__getstructoffset())->getParamObject((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const HSUExeMacro*) G__getstructoffset())->getParamFileName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HSUExeMacro*) G__getstructoffset())->isParamFileOpened());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const HSUExeMacro*) G__getstructoffset())->getOptString();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HSUExeMacro*) G__getstructoffset())->getOptInt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HSUExeMacro*) G__getstructoffset())->getOptFloat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HSUExeMacro*) G__getstructoffset())->getOptBool());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HSUExeMacro*) G__getstructoffset())->getEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HSUExeMacro*) G__getstructoffset())->getEvent());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HSUExeMacro*) G__getstructoffset())->getMdcPhi((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HSUExeMacro*) G__getstructoffset())->getMdcTheta((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUExeMacro*) G__getstructoffset())->getNotFileChange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUExeMacro*) G__getstructoffset())->setNotFileChange((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSUExeMacro::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUExeMacro::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSUExeMacro::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSUExeMacro::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUExeMacro*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUExeMacro::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUExeMacro::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUExeMacro::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1070_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUExeMacro::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1070_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSUExeMacro* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSUExeMacro(*(HSUExeMacro*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSUExeMacro G__THSUExeMacro;
static int G__UtilDict_1070_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSUExeMacro*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSUExeMacro*) (soff+(sizeof(HSUExeMacro)*i)))->~G__THSUExeMacro();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSUExeMacro*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSUExeMacro*) (soff))->~G__THSUExeMacro();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1070_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUExeMacro* dest = (HSUExeMacro*) G__getstructoffset();
   *dest = *(HSUExeMacro*) libp->para[0].ref;
   const HSUExeMacro& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSUDummyRec */
static int G__UtilDict_1074_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUDummyRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUDummyRec((Bool_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HSUDummyRec((Bool_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSUDummyRec[n];
       } else {
         p = new((void*) gvp) HSUDummyRec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HSUDummyRec;
       } else {
         p = new((void*) gvp) HSUDummyRec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUDummyRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUDummyRec((const Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HSUDummyRec((const Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUDummyRec((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HSUDummyRec((const Char_t*) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUDummyRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUDummyRec(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HSUDummyRec(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUDummyRec((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HSUDummyRec((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUDummyRec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUDummyRec(
(const Char_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HSUDummyRec(
(const Char_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Bool_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUDummyRec(
(const Char_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HSUDummyRec(
(const Char_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HSUDummyRec*) G__getstructoffset())->setVerbose((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HSUDummyRec*) G__getstructoffset())->setVerbose();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HSUDummyRec*) G__getstructoffset())->getVerbose());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) HSUDummyRec::getCategory((Cat_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HSUDummyRec::getCategory((Cat_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) HSUDummyRec::getCategory((const Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) HSUDummyRec::getCategory((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HSUDummyRec*) G__getstructoffset())->getIterator((Cat_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HSUDummyRec*) G__getstructoffset())->getIterator((Cat_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HSUDummyRec*) G__getstructoffset())->getIterator((const Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HSUDummyRec*) G__getstructoffset())->getIterator((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HSUDummyRec*) G__getstructoffset())->addObjectToWrite((TObject*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HSUDummyRec*) G__getstructoffset())->addObjectToWrite((TObject*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUDummyRec*) G__getstructoffset())->removeObject((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUDummyRec*) G__getstructoffset())->removeIterator((HIterator*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HSUDummyRec*) G__getstructoffset())->writeObjects((TFile*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 105, (long) ((HSUDummyRec*) G__getstructoffset())->writeObjects((const Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HSUDummyRec*) G__getstructoffset())->writeObjects((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HSUDummyRec*) G__getstructoffset())->getOutFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HSUDummyRec*) G__getstructoffset())->setOutFile((TFile*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HSUDummyRec*) G__getstructoffset())->setOutFile((TFile*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HSUDummyRec*) G__getstructoffset())->openOutFile((const Char_t*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HSUDummyRec*) G__getstructoffset())->openOutFile((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HSUDummyRec*) G__getstructoffset())->openOutFile());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUDummyRec*) G__getstructoffset())->writeAndCloseOutFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((const HSUDummyRec*) G__getstructoffset())->getOutFileName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUDummyRec*) G__getstructoffset())->setOutFileName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HSUDummyRec*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HSUDummyRec*) G__getstructoffset())->getInitOk());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HSUDummyRec*) G__getstructoffset())->setInitOk((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HSUDummyRec*) G__getstructoffset())->setInitOk();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUDummyRec*) G__getstructoffset())->setEvents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUDummyRec*) G__getstructoffset())->incEvents();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HSUDummyRec*) G__getstructoffset())->getEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HSUDummyRec*) G__getstructoffset())->setWriteEvents((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HSUDummyRec*) G__getstructoffset())->setWriteEvents();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HSUDummyRec*) G__getstructoffset())->getWriteEvents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSUDummyRec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUDummyRec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSUDummyRec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSUDummyRec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUDummyRec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUDummyRec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUDummyRec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUDummyRec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1074_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUDummyRec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSUDummyRec G__THSUDummyRec;
static int G__UtilDict_1074_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSUDummyRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSUDummyRec*) (soff+(sizeof(HSUDummyRec)*i)))->~G__THSUDummyRec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSUDummyRec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSUDummyRec*) (soff))->~G__THSUDummyRec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HSUIteratorObject */
static int G__UtilDict_1075_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUIteratorObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUIteratorObject[n];
     } else {
       p = new((void*) gvp) HSUIteratorObject[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HSUIteratorObject;
     } else {
       p = new((void*) gvp) HSUIteratorObject;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUIteratorObject* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HSUIteratorObject((HIterator*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HSUIteratorObject((HIterator*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HSUIteratorObject*) G__getstructoffset())->get());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUIteratorObject*) G__getstructoffset())->set((HIterator*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HSUIteratorObject::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUIteratorObject::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HSUIteratorObject::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HSUIteratorObject::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HSUIteratorObject*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUIteratorObject::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUIteratorObject::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HSUIteratorObject::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1075_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HSUIteratorObject::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1075_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HSUIteratorObject* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HSUIteratorObject(*(HSUIteratorObject*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HSUIteratorObject G__THSUIteratorObject;
static int G__UtilDict_1075_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HSUIteratorObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HSUIteratorObject*) (soff+(sizeof(HSUIteratorObject)*i)))->~G__THSUIteratorObject();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HSUIteratorObject*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HSUIteratorObject*) (soff))->~G__THSUIteratorObject();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1075_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HSUIteratorObject* dest = (HSUIteratorObject*) G__getstructoffset();
   *dest = *(HSUIteratorObject*) libp->para[0].ref;
   const HSUIteratorObject& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HHitFilter */
static int G__UtilDict_1076_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HHitFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HHitFilter((HCategory*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HHitFilter((HCategory*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HHitFilter[n];
       } else {
         p = new((void*) gvp) HHitFilter[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HHitFilter;
       } else {
         p = new((void*) gvp) HHitFilter;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HHitFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHitFilter*) G__getstructoffset())->setKine((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HHitFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHitFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HHitFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HHitFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HHitFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHitFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HHitFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HHitFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1076_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HHitFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__UtilDict_1076_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HHitFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HHitFilter(*(HHitFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HHitFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HHitFilter G__THHitFilter;
static int G__UtilDict_1076_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HHitFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HHitFilter*) (soff+(sizeof(HHitFilter)*i)))->~G__THHitFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HHitFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HHitFilter*) (soff))->~G__THHitFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__UtilDict_1076_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HHitFilter* dest = (HHitFilter*) G__getstructoffset();
   *dest = *(HHitFilter*) libp->para[0].ref;
   const HHitFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeantFilter */
static int G__UtilDict_1077_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeantFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeantFilter(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) HGeantFilter(
(Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeantFilter*) G__getstructoffset())->setID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeantFilter*) G__getstructoffset())->setAcceptance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeantFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeantFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeantFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeantFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeantFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__UtilDict_1077_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeantFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeantFilter G__THGeantFilter;
static int G__UtilDict_1077_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeantFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeantFilter*) (soff+(sizeof(HGeantFilter)*i)))->~G__THGeantFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeantFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeantFilter*) (soff))->~G__THGeantFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HDebug */

/* HObjTable */

/* HRunAnalizer */

/* HSymMat */

/* HSymMat2 */

/* HSymMat3 */

/* HSymMat4 */

/* HSymMat5 */

/* HSymMat6 */

/* HMessageMgr */

/* HSrcKeeper */

/* HNtuple */

/* HNtupleMap */

/* HArrayC */

/* HArrayS */

/* HArrayI */

/* HArrayL */

/* HArrayL64 */

/* HArrayF */

/* HArrayD */

/* HTool */

/* HHistMap */

/* HFlex */

/* HFlexFiller */

/* HPhysicsConstants */

/* HHistConverter */

/* HBitMan */

/* HSTLTool */

/* HCategoryManager */

/* HSectorSelector */

/* HLoop */

/* HZip */

/* HDiskCatalog */

/* HFileSys */

/* HDiskFile */

/* HDiskDir */

/* HDiskStat */

/* HTime */

/* HSeed */

/* HMultiPagePDF */

/* HSUProgress */

/* HSUExeMacro */

/* HSUDummyRec */

/* HSUIteratorObject */

/* HHitFilter */

/* HGeantFilter */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncUtilDict {
 public:
  G__Sizep2memfuncUtilDict(): p(&G__Sizep2memfuncUtilDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncUtilDict::*p)();
};

size_t G__get_sizep2memfuncUtilDict()
{
  G__Sizep2memfuncUtilDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceUtilDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HDebug))) {
     HDebug *G__Lderived;
     G__Lderived=(HDebug*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDebug),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HObjTable))) {
     HObjTable *G__Lderived;
     G__Lderived=(HObjTable*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HObjTable),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer))) {
     HRunAnalizer *G__Lderived;
     G__Lderived=(HRunAnalizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer),G__get_linked_tagnum(&G__UtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer),G__get_linked_tagnum(&G__UtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSymMat))) {
     HSymMat *G__Lderived;
     G__Lderived=(HSymMat*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSymMat2))) {
     HSymMat2 *G__Lderived;
     G__Lderived=(HSymMat2*)0x1000;
     {
       HSymMat *G__Lpbase=(HSymMat*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat2),G__get_linked_tagnum(&G__UtilDictLN_HSymMat),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat2),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSymMat3))) {
     HSymMat3 *G__Lderived;
     G__Lderived=(HSymMat3*)0x1000;
     {
       HSymMat *G__Lpbase=(HSymMat*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat3),G__get_linked_tagnum(&G__UtilDictLN_HSymMat),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat3),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSymMat4))) {
     HSymMat4 *G__Lderived;
     G__Lderived=(HSymMat4*)0x1000;
     {
       HSymMat *G__Lpbase=(HSymMat*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat4),G__get_linked_tagnum(&G__UtilDictLN_HSymMat),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat4),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSymMat5))) {
     HSymMat5 *G__Lderived;
     G__Lderived=(HSymMat5*)0x1000;
     {
       HSymMat *G__Lpbase=(HSymMat*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat5),G__get_linked_tagnum(&G__UtilDictLN_HSymMat),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat5),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSymMat6))) {
     HSymMat6 *G__Lderived;
     G__Lderived=(HSymMat6*)0x1000;
     {
       HSymMat *G__Lpbase=(HSymMat*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat6),G__get_linked_tagnum(&G__UtilDictLN_HSymMat),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat6),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr))) {
     HMessageMgr *G__Lderived;
     G__Lderived=(HMessageMgr*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSrcKeeper))) {
     HSrcKeeper *G__Lderived;
     G__Lderived=(HSrcKeeper*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSrcKeeper),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSrcKeeper),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HNtuple))) {
     HNtuple *G__Lderived;
     G__Lderived=(HNtuple*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HNtuple),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap))) {
     HNtupleMap *G__Lderived;
     G__Lderived=(HNtupleMap*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HArrayC))) {
     HArrayC *G__Lderived;
     G__Lderived=(HArrayC*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayC),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayC),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HArrayS))) {
     HArrayS *G__Lderived;
     G__Lderived=(HArrayS*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayS),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayS),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HArrayI))) {
     HArrayI *G__Lderived;
     G__Lderived=(HArrayI*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayI),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayI),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HArrayL))) {
     HArrayL *G__Lderived;
     G__Lderived=(HArrayL*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HArrayL64))) {
     HArrayL64 *G__Lderived;
     G__Lderived=(HArrayL64*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL64),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL64),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HArrayF))) {
     HArrayF *G__Lderived;
     G__Lderived=(HArrayF*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayF),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayF),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HArrayD))) {
     HArrayD *G__Lderived;
     G__Lderived=(HArrayD*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayD),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayD),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HTool))) {
     HTool *G__Lderived;
     G__Lderived=(HTool*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HTool),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HTool),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HHistMap))) {
     HHistMap *G__Lderived;
     G__Lderived=(HHistMap*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HHistMap),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HHistMap),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HFlex))) {
     HFlex *G__Lderived;
     G__Lderived=(HFlex*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlex),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller))) {
     HFlexFiller *G__Lderived;
     G__Lderived=(HFlexFiller*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller),G__get_linked_tagnum(&G__UtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller),G__get_linked_tagnum(&G__UtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants))) {
     HPhysicsConstants *G__Lderived;
     G__Lderived=(HPhysicsConstants*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HHistConverter))) {
     HHistConverter *G__Lderived;
     G__Lderived=(HHistConverter*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HHistConverter),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HBitMan))) {
     HBitMan *G__Lderived;
     G__Lderived=(HBitMan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HBitMan),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSTLTool))) {
     HSTLTool *G__Lderived;
     G__Lderived=(HSTLTool*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSTLTool),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager))) {
     HCategoryManager *G__Lderived;
     G__Lderived=(HCategoryManager*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector))) {
     HSectorSelector *G__Lderived;
     G__Lderived=(HSectorSelector*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HLoop))) {
     HLoop *G__Lderived;
     G__Lderived=(HLoop*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HLoop),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HZip))) {
     HZip *G__Lderived;
     G__Lderived=(HZip*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HZip),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog))) {
     HDiskCatalog *G__Lderived;
     G__Lderived=(HDiskCatalog*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HDiskFile))) {
     HDiskFile *G__Lderived;
     G__Lderived=(HDiskFile*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskFile),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskFile),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HDiskDir))) {
     HDiskDir *G__Lderived;
     G__Lderived=(HDiskDir*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskDir),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskDir),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HDiskStat))) {
     HDiskStat *G__Lderived;
     G__Lderived=(HDiskStat*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskStat),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskStat),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HTime))) {
     HTime *G__Lderived;
     G__Lderived=(HTime*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HTime),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSeed))) {
     HSeed *G__Lderived;
     G__Lderived=(HSeed*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSeed),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF))) {
     HMultiPagePDF *G__Lderived;
     G__Lderived=(HMultiPagePDF*)0x1000;
     {
       TPDF *G__Lpbase=(TPDF*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TPDF),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TVirtualPS *G__Lpbase=(TVirtualPS*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TVirtualPS),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttLine *G__Lpbase=(TAttLine*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TAttLine),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttFill *G__Lpbase=(TAttFill*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TAttFill),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttMarker *G__Lpbase=(TAttMarker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TAttMarker),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TAttText *G__Lpbase=(TAttText*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF),G__get_linked_tagnum(&G__UtilDictLN_TAttText),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro))) {
     HSUExeMacro *G__Lderived;
     G__Lderived=(HSUExeMacro*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec))) {
     HSUDummyRec *G__Lderived;
     G__Lderived=(HSUDummyRec*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec),G__get_linked_tagnum(&G__UtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec),G__get_linked_tagnum(&G__UtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject))) {
     HSUIteratorObject *G__Lderived;
     G__Lderived=(HSUIteratorObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HHitFilter))) {
     HHitFilter *G__Lderived;
     G__Lderived=(HHitFilter*)0x1000;
     {
       HFilter *G__Lpbase=(HFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HHitFilter),G__get_linked_tagnum(&G__UtilDictLN_HFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HHitFilter),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter))) {
     HGeantFilter *G__Lderived;
     G__Lderived=(HGeantFilter*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter),G__get_linked_tagnum(&G__UtilDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter),G__get_linked_tagnum(&G__UtilDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter),G__get_linked_tagnum(&G__UtilDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter),G__get_linked_tagnum(&G__UtilDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableUtilDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Long64_t",110,-1,0,-1);
   G__setnewtype(-1,"Portable signed long integer 8 bytes",0);
   G__search_typename2("ULong64_t",109,-1,0,-1);
   G__setnewtype(-1,"Portable unsigned long integer 8 bytes",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Cat_t",115,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UInt_t>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Float_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Float_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,Int_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Int_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,Int_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__UtilDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__UtilDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__UtilDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__UtilDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__UtilDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TString,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObjArray>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObjArray,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArrayI>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TArrayI,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1**>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1**,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1***>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1***,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1****>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1****,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1*****>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1*****,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1******>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TH1******,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas**>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas**,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas***>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas***,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas****>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas****,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas*****>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas*****,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas******>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCanvas******,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCutG*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCutGmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCutGmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TCutG*,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCutGmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCutGmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TF1*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTF1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTF1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TF1*,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTF1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTF1mUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TObject*,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TMacro*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTMacromUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMacromUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,TMacro*,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTMacromUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMacromUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Bool_t (*)(TH1*,TString name,HHistMap* map, TObjArray* params)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Bool_t (*)(TH1*,TObjArray* array,TObjArray* params)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TCanvas*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TCutG*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETCutGmUcOallocatorlETCutGmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETCutGmUcOallocatorlETCutGmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETCutGmUcOallocatorlETCutGmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETCutGmUcOallocatorlETCutGmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETCutGmUcOallocatorlETCutGmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TF1*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TObject*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TMacro*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETMacromUcOallocatorlETMacromUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETMacromUcOallocatorlETMacromUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETMacromUcOallocatorlETMacromUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETMacromUcOallocatorlETMacromUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETMacromUcOallocatorlETMacromUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Int_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,int,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Double_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOdoublecOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,double>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOdoublecOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,double,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOdoublecOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("Int_t (*)(HHistMap*,TObjArray*)",49,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("particleproperties",117,G__get_linked_tagnum(&G__UtilDictLN_particleproperties),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,particleproperties>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,particleproperties>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,particleproperties,less<int> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,particleproperties>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,particleproperties,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TString>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString,less<int> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("word",117,G__get_linked_tagnum(&G__UtilDictLN_HBitMancLcLword),0,G__get_linked_tagnum(&G__UtilDictLN_HBitMan));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<word>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HBitMan::word>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,word>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHBitMancLcLwordcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHBitMancLcLwordgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HBitMan::word>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHBitMancLcLwordcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHBitMancLcLwordgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HBitMan::word,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHBitMancLcLwordcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHBitMancLcLwordgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HCategory*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HCategory*,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HPartialEvent*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HPartialEvent*,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,Short_t>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,short>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,short,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("gid_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("uid_t",104,-1,0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("mystat",117,G__get_linked_tagnum(&G__UtilDictLN_stat),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<uid_t,TString>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,TString>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<unsigned int,TString,less<unsigned int> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<gid_t,TString>",117,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HDiskFile>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilecOallocatorlEHDiskFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilecOallocatorlEHDiskFilegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HDiskDir*>",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHDiskDirmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHDiskDirmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,HDiskDir*,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHDiskDirmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHDiskDirmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HDiskDir*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HDiskFile*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGraph>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETGraphcOallocatorlETGraphgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETGraphcOallocatorlETGraphgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETGraphcOallocatorlETGraphgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETGraphcOallocatorlETGraphgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETGraphcOallocatorlETGraphgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,vector<TGraph> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOvectorlETGraphcOallocatorlETGraphgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOvectorlETGraphcOallocatorlETGraphgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,vector<TGraph,allocator<TGraph> > >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOvectorlETGraphcOallocatorlETGraphgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOvectorlETGraphcOallocatorlETGraphgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,vector<TGraph,allocator<TGraph> >,less<TString> >",117,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOvectorlETGraphcOallocatorlETGraphgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOvectorlETGraphcOallocatorlETGraphgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGraph*>",117,G__get_linked_tagnum(&G__UtilDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__UtilDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__UtilDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HDebug */
static void G__setup_memvarHDebug(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HDebug));
   { HDebug *p; p=(HDebug*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIdentLevel=",0,"identation level;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HObjTable */
static void G__setup_memvarHObjTable(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HObjTable));
   { HObjTable *p; p=(HObjTable*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClonesArray),-1,-1,2,"m_fData=",0,"Container for the data in the Matrix category;");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_nNIndexes=",0,(char*)NULL);
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_pIndexTab=",0,"[m_nNIndexes]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TObject),-1,-1,4,"m_pNullObject=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_szClassName[40]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRunAnalizer */
static void G__setup_memvarHRunAnalizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer));
   { HRunAnalizer *p; p=(HRunAnalizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HEventHeader),-1,-1,4,"fEventHeader=",0,"Current event's header.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTotEvents=",0,"Total number of events (excluding start/stop event)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCalEvents=",0,"Number of calibration events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstRun=",0,"True if no run was analyzed before.");
   G__memvar_setup((void*)0,69,0,0,-1,-1,-1,4,"fOut=",0,"Output file.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstEvent=",0,"True if first event in run.");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunStartDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunStartTime=",0,"Run start time");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunStopDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunStopTime=",0,"Run start time");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fRunId=",0,"Run Id");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"fFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSymMat */
static void G__setup_memvarHSymMat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat));
   { HSymMat *p; p=(HSymMat*)0x1000; if (p) { }
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"pData=",0,"! Matrix elements");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"size=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"dim=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSymMat2 */
static void G__setup_memvarHSymMat2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat2));
   { HSymMat2 *p; p=(HSymMat2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"data[3]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSymMat3 */
static void G__setup_memvarHSymMat3(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat3));
   { HSymMat3 *p; p=(HSymMat3*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"data[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSymMat4 */
static void G__setup_memvarHSymMat4(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat4));
   { HSymMat4 *p; p=(HSymMat4*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"data[10]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSymMat5 */
static void G__setup_memvarHSymMat5(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat5));
   { HSymMat5 *p; p=(HSymMat5*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"data[15]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSymMat6 */
static void G__setup_memvarHSymMat6(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat6));
   { HSymMat6 *p; p=(HSymMat6*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"data[21]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMessageMgr */
static void G__setup_memvarHMessageMgr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr));
   { HMessageMgr *p; p=(HMessageMgr*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_RICH=%lldLL",(long long)HMessageMgr::DET_RICH).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_START=%lldLL",(long long)HMessageMgr::DET_START).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_MDC=%lldLL",(long long)HMessageMgr::DET_MDC).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_TOF=%lldLL",(long long)HMessageMgr::DET_TOF).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_TOFINO=%lldLL",(long long)HMessageMgr::DET_TOFINO).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_SHOWER=%lldLL",(long long)HMessageMgr::DET_SHOWER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_TRIGGER=%lldLL",(long long)HMessageMgr::DET_TRIGGER).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_RUNTIMEDB=%lldLL",(long long)HMessageMgr::DET_RUNTIMEDB).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_KICKPLANE=%lldLL",(long long)HMessageMgr::DET_KICKPLANE).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_QA=%lldLL",(long long)HMessageMgr::DET_QA).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__UtilDictLN_HMessageMgrcLcLDetector),-1,-2,1,G__FastAllocString(2048).Format("DET_ALL=%lldLL",(long long)HMessageMgr::DET_ALL).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"debugLevel=",0,"!< Level up to which the messages wil be printed.");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"warningLevel=",0,"!< Level up to which the messages wil be printed.");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"infoLevel=",0,"!< Level up to which the messages wil be printed.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"msgFile=",0,"!< File to write messages to (debug,warning,info)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ofstream"),-1,4,"errorFile=",0,"!< File to write error messages to");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TSocket),-1,-1,4,"msgSocket=",0,"!< Socket to send messages to (debug,warning,info)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TSocket),-1,-1,4,"errorSocket=",0,"!< Socket to send error messages to");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"thisHost=",0,"!< Name of this host");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"detectorMsg=",0,"!< Bitmask fo which detector to print messages");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"msg1=",0,"!< internal message variable");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"msg2=",0,"!< internal message variable ");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,4,"file=",0,"!< pointer to store name of file where message comes from");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"line=",0,"!< line in file where message comes from");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"screen=",0,"!< write to stdout in addition to file or socket");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSrcKeeper */
static void G__setup_memvarHSrcKeeper(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSrcKeeper));
   { HSrcKeeper *p; p=(HSrcKeeper*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TObjArray),-1,-1,4,"source=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HNtuple */
static void G__setup_memvarHNtuple(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HNtuple));
   { HNtuple *p; p=(HNtuple*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TFile),-1,-1,2,"outFile=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,2,"cname=",0,"!");
   G__memvar_setup((void*)0,67,0,1,-1,-1,-1,2,"ctitle=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cbufsize=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TNtuple),-1,-1,2,"ptrNt=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isNtuple=",0,"! kTRUE if ntuple is defined");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"varArrayN=",0,"! number of ntuple variables");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"varArray=",0,"! table of values for ntuple to be filled with");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_string),-1,-1,2,"varList=",0,"! list of variables for ntuple");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR),G__defined_typename("map<std::string,Float_t>"),-1,2,"vKeyValue=",0,"! pair of a variable name and a value");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<std::string,Int_t>"),-1,2,"vKeyOrder=",0,"! pair of a variable name and its position in ntuple");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator),-1,-1,2,"mIter=",0,"! iterator for a map variable - value");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HNtupleMap */
static void G__setup_memvarHNtupleMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap));
   { HNtupleMap *p; p=(HNtupleMap*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->ntuple)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TNtuple),-1,-1,1,"ntuple=",0,"! pointer to the ntuple");
   G__memvar_setup((void*)((long)(&p->file)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TFile),-1,-1,1,"file=",0,"! pointer to the input file");
   G__memvar_setup((void*)((long)(&p->c)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR),G__defined_typename("map<string,Int_t>"),-1,1,"c=",0,"! map object : key==leaf name, mapped index");
   G__memvar_setup((void*)((long)(&p->a)-(long)(p)),70,0,0,-1,G__defined_typename("Float_t"),-1,1,"a=",0,"! pointer to the argument array of the ntuple");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HArrayC */
static void G__setup_memvarHArrayC(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayC));
   { HArrayC *p; p=(HArrayC*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TArrayC),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HArrayS */
static void G__setup_memvarHArrayS(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayS));
   { HArrayS *p; p=(HArrayS*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TArrayS),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HArrayI */
static void G__setup_memvarHArrayI(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayI));
   { HArrayI *p; p=(HArrayI*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TArrayI),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HArrayL */
static void G__setup_memvarHArrayL(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL));
   { HArrayL *p; p=(HArrayL*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TArrayL),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HArrayL64 */
static void G__setup_memvarHArrayL64(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL64));
   { HArrayL64 *p; p=(HArrayL64*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TArrayL64),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HArrayF */
static void G__setup_memvarHArrayF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayF));
   { HArrayF *p; p=(HArrayF*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TArrayF),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HArrayD */
static void G__setup_memvarHArrayD(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayD));
   { HArrayD *p; p=(HArrayD*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->data)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TArrayD),-1,-1,1,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTool */
static void G__setup_memvarHTool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HTool));
   { HTool *p; p=(HTool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HHistMap */
static void G__setup_memvarHHistMap(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HHistMap));
   { HHistMap *p; p=(HHistMap*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hDir=",0,"directories per histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR),G__defined_typename("map<TString,TObjArray>"),-1,4,"hM=",0,"TObjArray for histogram pointers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hMask=",0,"mask string for names");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hTitle=",0,"mask string for titles");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),G__defined_typename("map<TString,TArrayI>"),-1,4,"hD=",0,"Array for dimensions");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUgRsPgRsPgR),G__defined_typename("map<TString,TH1**>"),-1,4,"hDim1=",0,"! dynamically created Array of hist pointers dimension = 1");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TH1***>"),-1,4,"hDim2=",0,"! dynamically created Array of hist pointers dimension = 2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TH1****>"),-1,4,"hDim3=",0,"! dynamically created Array of hist pointers dimension = 3");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TH1*****>"),-1,4,"hDim4=",0,"! dynamically created Array of hist pointers dimension = 4");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TH1******>"),-1,4,"hDim5=",0,"! dynamically created Array of hist pointers dimension = 5");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hDirC=",0,"directories per canvas");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR),G__defined_typename("map<TString,TObjArray>"),-1,4,"hMC=",0,"TObjArray for canvas pointers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hMaskC=",0,"mask string for names canvas");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hTitleC=",0,"mask string for titles canvas");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),G__defined_typename("map<TString,TArrayI>"),-1,4,"hDC=",0,"Array for dimensions canvas");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),G__defined_typename("map<TString,TArrayI>"),-1,4,"hNpC=",0,"canvas properties : number of pads x,y xpix,ypix canvas");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUgRsPgRsPgR),G__defined_typename("map<TString,TCanvas**>"),-1,4,"hDim1C=",0,"! dynamically created Array of canvas pointers dimension = 1");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TCanvas***>"),-1,4,"hDim2C=",0,"! dynamically created Array of canvas pointers dimension = 2");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TCanvas****>"),-1,4,"hDim3C=",0,"! dynamically created Array of canvas pointers dimension = 3");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TCanvas*****>"),-1,4,"hDim4C=",0,"! dynamically created Array of canvas pointers dimension = 4");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUmUgRsPgRsPgR),G__defined_typename("map<TString,TCanvas******>"),-1,4,"hDim5C=",0,"! dynamically created Array of canvas pointers dimension = 5");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hDirCut=",0,"directories per TCutG");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTCutGmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCutGmUgRsPgRsPgR),G__defined_typename("map<TString,TCutG*>"),-1,4,"hMCut=",0,"TCutG pointers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hDirFit=",0,"directories per TF1");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTF1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTF1mUgRsPgRsPgR),G__defined_typename("map<TString,TF1*>"),-1,4,"hMFit=",0,"TF1 pointers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hDirPar=",0,"map of parameter objects  (not streamed to root file)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR),G__defined_typename("map<TString,TObject*>"),-1,4,"hMPar=",0,"map of parameter objects  (not streamed to root file)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"hDirMacro=",0,"map of macro objects");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTMacromUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMacromUgRsPgRsPgR),G__defined_typename("map<TString,TMacro*>"),-1,4,"hMMacro=",0,"map of macro objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TFile),-1,-1,4,"output=",0,"! store hists later");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDeleteObjects=",0,"! delete hists+canvas etc in destructor");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSilentFail=",0,"! switch off error+warnings in get() etc (own risk, default is kFALSE)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HFlex */
static void G__setup_memvarHFlex(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlex));
   { HFlex *p; p=(HFlex*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),G__defined_typename("map<TString,Int_t>"),-1,4,"mInt=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOdoublecOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOdoublegRsPgRsPgR),G__defined_typename("map<TString,Double_t>"),-1,4,"mDouble=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HFlexFiller */
static void G__setup_memvarHFlexFiller(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller));
   { HFlexFiller *p; p=(HFlexFiller*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"createCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HHistMap),-1,-1,2,"hM=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TObjArray),-1,-1,2,"parameters=",0,(char*)NULL);
   G__memvar_setup((void*)0,49,0,0,-1,G__defined_typename("Int_t (*)(HHistMap* hmap,TObjArray* pars)"),-1,2,"pUserFill=",0,"! user provided function pointer to fill the HFlex Category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPhysicsConstants */
static void G__setup_memvarHPhysicsConstants(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants));
   { HPhysicsConstants *p; p=(HPhysicsConstants*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),G__defined_typename("map<Int_t,particleproperties>"),-2,4,"idToProp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR),G__defined_typename("map<TString,particleproperties>"),-2,4,"nameToProp=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),G__defined_typename("map<Int_t,TString>"),-2,4,"mGeantProcess=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HHistConverter */
static void G__setup_memvarHHistConverter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HHistConverter));
   { HHistConverter *p; p=(HHistConverter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HBitMan */
static void G__setup_memvarHBitMan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HBitMan));
   { HBitMan *p; p=(HBitMan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR),G__defined_typename("vector<word>"),-1,2,"list=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHBitMancLcLwordcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHBitMancLcLwordgRsPgRsPgR),G__defined_typename("map<TString,word>"),-1,2,"wordmap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSTLTool */
static void G__setup_memvarHSTLTool(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSTLTool));
   { HSTLTool *p; p=(HSTLTool*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HCategoryManager */
static void G__setup_memvarHCategoryManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager));
   { HCategoryManager *p; p=(HCategoryManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_HLocation),-1,-2,4,"loc=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSectorSelector */
static void G__setup_memvarHSectorSelector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector));
   { HSectorSelector *p; p=(HSectorSelector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR),G__defined_typename("map<TString,TArrayI>"),-1,4,"goodSectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"defaultVal=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HLoop */
static void G__setup_memvarHLoop(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HLoop));
   { HLoop *p; p=(HLoop*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TChain),-1,-1,4,"fChain=",0,"chain");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HEventHeader),-1,-1,4,"fHead=",0,"pointer to HADES event header");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HGeantMedia),-1,-1,4,"fGeantMedia=",0,"pointer to HGEANT MEDIA (NULL if not avvailable!)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR),G__defined_typename("map<TString,HCategory*>"),-1,4,"fEvent=",0,"map category name -> HCategory pointer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR),G__defined_typename("map<TString,HPartialEvent*>"),-1,4,"fPartial=",0,"map partial event name -> HPartialEvent pointer");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),G__defined_typename("map<TString,Int_t>"),-1,4,"fStatus=",0,"map category name -> status");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR),G__defined_typename("map<TString,TString>"),-1,4,"fPartialN=",0,"map category name -> partial event name");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR),G__defined_typename("map<TString,Short_t>"),-1,4,"fNameToCat=",0,"map category name -> category number");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fMaxEntries=",0,"total number of entries in the chain");
   G__memvar_setup((void*)0,110,0,0,-1,G__defined_typename("Long64_t"),-1,4,"fCurrentEntry=",0,"current entry in chain");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"fCurrentName=",0,"current file name");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TFile),-1,-1,4,"fFileCurrent=",0,"current file pointer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TTree),-1,-1,4,"fTree=",0,"current Tree of the chain");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HRecEvent),-1,-1,4,"fRecEvent=",0,"HADES event under reconstruction");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector),-1,-1,4,"fSectorSelector=",0,"selection of sectors from filelist");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fsectors[6]=",0,"array of sector status form filelist");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRefID=",0,"reference ID for init of params");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fFirstEvent=",0,"true if first event called");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fHasCreatedHades=",0,"remember if this class has created HADES");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsNewFile=",0,"== kTRUE for first entry after a new file is opened");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fIsSkipped=",0,"== kTRUE event was skipped by tasklist");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseTaskSet=",0,"== kTRUE if hades tasksets should be executed");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HZip */
static void G__setup_memvarHZip(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HZip));
   { HZip *p; p=(HZip*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HDiskCatalog */
static void G__setup_memvarHDiskCatalog(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog));
   { HDiskCatalog *p; p=(HDiskCatalog*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"diskname=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TObjArray),-1,-1,4,"list=",0,"->");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),G__defined_typename("map<uid_t,TString>"),-1,4,"musers=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),G__defined_typename("map<gid_t,TString>"),-1,4,"mgroups=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"lastScanStart=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"lastScanStop=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR),G__defined_typename("map<TString,Int_t>"),-1,4,"mDirToInd=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOHDiskDirmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHDiskDirmUgRsPgRsPgR),G__defined_typename("map<TString,HDiskDir*>"),-1,4,"mDirOld=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fnfiles=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fnfilestotal=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fndirs=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TObjArray),-1,-1,4,"flisttmp=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_stat),-1,-1,4,"status=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HFileSys */
static void G__setup_memvarHFileSys(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HFileSys));
   { HFileSys *p; p=(HFileSys*)0x1000; if (p) { }
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-2,4,"unitK=",0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-2,4,"unitM=",0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-2,4,"unitG=",0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-2,4,"unitT=",0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-2,4,"SmallerLimit=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),G__defined_typename("map<uid_t,TString>"),-2,4,"musers=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR),G__defined_typename("map<gid_t,TString>"),-2,4,"mgroups=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HDiskFile */
static void G__setup_memvarHDiskFile(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskFile));
   { HDiskFile *p; p=(HDiskFile*)0x1000; if (p) { }
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"size=",0,"size in byte");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"group=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"owner=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"lastmod=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"dir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HDiskDir */
static void G__setup_memvarHDiskDir(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskDir));
   { HDiskDir *p; p=(HDiskDir*)0x1000; if (p) { }
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"size=",0,"size in byte");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"group=",0,"system gid");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"owner=",0,"system uid");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"lastmod=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nFilesSmallerLimit=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nFilesSmallerLimitTotal=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nFilesTotal=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nEmptyDirs=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nDirsTotal=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"nEmptyDirsTotal=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"level=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"mother=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR),G__defined_typename("vector<HDiskFile>"),-1,4,"files=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"dirs=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HDiskStat */
static void G__setup_memvarHDiskStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskStat));
   { HDiskStat *p; p=(HDiskStat*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOvectorlETGraphcOallocatorlETGraphgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOvectorlETGraphcOallocatorlETGraphgRsPgRsPgRsPgRsPgR),G__defined_typename("map<TString,vector<TGraph> >"),-1,4,"mDirToVal=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vcolors=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vmarkers=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,4,"vstyles=",0,(char*)NULL);
   G__memvar_setup((void*)0,109,0,0,-1,G__defined_typename("ULong64_t"),-1,4,"unit=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"diskname=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HTime */
static void G__setup_memvarHTime(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HTime));
   { HTime *p; p=(HTime*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSeed */
static void G__setup_memvarHSeed(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSeed));
   { HSeed *p; p=(HSeed*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMethod=",0,"0 (default) : /dev/random,");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFallBack=",0,"case /dev/random is not available : default 2");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNoBlock=",0,"default kTRUE switch /dev/radom to /dev/urandom  to avoid blocking (less randomness!)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFixedSeed=",0,"default -1  setFixedSeed()");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fInitialSeed=",0,"default -1, stores the seed input gRandom");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFirstSeed=",0,"default -1, stores the first seed generated");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"fHostname=",0,"hostname of execution");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fAddress=",0,"4 * 8bit address fields");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPid=",0,"process id");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TRandom3),-1,-1,4,"fGenerator=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFileHandle=",0,"!  filehandle for /dev/random");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TRandom),-1,-1,4,"frandom=",0,"!  pointer to use generator");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HMultiPagePDF */
static void G__setup_memvarHMultiPagePDF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF));
   { HMultiPagePDF *p; p=(HMultiPagePDF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TCanvas),-1,-1,4,"c=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"pageCt=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSUProgress */
static void G__setup_memvarHSUProgress(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUProgress));
   { HSUProgress *p; p=(HSUProgress*)0x1000; if (p) { }
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_iMax=",0,"max numer of envents");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_iLast=",0,"current number");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bSpin=",0,"spin option");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bSpinInPer=",0,"m_fSpinSet in percents or events");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSpinSet=",0,"how often spin");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSpinReal=",0,"how often spin in events");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,4,"m_psSpinChars=",0,"list of spin's characters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_iSpinLen=",0,"length of the m_psSpinChars");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bProgress=",0,"print progress bar");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bProgressInPer=",0,"m_fProgressSet in percents");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fProgressSet=",0,"how often print progress");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fProgressReal=",0,"how often print progress / events");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_cProgressChar=",0,"a character for the progress bar");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bTimer=",0,"print timer value");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bTimerInPer=",0,"m_fTimerSet in percents");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fTimerSet=",0,"how often print timer info");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fTimerReal=",0,"how often print timer info in events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bFullTimer=",0,"print full time info at the end");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TStopwatch),-1,-1,4,"tTimer=",0,"timer for time info");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bWasOutOfRange=",0,"flag if the progress was out of range");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSUExeMacro */
static void G__setup_memvarHSUExeMacro(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro));
   { HSUExeMacro *p; p=(HSUExeMacro*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TChain),-1,-1,2,"m_pChain=",0,"chain of input files");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_iCurrentFile=",0,"current file in the chain");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HSUProgress),-1,-1,2,"m_pProgress=",0,"progress bar");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TFile),-1,-1,2,"m_pOutputFile=",0,"output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TObjArray),-1,-1,2,"m_pActiveBranches=",0,"array with active branches");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"m_bExitOnError=",0,"if exit on any error");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,2,"m_sOutputName=",0,"name of the output file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TObjArray),-1,-1,2,"m_pInputArray=",0,"list of input files");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_iEvents=",0,"max number of events");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_iEvent=",0,"current event");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,2,"m_sParamFileName=",0,"name of a file with parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TFile),-1,-1,2,"m_pParamFile=",0,"file with parameters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,2,"m_sOptString=",0,"string from parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"m_iOptInt=",0,"Int_t from parameters");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"m_fOptFloat=",0,"Float_t from parameters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"m_bOptBool=",0,"boolean from parameters");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"m_bNotFileChange=",0,"notify when the file changes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSUDummyRec */
static void G__setup_memvarHSUDummyRec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec));
   { HSUDummyRec *p; p=(HSUDummyRec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TList),-1,-1,2,"lToDelete=",0,"list of allocated objects");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TList),-1,-1,2,"lToWrite=",0,"list of objects for writing");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"bVerbose=",0,"report any warnings");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"bInitOk=",0,"flag if init was ok");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TFile),-1,-1,2,"pOutFile=",0,"output file");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__UtilDictLN_TString),-1,-1,2,"sOutFileName=",0,"name of the output file");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iEvents=",0,"number of events");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"bWriteEvents=",0,"write number of entries");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HSUIteratorObject */
static void G__setup_memvarHSUIteratorObject(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject));
   { HSUIteratorObject *p; p=(HSUIteratorObject*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pIter)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HIterator),-1,-1,1,"pIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HHitFilter */
static void G__setup_memvarHHitFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HHitFilter));
   { HHitFilter *p; p=(HHitFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"pKineCat=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeantFilter */
static void G__setup_memvarHGeantFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter));
   { HGeantFilter *p; p=(HGeantFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"particleId=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"accepted=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"catKine=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"catMdc=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"catTof=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"catShower=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"catRichPhoton=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"catRichDirect=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HCategory),-1,-1,4,"catRichMirror=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__UtilDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarUtilDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHDebug(void) {
   /* HDebug */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HDebug));
   G__memfunc_setup("HDebug",559,G__UtilDict_168_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HDebug), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIdentLevel",1336,G__UtilDict_168_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdentLevel",1324,G__UtilDict_168_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incIdentLevel",1318,G__UtilDict_168_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decIdentLevel",1304,G__UtilDict_168_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("message",741,G__UtilDict_168_0_6, 121, -1, -1, 0, 1, 8, 1, 0, "C - 'Text_t' 10 - format", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("enterFunc",938,G__UtilDict_168_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("leaveFunc",921,G__UtilDict_168_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - func", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_168_0_9, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDebug::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_168_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDebug::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_168_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDebug::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_168_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDebug::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_168_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_168_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDebug::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_168_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDebug::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_168_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDebug::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_168_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDebug::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HDebug", 559, G__UtilDict_168_0_21, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HDebug), -1, 0, 1, 1, 1, 0, "u 'HDebug' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HDebug", 685, G__UtilDict_168_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_168_0_23, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HDebug), -1, 1, 1, 1, 1, 0, "u 'HDebug' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHObjTable(void) {
   /* HObjTable */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HObjTable));
   G__memfunc_setup("HObjTable",843,G__UtilDict_196_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HObjTable), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSizes",858,G__UtilDict_196_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nIndexes I - 'Int_t' 0 - pSizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__UtilDict_196_0_3, 121, -1, -1, 0, 1, 8, 1, 0, "i - 'Int_t' 0 - nIndexes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellClassName",1603,G__UtilDict_196_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pszName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellClassName",1591,G__UtilDict_196_0_5, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,G__UtilDict_196_0_6, 85, G__get_linked_tagnum(&G__UtilDictLN_TObject), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nIndx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getObject",919,G__UtilDict_196_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlot",738,G__UtilDict_196_0_8, 85, G__get_linked_tagnum(&G__UtilDictLN_TObject), -1, 1, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSlot",738,G__UtilDict_196_0_9, 85, G__get_linked_tagnum(&G__UtilDictLN_TObject), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - nIndx", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getClones",932,G__UtilDict_196_0_10, 85, G__get_linked_tagnum(&G__UtilDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - aLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("makeObjTable",1185,G__UtilDict_196_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteTab",906,G__UtilDict_196_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeSubObjTable",1483,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__UtilDictLN_HObjTable), -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - nIndexes I - 'Int_t' 0 - pSizes "
"U 'TObject' - 0 - pObj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clearTab",798,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_196_0_15, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HObjTable::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_196_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HObjTable::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_196_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HObjTable::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_196_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HObjTable::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_196_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_196_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HObjTable::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_196_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HObjTable::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_196_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HObjTable::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_196_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HObjTable::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HObjTable", 843, G__UtilDict_196_0_27, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HObjTable), -1, 0, 1, 1, 1, 0, "u 'HObjTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HObjTable", 969, G__UtilDict_196_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_196_0_29, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HObjTable), -1, 1, 1, 1, 1, 0, "u 'HObjTable' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRunAnalizer(void) {
   /* HRunAnalizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer));
   G__memfunc_setup("extractStartInfo",1685,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeInfo",951,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHeader",1140,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRunAnalizer",1203,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer), -1, 0, 1, 1, 4, 0, "u 'HRunAnalizer' - 1 - analizer", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRunAnalizer",1203,G__UtilDict_207_0_5, 105, G__get_linked_tagnum(&G__UtilDictLN_HRunAnalizer), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 0 - name C - 'Text_t' 0 - title "
"C - 'Text_t' 0 '0' fileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__UtilDict_207_0_10, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRunAnalizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_207_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRunAnalizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_207_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRunAnalizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_207_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRunAnalizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_207_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_207_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRunAnalizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_207_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRunAnalizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_207_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRunAnalizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_207_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRunAnalizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRunAnalizer", 1329, G__UtilDict_207_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSymMat(void) {
   /* HSymMat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat));
   G__memfunc_setup("HSymMat",675,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__UtilDictLN_HSymMat), -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLinear",923,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 8, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSymMat",675,G__UtilDict_209_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HSymMat), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__UtilDict_209_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator()",957,G__UtilDict_209_0_5, 102, -1, G__defined_typename("Float_t"), 1, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - j", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__UtilDict_209_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__UtilDict_209_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - - i - 'Int_t' 10 - - "
"f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setErr",629,G__UtilDict_209_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCov",628,G__UtilDict_209_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HSymMat' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__UtilDict_209_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElement",1034,G__UtilDict_209_0_11, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 10 - - i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getErr",617,G__UtilDict_209_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDim",602,G__UtilDict_209_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCov",616,G__UtilDict_209_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HSymMat' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_209_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("convolution",1216,G__UtilDict_209_0_16, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - v1 F - 'Float_t' 0 - v2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transform",988,G__UtilDict_209_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HSymMat' - 11 - m F - 'Float_t' 0 - der", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_209_0_18, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSymMat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_209_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_209_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSymMat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_209_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSymMat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_209_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_209_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_209_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_209_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_209_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSymMat", 675, G__UtilDict_209_0_30, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat), -1, 0, 1, 1, 1, 0, "u 'HSymMat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSymMat", 801, G__UtilDict_209_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_209_0_32, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat), -1, 1, 1, 1, 1, 0, "u 'HSymMat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSymMat2(void) {
   /* HSymMat2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat2));
   G__memfunc_setup("HSymMat2",725,G__UtilDict_210_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSymMat2), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_210_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSymMat2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_210_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_210_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSymMat2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_210_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSymMat2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_210_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_210_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_210_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_210_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_210_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSymMat2", 725, G__UtilDict_210_0_14, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat2), -1, 0, 1, 1, 1, 0, "u 'HSymMat2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSymMat2", 851, G__UtilDict_210_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_210_0_16, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat2), -1, 1, 1, 1, 1, 0, "u 'HSymMat2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSymMat3(void) {
   /* HSymMat3 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat3));
   G__memfunc_setup("HSymMat3",726,G__UtilDict_211_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSymMat3), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_211_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSymMat3::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_211_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat3::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_211_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSymMat3::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_211_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSymMat3::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_211_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_211_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat3::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_211_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat3::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_211_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat3::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_211_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat3::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSymMat3", 726, G__UtilDict_211_0_14, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat3), -1, 0, 1, 1, 1, 0, "u 'HSymMat3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSymMat3", 852, G__UtilDict_211_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_211_0_16, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat3), -1, 1, 1, 1, 1, 0, "u 'HSymMat3' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSymMat4(void) {
   /* HSymMat4 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat4));
   G__memfunc_setup("HSymMat4",727,G__UtilDict_212_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSymMat4), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_212_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSymMat4::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_212_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat4::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_212_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSymMat4::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_212_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSymMat4::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_212_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_212_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat4::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_212_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat4::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_212_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat4::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_212_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat4::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSymMat4", 727, G__UtilDict_212_0_14, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat4), -1, 0, 1, 1, 1, 0, "u 'HSymMat4' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSymMat4", 853, G__UtilDict_212_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_212_0_16, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat4), -1, 1, 1, 1, 1, 0, "u 'HSymMat4' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSymMat5(void) {
   /* HSymMat5 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat5));
   G__memfunc_setup("HSymMat5",728,G__UtilDict_213_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSymMat5), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_213_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSymMat5::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_213_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat5::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_213_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSymMat5::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_213_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSymMat5::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_213_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_213_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat5::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_213_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat5::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_213_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat5::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_213_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat5::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSymMat5", 728, G__UtilDict_213_0_14, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat5), -1, 0, 1, 1, 1, 0, "u 'HSymMat5' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSymMat5", 854, G__UtilDict_213_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_213_0_16, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat5), -1, 1, 1, 1, 1, 0, "u 'HSymMat5' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSymMat6(void) {
   /* HSymMat6 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSymMat6));
   G__memfunc_setup("HSymMat6",729,G__UtilDict_214_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSymMat6), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_214_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSymMat6::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_214_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat6::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_214_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSymMat6::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_214_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSymMat6::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_214_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_214_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat6::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_214_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat6::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_214_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSymMat6::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_214_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSymMat6::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSymMat6", 729, G__UtilDict_214_0_14, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat6), -1, 0, 1, 1, 1, 0, "u 'HSymMat6' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSymMat6", 855, G__UtilDict_214_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_214_0_16, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSymMat6), -1, 1, 1, 1, 1, 0, "u 'HSymMat6' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMessageMgr(void) {
   /* HMessageMgr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr));
   G__memfunc_setup("HMessageMgr",1075,G__UtilDict_594_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - name C - 'Char_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefault",1041,G__UtilDict_594_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFile",716,G__UtilDict_594_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPort",753,G__UtilDict_594_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - host i - 'Int_t' 0 - port", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("switchOff",941,G__UtilDict_594_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDebugLevel",1323,G__UtilDict_594_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInfoLevel",1232,G__UtilDict_594_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWarningLevel",1562,G__UtilDict_594_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("enableDetectorMsg",1736,G__UtilDict_594_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - det", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("messageSeperator",1690,G__UtilDict_594_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - seperator i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("hydraErrorHandler",1760,G__UtilDict_594_0_11, 121, -1, -1, 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 - level g - 'Bool_t' 0 - abort "
"C - 'Char_t' 10 - location C - 'Char_t' 10 - msg", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Bool_t, const Char_t*, const Char_t*))(&HMessageMgr::hydraErrorHandler) ), 0);
   G__memfunc_setup("debug",519,G__UtilDict_594_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("error",554,G__UtilDict_594_0_13, 121, -1, -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("warning",758,G__UtilDict_594_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("info",428,G__UtilDict_594_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("debug",519,G__UtilDict_594_0_16, 121, -1, -1, 0, 4, 8, 1, 0, 
"i - 'Int_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("error",554,G__UtilDict_594_0_17, 121, -1, -1, 0, 4, 8, 1, 0, 
"i - 'Int_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("warning",758,G__UtilDict_594_0_18, 121, -1, -1, 0, 4, 8, 1, 0, 
"i - 'Int_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("info",428,G__UtilDict_594_0_19, 121, -1, -1, 0, 4, 8, 1, 0, 
"i - 'Int_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("debugB",585,G__UtilDict_594_0_20, 121, -1, -1, 0, 3, 8, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("errorB",620,G__UtilDict_594_0_21, 121, -1, -1, 0, 3, 8, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("warningB",824,G__UtilDict_594_0_22, 121, -1, -1, 0, 3, 8, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("infoB",494,G__UtilDict_594_0_23, 121, -1, -1, 0, 3, 8, 1, 0, 
"c - 'Char_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("debug",519,G__UtilDict_594_0_24, 121, -1, -1, 0, 6, 8, 1, 0, 
"i - 'Int_t' 0 - level i - 'Int_t' 0 - det "
"C - 'Char_t' 10 - className C - 'Char_t' 10 - file "
"i - 'Int_t' 0 - line C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setF",402,G__UtilDict_594_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setL",408,G__UtilDict_594_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - num", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setScreenOutput",1597,G__UtilDict_594_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ewrite",656,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "C - 'Char_t' 10 - text", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_594_0_30, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMessageMgr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_594_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMessageMgr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_594_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMessageMgr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_594_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMessageMgr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_594_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_594_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMessageMgr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_594_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMessageMgr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_594_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMessageMgr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_594_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMessageMgr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HMessageMgr", 1075, G__UtilDict_594_0_42, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr), -1, 0, 1, 1, 1, 0, "u 'HMessageMgr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HMessageMgr", 1201, G__UtilDict_594_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_594_0_44, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HMessageMgr), -1, 1, 1, 1, 1, 0, "u 'HMessageMgr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSrcKeeper(void) {
   /* HSrcKeeper */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSrcKeeper));
   G__memfunc_setup("newFile",714,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__UtilDictLN_TMacro), -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - fname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSrcKeeper",972,G__UtilDict_596_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HSrcKeeper), -1, 0, 2, 1, 1, 0, 
"C - - 10 '\"\"' name C - - 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSourceFile",1306,G__UtilDict_596_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSourceFiles",1421,G__UtilDict_596_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - dir u 'TString' - 0 '\"\\\\..*[cCh]+$\"' regexp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSourceFilesRecursive",2373,G__UtilDict_596_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - dir u 'TString' - 0 '\"\\\\..*[cCh]+$\"' regexp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSource",945,G__UtilDict_596_0_6, 117, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_596_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\".*\"' regexp g - 'Bool_t' 0 'kFALSE' show", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("extract",763,G__UtilDict_596_0_8, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 - destinationdir u 'TString' - 0 '\"\"' replacedir "
"u 'TString' - 0 '\".*\"' regexp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFile",704,G__UtilDict_596_0_9, 85, G__get_linked_tagnum(&G__UtilDictLN_TMacro), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kTRUE' usePath", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Merge",496,G__UtilDict_596_0_10, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 0, "U 'TCollection' - 0 - list", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__UtilDict_596_0_11, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSrcKeeper::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_596_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSrcKeeper::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_596_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSrcKeeper::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_596_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSrcKeeper::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_596_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_596_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSrcKeeper::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_596_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSrcKeeper::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_596_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSrcKeeper::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_596_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSrcKeeper::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HSrcKeeper", 1098, G__UtilDict_596_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHNtuple(void) {
   /* HNtuple */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HNtuple));
   G__memfunc_setup("HNtuple",704,G__UtilDict_611_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HNtuple), -1, 0, 0, 1, 1, 0, "", "dummy constructor", (void*) NULL, 0);
   G__memfunc_setup("HNtuple",704,G__UtilDict_611_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HNtuple), -1, 0, 3, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"i - 'Int_t' 0 '32000' bufsize", "late ntuple constructor", (void*) NULL, 0);
   G__memfunc_setup("HNtuple",704,G__UtilDict_611_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HNtuple), -1, 0, 4, 1, 1, 0, 
"C - - 10 - name C - - 10 - title "
"C - - 10 - varlist i - 'Int_t' 0 '32000' bufsize", "basic constructor", (void*) NULL, 0);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - - 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", "virtual function for a polymorphic NTulple Write call", (void*) NULL, 1);
   G__memfunc_setup("operator[]",1060,G__UtilDict_611_0_5, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 1, 0, "u 'string' - 11 - key", "the way of assigning values for variables", (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_611_0_6, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 1, 9, "u 'string' - 11 - key", "the way of variable value reading", (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__UtilDict_611_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "fills tuple, if not defined, constructs it first", (void*) NULL, 0);
   G__memfunc_setup("SetDirectory",1249,G__UtilDict_611_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TDirectory' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,G__UtilDict_611_0_9, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTitle",834,G__UtilDict_611_0_10, 67, -1, -1, 0, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFile",716,G__UtilDict_611_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - ptrF", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__UtilDictLN_HNtuple), -1, 1, 1, 1, 2, 8, "u 'HNtuple' - 11 - src", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMap",618,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"C - - 10 - vlist g - 'Bool_t' 1 - kPair", "creates a map from variable string", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_611_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HNtuple::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_611_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HNtuple::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_611_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HNtuple::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_611_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HNtuple::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_611_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_611_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HNtuple::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_611_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HNtuple::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_611_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HNtuple::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_611_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HNtuple::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HNtuple", 704, G__UtilDict_611_0_26, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HNtuple), -1, 0, 1, 1, 1, 0, "u 'HNtuple' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HNtuple", 830, G__UtilDict_611_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHNtupleMap(void) {
   /* HNtupleMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap));
   G__memfunc_setup("HNtupleMap",990,G__UtilDict_612_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createMap",914,G__UtilDict_612_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - in u 'TString' - 0 - ntupleName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printMap",843,G__UtilDict_612_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_612_0_4, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 1, 0, "u 'string' - 11 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_612_0_5, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HNtupleMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_612_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HNtupleMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_612_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HNtupleMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_612_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HNtupleMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_612_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_612_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HNtupleMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_612_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HNtupleMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_612_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HNtupleMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_612_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HNtupleMap::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HNtupleMap", 990, G__UtilDict_612_0_17, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap), -1, 0, 1, 1, 1, 0, "u 'HNtupleMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HNtupleMap", 1116, G__UtilDict_612_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_612_0_19, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HNtupleMap), -1, 1, 1, 1, 1, 0, "u 'HNtupleMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHArrayC(void) {
   /* HArrayC */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayC));
   G__memfunc_setup("HArrayC",650,G__UtilDict_616_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayC",650,G__UtilDict_616_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayC), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayC",650,G__UtilDict_616_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayC), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n C - 'Char_t' 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayC",650,G__UtilDict_616_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayC), -1, 0, 1, 1, 1, 0, "u 'TArrayC' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_616_0_5, 99, -1, G__defined_typename("Char_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_616_0_6, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__UtilDict_616_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayC), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__UtilDict_616_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_616_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__UtilDict_616_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_616_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_616_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HArrayC::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_616_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayC::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_616_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HArrayC::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_616_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HArrayC::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_616_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_616_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayC::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_616_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayC::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_616_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayC::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_616_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayC::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HArrayC", 650, G__UtilDict_616_0_24, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HArrayC), -1, 0, 1, 1, 1, 0, "u 'HArrayC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HArrayC", 776, G__UtilDict_616_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_616_0_26, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HArrayC), -1, 1, 1, 1, 1, 0, "u 'HArrayC' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHArrayS(void) {
   /* HArrayS */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayS));
   G__memfunc_setup("HArrayS",666,G__UtilDict_617_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayS",666,G__UtilDict_617_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayS), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayS",666,G__UtilDict_617_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayS), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayS",666,G__UtilDict_617_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayS), -1, 0, 1, 1, 1, 0, "u 'TArrayS' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_617_0_5, 115, -1, G__defined_typename("Short_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_617_0_6, 115, -1, G__defined_typename("Short_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__UtilDict_617_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayS), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__UtilDict_617_0_8, 83, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_617_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__UtilDict_617_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_617_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_617_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HArrayS::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_617_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayS::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_617_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HArrayS::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_617_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HArrayS::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_617_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_617_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayS::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_617_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayS::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_617_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayS::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_617_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayS::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HArrayS", 666, G__UtilDict_617_0_24, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HArrayS), -1, 0, 1, 1, 1, 0, "u 'HArrayS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HArrayS", 792, G__UtilDict_617_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_617_0_26, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HArrayS), -1, 1, 1, 1, 1, 0, "u 'HArrayS' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHArrayI(void) {
   /* HArrayI */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayI));
   G__memfunc_setup("HArrayI",656,G__UtilDict_618_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayI",656,G__UtilDict_618_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayI), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayI",656,G__UtilDict_618_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayI), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayI",656,G__UtilDict_618_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayI), -1, 0, 1, 1, 1, 0, "u 'TArrayI' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_618_0_5, 105, -1, G__defined_typename("Int_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_618_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__UtilDict_618_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayI), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__UtilDict_618_0_8, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_618_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__UtilDict_618_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_618_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_618_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HArrayI::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_618_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayI::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_618_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HArrayI::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_618_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HArrayI::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_618_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_618_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayI::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_618_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayI::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_618_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayI::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_618_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayI::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HArrayI", 656, G__UtilDict_618_0_24, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HArrayI), -1, 0, 1, 1, 1, 0, "u 'HArrayI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HArrayI", 782, G__UtilDict_618_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_618_0_26, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HArrayI), -1, 1, 1, 1, 1, 0, "u 'HArrayI' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHArrayL(void) {
   /* HArrayL */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL));
   G__memfunc_setup("HArrayL",659,G__UtilDict_619_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayL",659,G__UtilDict_619_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayL",659,G__UtilDict_619_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n L - 'Long_t' 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayL",659,G__UtilDict_619_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL), -1, 0, 1, 1, 1, 0, "u 'TArrayL' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_619_0_5, 108, -1, G__defined_typename("Long_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_619_0_6, 108, -1, G__defined_typename("Long_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__UtilDict_619_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayL), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__UtilDict_619_0_8, 76, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_619_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__UtilDict_619_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_619_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_619_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HArrayL::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_619_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayL::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_619_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HArrayL::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_619_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HArrayL::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_619_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_619_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayL::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_619_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayL::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_619_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayL::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_619_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayL::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HArrayL", 659, G__UtilDict_619_0_24, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HArrayL), -1, 0, 1, 1, 1, 0, "u 'HArrayL' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HArrayL", 785, G__UtilDict_619_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_619_0_26, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HArrayL), -1, 1, 1, 1, 1, 0, "u 'HArrayL' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHArrayL64(void) {
   /* HArrayL64 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayL64));
   G__memfunc_setup("HArrayL64",765,G__UtilDict_620_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL64), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayL64",765,G__UtilDict_620_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL64), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayL64",765,G__UtilDict_620_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL64), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n N - 'Long64_t' 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayL64",765,G__UtilDict_620_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayL64), -1, 0, 1, 1, 1, 0, "u 'TArrayL64' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_620_0_5, 110, -1, G__defined_typename("Long64_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_620_0_6, 110, -1, G__defined_typename("Long64_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__UtilDict_620_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayL64), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__UtilDict_620_0_8, 78, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_620_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__UtilDict_620_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "n - 'Long64_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_620_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_620_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HArrayL64::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_620_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayL64::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_620_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HArrayL64::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_620_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HArrayL64::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_620_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_620_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayL64::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_620_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayL64::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_620_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayL64::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_620_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayL64::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HArrayL64", 765, G__UtilDict_620_0_24, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HArrayL64), -1, 0, 1, 1, 1, 0, "u 'HArrayL64' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HArrayL64", 891, G__UtilDict_620_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_620_0_26, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HArrayL64), -1, 1, 1, 1, 1, 0, "u 'HArrayL64' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHArrayF(void) {
   /* HArrayF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayF));
   G__memfunc_setup("HArrayF",653,G__UtilDict_621_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayF",653,G__UtilDict_621_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayF), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayF",653,G__UtilDict_621_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayF), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayF",653,G__UtilDict_621_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayF), -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_621_0_5, 102, -1, G__defined_typename("Float_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_621_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__UtilDict_621_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__UtilDict_621_0_8, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_621_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__UtilDict_621_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_621_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_621_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HArrayF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_621_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_621_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HArrayF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_621_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HArrayF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_621_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_621_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_621_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_621_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_621_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayF::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HArrayF", 653, G__UtilDict_621_0_24, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HArrayF), -1, 0, 1, 1, 1, 0, "u 'HArrayF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HArrayF", 779, G__UtilDict_621_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_621_0_26, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HArrayF), -1, 1, 1, 1, 1, 0, "u 'HArrayF' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHArrayD(void) {
   /* HArrayD */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HArrayD));
   G__memfunc_setup("HArrayD",651,G__UtilDict_622_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayD",651,G__UtilDict_622_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayD), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayD",651,G__UtilDict_622_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayD), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HArrayD",651,G__UtilDict_622_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HArrayD), -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_622_0_5, 100, -1, G__defined_typename("Double_t"), 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__UtilDict_622_0_6, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__UtilDict_622_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArray",831,G__UtilDict_622_0_8, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_622_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__UtilDict_622_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_622_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_622_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HArrayD::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_622_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayD::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_622_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HArrayD::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_622_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HArrayD::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_622_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_622_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayD::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_622_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayD::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_622_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HArrayD::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_622_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HArrayD::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HArrayD", 651, G__UtilDict_622_0_24, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HArrayD), -1, 0, 1, 1, 1, 0, "u 'HArrayD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HArrayD", 777, G__UtilDict_622_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_622_0_26, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HArrayD), -1, 1, 1, 1, 1, 0, "u 'HArrayD' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTool(void) {
   /* HTool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HTool));
   G__memfunc_setup("initVariables",1357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HTool",486,G__UtilDict_720_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HTool), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' name C - 'Char_t' 10 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,G__UtilDict_720_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'TFile' - 2 - - u 'TString' - 0 - - "
"u 'TString' - 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TFile**, TString, TString))(&HTool::open) ), 0);
   G__memfunc_setup("close",534,G__UtilDict_720_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'TFile' - 2 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TFile**))(&HTool::close) ), 0);
   G__memfunc_setup("openAscii",923,G__UtilDict_720_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"E - - 2 - - u 'TString' - 0 - - "
"u 'TString' - 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(FILE**, TString, TString))(&HTool::openAscii) ), 0);
   G__memfunc_setup("closeAscii",1023,G__UtilDict_720_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "E - - 2 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(FILE**))(&HTool::closeAscii) ), 0);
   G__memfunc_setup("glob",420,G__UtilDict_720_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 1, 3, 1, 0, "u 'TString' - 0 - pattern", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(TString))(&HTool::glob) ), 0);
   G__memfunc_setup("writeNtupleToAscii",1871,G__UtilDict_720_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 9, 3, 1, 0, 
"u 'TString' - 0 '\"\"' Input u 'TString' - 0 '\"\"' ntuple "
"u 'TString' - 0 '\"\"' Output u 'TString' - 0 '\",\"' separator "
"u 'TString' - 0 '\"\"' selection u 'TString' - 0 '\"\"' condition "
"n - 'Long64_t' 0 '-1' entries n - 'Long64_t' 0 '0' startEntry "
"i - 'Int_t' 0 '0' ColWidth", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString, TString, TString, TString, TString, Long64_t, Long64_t, Int_t))(&HTool::writeNtupleToAscii) ), 0);
   G__memfunc_setup("createNtupleMap",1546,G__UtilDict_720_0_9, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TString' - 0 '\"\"' infile u 'TString' - 0 '\"\"' prefix "
"u 'TString' - 0 '\"\"' ntupleName u 'TString' - 0 '\"\"' outfile", (char*)NULL, (void*) G__func2void( (void (*)(TString, TString, TString, TString))(&HTool::createNtupleMap) ), 0);
   G__memfunc_setup("backTrace",896,G__UtilDict_720_0_10, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - level", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HTool::backTrace) ), 0);
   G__memfunc_setup("printBaskets",1274,G__UtilDict_720_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"u 'TString' - 0 '\"\"' infile u 'TString' - 0 '\"M\"' opt "
"u 'TString' - 0 '\"\"' listofClasses u 'TString' - 0 '\"T\"' treename", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString, TString, TString))(&HTool::printBaskets) ), 0);
   G__memfunc_setup("printProgress",1410,G__UtilDict_720_0_12, 121, -1, -1, 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 '-1' ct i - 'Int_t' 0 '-1' total "
"i - 'Int_t' 0 '1' step u 'TString' - 0 '\"\"' comment", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t, TString))(&HTool::printProgress) ), 0);
   G__memfunc_setup("Mkdir",503,G__UtilDict_720_0_13, 85, G__get_linked_tagnum(&G__UtilDictLN_TDirectory), -1, 0, 4, 3, 1, 0, 
"U 'TDirectory' - 0 - - C - 'Char_t' 10 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 '1' p", (char*)NULL, (void*) G__func2void( (TDirectory* (*)(TDirectory*, const Char_t*, Int_t, Int_t))(&HTool::Mkdir) ), 0);
   G__memfunc_setup("changeToDir",1096,G__UtilDict_720_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_TDirectory), -1, 0, 1, 3, 1, 0, "u 'TString' - 0 - -", (char*)NULL, (void*) G__func2void( (TDirectory* (*)(TString))(&HTool::changeToDir) ), 0);
   G__memfunc_setup("checkDir",797,G__UtilDict_720_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - - U 'TFile' - 0 - -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TFile*))(&HTool::checkDir) ), 0);
   G__memfunc_setup("getListOfAllDataMembers",2287,G__UtilDict_720_0_16, 85, G__get_linked_tagnum(&G__UtilDictLN_TList), -1, 0, 1, 3, 1, 0, "U 'TClass' - 0 - cl", (char*)NULL, (void*) G__func2void( (TList* (*)(TClass*))(&HTool::getListOfAllDataMembers) ), 0);
   G__memfunc_setup("scanOracle",1019,G__UtilDict_720_0_17, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TString' - 0 - - u 'TString' - 0 - -", (char*)NULL, (void*) G__func2void( (void (*)(TString, TString))(&HTool::scanOracle) ), 0);
   G__memfunc_setup("roundDigits",1164,G__UtilDict_720_0_18, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"d - 'Double_t' 0 - d i - 'Int_t' 0 '-1' ndigits", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t, Int_t))(&HTool::roundDigits) ), 0);
   G__memfunc_setup("roundDigits",1164,G__UtilDict_720_0_19, 102, -1, G__defined_typename("Float_t"), 0, 2, 3, 1, 0, 
"f - 'Float_t' 0 - f i - 'Int_t' 0 '-1' ndigits", (char*)NULL, (void*) G__func2void( (Float_t (*)(Float_t, Int_t))(&HTool::roundDigits) ), 0);
   G__memfunc_setup("exec",421,G__UtilDict_720_0_20, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - command u 'TString' - 1 - output", (char*)NULL, (void*) G__func2void( (Int_t (*)(TString, TString&))(&HTool::exec) ), 0);
   G__memfunc_setup("getLinearIndex",1427,G__UtilDict_720_0_21, 105, -1, G__defined_typename("Int_t"), 0, 10, 3, 1, 0, 
"i - 'Int_t' 0 - x1 h - 'UInt_t' 0 - x1max "
"i - 'Int_t' 0 - x2 h - 'UInt_t' 0 '0' x2max "
"i - 'Int_t' 0 '-1' x3 h - 'UInt_t' 0 '0' x3max "
"i - 'Int_t' 0 '-1' x4 h - 'UInt_t' 0 '0' x4max "
"i - 'Int_t' 0 '-1' x5 h - 'UInt_t' 0 '0' x5max", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, UInt_t, Int_t, UInt_t, Int_t, UInt_t, Int_t, UInt_t, Int_t, UInt_t))(&HTool::getLinearIndex) ), 0);
   G__memfunc_setup("getDimIndex",1106,G__UtilDict_720_0_22, 105, -1, G__defined_typename("Int_t"), 0, 11, 3, 1, 0, 
"i - 'Int_t' 0 - index i - 'Int_t' 1 - x1 "
"i - 'Int_t' 1 - x2 i - 'Int_t' 1 - x3 "
"i - 'Int_t' 1 - x4 i - 'Int_t' 1 - x5 "
"h - 'UInt_t' 0 '0' x1max h - 'UInt_t' 0 '0' x2max "
"h - 'UInt_t' 0 '0' x3max h - 'UInt_t' 0 '0' x4max "
"h - 'UInt_t' 0 '0' x5max", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, UInt_t, UInt_t, UInt_t, UInt_t, UInt_t))(&HTool::getDimIndex) ), 0);
   G__memfunc_setup("sort",456,G__UtilDict_720_0_23, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n C - 'Char_t' 0 - arr "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Char_t*, Int_t*, Bool_t, Bool_t))(&HTool::sort) ), 0);
   G__memfunc_setup("sort",456,G__UtilDict_720_0_24, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - arr "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Short_t*, Int_t*, Bool_t, Bool_t))(&HTool::sort) ), 0);
   G__memfunc_setup("sort",456,G__UtilDict_720_0_25, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - arr "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t*, Int_t*, Bool_t, Bool_t))(&HTool::sort) ), 0);
   G__memfunc_setup("sort",456,G__UtilDict_720_0_26, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - arr "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Float_t*, Int_t*, Bool_t, Bool_t))(&HTool::sort) ), 0);
   G__memfunc_setup("sort",456,G__UtilDict_720_0_27, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - arr "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Double_t*, Int_t*, Bool_t, Bool_t))(&HTool::sort) ), 0);
   G__memfunc_setup("sortParallel",1269,G__UtilDict_720_0_28, 121, -1, -1, 0, 6, 3, 1, 0, 
"i - 'Int_t' 0 - n i - 'Int_t' 0 - nArrays "
"C - 'Char_t' 0 - listarr i - 'Int_t' 0 '0' leading "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Char_t*, Int_t, Int_t*, Bool_t))(&HTool::sortParallel) ), 0);
   G__memfunc_setup("sortParallel",1269,G__UtilDict_720_0_29, 121, -1, -1, 0, 6, 3, 1, 0, 
"i - 'Int_t' 0 - n i - 'Int_t' 0 - nArrays "
"S - 'Short_t' 0 - listarr i - 'Int_t' 0 '0' leading "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Short_t*, Int_t, Int_t*, Bool_t))(&HTool::sortParallel) ), 0);
   G__memfunc_setup("sortParallel",1269,G__UtilDict_720_0_30, 121, -1, -1, 0, 6, 3, 1, 0, 
"i - 'Int_t' 0 - n i - 'Int_t' 0 - nArrays "
"I - 'Int_t' 0 - listarr i - 'Int_t' 0 '0' leading "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t*, Int_t, Int_t*, Bool_t))(&HTool::sortParallel) ), 0);
   G__memfunc_setup("sortParallel",1269,G__UtilDict_720_0_31, 121, -1, -1, 0, 6, 3, 1, 0, 
"i - 'Int_t' 0 - n i - 'Int_t' 0 - nArrays "
"F - 'Float_t' 0 - listarr i - 'Int_t' 0 '0' leading "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Float_t*, Int_t, Int_t*, Bool_t))(&HTool::sortParallel) ), 0);
   G__memfunc_setup("sortParallel",1269,G__UtilDict_720_0_32, 121, -1, -1, 0, 6, 3, 1, 0, 
"i - 'Int_t' 0 - n i - 'Int_t' 0 - nArrays "
"D - 'Double_t' 0 - listarr i - 'Int_t' 0 '0' leading "
"I - 'Int_t' 0 '0' index g - 'Bool_t' 0 'kTRUE' down", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Double_t*, Int_t, Int_t*, Bool_t))(&HTool::sortParallel) ), 0);
   G__memfunc_setup("kurtosis",900,G__UtilDict_720_0_33, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Short_t*))(&HTool::kurtosis) ), 0);
   G__memfunc_setup("kurtosis",900,G__UtilDict_720_0_34, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t*))(&HTool::kurtosis) ), 0);
   G__memfunc_setup("kurtosis",900,G__UtilDict_720_0_35, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Float_t*))(&HTool::kurtosis) ), 0);
   G__memfunc_setup("kurtosis",900,G__UtilDict_720_0_36, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t*))(&HTool::kurtosis) ), 0);
   G__memfunc_setup("skewness",883,G__UtilDict_720_0_37, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Short_t*))(&HTool::skewness) ), 0);
   G__memfunc_setup("skewness",883,G__UtilDict_720_0_38, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t*))(&HTool::skewness) ), 0);
   G__memfunc_setup("skewness",883,G__UtilDict_720_0_39, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Float_t*))(&HTool::skewness) ), 0);
   G__memfunc_setup("skewness",883,G__UtilDict_720_0_40, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - data", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t*))(&HTool::skewness) ), 0);
   G__memfunc_setup("weightedMean",1234,G__UtilDict_720_0_41, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - data "
"S - 'Short_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Short_t*, Short_t*))(&HTool::weightedMean) ), 0);
   G__memfunc_setup("weightedMean",1234,G__UtilDict_720_0_42, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - data "
"I - 'Int_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t*, Int_t*))(&HTool::weightedMean) ), 0);
   G__memfunc_setup("weightedMean",1234,G__UtilDict_720_0_43, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - data "
"F - 'Float_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Float_t*, Float_t*))(&HTool::weightedMean) ), 0);
   G__memfunc_setup("weightedMean",1234,G__UtilDict_720_0_44, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - data "
"D - 'Double_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t*, Double_t*))(&HTool::weightedMean) ), 0);
   G__memfunc_setup("weightedSigma",1346,G__UtilDict_720_0_45, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Short_t*))(&HTool::weightedSigma) ), 0);
   G__memfunc_setup("weightedSigma",1346,G__UtilDict_720_0_46, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t*))(&HTool::weightedSigma) ), 0);
   G__memfunc_setup("weightedSigma",1346,G__UtilDict_720_0_47, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Float_t*))(&HTool::weightedSigma) ), 0);
   G__memfunc_setup("weightedSigma",1346,G__UtilDict_720_0_48, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - dataerr", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t*))(&HTool::weightedSigma) ), 0);
   G__memfunc_setup("weightedMeanAndSigma",2006,G__UtilDict_720_0_49, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - data "
"S - 'Short_t' 0 - dataerr D - 'Double_t' 0 - mean "
"D - 'Double_t' 0 - sigma", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Short_t*, Short_t*, Double_t*, Double_t*))(&HTool::weightedMeanAndSigma) ), 0);
   G__memfunc_setup("weightedMeanAndSigma",2006,G__UtilDict_720_0_50, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - data "
"I - 'Int_t' 0 - dataerr D - 'Double_t' 0 - mean "
"D - 'Double_t' 0 - sigma", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t*, Int_t*, Double_t*, Double_t*))(&HTool::weightedMeanAndSigma) ), 0);
   G__memfunc_setup("weightedMeanAndSigma",2006,G__UtilDict_720_0_51, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - data "
"F - 'Float_t' 0 - dataerr D - 'Double_t' 0 - mean "
"D - 'Double_t' 0 - sigma", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Float_t*, Float_t*, Double_t*, Double_t*))(&HTool::weightedMeanAndSigma) ), 0);
   G__memfunc_setup("weightedMeanAndSigma",2006,G__UtilDict_720_0_52, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - data "
"D - 'Double_t' 0 - dataerr D - 'Double_t' 0 - mean "
"D - 'Double_t' 0 - sigma", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t*, Double_t*, Double_t*, Double_t*))(&HTool::weightedMeanAndSigma) ), 0);
   G__memfunc_setup("truncatedMean",1355,G__UtilDict_720_0_53, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Short_t*, Float_t, Bool_t, Bool_t))(&HTool::truncatedMean) ), 0);
   G__memfunc_setup("truncatedMean",1355,G__UtilDict_720_0_54, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t*, Float_t, Bool_t, Bool_t))(&HTool::truncatedMean) ), 0);
   G__memfunc_setup("truncatedMean",1355,G__UtilDict_720_0_55, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Float_t*, Float_t, Bool_t, Bool_t))(&HTool::truncatedMean) ), 0);
   G__memfunc_setup("truncatedMean",1355,G__UtilDict_720_0_56, 100, -1, G__defined_typename("Double_t"), 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc g - 'Bool_t' 0 'kTRUE' down "
"g - 'Bool_t' 0 'kTRUE' overwrite", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t*, Float_t, Bool_t, Bool_t))(&HTool::truncatedMean) ), 0);
   G__memfunc_setup("truncatedSigma",1467,G__UtilDict_720_0_57, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n S - 'Short_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Short_t*, Float_t))(&HTool::truncatedSigma) ), 0);
   G__memfunc_setup("truncatedSigma",1467,G__UtilDict_720_0_58, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n I - 'Int_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Int_t*, Float_t))(&HTool::truncatedSigma) ), 0);
   G__memfunc_setup("truncatedSigma",1467,G__UtilDict_720_0_59, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n F - 'Float_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Float_t*, Float_t))(&HTool::truncatedSigma) ), 0);
   G__memfunc_setup("truncatedSigma",1467,G__UtilDict_720_0_60, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - n D - 'Double_t' 0 - arr "
"f - 'Float_t' 0 '0.1' trunc", (char*)NULL, (void*) G__func2void( (Double_t (*)(Int_t, Double_t*, Float_t))(&HTool::truncatedSigma) ), 0);
   G__memfunc_setup("truncatedIndex",1474,G__UtilDict_720_0_61, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - n f - 'Float_t' 0 '0.1' trunc", (char*)NULL, (void*) G__func2void( (Int_t (*)(Int_t, Float_t))(&HTool::truncatedIndex) ), 0);
   G__memfunc_setup("chi2DistributionNorm",2050,G__UtilDict_720_0_62, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HTool::chi2DistributionNorm) ), 0);
   G__memfunc_setup("chi2Distribution",1638,G__UtilDict_720_0_63, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 1, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) G__func2void( (Double_t (*)(Double_t*, Double_t*))(&HTool::chi2Distribution) ), 0);
   G__memfunc_setup("chi2Distribution",1638,G__UtilDict_720_0_64, 85, G__get_linked_tagnum(&G__UtilDictLN_TF1), -1, 0, 4, 3, 1, 0, 
"i - 'Int_t' 0 '1' nDegreeOfFreedom u 'TString' - 0 '\"chi2_distr\"' name "
"g - 'Bool_t' 0 'kFALSE' norm d - 'Double_t' 0 '1' scale", (char*)NULL, (void*) G__func2void( (TF1* (*)(Int_t, TString, Bool_t, Double_t))(&HTool::chi2Distribution) ), 0);
   G__memfunc_setup("deleteObject",1226,G__UtilDict_720_0_65, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TObject' - 0 - h", (char*)NULL, (void*) G__func2void( (void (*)(TObject*))(&HTool::deleteObject) ), 0);
   G__memfunc_setup("writeObject",1154,G__UtilDict_720_0_66, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TObject' - 0 - h", (char*)NULL, (void*) G__func2void( (void (*)(TObject*))(&HTool::writeObject) ), 0);
   G__memfunc_setup("roundHist",960,G__UtilDict_720_0_67, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TH2' - 0 '0' h i - 'Int_t' 0 '-1' ndigit "
"i - 'Int_t' 0 '-1' ndigiterr", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, Int_t, Int_t))(&HTool::roundHist) ), 0);
   G__memfunc_setup("getHist",728,G__UtilDict_720_0_68, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 2, 3, 1, 0, 
"U 'TFile' - 0 - inp u 'TString' - 0 - name", (char*)NULL, (void*) G__func2void( (TH1* (*)(TFile*, TString))(&HTool::getHist) ), 0);
   G__memfunc_setup("smooth",666,G__UtilDict_720_0_69, 121, -1, -1, 0, 4, 3, 1, 0, 
"U 'TH1F' - 0 '0' h i - 'Int_t' 0 '1' ntimes "
"i - 'Int_t' 0 '-1' firstbin i - 'Int_t' 0 '-1' lastbin", (char*)NULL, (void*) G__func2void( (void (*)(TH1F*, Int_t, Int_t, Int_t))(&HTool::smooth) ), 0);
   G__memfunc_setup("slices",643,G__UtilDict_720_0_70, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 11, 3, 1, 0, 
"U 'TH2' - 0 '0' h U 'TF1' - 0 '0' f "
"u 'TString' - 0 '\"y\"' axis i - 'Int_t' 0 '1' firstbin "
"i - 'Int_t' 0 '0' lastbin i - 'Int_t' 0 '0' cut "
"u 'TString' - 0 '\"QNR\"' opt u 'TString' - 0 '\"\"' suffix "
"i - 'Int_t' 0 '8' markerstyle i - 'Int_t' 0 '2' markercolor "
"f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(TH2*, TF1*, TString, Int_t, Int_t, Int_t, TString, TString, Int_t, Int_t, Float_t))(&HTool::slices) ), 0);
   G__memfunc_setup("projections",1200,G__UtilDict_720_0_71, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 10, 3, 1, 0, 
"U 'TH2' - 0 - h2 u 'TString' - 0 '\"y\"' axis "
"i - 'Int_t' 0 '0' firstbin i - 'Int_t' 0 '-1' lastbin "
"i - 'Int_t' 0 '-99' nsteps u 'TString' - 0 '\"e\"' opt "
"u 'TString' - 0 '\"\"' suffix i - 'Int_t' 0 '8' markerstyle "
"i - 'Int_t' 0 '2' markercolor f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(TH2*, TString, Int_t, Int_t, Int_t, TString, TString, Int_t, Int_t, Float_t))(&HTool::projections) ), 0);
   G__memfunc_setup("fitArray",834,G__UtilDict_720_0_72, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 11, 3, 1, 0, 
"U 'TObjArray' - 0 '0' array U 'TF1' - 0 '0' fit "
"u 'TString' - 0 '\"\"' name f - 'Float_t' 0 '0' min "
"f - 'Float_t' 0 '0' max i - 'Int_t' 0 '0' opt "
"f - 'Float_t' 0 '0' x1 f - 'Float_t' 0 '0' x2 "
"i - 'Int_t' 0 '8' markerstyle i - 'Int_t' 0 '2' markercolor "
"f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(TObjArray*, TF1*, TString, Float_t, Float_t, Int_t, Float_t, Float_t, Int_t, Int_t, Float_t))(&HTool::fitArray) ), 0);
   G__memfunc_setup("projectY",848,G__UtilDict_720_0_73, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1D), -1, 0, 10, 3, 1, 0, 
"U 'TH1' - 0 '0' h i - 'Int_t' 0 '1' xbin1 "
"i - 'Int_t' 0 '0' xbin2 u 'TString' - 0 '\"\"' suff "
"i - 'Int_t' 0 '0' ybin f - 'Float_t' 0 '-99' ymin "
"f - 'Float_t' 0 '-99' ymax i - 'Int_t' 0 '8' markerstyle "
"i - 'Int_t' 0 '2' markercolor f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TH1D* (*)(TH1*, Int_t, Int_t, TString, Int_t, Float_t, Float_t, Int_t, Int_t, Float_t))(&HTool::projectY) ), 0);
   G__memfunc_setup("fitScatter",1049,G__UtilDict_720_0_74, 85, G__get_linked_tagnum(&G__UtilDictLN_TGraphErrors), -1, 0, 10, 3, 1, 0, 
"U 'TH2' - 0 '0' h U 'TF1' - 0 '0' f "
"u 'TString' - 0 '\"QNR\"' opt g - 'Bool_t' 0 'kFALSE' silent "
"f - 'Float_t' 0 '0' xmin f - 'Float_t' 0 '0' xmax "
"f - 'Float_t' 0 '0' ymin f - 'Float_t' 0 '0' ymax "
"f - 'Float_t' 0 '0' window g - 'Bool_t' 0 'kFALSE' clean", (char*)NULL, (void*) G__func2void( (TGraphErrors* (*)(TH2*, TF1*, TString, Bool_t, Float_t, Float_t, Float_t, Float_t, Float_t, Bool_t))(&HTool::fitScatter) ), 0);
   G__memfunc_setup("cleanHist",923,G__UtilDict_720_0_75, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TH1' - 0 - h d - 'Double_t' 0 '3' threshold "
"d - 'Double_t' 0 '0' val", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, Double_t, Double_t))(&HTool::cleanHist) ), 0);
   G__memfunc_setup("removeEnds",1048,G__UtilDict_720_0_76, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"U 'TH1' - 0 - h i - 'Int_t' 0 '1' first "
"i - 'Int_t' 0 '-1' last", (char*)NULL, (void*) G__func2void( (Int_t (*)(TH1*, Int_t, Int_t))(&HTool::removeEnds) ), 0);
   G__memfunc_setup("findFilledRange",1502,G__UtilDict_720_0_77, 105, -1, G__defined_typename("Int_t"), 0, 3, 3, 1, 0, 
"U 'TH1' - 0 - h i - 'Int_t' 1 - first "
"i - 'Int_t' 1 - last", (char*)NULL, (void*) G__func2void( (Int_t (*)(TH1*, Int_t&, Int_t&))(&HTool::findFilledRange) ), 0);
   G__memfunc_setup("resetHist",955,G__UtilDict_720_0_78, 121, -1, -1, 0, 3, 3, 1, 0, 
"U 'TH1' - 0 - h f - 'Float_t' 0 '-99' val "
"f - 'Float_t' 0 '-99' valerr", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, Float_t, Float_t))(&HTool::resetHist) ), 0);
   G__memfunc_setup("copyHist",851,G__UtilDict_720_0_79, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 4, 3, 1, 0, 
"U 'TH1' - 0 - h u 'TString' - 0 '\"\"' name "
"i - 'Int_t' 0 '-99' val i - 'Int_t' 0 '-99' valerr", (char*)NULL, (void*) G__func2void( (TH1* (*)(TH1*, TString, Int_t, Int_t))(&HTool::copyHist) ), 0);
   G__memfunc_setup("copyHistRange",1344,G__UtilDict_720_0_80, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 6, 3, 1, 0, 
"U 'TH1' - 0 - h u 'TString' - 0 '\"\"' name "
"i - 'Int_t' 0 '-99' val i - 'Int_t' 0 '-99' valerr "
"i - 'Int_t' 0 '0' start i - 'Int_t' 0 '-99' end", (char*)NULL, (void*) G__func2void( (TH1* (*)(TH1*, TString, Int_t, Int_t, Int_t, Int_t))(&HTool::copyHistRange) ), 0);
   G__memfunc_setup("cleanHistBelowLine",1820,G__UtilDict_720_0_81, 85, G__get_linked_tagnum(&G__UtilDictLN_TF1), -1, 0, 10, 3, 1, 0, 
"U 'TH2' - 0 - h U 'TF1' - 0 '0' f "
"u 'TString' - 0 '\"y\"' axis i - 'Int_t' 0 '1' firstbin "
"i - 'Int_t' 0 '0' lastbin i - 'Int_t' 0 '0' cut "
"u 'TString' - 0 '\"QNR\"' opt u 'TString' - 0 '\"\"' suffix "
"u 'TString' - 0 '\"pol1\"' optline f - 'Float_t' 0 '1000.' windowfunc", (char*)NULL, (void*) G__func2void( (TF1* (*)(TH2*, TF1*, TString, Int_t, Int_t, Int_t, TString, TString, TString, Float_t))(&HTool::cleanHistBelowLine) ), 0);
   G__memfunc_setup("cleanHistArroundLine",2046,G__UtilDict_720_0_82, 85, G__get_linked_tagnum(&G__UtilDictLN_TF1), -1, 0, 11, 3, 1, 0, 
"U 'TH2' - 0 - h U 'TF1' - 0 '0' f "
"u 'TString' - 0 '\"y\"' axis i - 'Int_t' 0 '1' firstbin "
"i - 'Int_t' 0 '0' lastbin i - 'Int_t' 0 '0' cut "
"u 'TString' - 0 '\"QNR\"' opt u 'TString' - 0 '\"\"' suffix "
"u 'TString' - 0 '\"pol1\"' optline f - 'Float_t' 0 '1000.' windowfunc "
"f - 'Float_t' 0 '1000.' windowfunc2", (char*)NULL, (void*) G__func2void( (TF1* (*)(TH2*, TF1*, TString, Int_t, Int_t, Int_t, TString, TString, TString, Float_t, Float_t))(&HTool::cleanHistArroundLine) ), 0);
   G__memfunc_setup("cleanHistCutG",1294,G__UtilDict_720_0_83, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TH2' - 0 '0' - U 'TCutG' - 0 '0' -", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH2*, TCutG*))(&HTool::cleanHistCutG) ), 0);
   G__memfunc_setup("setHistErrors",1377,G__UtilDict_720_0_84, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - h U 'TH1' - 0 - h2", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, TH1*))(&HTool::setHistErrors) ), 0);
   G__memfunc_setup("getMaxHistArray",1533,G__UtilDict_720_0_85, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"U 'TH1' - 2 - h i - 'Int_t' 0 - size "
"i - 'Int_t' 1 - index", (char*)NULL, (void*) G__func2void( (Double_t (*)(TH1**, Int_t, Int_t&))(&HTool::getMaxHistArray) ), 0);
   G__memfunc_setup("getMinHistArray",1531,G__UtilDict_720_0_86, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"U 'TH1' - 2 - h i - 'Int_t' 0 - size "
"i - 'Int_t' 1 - index", (char*)NULL, (void*) G__func2void( (Double_t (*)(TH1**, Int_t, Int_t&))(&HTool::getMinHistArray) ), 0);
   G__memfunc_setup("reBin",496,G__UtilDict_720_0_87, 85, G__get_linked_tagnum(&G__UtilDictLN_TH2), -1, 0, 4, 3, 1, 0, 
"U 'TH2' - 0 '0' h2 i - 'Int_t' 0 '2' groupX "
"i - 'Int_t' 0 '2' gropY u 'TString' - 0 '\"\"' newname", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, Int_t, Int_t, TString))(&HTool::reBin) ), 0);
   G__memfunc_setup("exchangeXY",1012,G__UtilDict_720_0_88, 85, G__get_linked_tagnum(&G__UtilDictLN_TH2), -1, 0, 2, 3, 1, 0, 
"U 'TH2' - 0 '0' h2 u 'TString' - 0 '\"\"' newname", (char*)NULL, (void*) G__func2void( (TH2* (*)(TH2*, TString))(&HTool::exchangeXY) ), 0);
   G__memfunc_setup("flipAxis",832,G__UtilDict_720_0_89, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TH2' - 0 '0' h2 u 'TString' - 0 '\"x\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH2*, TString))(&HTool::flipAxis) ), 0);
   G__memfunc_setup("shiftHistByBin",1418,G__UtilDict_720_0_90, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TH1' - 0 '0' h i - 'Int_t' 0 '0' shiftbin", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH1*, Int_t))(&HTool::shiftHistByBin) ), 0);
   G__memfunc_setup("shiftHist",950,G__UtilDict_720_0_91, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TH1' - 0 '0' h f - 'Float_t' 0 '0' shift", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH1*, Float_t))(&HTool::shiftHist) ), 0);
   G__memfunc_setup("normalize_max",1398,G__UtilDict_720_0_92, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"U 'TH2' - 0 '0' h2 u 'TString' - 0 '\"y\"' axis", (char*)NULL, (void*) G__func2void( (Int_t (*)(TH2*, TString))(&HTool::normalize_max) ), 0);
   G__memfunc_setup("histToGraph",1133,G__UtilDict_720_0_93, 85, G__get_linked_tagnum(&G__UtilDictLN_TGraph), -1, 0, 6, 3, 1, 0, 
"U 'TH1' - 0 '0' h u 'TString' - 0 '\"\"' newname "
"g - 'Bool_t' 0 'kFALSE' exchange i - 'Int_t' 0 '8' markerstyle "
"i - 'Int_t' 0 '2' markercolor f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TGraph* (*)(TH1*, TString, Bool_t, Int_t, Int_t, Float_t))(&HTool::histToGraph) ), 0);
   G__memfunc_setup("histToGraphErrors",1770,G__UtilDict_720_0_94, 85, G__get_linked_tagnum(&G__UtilDictLN_TGraphErrors), -1, 0, 6, 3, 1, 0, 
"U 'TH1' - 0 '0' h u 'TString' - 0 '\"\"' newname "
"g - 'Bool_t' 0 'kFALSE' exchange i - 'Int_t' 0 '8' markerstyle "
"i - 'Int_t' 0 '2' markercolor f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TGraphErrors* (*)(TH1*, TString, Bool_t, Int_t, Int_t, Float_t))(&HTool::histToGraphErrors) ), 0);
   G__memfunc_setup("hist2DToGraph",1251,G__UtilDict_720_0_95, 85, G__get_linked_tagnum(&G__UtilDictLN_TGraph), -1, 0, 5, 3, 1, 0, 
"U 'TH2' - 0 '0' h f - 'Float_t' 0 '0' xmin "
"f - 'Float_t' 0 '0' xmax f - 'Float_t' 0 '0' ymin "
"f - 'Float_t' 0 '0' ymax", (char*)NULL, (void*) G__func2void( (TGraph* (*)(TH2*, Float_t, Float_t, Float_t, Float_t))(&HTool::hist2DToGraph) ), 0);
   G__memfunc_setup("hist2DToGraphErrors",1888,G__UtilDict_720_0_96, 85, G__get_linked_tagnum(&G__UtilDictLN_TGraphErrors), -1, 0, 5, 3, 1, 0, 
"U 'TH2' - 0 '0' h f - 'Float_t' 0 '0' xmin "
"f - 'Float_t' 0 '0' xmax f - 'Float_t' 0 '0' ymin "
"f - 'Float_t' 0 '0' ymax", (char*)NULL, (void*) G__func2void( (TGraphErrors* (*)(TH2*, Float_t, Float_t, Float_t, Float_t))(&HTool::hist2DToGraphErrors) ), 0);
   G__memfunc_setup("toNonConstBinHist",1734,G__UtilDict_720_0_97, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 4, 3, 1, 0, 
"U 'TH1' - 0 '0' hconst U 'TH1' - 0 '0' hnonconst "
"g - 'Bool_t' 0 'kTRUE' normBinWidth d - 'Double_t' 0 '0.0001' eps", (char*)NULL, (void*) G__func2void( (TH1* (*)(TH1*, TH1*, Bool_t, Double_t))(&HTool::toNonConstBinHist) ), 0);
   G__memfunc_setup("inverseRebinBinHist",1949,G__UtilDict_720_0_98, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 4, 3, 1, 0, 
"U 'TH1' - 0 '0' hnonconst d - 'Double_t' 0 '1' binw "
"g - 'Bool_t' 0 'kTRUE' normBinWidth d - 'Double_t' 0 '0.0001' eps", (char*)NULL, (void*) G__func2void( (TH1* (*)(TH1*, Double_t, Bool_t, Double_t))(&HTool::inverseRebinBinHist) ), 0);
   G__memfunc_setup("printHist",965,G__UtilDict_720_0_99, 121, -1, -1, 0, 1, 3, 1, 0, "U 'TH1' - 0 '0' h", (char*)NULL, (void*) G__func2void( (void (*)(TH1*))(&HTool::printHist) ), 0);
   G__memfunc_setup("histToText",1056,G__UtilDict_720_0_100, 121, -1, -1, 0, 2, 3, 1, 0, 
"U 'TH1' - 0 - - u 'TString' - 0 '\"hist.txt\"' filename", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, TString))(&HTool::histToText) ), 0);
   G__memfunc_setup("graphToHist",1133,G__UtilDict_720_0_101, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1D), -1, 0, 7, 3, 1, 0, 
"U 'TGraph' - 0 '0' g d - 'Double_t' 0 '-1' firstBinWidth "
"u 'TString' - 0 '\"\"' newname g - 'Bool_t' 0 'kFALSE' exchange "
"i - 'Int_t' 0 '8' markerstyle i - 'Int_t' 0 '2' markercolor "
"f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TH1D* (*)(TGraph*, Double_t, TString, Bool_t, Int_t, Int_t, Float_t))(&HTool::graphToHist) ), 0);
   G__memfunc_setup("graphErrorsToHist",1770,G__UtilDict_720_0_102, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1D), -1, 0, 7, 3, 1, 0, 
"U 'TGraphErrors' - 0 '0' g d - 'Double_t' 0 '-1' firstBinWidth "
"u 'TString' - 0 '\"\"' newname g - 'Bool_t' 0 'kFALSE' exchange "
"i - 'Int_t' 0 '8' markerstyle i - 'Int_t' 0 '2' markercolor "
"f - 'Float_t' 0 '0.7' markersize", (char*)NULL, (void*) G__func2void( (TH1D* (*)(TGraphErrors*, Double_t, TString, Bool_t, Int_t, Int_t, Float_t))(&HTool::graphErrorsToHist) ), 0);
   G__memfunc_setup("exchangeXYGraph",1510,G__UtilDict_720_0_103, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'TGraph' - 0 '0' g", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TGraph*))(&HTool::exchangeXYGraph) ), 0);
   G__memfunc_setup("exchangeXYGraphErrors",2147,G__UtilDict_720_0_104, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'TGraphErrors' - 0 '0' g", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TGraphErrors*))(&HTool::exchangeXYGraphErrors) ), 0);
   G__memfunc_setup("integralGraph",1352,G__UtilDict_720_0_105, 100, -1, G__defined_typename("Double_t"), 0, 3, 3, 1, 0, 
"U 'TGraph' - 0 '0' g i - 'Int_t' 0 '-1' first "
"i - 'Int_t' 0 '-1' last", (char*)NULL, (void*) G__func2void( (Double_t (*)(TGraph*, Int_t, Int_t))(&HTool::integralGraph) ), 0);
   G__memfunc_setup("scaleGraph",1018,G__UtilDict_720_0_106, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'TGraph' - 0 '0' g d - 'Double_t' 0 '1.' xscale "
"d - 'Double_t' 0 '1.' yscale", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TGraph*, Double_t, Double_t))(&HTool::scaleGraph) ), 0);
   G__memfunc_setup("scaleGraphErrors",1655,G__UtilDict_720_0_107, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"U 'TGraphErrors' - 0 '0' g d - 'Double_t' 0 '1.' xscale "
"d - 'Double_t' 0 '1.' yscale d - 'Double_t' 0 '1.' xErrscale "
"d - 'Double_t' 0 '1.' yErrscale", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TGraphErrors*, Double_t, Double_t, Double_t, Double_t))(&HTool::scaleGraphErrors) ), 0);
   G__memfunc_setup("shiftGraph",1040,G__UtilDict_720_0_108, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'TGraph' - 0 '0' g d - 'Double_t' 0 '0.' xshift "
"d - 'Double_t' 0 '0.' yshift", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TGraph*, Double_t, Double_t))(&HTool::shiftGraph) ), 0);
   G__memfunc_setup("parseString",1170,G__UtilDict_720_0_109, 85, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 4, 3, 1, 0, 
"u 'TString' - 0 - options i - 'Int_t' 1 - size "
"u 'TString' - 0 '\"\"' separator g - 'Bool_t' 0 'kTRUE' tolower", (char*)NULL, (void*) G__func2void( (TString* (*)(TString, Int_t&, TString, Bool_t))(&HTool::parseString) ), 0);
   G__memfunc_setup("findString",1048,G__UtilDict_720_0_110, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'TString' - 0 - classes i - 'Int_t' 0 - size "
"u 'TString' - 0 - name", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString*, Int_t, TString))(&HTool::findString) ), 0);
   G__memfunc_setup("readHistsDescription",2091,G__UtilDict_720_0_111, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"u 'TString' - 0 - file U 'TObjArray' - 0 - myhists "
"U 'TString' - 0 '0' classes i - 'Int_t' 0 '0' sizeclass", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TObjArray*, TString*, Int_t))(&HTool::readHistsDescription) ), 0);
   G__memfunc_setup("makeHists",937,G__UtilDict_720_0_112, 103, -1, G__defined_typename("Bool_t"), 0, 4, 3, 1, 0, 
"u 'TString' - 0 '\"\"' infile i - 'Int_t' 0 '0' evs "
"u 'TString' - 0 '\"\"' histdescriptionfile u 'TString' - 0 '\"\"' listofClasses", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, Int_t, TString, TString))(&HTool::makeHists) ), 0);
   G__memfunc_setup("drawHistComp",1237,G__UtilDict_720_0_113, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"u 'TString' - 0 '\"\"' nameinp1 u 'TString' - 0 '\"\"' nameinp2 "
"u 'TString' - 0 '\"\"' name U 'TCanvas' - 0 '0' comp "
"i - 'Int_t' 0 '1' padn", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString, TString, TCanvas*, Int_t))(&HTool::drawHistComp) ), 0);
   G__memfunc_setup("compHistFiles",1338,G__UtilDict_720_0_114, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'TString' - 0 '\"\"' nameinp1 u 'TString' - 0 '\"\"' nameinp2 "
"u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString, TString))(&HTool::compHistFiles) ), 0);
   G__memfunc_setup("printHistInfo",1361,G__UtilDict_720_0_115, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'TH1' - 0 '0' h1", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH1*))(&HTool::printHistInfo) ), 0);
   G__memfunc_setup("printCompHistInfo",1760,G__UtilDict_720_0_116, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'TH1' - 0 '0' h1 U 'TH1' - 0 '0' h2 "
"i - 'Int_t' 0 '0' detail", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH1*, TH1*, Int_t))(&HTool::printCompHistInfo) ), 0);
   G__memfunc_setup("writeHistInfo",1359,G__UtilDict_720_0_117, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TH1' - 0 '0' h1 E - - 0 '0' anaout", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TH1*, FILE*))(&HTool::writeHistInfo) ), 0);
   G__memfunc_setup("Class",502,G__UtilDict_720_0_118, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_720_0_119, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_720_0_120, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_720_0_121, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_720_0_125, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_720_0_126, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_720_0_127, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_720_0_128, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_720_0_129, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTool::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTool", 486, G__UtilDict_720_0_130, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HTool), -1, 0, 1, 1, 1, 0, "u 'HTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTool", 612, G__UtilDict_720_0_131, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_720_0_132, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HTool), -1, 1, 1, 1, 1, 0, "u 'HTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHHistMap(void) {
   /* HHistMap */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HHistMap));
   G__memfunc_setup("getLabels",915,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 2, 1, 4, 0, 
"u 'TString' - 10 - name u 'vector<TString,allocator<TString> >' 'vector<TString>' 1 - labels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HHistMap",766,G__UtilDict_731_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HHistMap), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' outputname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeleteObjects",1641,G__UtilDict_731_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - del", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeleteObjects",1629,G__UtilDict_731_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentMap",1357,G__UtilDict_731_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSilentFail",1335,G__UtilDict_731_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - doit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMap",606,G__UtilDict_731_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR), G__defined_typename("map<TString,TObjArray>"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFile",704,G__UtilDict_731_0_8, 85, G__get_linked_tagnum(&G__UtilDictLN_TFile), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_731_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printMap",843,G__UtilDict_731_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCanvasMap",1447,G__UtilDict_731_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCutMap",1143,G__UtilDict_731_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printFitMap",1134,G__UtilDict_731_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParameterMap",1772,G__UtilDict_731_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printMacroMap",1341,G__UtilDict_731_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHistContent",1436,G__UtilDict_731_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HHistMap' - 1 - hM2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFile",681,G__UtilDict_731_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - infile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFiles",796,G__UtilDict_731_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFilesList",1208,G__UtilDict_731_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - filelist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMultFiles",1214,G__UtilDict_731_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - commaSeparatedList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHistMap",991,G__UtilDict_731_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 '\"\"' input u 'TString' - 0 '\"\"' output", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString))(&HHistMap::addHistMap) ), 0);
   G__memfunc_setup("addHist",705,G__UtilDict_731_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TH1' - 0 - h u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHist",705,G__UtilDict_731_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 16, 1, 1, 0, 
"u 'TString' - 0 '\"\"' Type u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"\"' title i - 'Int_t' 0 '0' nbinx "
"d - 'Double_t' 0 '0' x1 d - 'Double_t' 0 '0' x2 "
"i - 'Int_t' 0 '0' nbiny d - 'Double_t' 0 '0' y1 "
"d - 'Double_t' 0 '0' y2 i - 'Int_t' 0 '0' nbinz "
"d - 'Double_t' 0 '0' z1 d - 'Double_t' 0 '0' z2 "
"u 'TString' - 0 '\"\"' xtitle u 'TString' - 0 '\"\"' ytitle "
"u 'TString' - 0 '\"\"' ztitle u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHistN",783,G__UtilDict_731_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 13, 1, 1, 0, 
"u 'TString' - 0 '\"\"' Type u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"\"' title i - 'Int_t' 0 '0' nbinx "
"D - 'Double_t' 0 '0' x i - 'Int_t' 0 '0' nbiny "
"D - 'Double_t' 0 '0' y i - 'Int_t' 0 '0' nbinz "
"D - 'Double_t' 0 '0' z u 'TString' - 0 '\"\"' xtitle "
"u 'TString' - 0 '\"\"' ytitle u 'TString' - 0 '\"\"' ztitle "
"u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeHist",1062,G__UtilDict_731_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHist",1036,G__UtilDict_731_0_26, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 15, 1, 1, 0, 
"u 'TString' - 0 '\"\"' Type u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"\"' title i - 'Int_t' 0 '0' nbinx "
"d - 'Double_t' 0 '0.' x1 d - 'Double_t' 0 '0.' x2 "
"i - 'Int_t' 0 '0' nbiny d - 'Double_t' 0 '0.' y1 "
"d - 'Double_t' 0 '0.' y2 i - 'Int_t' 0 '0' nbinz "
"d - 'Double_t' 0 '0.' z1 d - 'Double_t' 0 '0.' z2 "
"u 'TString' - 0 '\"\"' xtitle u 'TString' - 0 '\"\"' ytitle "
"u 'TString' - 0 '\"\"' ztitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createHistN",1114,G__UtilDict_731_0_27, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 12, 1, 1, 0, 
"u 'TString' - 0 '\"\"' Type u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"\"' title i - 'Int_t' 0 '0' nbinx "
"D - 'Double_t' 0 '0' x i - 'Int_t' 0 '0' nbiny "
"D - 'Double_t' 0 '0' y i - 'Int_t' 0 '0' nbinz "
"D - 'Double_t' 0 '0' z u 'TString' - 0 '\"\"' xtitle "
"u 'TString' - 0 '\"\"' ytitle u 'TString' - 0 '\"\"' ztitle", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHistArray",1216,G__UtilDict_731_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 10, 1, 1, 0, 
"U 'TH1' - 2 - h u 'TString' - 0 - name "
"u 'TString' - 0 '\"\"' mask u 'TString' - 0 '\"\"' title "
"u 'TString' - 0 '\"\"' dir i - 'Int_t' 0 '-1' i1max "
"i - 'Int_t' 0 '-1' i2max i - 'Int_t' 0 '-1' i3max "
"i - 'Int_t' 0 '-1' i4max i - 'Int_t' 0 '-1' i5max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHistArray",1216,G__UtilDict_731_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 27, 1, 1, 0, 
"u 'TString' - 0 '\"\"' Type u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"\"' mask u 'TString' - 0 '\"\"' title "
"i - 'Int_t' 0 '0' nbinx d - 'Double_t' 0 '0.' x1 "
"d - 'Double_t' 0 '0.' x2 i - 'Int_t' 0 '0' nbiny "
"d - 'Double_t' 0 '0.' y1 d - 'Double_t' 0 '0.' y2 "
"i - 'Int_t' 0 '0' nbinz d - 'Double_t' 0 '0.' z1 "
"d - 'Double_t' 0 '0.' z2 u 'TString' - 0 '\"\"' xtitle "
"u 'TString' - 0 '\"\"' ytitle u 'TString' - 0 '\"\"' ztitle "
"u 'TString' - 0 '\"\"' dir i - 'Int_t' 0 '-1' i1max "
"i - 'Int_t' 0 '-1' i2max i - 'Int_t' 0 '-1' i3max "
"i - 'Int_t' 0 '-1' i4max i - 'Int_t' 0 '-1' i5max "
"u 'TString' - 0 '\"\"' n1 u 'TString' - 0 '\"\"' n2 "
"u 'TString' - 0 '\"\"' n3 u 'TString' - 0 '\"\"' n4 "
"u 'TString' - 0 '\"\"' n5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHistArrayN",1294,G__UtilDict_731_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 24, 1, 1, 0, 
"u 'TString' - 0 '\"\"' Type u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"\"' mask u 'TString' - 0 '\"\"' title "
"i - 'Int_t' 0 '0' nbinx D - 'Double_t' 0 '0' x "
"i - 'Int_t' 0 '0' nbiny D - 'Double_t' 0 '0' y "
"i - 'Int_t' 0 '0' nbinz D - 'Double_t' 0 '0' z "
"u 'TString' - 0 '\"\"' xtitle u 'TString' - 0 '\"\"' ytitle "
"u 'TString' - 0 '\"\"' ztitle u 'TString' - 0 '\"\"' dir "
"i - 'Int_t' 0 '-1' i1max i - 'Int_t' 0 '-1' i2max "
"i - 'Int_t' 0 '-1' i3max i - 'Int_t' 0 '-1' i4max "
"i - 'Int_t' 0 '-1' i5max u 'TString' - 0 '\"\"' n1 "
"u 'TString' - 0 '\"\"' n2 u 'TString' - 0 '\"\"' n3 "
"u 'TString' - 0 '\"\"' n4 u 'TString' - 0 '\"\"' n5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__UtilDict_731_0_31, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 '0' i1 "
"i - 'Int_t' 0 '-1' i2 i - 'Int_t' 0 '-1' i3 "
"i - 'Int_t' 0 '-1' i4 i - 'Int_t' 0 '-1' i5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get2",370,G__UtilDict_731_0_32, 85, G__get_linked_tagnum(&G__UtilDictLN_TH2), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 '0' i1 "
"i - 'Int_t' 0 '-1' i2 i - 'Int_t' 0 '-1' i3 "
"i - 'Int_t' 0 '-1' i4 i - 'Int_t' 0 '-1' i5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get3",371,G__UtilDict_731_0_33, 85, G__get_linked_tagnum(&G__UtilDictLN_TH3), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 '0' i1 "
"i - 'Int_t' 0 '-1' i2 i - 'Int_t' 0 '-1' i3 "
"i - 'Int_t' 0 '-1' i4 i - 'Int_t' 0 '-1' i5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingHistLabels",2134,G__UtilDict_731_0_34, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 3, 1, 1, 0, 
"u 'TString' - 0 - expression u 'TString' - 0 '\"\"' type "
"i - 'Int_t' 0 '-1' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingHists",1654,G__UtilDict_731_0_35, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR), G__defined_typename("vector<TH1*>"), 0, 3, 1, 1, 0, 
"u 'TString' - 0 - expression u 'TString' - 0 '\"\"' type "
"i - 'Int_t' 0 '-1' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetAllHists",1351,G__UtilDict_731_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"ICES\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("disconnectAllHists",1870,G__UtilDict_731_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cloneArray",1040,G__UtilDict_731_0_38, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'TString' - 0 - source u 'TString' - 0 '\"\"' name "
"u 'TString' - 0 '\"\"' mask u 'TString' - 0 '\"\"' title "
"u 'TString' - 0 '\"\"' dir g - 'Bool_t' 0 'kFALSE' reset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetArray",1058,G__UtilDict_731_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetArray",1058,G__UtilDict_731_0_40, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TObjArray' - 0 - array u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, TString))(&HHistMap::resetArray) ), 0);
   G__memfunc_setup("scaleArray",1031,G__UtilDict_731_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name d - 'Double_t' 0 - fact", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scaleArray",1031,G__UtilDict_731_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TObjArray' - 0 - array d - 'Double_t' 0 - fact", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, Double_t))(&HHistMap::scaleArray) ), 0);
   G__memfunc_setup("sumW2Array",989,G__UtilDict_731_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sumW2Array",989,G__UtilDict_731_0_44, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "U 'TObjArray' - 0 - array", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*))(&HHistMap::sumW2Array) ), 0);
   G__memfunc_setup("divideArray",1140,G__UtilDict_731_0_45, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name1 u 'TString' - 0 - name2 "
"d - 'Double_t' 0 '1.' fact1 d - 'Double_t' 0 '1.' fact2 "
"u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("divideArray",1140,G__UtilDict_731_0_46, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"U 'TObjArray' - 0 - array1 U 'TObjArray' - 0 - array2 "
"d - 'Double_t' 0 '1.' fact1 d - 'Double_t' 0 '1.' fact2 "
"u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, TObjArray*, Double_t, Double_t, TString))(&HHistMap::divideArray) ), 0);
   G__memfunc_setup("divideArray",1140,G__UtilDict_731_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name0 u 'TString' - 0 - name1 "
"u 'TString' - 0 - name2 d - 'Double_t' 0 '1.' fact1 "
"d - 'Double_t' 0 '1.' fact2 u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("divideArray",1140,G__UtilDict_731_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 6, 3, 1, 0, 
"U 'TObjArray' - 0 - array0 U 'TObjArray' - 0 - array1 "
"U 'TObjArray' - 0 - array2 d - 'Double_t' 0 '1.' fact1 "
"d - 'Double_t' 0 '1.' fact2 u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, TObjArray*, TObjArray*, Double_t, Double_t, TString))(&HHistMap::divideArray) ), 0);
   G__memfunc_setup("multiplyArray",1407,G__UtilDict_731_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name1 u 'TString' - 0 - name2 "
"d - 'Double_t' 0 '1.' fact1 d - 'Double_t' 0 '1.' fact2 "
"u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiplyArray",1407,G__UtilDict_731_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"U 'TObjArray' - 0 - array1 U 'TObjArray' - 0 - array2 "
"d - 'Double_t' 0 '1.' fact1 d - 'Double_t' 0 '1.' fact2 "
"u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, TObjArray*, Double_t, Double_t, TString))(&HHistMap::multiplyArray) ), 0);
   G__memfunc_setup("multiplyArray",1407,G__UtilDict_731_0_51, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name0 u 'TString' - 0 - name1 "
"u 'TString' - 0 - name2 d - 'Double_t' 0 '1.' fact1 "
"d - 'Double_t' 0 '1.' fact2 u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiplyArray",1407,G__UtilDict_731_0_52, 103, -1, G__defined_typename("Bool_t"), 0, 6, 3, 1, 0, 
"U 'TObjArray' - 0 - array0 U 'TObjArray' - 0 - array1 "
"U 'TObjArray' - 0 - array2 d - 'Double_t' 0 '1.' fact1 "
"d - 'Double_t' 0 '1.' fact2 u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, TObjArray*, TObjArray*, Double_t, Double_t, TString))(&HHistMap::multiplyArray) ), 0);
   G__memfunc_setup("addArray",808,G__UtilDict_731_0_53, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name1 u 'TString' - 0 - name2 "
"d - 'Double_t' 0 '1.' fact1 d - 'Double_t' 0 '1.' fact2 "
"u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addArray",808,G__UtilDict_731_0_54, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"U 'TObjArray' - 0 - array1 U 'TObjArray' - 0 - array2 "
"d - 'Double_t' 0 '1.' fact1 d - 'Double_t' 0 '1.' fact2 "
"u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, TObjArray*, Double_t, Double_t, TString))(&HHistMap::addArray) ), 0);
   G__memfunc_setup("addArray",808,G__UtilDict_731_0_55, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name0 u 'TString' - 0 - name1 "
"u 'TString' - 0 - name2 d - 'Double_t' 0 '1.' fact1 "
"d - 'Double_t' 0 '1.' fact2 u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addArray",808,G__UtilDict_731_0_56, 103, -1, G__defined_typename("Bool_t"), 0, 6, 3, 1, 0, 
"U 'TObjArray' - 0 - array0 U 'TObjArray' - 0 - array1 "
"U 'TObjArray' - 0 - array2 d - 'Double_t' 0 '1.' fact1 "
"d - 'Double_t' 0 '1.' fact2 u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, TObjArray*, TObjArray*, Double_t, Double_t, TString))(&HHistMap::addArray) ), 0);
   G__memfunc_setup("functionArray",1381,G__UtilDict_731_0_57, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name 1 - 'Bool_t (*)(TH1*,TString name,HHistMap* map, TObjArray* params)' 0 - function "
"U 'TObjArray' - 0 - params", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("functionArray",1381,G__UtilDict_731_0_58, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"U 'TObjArray' - 0 - array 1 - 'Bool_t (*)(TH1*,TObjArray* array,TObjArray* params)' 0 - function "
"U 'TObjArray' - 0 - params", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TObjArray*, Bool_t (*)(TH1*,TObjArray* array,TObjArray* params), TObjArray*))(&HHistMap::functionArray) ), 0);
   G__memfunc_setup("getHistArray",1239,G__UtilDict_731_0_59, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDimArray",1113,G__UtilDict_731_0_60, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayI), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDimAddress",1312,G__UtilDict_731_0_61, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayI), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name U 'TH1' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDimAddress",1312,G__UtilDict_731_0_62, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayI), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - histname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__UtilDict_731_0_63, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name U 'TH1' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__UtilDict_731_0_64, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 - histname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDir",607,G__UtilDict_731_0_65, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTitle",834,G__UtilDict_731_0_66, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMask",716,G__UtilDict_731_0_67, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCanvas",901,G__UtilDict_731_0_68, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 1, 0, 
"U 'TCanvas' - 0 - h i - 'Int_t' 0 '1' nx "
"i - 'Int_t' 0 '0' ny i - 'Int_t' 0 '500' xpix "
"i - 'Int_t' 0 '500' ypix u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCanvas",901,G__UtilDict_731_0_69, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 1, 0, 
"u 'TString' - 0 '\"\"' name u 'TString' - 0 '\"\"' title "
"i - 'Int_t' 0 '1' nx i - 'Int_t' 0 '0' ny "
"i - 'Int_t' 0 '500' xpix i - 'Int_t' 0 '500' ypix "
"u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeCanvas",1258,G__UtilDict_731_0_70, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCanvasArray",1412,G__UtilDict_731_0_71, 103, -1, G__defined_typename("Bool_t"), 0, 14, 1, 1, 0, 
"U 'TCanvas' - 2 - c u 'TString' - 0 - name "
"u 'TString' - 0 '\"\"' mask u 'TString' - 0 '\"\"' title "
"i - 'Int_t' 0 '1' nx i - 'Int_t' 0 '0' ny "
"i - 'Int_t' 0 '500' xpix i - 'Int_t' 0 '500' ypix "
"u 'TString' - 0 '\"\"' dir i - 'Int_t' 0 '-1' i1max "
"i - 'Int_t' 0 '-1' i2max i - 'Int_t' 0 '-1' i3max "
"i - 'Int_t' 0 '-1' i4max i - 'Int_t' 0 '-1' i5max", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCanvasArray",1412,G__UtilDict_731_0_72, 103, -1, G__defined_typename("Bool_t"), 0, 18, 1, 1, 0, 
"u 'TString' - 0 '\"\"' name u 'TString' - 0 '\"\"' mask "
"u 'TString' - 0 '\"\"' title i - 'Int_t' 0 '1' nx "
"i - 'Int_t' 0 '0' ny i - 'Int_t' 0 '500' xpix "
"i - 'Int_t' 0 '500' ypix u 'TString' - 0 '\"\"' dir "
"i - 'Int_t' 0 '-1' i1max i - 'Int_t' 0 '-1' i2max "
"i - 'Int_t' 0 '-1' i3max i - 'Int_t' 0 '-1' i4max "
"i - 'Int_t' 0 '-1' i5max u 'TString' - 0 '\"\"' n1 "
"u 'TString' - 0 '\"\"' n2 u 'TString' - 0 '\"\"' n3 "
"u 'TString' - 0 '\"\"' n4 u 'TString' - 0 '\"\"' n5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvas",924,G__UtilDict_731_0_73, 85, G__get_linked_tagnum(&G__UtilDictLN_TCanvas), -1, 0, 6, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 '0' i1 "
"i - 'Int_t' 0 '-1' i2 i - 'Int_t' 0 '-1' i3 "
"i - 'Int_t' 0 '-1' i4 i - 'Int_t' 0 '-1' i5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasArray",1435,G__UtilDict_731_0_74, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasDimArray",1717,G__UtilDict_731_0_75, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayI), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasDir",1211,G__UtilDict_731_0_76, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasTitle",1438,G__UtilDict_731_0_77, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasMask",1320,G__UtilDict_731_0_78, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCanvasPropertiesArray",2504,G__UtilDict_731_0_79, 85, G__get_linked_tagnum(&G__UtilDictLN_TArrayI), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingCanvasLabels",2330,G__UtilDict_731_0_80, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - expression i - 'Int_t' 0 '-1' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingCanvas",1735,G__UtilDict_731_0_81, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR), G__defined_typename("vector<TCanvas*>"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - expression i - 'Int_t' 0 '-1' dim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCut",597,G__UtilDict_731_0_82, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 '0' n "
"D - 'Double_t' 0 '0' x D - 'Double_t' 0 '0' y "
"u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCut",597,G__UtilDict_731_0_83, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TCutG' - 0 - cut u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeCut",954,G__UtilDict_731_0_84, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kTRUE' removeObject", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCut",620,G__UtilDict_731_0_85, 85, G__get_linked_tagnum(&G__UtilDictLN_TCutG), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCutDir",907,G__UtilDict_731_0_86, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInsideCut",1124,G__UtilDict_731_0_87, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TString' - 0 - name d - 'Double_t' 0 - x "
"d - 'Double_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingCutLabels",2026,G__UtilDict_731_0_88, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingCuts",1546,G__UtilDict_731_0_89, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETCutGmUcOallocatorlETCutGmUgRsPgR), G__defined_typename("vector<TCutG*>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFit",588,G__UtilDict_731_0_90, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TF1' - 0 - cut u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeFit",945,G__UtilDict_731_0_91, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kTRUE' removeObject", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFit",611,G__UtilDict_731_0_92, 85, G__get_linked_tagnum(&G__UtilDictLN_TF1), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFitDir",898,G__UtilDict_731_0_93, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingFitLabels",2017,G__UtilDict_731_0_94, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingFits",1537,G__UtilDict_731_0_95, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR), G__defined_typename("vector<TF1*>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPar",588,G__UtilDict_731_0_96, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'TObject' - 0 - par u 'TString' - 0 - name "
"u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removePar",945,G__UtilDict_731_0_97, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kTRUE' removeObject", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPar",611,G__UtilDict_731_0_98, 85, G__get_linked_tagnum(&G__UtilDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParDir",898,G__UtilDict_731_0_99, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingParLabels",2017,G__UtilDict_731_0_100, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingPars",1537,G__UtilDict_731_0_101, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR), G__defined_typename("vector<TObject*>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMacro",795,G__UtilDict_731_0_102, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'TMacro' - 0 - par u 'TString' - 0 - name "
"u 'TString' - 0 '\"\"' dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeMacro",1152,G__UtilDict_731_0_103, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kTRUE' removeObject", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMacro",818,G__UtilDict_731_0_104, 85, G__get_linked_tagnum(&G__UtilDictLN_TMacro), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMacroDir",1105,G__UtilDict_731_0_105, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingMacroLabels",2224,G__UtilDict_731_0_106, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR), G__defined_typename("vector<TString>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatchingMacros",1744,G__UtilDict_731_0_107, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlETMacromUcOallocatorlETMacromUgRsPgR), G__defined_typename("vector<TMacro*>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutputFile",1373,G__UtilDict_731_0_108, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHists",1078,G__UtilDict_731_0_109, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_731_0_110, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HHistMap::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_731_0_111, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHistMap::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_731_0_112, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HHistMap::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_731_0_113, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HHistMap::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_731_0_117, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_731_0_118, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHistMap::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_731_0_119, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HHistMap::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_731_0_120, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHistMap::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_731_0_121, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HHistMap::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HHistMap", 766, G__UtilDict_731_0_122, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HHistMap), -1, 0, 1, 1, 1, 0, "u 'HHistMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HHistMap", 892, G__UtilDict_731_0_123, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_731_0_124, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HHistMap), -1, 1, 1, 1, 1, 0, "u 'HHistMap' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHFlex(void) {
   /* HFlex */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlex));
   G__memfunc_setup("HFlex",471,G__UtilDict_877_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HFlex), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addVars",709,G__UtilDict_877_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"\"' varsI u 'TString' - 0 '\"\"' varsD", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getI",393,G__UtilDict_877_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getD",388,G__UtilDict_877_0_4, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - var", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setI",405,G__UtilDict_877_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - var i - 'Int_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setD",400,G__UtilDict_877_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - var d - 'Double_t' 0 '0' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_877_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"\"' varlist i - 'Int_t' 0 '15' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_877_0_8, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HFlex::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_877_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFlex::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_877_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HFlex::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_877_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HFlex::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_877_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_877_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFlex::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_877_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HFlex::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_877_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFlex::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_877_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HFlex::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HFlex", 471, G__UtilDict_877_0_20, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HFlex), -1, 0, 1, 1, 1, 0, "u 'HFlex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HFlex", 597, G__UtilDict_877_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_877_0_22, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HFlex), -1, 1, 1, 1, 1, 0, "u 'HFlex' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHFlexFiller(void) {
   /* HFlexFiller */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller));
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HFlexFiller",1077,G__UtilDict_894_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HFlexFiller",1077,G__UtilDict_894_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HFlexFiller), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setUserFill",1138,G__UtilDict_894_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"1 - 'Int_t (*)(HHistMap*,TObjArray*)' 0 - function U 'HHistMap' - 0 '0' histmap "
"U 'TObjArray' - 0 '0' pars g - 'Bool_t' 0 'kTRUE' makeCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_894_0_8, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HFlexFiller::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_894_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFlexFiller::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_894_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HFlexFiller::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_894_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HFlexFiller::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_894_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_894_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFlexFiller::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_894_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HFlexFiller::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_894_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HFlexFiller::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_894_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HFlexFiller::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HFlexFiller", 1203, G__UtilDict_894_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPhysicsConstants(void) {
   /* HPhysicsConstants */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants));
   G__memfunc_setup("pid",317,G__UtilDict_897_0_1, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - pidName", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*))(&HPhysicsConstants::pid) ), 0);
   G__memfunc_setup("pid",317,G__UtilDict_897_0_2, 67, -1, G__defined_typename("Char_t"), 0, 1, 3, 1, 1, "s - 'Short_t' 0 - pid", (char*)NULL, (void*) G__func2void( (const Char_t* (*)(Short_t))(&HPhysicsConstants::pid) ), 0);
   G__memfunc_setup("charge",618,G__UtilDict_897_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Int_t))(&HPhysicsConstants::charge) ), 0);
   G__memfunc_setup("charge",618,G__UtilDict_897_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*))(&HPhysicsConstants::charge) ), 0);
   G__memfunc_setup("leptonCharge",1244,G__UtilDict_897_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Int_t))(&HPhysicsConstants::leptonCharge) ), 0);
   G__memfunc_setup("leptonCharge",1244,G__UtilDict_897_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*))(&HPhysicsConstants::leptonCharge) ), 0);
   G__memfunc_setup("baryonCharge",1237,G__UtilDict_897_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Int_t))(&HPhysicsConstants::baryonCharge) ), 0);
   G__memfunc_setup("baryonCharge",1237,G__UtilDict_897_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*))(&HPhysicsConstants::baryonCharge) ), 0);
   G__memfunc_setup("strangeness",1197,G__UtilDict_897_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Int_t))(&HPhysicsConstants::strangeness) ), 0);
   G__memfunc_setup("strangeness",1197,G__UtilDict_897_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*))(&HPhysicsConstants::strangeness) ), 0);
   G__memfunc_setup("mass",436,G__UtilDict_897_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 10 - id", (char*)NULL, (void*) G__func2void( (Float_t (*)(const Int_t))(&HPhysicsConstants::mass) ), 0);
   G__memfunc_setup("mass",436,G__UtilDict_897_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - id", (char*)NULL, (void*) G__func2void( (Float_t (*)(const Char_t*))(&HPhysicsConstants::mass) ), 0);
   G__memfunc_setup("lineColor",935,G__UtilDict_897_0_13, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Int_t))(&HPhysicsConstants::lineColor) ), 0);
   G__memfunc_setup("lineColor",935,G__UtilDict_897_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*))(&HPhysicsConstants::lineColor) ), 0);
   G__memfunc_setup("lineStyle",953,G__UtilDict_897_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Int_t))(&HPhysicsConstants::lineStyle) ), 0);
   G__memfunc_setup("lineStyle",953,G__UtilDict_897_0_16, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "C - 'Char_t' 10 - id", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t*))(&HPhysicsConstants::lineStyle) ), 0);
   G__memfunc_setup("isFake",595,G__UtilDict_897_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iId", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t))(&HPhysicsConstants::isFake) ), 0);
   G__memfunc_setup("isArtificial",1236,G__UtilDict_897_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - iId", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t))(&HPhysicsConstants::isArtificial) ), 0);
   G__memfunc_setup("geantProcess",1262,G__UtilDict_897_0_19, 67, -1, G__defined_typename("Char_t"), 0, 1, 3, 1, 1, "i - 'Int_t' 0 - mech", (char*)NULL, (void*) G__func2void( (const Char_t* (*)(Int_t))(&HPhysicsConstants::geantProcess) ), 0);
   G__memfunc_setup("addParticle",1117,G__UtilDict_897_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 7, 3, 1, 0, 
"i - 'Int_t' 0 - id u 'TString' - 0 - name "
"d - 'Double_t' 0 - mass i - 'Int_t' 0 - chrg "
"i - 'Int_t' 0 - leptchrg i - 'Int_t' 0 - barychrg "
"i - 'Int_t' 0 - strange", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, TString, Double_t, Int_t, Int_t, Int_t, Int_t))(&HPhysicsConstants::addParticle) ), 0);
   G__memfunc_setup("addParticle",1117,G__UtilDict_897_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "u 'particleproperties' 'particleproperties' 0 - prop", (char*)NULL, (void*) G__func2void( (Bool_t (*)(particleproperties))(&HPhysicsConstants::addParticle) ), 0);
   G__memfunc_setup("removeParticle",1474,G__UtilDict_897_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t))(&HPhysicsConstants::removeParticle) ), 0);
   G__memfunc_setup("moveParticle",1259,G__UtilDict_897_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - id i - 'Int_t' 0 - newid", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Int_t))(&HPhysicsConstants::moveParticle) ), 0);
   G__memfunc_setup("cpParticle",1031,G__UtilDict_897_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"i - 'Int_t' 0 - id i - 'Int_t' 0 - newid "
"u 'TString' - 0 - newName", (char*)NULL, (void*) G__func2void( (Bool_t (*)(Int_t, Int_t, TString))(&HPhysicsConstants::cpParticle) ), 0);
   G__memfunc_setup("clearParticles",1454,G__UtilDict_897_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPhysicsConstants::clearParticles) ), 0);
   G__memfunc_setup("createParticle",1448,G__UtilDict_897_0_26, 117, G__get_linked_tagnum(&G__UtilDictLN_particleproperties), G__defined_typename("particleproperties"), 0, 7, 3, 1, 0, 
"i - 'Int_t' 0 - id u 'TString' - 0 - name "
"d - 'Double_t' 0 - mass i - 'Int_t' 0 - chrg "
"i - 'Int_t' 0 - leptchrg i - 'Int_t' 0 - barychrg "
"i - 'Int_t' 0 - strange", (char*)NULL, (void*) G__func2void( (particleproperties (*)(Int_t, TString, Double_t, Int_t, Int_t, Int_t, Int_t))(&HPhysicsConstants::createParticle) ), 0);
   G__memfunc_setup("setGraphic",1034,G__UtilDict_897_0_27, 121, -1, -1, 0, 3, 3, 1, 0, 
"s - 'Short_t' 0 - pid i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - style", (char*)NULL, (void*) G__func2void( (void (*)(Short_t, Int_t, Int_t))(&HPhysicsConstants::setGraphic) ), 0);
   G__memfunc_setup("setDefaultGraphic",1743,G__UtilDict_897_0_28, 121, -1, -1, 0, 2, 3, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - style", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t))(&HPhysicsConstants::setDefaultGraphic) ), 0);
   G__memfunc_setup("initParticleID",1397,G__UtilDict_897_0_29, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR), G__defined_typename("map<Int_t,particleproperties>"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (map<Int_t,particleproperties> (*)())(&HPhysicsConstants::initParticleID) ), 0);
   G__memfunc_setup("initParticleName",1641,G__UtilDict_897_0_30, 117, G__get_linked_tagnum(&G__UtilDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR), G__defined_typename("map<TString,particleproperties>"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (map<TString,particleproperties> (*)())(&HPhysicsConstants::initParticleName) ), 0);
   G__memfunc_setup("initGeantProcess",1666,G__UtilDict_897_0_31, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR), G__defined_typename("map<Int_t,TString>"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (map<Int_t,TString> (*)())(&HPhysicsConstants::initGeantProcess) ), 0);
   G__memfunc_setup("loadGeantIons",1320,G__UtilDict_897_0_32, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPhysicsConstants::loadGeantIons) ), 0);
   G__memfunc_setup("print",557,G__UtilDict_897_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPhysicsConstants::print) ), 0);
   G__memfunc_setup("artificialPos",1354,G__UtilDict_897_0_34, 115, -1, G__defined_typename("Short_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Short_t (*)())(&HPhysicsConstants::artificialPos) ), 0);
   G__memfunc_setup("artificialNeg",1330,G__UtilDict_897_0_35, 115, -1, G__defined_typename("Short_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Short_t (*)())(&HPhysicsConstants::artificialNeg) ), 0);
   G__memfunc_setup("fakePos",713,G__UtilDict_897_0_36, 115, -1, G__defined_typename("Short_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Short_t (*)())(&HPhysicsConstants::fakePos) ), 0);
   G__memfunc_setup("fakeNeg",689,G__UtilDict_897_0_37, 115, -1, G__defined_typename("Short_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Short_t (*)())(&HPhysicsConstants::fakeNeg) ), 0);
   G__memfunc_setup("Class",502,G__UtilDict_897_0_38, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPhysicsConstants::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_897_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPhysicsConstants::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_897_0_40, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPhysicsConstants::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_897_0_41, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPhysicsConstants::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_897_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_897_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPhysicsConstants::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_897_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPhysicsConstants::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_897_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPhysicsConstants::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_897_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPhysicsConstants::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HPhysicsConstants", 1768, G__UtilDict_897_0_50, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HPhysicsConstants", 1768, G__UtilDict_897_0_51, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants), -1, 0, 1, 1, 1, 0, "u 'HPhysicsConstants' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPhysicsConstants", 1894, G__UtilDict_897_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_897_0_53, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HPhysicsConstants), -1, 1, 1, 1, 1, 0, "u 'HPhysicsConstants' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHHistConverter(void) {
   /* HHistConverter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HHistConverter));
   G__memfunc_setup("HHistConverter",1432,G__UtilDict_919_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HHistConverter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printArray",1068,G__UtilDict_919_0_2, 121, -1, -1, 0, 5, 3, 1, 0, 
"u 'TArray' - 11 - dat i - 'Int_t' 0 '10' nvals "
"i - 'Int_t' 0 '0' width i - 'Int_t' 0 '-1' start "
"i - 'Int_t' 0 '-1' end", (char*)NULL, (void*) G__func2void( (void (*)(const TArray&, Int_t, Int_t, Int_t, Int_t))(&HHistConverter::printArray) ), 0);
   G__memfunc_setup("writeArray",1066,G__UtilDict_919_0_3, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'basic_ofstream<char,char_traits<char> >' 'ofstream' 1 - out u 'TString' - 0 - name "
"u 'TArray' - 11 - dat i - 'Int_t' 0 '10' nvals", (char*)NULL, (void*) G__func2void( (void (*)(ofstream&, TString, const TArray&, Int_t))(&HHistConverter::writeArray) ), 0);
   G__memfunc_setup("printArrayInfo",1464,G__UtilDict_919_0_4, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TArrayD' - 11 - linData u 'TString' - 0 - name "
"i - 'Int_t' 0 - nvals i - 'Int_t' 0 - width", (char*)NULL, (void*) G__func2void( (void (*)(const TArrayD&, TString, Int_t, Int_t))(&HHistConverter::printArrayInfo) ), 0);
   G__memfunc_setup("createHist",1036,G__UtilDict_919_0_5, 85, G__get_linked_tagnum(&G__UtilDictLN_TH1), -1, 0, 2, 3, 1, 0, 
"u 'TString' - 0 - name u 'TArrayD' - 11 - linData", (char*)NULL, (void*) G__func2void( (TH1* (*)(TString, const TArrayD&))(&HHistConverter::createHist) ), 0);
   G__memfunc_setup("fillArray",934,G__UtilDict_919_0_6, 121, -1, -1, 0, 6, 3, 1, 0, 
"U 'TH1' - 10 - h u 'TArrayD' - 1 - linData "
"u 'TString' - 0 '\"\"' name i - 'Int_t' 0 '10' nvals "
"i - 'Int_t' 0 '0' width g - 'Bool_t' 0 'kTRUE' print", (char*)NULL, (void*) G__func2void( (void (*)(const TH1*, TArrayD&, TString, Int_t, Int_t, Bool_t))(&HHistConverter::fillArray) ), 0);
   G__memfunc_setup("Class",502,G__UtilDict_919_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HHistConverter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_919_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHistConverter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_919_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HHistConverter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_919_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HHistConverter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_919_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_919_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHistConverter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_919_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HHistConverter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_919_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHistConverter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_919_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HHistConverter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HHistConverter", 1432, G__UtilDict_919_0_19, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HHistConverter), -1, 0, 1, 1, 1, 0, "u 'HHistConverter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HHistConverter", 1558, G__UtilDict_919_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_919_0_21, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HHistConverter), -1, 1, 1, 1, 1, 0, "u 'HHistConverter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHBitMan(void) {
   /* HBitMan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HBitMan));
   G__memfunc_setup("HBitMan",643,G__UtilDict_920_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HBitMan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printBits",959,G__UtilDict_920_0_2, 121, -1, -1, 0, 1, 3, 1, 0, "h - 'UInt_t' 0 - data", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t))(&HBitMan::printBits) ), 0);
   G__memfunc_setup("setBit",619,G__UtilDict_920_0_3, 121, -1, -1, 0, 2, 3, 1, 0, 
"h - 'UInt_t' 1 - data i - 'Int_t' 0 - bit", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t&, Int_t))(&HBitMan::setBit) ), 0);
   G__memfunc_setup("unsetBit",846,G__UtilDict_920_0_4, 121, -1, -1, 0, 2, 3, 1, 0, 
"h - 'UInt_t' 1 - data i - 'Int_t' 0 - bit", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t&, Int_t))(&HBitMan::unsetBit) ), 0);
   G__memfunc_setup("getBit",607,G__UtilDict_920_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'UInt_t' 1 - data i - 'Int_t' 0 - bit", (char*)NULL, (void*) G__func2void( (Bool_t (*)(UInt_t&, Int_t))(&HBitMan::getBit) ), 0);
   G__memfunc_setup("setWord",744,G__UtilDict_920_0_6, 121, -1, -1, 0, 5, 3, 1, 0, 
"h - 'UInt_t' 1 - data i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - width i - 'Int_t' 0 - val "
"g - 'Bool_t' 0 'kFALSE' sign", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t&, Int_t, Int_t, Int_t, Bool_t))(&HBitMan::setWord) ), 0);
   G__memfunc_setup("unsetWord",971,G__UtilDict_920_0_7, 121, -1, -1, 0, 3, 3, 1, 0, 
"h - 'UInt_t' 1 - data i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - width", (char*)NULL, (void*) G__func2void( (void (*)(UInt_t&, Int_t, Int_t))(&HBitMan::unsetWord) ), 0);
   G__memfunc_setup("getWord",732,G__UtilDict_920_0_8, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"h - 'UInt_t' 1 - data i - 'Int_t' 0 - num "
"i - 'Int_t' 0 - width g - 'Bool_t' 0 'kFALSE' sign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createWord",1040,G__UtilDict_920_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'TString' - 10 - name i - 'Int_t' 0 - width "
"g - 'Bool_t' 0 'kFALSE' sign", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__UtilDict_920_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWord",744,G__UtilDict_920_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"h - 'UInt_t' 1 - data u 'TString' - 10 - name "
"i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("unsetWord",971,G__UtilDict_920_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 1 - data u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWord",732,G__UtilDict_920_0_13, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 1 - data u 'TString' - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_920_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HBitMan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_920_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBitMan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_920_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HBitMan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_920_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HBitMan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_920_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_920_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBitMan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_920_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBitMan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_920_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBitMan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_920_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBitMan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HBitMan", 643, G__UtilDict_920_0_26, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HBitMan), -1, 0, 1, 1, 1, 0, "u 'HBitMan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HBitMan", 769, G__UtilDict_920_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_920_0_28, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HBitMan), -1, 1, 1, 1, 1, 0, "u 'HBitMan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSTLTool(void) {
   /* HSTLTool */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSTLTool));
   G__memfunc_setup("HSTLTool",729,G__UtilDict_933_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSTLTool), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_933_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSTLTool::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_933_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSTLTool::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_933_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSTLTool::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_933_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSTLTool::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_933_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_933_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSTLTool::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_933_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSTLTool::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_933_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSTLTool::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_933_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSTLTool::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSTLTool", 729, G__UtilDict_933_0_14, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSTLTool), -1, 0, 1, 1, 1, 0, "u 'HSTLTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSTLTool", 855, G__UtilDict_933_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_933_0_16, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSTLTool), -1, 1, 1, 1, 1, 0, "u 'HSTLTool' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHCategoryManager(void) {
   /* HCategoryManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager));
   G__memfunc_setup("HCategoryManager",1601,G__UtilDict_939_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCategory",1150,G__UtilDict_939_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_HCategory), -1, 0, 3, 3, 1, 0, 
"s - 'Short_t' 0 - num i - 'Int_t' 0 '0' warn "
"u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) G__func2void( (HCategory* (*)(Short_t, Int_t, TString))(&HCategoryManager::getCategory) ), 0);
   G__memfunc_setup("addCategory",1127,G__UtilDict_939_0_3, 85, G__get_linked_tagnum(&G__UtilDictLN_HCategory), -1, 0, 5, 3, 1, 0, 
"s - 'Short_t' 0 - num u 'TString' - 0 '\"\"' name "
"i - 'Int_t' 0 '1000' size u 'TString' - 0 '\"\"' partev "
"g - 'Bool_t' 0 'kFALSE' dynamicsize", (char*)NULL, (void*) G__func2void( (HCategory* (*)(Short_t, TString, Int_t, TString, Bool_t))(&HCategoryManager::addCategory) ), 0);
   G__memfunc_setup("Class",502,G__UtilDict_939_0_4, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HCategoryManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_939_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCategoryManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_939_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HCategoryManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_939_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HCategoryManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_939_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_939_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCategoryManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_939_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HCategoryManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_939_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HCategoryManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_939_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HCategoryManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HCategoryManager", 1601, G__UtilDict_939_0_16, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager), -1, 0, 1, 1, 1, 0, "u 'HCategoryManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HCategoryManager", 1727, G__UtilDict_939_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_939_0_18, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HCategoryManager), -1, 1, 1, 1, 1, 0, "u 'HCategoryManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSectorSelector(void) {
   /* HSectorSelector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector));
   G__memfunc_setup("HSectorSelector",1529,G__UtilDict_971_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaultVal",1332,G__UtilDict_971_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readInput",940,G__UtilDict_971_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"\"' infile g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFiles",897,G__UtilDict_971_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectors",1059,G__UtilDict_971_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - sectors u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printFile",941,G__UtilDict_971_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_971_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_971_0_8, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSectorSelector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_971_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSectorSelector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_971_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSectorSelector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_971_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSectorSelector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_971_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_971_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSectorSelector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_971_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSectorSelector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_971_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSectorSelector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_971_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSectorSelector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSectorSelector", 1529, G__UtilDict_971_0_20, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector), -1, 0, 1, 1, 1, 0, "u 'HSectorSelector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSectorSelector", 1655, G__UtilDict_971_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_971_0_22, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector), -1, 1, 1, 1, 1, 0, "u 'HSectorSelector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHLoop(void) {
   /* HLoop */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HLoop));
   G__memfunc_setup("setStatus",976,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 0 - catname i - 'Int_t' 0 - stat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCatName",962,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"u 'TString' - 0 - catname s - 'Short_t' 0 - catNum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HLoop",482,G__UtilDict_972_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HLoop), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' createHades", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentLoop",1481,G__UtilDict_972_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFile",681,G__UtilDict_972_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - infile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFiles",796,G__UtilDict_972_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - expression", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFilesList",1208,G__UtilDict_972_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - filelist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMultFiles",1214,G__UtilDict_972_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 - commaSeparatedList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSectorFileList",1832,G__UtilDict_972_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TString' - 0 - filename g - 'Bool_t' 0 'kFALSE' defaultVal "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorSelector",1777,G__UtilDict_972_0_10, 117, G__get_linked_tagnum(&G__UtilDictLN_HSectorSelector), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectors",1059,G__UtilDict_972_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "I - 'Int_t' 0 - sectors", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("goodSector",1049,G__UtilDict_972_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventHeader",1419,G__UtilDict_972_0_13, 85, G__get_linked_tagnum(&G__UtilDictLN_HEventHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantMedia",1295,G__UtilDict_972_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_HGeantMedia), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChain",803,G__UtilDict_972_0_15, 85, G__get_linked_tagnum(&G__UtilDictLN_TChain), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__UtilDict_972_0_16, 85, G__get_linked_tagnum(&G__UtilDictLN_TTree), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEntries",1050,G__UtilDict_972_0_17, 110, -1, G__defined_typename("Long64_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCategory",1150,G__UtilDict_972_0_18, 85, G__get_linked_tagnum(&G__UtilDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - catname g - 'Bool_t' 0 'kFALSE' silent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCategoryStatus",1794,G__UtilDict_972_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'TString' - 0 - catname g - 'Bool_t' 0 'kFALSE' silent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPartialEvent",1551,G__UtilDict_972_0_20, 85, G__get_linked_tagnum(&G__UtilDictLN_HPartialEvent), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - catname g - 'Bool_t' 0 'kFALSE' silent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantHeader",1400,G__UtilDict_972_0_21, 85, G__get_linked_tagnum(&G__UtilDictLN_HGeantHeader), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' silent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFromInputFile",1636,G__UtilDict_972_0_22, 85, G__get_linked_tagnum(&G__UtilDictLN_TObject), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSkippedEvent",1454,G__UtilDict_972_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNewFile",902,G__UtilDict_972_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInput",860,G__UtilDict_972_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' readCategories", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearCategories",1549,G__UtilDict_972_0_26, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextEvent",961,G__UtilDict_972_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iev", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefID",758,G__UtilDict_972_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printCategories",1587,G__UtilDict_972_0_29, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printChain",1040,G__UtilDict_972_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printBranchStatus",1791,G__UtilDict_972_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_972_0_32, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HLoop::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_972_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLoop::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_972_0_34, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HLoop::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_972_0_35, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HLoop::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_972_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_972_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLoop::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_972_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLoop::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_972_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HLoop::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_972_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HLoop::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HLoop", 482, G__UtilDict_972_0_44, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HLoop), -1, 0, 1, 1, 1, 0, "u 'HLoop' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HLoop", 608, G__UtilDict_972_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_972_0_46, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HLoop), -1, 1, 1, 1, 1, 0, "u 'HLoop' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHZip(void) {
   /* HZip */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HZip));
   G__memfunc_setup("HZip",379,G__UtilDict_999_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HZip), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("glob",420,G__UtilDict_999_0_2, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 1, 3, 1, 0, "u 'TString' - 0 - pattern", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(TString))(&HZip::glob) ), 0);
   G__memfunc_setup("readFileList",1208,G__UtilDict_999_0_3, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 1, 3, 1, 0, "u 'TString' - 0 - listfile", (char*)NULL, (void*) G__func2void( (TObjArray* (*)(TString))(&HZip::readFileList) ), 0);
   G__memfunc_setup("chainToTObjArray",1588,G__UtilDict_999_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"U 'TChain' - 0 '0' chain U 'TObjArray' - 0 '0' filenames", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TChain*, TObjArray*))(&HZip::chainToTObjArray) ), 0);
   G__memfunc_setup("exists",672,G__UtilDict_999_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' silent "
"g - 'Bool_t' 0 'kTRUE' isZip", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, Bool_t, Bool_t))(&HZip::exists) ), 0);
   G__memfunc_setup("splitName",941,G__UtilDict_999_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'TString' - 0 - fullname u 'TString' - 1 - zipname "
"u 'TString' - 1 - membername", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString&, TString&))(&HZip::splitName) ), 0);
   G__memfunc_setup("isInside",824,G__UtilDict_999_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, Bool_t))(&HZip::isInside) ), 0);
   G__memfunc_setup("isInside",824,G__UtilDict_999_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'TString' - 0 - zipname u 'TString' - 0 - membername "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString, Bool_t))(&HZip::isInside) ), 0);
   G__memfunc_setup("list",444,G__UtilDict_999_0_9, 105, -1, G__defined_typename("Int_t"), 0, 4, 3, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 0 '\".*\"' filter "
"i - 'Int_t' 0 '0' size i - 'Int_t' 0 '0' time", (char*)NULL, (void*) G__func2void( (Int_t (*)(TString, TString, Int_t, Int_t))(&HZip::list) ), 0);
   G__memfunc_setup("getList",732,G__UtilDict_999_0_10, 105, -1, G__defined_typename("Int_t"), 0, 5, 3, 1, 0, 
"u 'TString' - 0 - name U 'TList' - 0 - list "
"u 'TString' - 0 '\".*\"' filter i - 'Int_t' 0 '0' size "
"i - 'Int_t' 0 '0' time", (char*)NULL, (void*) G__func2void( (Int_t (*)(TString, TList*, TString, Int_t, Int_t))(&HZip::getList) ), 0);
   G__memfunc_setup("makeChain",897,G__UtilDict_999_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"u 'TString' - 0 - zipname U 'TChain' - 0 '0' chain "
"u 'TString' - 0 '\".*\"' filter i - 'Int_t' 0 '0' size "
"i - 'Int_t' 0 '0' time", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TChain*, TString, Int_t, Int_t))(&HZip::makeChain) ), 0);
   G__memfunc_setup("makeChainGlob",1285,G__UtilDict_999_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"u 'TString' - 0 - expressionzip U 'TChain' - 0 '0' chain "
"u 'TString' - 0 '\".*\"' filter i - 'Int_t' 0 '0' size "
"i - 'Int_t' 0 '0' time", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TChain*, TString, Int_t, Int_t))(&HZip::makeChainGlob) ), 0);
   G__memfunc_setup("makeChainList",1309,G__UtilDict_999_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 5, 3, 1, 0, 
"u 'TString' - 0 - listfile U 'TChain' - 0 '0' chain "
"u 'TString' - 0 '\".*\"' filter i - 'Int_t' 0 '0' size "
"i - 'Int_t' 0 '0' time", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TChain*, TString, Int_t, Int_t))(&HZip::makeChainList) ), 0);
   G__memfunc_setup("addFile",681,G__UtilDict_999_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'TString' - 0 - zipname u 'TString' - 0 - membername "
"i - 'Int_t' 0 '0' mode", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString, Int_t))(&HZip::addFile) ), 0);
   G__memfunc_setup("addFiles",796,G__UtilDict_999_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'TString' - 0 - zipname U 'TList' - 0 - list "
"i - 'Int_t' 0 '0' mode", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TList*, Int_t))(&HZip::addFiles) ), 0);
   G__memfunc_setup("test",448,G__UtilDict_999_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 1, 3, 1, 0, "u 'TString' - 0 - zipname", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString))(&HZip::test) ), 0);
   G__memfunc_setup("unzip",566,G__UtilDict_999_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - zipname u 'TString' - 0 '\"\"' outDir", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, TString))(&HZip::unzip) ), 0);
   G__memfunc_setup("Class",502,G__UtilDict_999_0_18, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HZip::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_999_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HZip::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_999_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HZip::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_999_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HZip::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_999_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_999_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HZip::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_999_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HZip::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_999_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HZip::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_999_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HZip::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HZip", 379, G__UtilDict_999_0_30, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HZip), -1, 0, 1, 1, 1, 0, "u 'HZip' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HZip", 505, G__UtilDict_999_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_999_0_32, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HZip), -1, 1, 1, 1, 1, 0, "u 'HZip' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHDiskCatalog(void) {
   /* HDiskCatalog */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog));
   G__memfunc_setup("cmpName",705,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 4, 0, 
"U 'HDiskDir' - 0 - - U 'HDiskDir' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpSize",731,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 4, 0, 
"U 'HDiskDir' - 0 - - U 'HDiskDir' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpNFiles",897,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 4, 0, 
"U 'HDiskDir' - 0 - - U 'HDiskDir' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpNSmallFiles",1402,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 4, 0, 
"U 'HDiskDir' - 0 - - U 'HDiskDir' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpNFilesRatio",1408,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 4, 0, 
"U 'HDiskDir' - 0 - - U 'HDiskDir' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDir",607,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__UtilDictLN_HDiskDir), -1, 0, 3, 1, 4, 0, 
"u 'TString' - 0 - name U 'TObjArray' - 0 - listtmp "
"I - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDir",584,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - n i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirMap",893,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'TString' - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirMapOld",1180,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__UtilDictLN_HDiskDir), -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loopDirectory",1391,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"u 'TString' - 0 - directory u 'vector<TString,allocator<TString> >' 'vector<TString>' 1 - dirList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loopDirectoryRecursive",2343,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - directory", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HDiskCatalog",1166,G__UtilDict_1006_0_12, 105, G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDiskName",1100,G__UtilDict_1006_0_13, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getList",732,G__UtilDict_1006_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_TObjArray), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastScanStart",1639,G__UtilDict_1006_0_15, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastScanStop",1535,G__UtilDict_1006_0_16, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUserMap",1021,G__UtilDict_1006_0_17, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR), G__defined_typename("map<uid_t,TString>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGroupMap",1131,G__UtilDict_1006_0_18, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR), G__defined_typename("map<gid_t,TString>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUser",735,G__UtilDict_1006_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'uid_t' 0 - uid u 'TString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGroup",845,G__UtilDict_1006_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'gid_t' 0 - gid u 'TString' - 1 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLastScanStart",1651,G__UtilDict_1006_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'time_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLastScanStop",1547,G__UtilDict_1006_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'time_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUserMap",1033,G__UtilDict_1006_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<unsigned int,TString,less<unsigned int>,allocator<pair<const unsigned int,TString> > >' 'map<uid_t,TString>' 1 - mu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroupMap",1143,G__UtilDict_1006_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'map<unsigned int,TString,less<unsigned int>,allocator<pair<const unsigned int,TString> > >' 'map<gid_t,TString>' 1 - mg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentCatalog",1770,G__UtilDict_1006_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scan",421,G__UtilDict_1006_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDir",584,G__UtilDict_1006_0_27, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HDiskDir' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateDirIndices",1633,G__UtilDict_1006_0_28, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDir",607,G__UtilDict_1006_0_29, 85, G__get_linked_tagnum(&G__UtilDictLN_HDiskDir), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - name I - 'Int_t' 0 '0' ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDaughterDirs",1542,G__UtilDict_1006_0_30, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HDiskDir' - 0 - dir u 'vector<HDiskDir*,allocator<HDiskDir*> >' 'vector<HDiskDir*>' 1 - daughters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDaughterDirsRecursive",2494,G__UtilDict_1006_0_31, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HDiskDir' - 0 - dir u 'vector<HDiskDir*,allocator<HDiskDir*> >' 'vector<HDiskDir*>' 1 - daughters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortDirs",858,G__UtilDict_1006_0_32, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HDiskDir' - 0 - dir u 'vector<HDiskDir*,allocator<HDiskDir*> >' 'vector<HDiskDir*>' 1 - daughters "
"u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortDirsRecursive",1810,G__UtilDict_1006_0_33, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HDiskDir' - 0 - dir u 'vector<HDiskDir*,allocator<HDiskDir*> >' 'vector<HDiskDir*>' 1 - daughters "
"u 'TString' - 0 - option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_1006_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 '255' maxlevel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printDisk",952,G__UtilDict_1006_0_35, 121, -1, -1, 0, 4, 1, 1, 0, 
"b - 'UChar_t' 0 '255' maxlevel u 'TString' - 0 '\"size\"' option "
"i - 'Int_t' 0 '0' nfill u 'TString' - 0 '\" \"' filler", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printExecution",1505,G__UtilDict_1006_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterDirs",1048,G__UtilDict_1006_0_37, 104, -1, G__defined_typename("UInt_t"), 0, 5, 1, 1, 0, 
"u 'TString' - 0 - regexp u 'vector<HDiskDir*,allocator<HDiskDir*> >' 'vector<HDiskDir*>' 1 - dirs "
"u 'TString' - 0 '\"\"' range1S u 'TString' - 0 '\"\"' range2S "
"n - 'Long64_t' 0 '0' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("filterFiles",1145,G__UtilDict_1006_0_38, 104, -1, G__defined_typename("UInt_t"), 0, 6, 1, 1, 0, 
"u 'TString' - 0 - regexpdir u 'TString' - 0 - regexpfile "
"u 'vector<HDiskFile*,allocator<HDiskFile*> >' 'vector<HDiskFile*>' 1 - files u 'TString' - 0 '\"\"' range1S "
"u 'TString' - 0 '\"\"' range2S n - 'Long64_t' 0 '0' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printDirs",959,G__UtilDict_1006_0_39, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - regexp u 'TString' - 0 '\"\"' range1S "
"u 'TString' - 0 '\"\"' range2S n - 'Long64_t' 0 '0' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printFiles",1056,G__UtilDict_1006_0_40, 121, -1, -1, 0, 5, 1, 1, 0, 
"u 'TString' - 0 - regexpdir u 'TString' - 0 - regexpfile "
"u 'TString' - 0 '\"\"' range1S u 'TString' - 0 '\"\"' range2S "
"n - 'Long64_t' 0 '0' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1006_0_41, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDiskCatalog::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1006_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskCatalog::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1006_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDiskCatalog::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1006_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDiskCatalog::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1006_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1006_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskCatalog::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1006_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskCatalog::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1006_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskCatalog::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1006_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskCatalog::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HDiskCatalog", 1166, G__UtilDict_1006_0_53, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog), -1, 0, 1, 1, 1, 0, "u 'HDiskCatalog' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HDiskCatalog", 1292, G__UtilDict_1006_0_54, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1006_0_55, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog), -1, 1, 1, 1, 1, 0, "u 'HDiskCatalog' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHFileSys(void) {
   /* HFileSys */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HFileSys));
   G__memfunc_setup("initUsers",966,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR), G__defined_typename("map<uid_t,TString>"), 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initGroups",1076,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR), G__defined_typename("map<gid_t,TString>"), 0, 0, 3, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSmallerLimit",1551,G__UtilDict_1009_0_3, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ULong64_t (*)())(&HFileSys::getSmallerLimit) ), 0);
   G__memfunc_setup("getUserMap",1021,G__UtilDict_1009_0_4, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR), G__defined_typename("map<uid_t,TString>"), 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (map<uid_t,TString>& (*)())(&HFileSys::getUserMap) ), 0);
   G__memfunc_setup("getGroupMap",1131,G__UtilDict_1009_0_5, 117, G__get_linked_tagnum(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR), G__defined_typename("map<gid_t,TString>"), 1, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (map<gid_t,TString>& (*)())(&HFileSys::getGroupMap) ), 0);
   G__memfunc_setup("setUnit",748,G__UtilDict_1009_0_6, 121, -1, -1, 0, 1, 3, 1, 0, "m - 'ULong64_t' 0 - u", (char*)NULL, (void*) G__func2void( (void (*)(ULong64_t))(&HFileSys::setUnit) ), 0);
   G__memfunc_setup("getUnitK",811,G__UtilDict_1009_0_7, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ULong64_t (*)())(&HFileSys::getUnitK) ), 0);
   G__memfunc_setup("getUnitT",820,G__UtilDict_1009_0_8, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ULong64_t (*)())(&HFileSys::getUnitT) ), 0);
   G__memfunc_setup("getUnitG",807,G__UtilDict_1009_0_9, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ULong64_t (*)())(&HFileSys::getUnitG) ), 0);
   G__memfunc_setup("getUnitM",813,G__UtilDict_1009_0_10, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (ULong64_t (*)())(&HFileSys::getUnitM) ), 0);
   G__memfunc_setup("getUsers",850,G__UtilDict_1009_0_11, 121, -1, -1, 0, 1, 3, 1, 0, "u 'map<unsigned int,TString,less<unsigned int>,allocator<pair<const unsigned int,TString> > >' 'map<uid_t,TString>' 1 - musers", (char*)NULL, (void*) G__func2void( (void (*)(map<uid_t,TString>&))(&HFileSys::getUsers) ), 0);
   G__memfunc_setup("getGroups",960,G__UtilDict_1009_0_12, 121, -1, -1, 0, 1, 3, 1, 0, "u 'map<unsigned int,TString,less<unsigned int>,allocator<pair<const unsigned int,TString> > >' 'map<gid_t,TString>' 1 - mgroups", (char*)NULL, (void*) G__func2void( (void (*)(map<gid_t,TString>&))(&HFileSys::getGroups) ), 0);
   G__memfunc_setup("fillSysInfo",1138,G__UtilDict_1009_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HFileSys::fillSysInfo) ), 0);
   G__memfunc_setup("getUser",735,G__UtilDict_1009_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'uid_t' 0 - uid u 'TString' - 1 - name", (char*)NULL, (void*) G__func2void( (Bool_t (*)(uid_t, TString&))(&HFileSys::getUser) ), 0);
   G__memfunc_setup("getGroup",845,G__UtilDict_1009_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 2, 3, 1, 0, 
"h - 'gid_t' 0 - gid u 'TString' - 1 - name", (char*)NULL, (void*) G__func2void( (Bool_t (*)(gid_t, TString&))(&HFileSys::getGroup) ), 0);
   G__memfunc_setup("getModTime",1007,G__UtilDict_1009_0_16, 121, -1, -1, 0, 2, 3, 1, 0, 
"l - 'time_t' 0 - lastmod u 'TString' - 1 - modtime", (char*)NULL, (void*) G__func2void( (void (*)(time_t, TString&))(&HFileSys::getModTime) ), 0);
   G__memfunc_setup("getFileSize",1115,G__UtilDict_1009_0_17, 121, -1, -1, 0, 2, 3, 1, 0, 
"m - 'ULong64_t' 0 - size u 'TString' - 1 - out", (char*)NULL, (void*) G__func2void( (void (*)(ULong64_t, TString&))(&HFileSys::getFileSize) ), 0);
   G__memfunc_setup("lsFiles",722,G__UtilDict_1009_0_18, 121, -1, -1, 0, 4, 3, 1, 0, 
"u 'TString' - 0 - directory u 'vector<TString,allocator<TString> >' 'vector<TString>' 1 - fileList "
"g - 'Bool_t' 0 'kTRUE' clear g - 'Bool_t' 0 'kFALSE' fullpath", (char*)NULL, (void*) G__func2void( (void (*)(TString, vector<TString>&, Bool_t, Bool_t))(&HFileSys::lsFiles) ), 0);
   G__memfunc_setup("lsFilesRecursive",1674,G__UtilDict_1009_0_19, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TString' - 0 - directory u 'vector<TString,allocator<TString> >' 'vector<TString>' 1 - fullList", (char*)NULL, (void*) G__func2void( (void (*)(TString, vector<TString>&))(&HFileSys::lsFilesRecursive) ), 0);
   G__memfunc_setup("lsDirectory",1172,G__UtilDict_1009_0_20, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TString' - 0 - directory u 'vector<TString,allocator<TString> >' 'vector<TString>' 1 - fileList", (char*)NULL, (void*) G__func2void( (void (*)(TString, vector<TString>&))(&HFileSys::lsDirectory) ), 0);
   G__memfunc_setup("lsDirectoryRecursive",2124,G__UtilDict_1009_0_21, 121, -1, -1, 0, 2, 3, 1, 0, 
"u 'TString' - 0 - directory u 'vector<TString,allocator<TString> >' 'vector<TString>' 1 - fullList", (char*)NULL, (void*) G__func2void( (void (*)(TString, vector<TString>&))(&HFileSys::lsDirectoryRecursive) ), 0);
   // automatic default constructor
   G__memfunc_setup("HFileSys", 775, G__UtilDict_1009_0_22, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HFileSys), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HFileSys", 775, G__UtilDict_1009_0_23, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HFileSys), -1, 0, 1, 1, 1, 0, "u 'HFileSys' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HFileSys", 901, G__UtilDict_1009_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1009_0_25, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HFileSys), -1, 1, 1, 1, 1, 0, "u 'HFileSys' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHDiskFile(void) {
   /* HDiskFile */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskFile));
   G__memfunc_setup("HDiskFile",851,G__UtilDict_1019_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HDiskFile), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_1019_0_2, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGroup",845,G__UtilDict_1019_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOwner",843,G__UtilDict_1019_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastMod",1012,G__UtilDict_1019_0_5, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDir",607,G__UtilDict_1019_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSize",743,G__UtilDict_1019_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroup",857,G__UtilDict_1019_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - gid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOwner",855,G__UtilDict_1019_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - uid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLastMod",1024,G__UtilDict_1019_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'time_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDir",619,G__UtilDict_1019_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_1019_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' sp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isToSmall",920,G__UtilDict_1019_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1019_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDiskFile::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1019_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskFile::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1019_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDiskFile::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1019_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDiskFile::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1019_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1019_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskFile::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1019_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskFile::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1019_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskFile::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1019_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskFile::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HDiskFile", 851, G__UtilDict_1019_0_26, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HDiskFile), -1, 0, 1, 1, 1, 0, "u 'HDiskFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HDiskFile", 977, G__UtilDict_1019_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1019_0_28, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HDiskFile), -1, 1, 1, 1, 1, 0, "u 'HDiskFile' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHDiskDir(void) {
   /* HDiskDir */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskDir));
   G__memfunc_setup("update",643,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HDiskDir' - 0 - mother", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateRecursive",1595,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HDiskDir' - 0 - daughter U 'HDiskDir' - 0 - mother", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HDiskDir",754,G__UtilDict_1020_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HDiskDir), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__UtilDict_1020_0_4, 109, -1, G__defined_typename("ULong64_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGroup",845,G__UtilDict_1020_0_5, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOwner",843,G__UtilDict_1020_0_6, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLastMod",1012,G__UtilDict_1020_0_7, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFiles",897,G__UtilDict_1020_0_8, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFilesTotal",1413,G__UtilDict_1020_0_9, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSmallFiles",1402,G__UtilDict_1020_0_10, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSmallFilesTotal",1918,G__UtilDict_1020_0_11, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNEmptyDirs",1327,G__UtilDict_1020_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDirsTotal",1316,G__UtilDict_1020_0_13, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNEmptyDirsTotal",1843,G__UtilDict_1020_0_14, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNDirs",800,G__UtilDict_1020_0_15, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLevel",824,G__UtilDict_1020_0_16, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMother",943,G__UtilDict_1020_0_17, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFiles",819,G__UtilDict_1020_0_18, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR), G__defined_typename("vector<HDiskFile>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirs",722,G__UtilDict_1020_0_19, 117, G__get_linked_tagnum(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR), G__defined_typename("vector<Int_t>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSize",743,G__UtilDict_1020_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGroup",857,G__UtilDict_1020_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - gid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOwner",855,G__UtilDict_1020_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - uid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLastMod",1024,G__UtilDict_1020_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'time_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNFilesTotal",1425,G__UtilDict_1020_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNSmallFiles",1414,G__UtilDict_1020_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNSmallFilesTotal",1930,G__UtilDict_1020_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNEmptyDirs",1339,G__UtilDict_1020_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNDirsTotal",1328,G__UtilDict_1020_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNEmptyDirsTotal",1855,G__UtilDict_1020_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLevel",836,G__UtilDict_1020_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - lvl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMother",955,G__UtilDict_1020_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDirToFiles",1313,G__UtilDict_1020_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSize",708,G__UtilDict_1020_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - sz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNFilesTotal",1390,G__UtilDict_1020_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNSmallFiles",1379,G__UtilDict_1020_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNSmallFilesTotal",1895,G__UtilDict_1020_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNEmptyDirs",1304,G__UtilDict_1020_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNDirsTotal",1293,G__UtilDict_1020_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNEmptyDirsTotal",1820,G__UtilDict_1020_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFile",681,G__UtilDict_1020_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HDiskFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDir",584,G__UtilDict_1020_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetDirs",949,G__UtilDict_1020_0_42, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("update",643,G__UtilDict_1020_0_43, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_1020_0_44, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' sp u 'TString' - 0 '\"\"' base", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printFiles",1056,G__UtilDict_1020_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' sp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printDirs",959,G__UtilDict_1020_0_46, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 '0' sp u 'TString' - 0 '\"\"' base", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scan",421,G__UtilDict_1020_0_47, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - indDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("scan",421,G__UtilDict_1020_0_48, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'stat' 'mystat' 1 - statu h - 'UInt_t' 0 - index "
"u 'vector<TString,allocator<TString> >' 'vector<TString>' 1 - dirList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isDaughter",1040,G__UtilDict_1020_0_49, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HDiskDir' - 0 - mother", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isEmpty",747,G__UtilDict_1020_0_50, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1020_0_51, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDiskDir::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1020_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskDir::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1020_0_53, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDiskDir::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1020_0_54, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDiskDir::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1020_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1020_0_59, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskDir::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1020_0_60, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskDir::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1020_0_61, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskDir::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1020_0_62, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskDir::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HDiskDir", 754, G__UtilDict_1020_0_63, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HDiskDir), -1, 0, 1, 1, 1, 0, "u 'HDiskDir' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HDiskDir", 880, G__UtilDict_1020_0_64, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1020_0_65, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HDiskDir), -1, 1, 1, 1, 1, 0, "u 'HDiskDir' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHDiskStat(void) {
   /* HDiskStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HDiskStat));
   G__memfunc_setup("evalOpt",731,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "u 'TString' - 0 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HDiskStat",879,G__UtilDict_1044_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HDiskStat), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDiskName",1112,G__UtilDict_1044_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUnit",748,G__UtilDict_1044_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "m - 'ULong64_t' 0 - u", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDiskName",1100,G__UtilDict_1044_0_5, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDir",607,G__UtilDict_1044_0_6, 85, G__get_linked_tagnum(&G__UtilDictLN_TGraph), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - dirname u 'TString' - 0 '\"size\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirVec",893,G__UtilDict_1044_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_vectorlETGraphcOallocatorlETGraphgRsPgR), G__defined_typename("vector<TGraph>"), 0, 1, 1, 1, 0, "u 'TString' - 0 - dirname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addEntry",827,G__UtilDict_1044_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"l - 'time_t' 0 - scanstart U 'HDiskDir' - 0 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMinMaxGraph",1501,G__UtilDict_1044_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - xmin d - 'Double_t' 1 - xmax "
"d - 'Double_t' 1 - ymin d - 'Double_t' 1 - ymax "
"U 'TGraph' - 0 - g", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMinMaxAll",1284,G__UtilDict_1044_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - xmin d - 'Double_t' 1 - xmax "
"d - 'Double_t' 1 - ymin d - 'Double_t' 1 - ymax "
"u 'TString' - 0 - opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findMinMaxAll",1284,G__UtilDict_1044_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"d - 'Double_t' 1 - xmin d - 'Double_t' 1 - xmax "
"d - 'Double_t' 1 - ymin d - 'Double_t' 1 - ymax "
"u 'vector<TGraph*,allocator<TGraph*> >' 'vector<TGraph*>' 1 - vg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("draw",430,G__UtilDict_1044_0_12, 85, G__get_linked_tagnum(&G__UtilDictLN_TCanvas), -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - opt h - 'UInt_t' 0 - lastDays "
"m - 'ULong64_t' 0 - u u 'TString' - 0 '\"daughters\"' select", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1044_0_13, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HDiskStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1044_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1044_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HDiskStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1044_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HDiskStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1044_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1044_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1044_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1044_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HDiskStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1044_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HDiskStat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HDiskStat", 879, G__UtilDict_1044_0_25, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HDiskStat), -1, 0, 1, 1, 1, 0, "u 'HDiskStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HDiskStat", 1005, G__UtilDict_1044_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1044_0_27, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HDiskStat), -1, 1, 1, 1, 1, 0, "u 'HDiskStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHTime(void) {
   /* HTime */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HTime));
   G__memfunc_setup("HTime",471,G__UtilDict_1060_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HTime), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isHldName",885,G__UtilDict_1060_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 3, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kTRUE' EvtBuilder "
"g - 'Bool_t' 0 'kTRUE' silent", (char*)NULL, (void*) G__func2void( (Bool_t (*)(TString, Bool_t, Bool_t))(&HTime::isHldName) ), 0);
   G__memfunc_setup("stripFileName",1331,G__UtilDict_1060_0_3, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 3, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' removeEvtBuilder "
"g - 'Bool_t' 0 'kFALSE' silent", (char*)NULL, (void*) G__func2void( (TString (*)(TString, Bool_t, Bool_t))(&HTime::stripFileName) ), 0);
   G__memfunc_setup("dayOfYearToDate",1477,G__UtilDict_1060_0_4, 121, -1, -1, 0, 5, 3, 1, 0, 
"i - 'Int_t' 0 - year i - 'Int_t' 0 - dayOfYear "
"i - 'Int_t' 1 - month i - 'Int_t' 1 - day "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t, Int_t&, Int_t&, Bool_t))(&HTime::dayOfYearToDate) ), 0);
   G__memfunc_setup("splitFileName",1325,G__UtilDict_1060_0_5, 121, -1, -1, 0, 9, 3, 1, 0, 
"u 'TString' - 0 - name u 'TString' - 1 - type "
"i - 'Int_t' 1 - year i - 'Int_t' 1 - dayOfYear "
"i - 'Int_t' 1 - hour i - 'Int_t' 1 - minute "
"i - 'Int_t' 1 - second i - 'Int_t' 1 - evtbuild "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (void (*)(TString, TString&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Bool_t))(&HTime::splitFileName) ), 0);
   G__memfunc_setup("getTypeFileName",1507,G__UtilDict_1060_0_6, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 2, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (TString (*)(TString, Bool_t))(&HTime::getTypeFileName) ), 0);
   G__memfunc_setup("getYearFileName",1490,G__UtilDict_1060_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (Int_t (*)(TString, Bool_t))(&HTime::getYearFileName) ), 0);
   G__memfunc_setup("getDayFileName",1375,G__UtilDict_1060_0_8, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (Int_t (*)(TString, Bool_t))(&HTime::getDayFileName) ), 0);
   G__memfunc_setup("getTimeFileName",1488,G__UtilDict_1060_0_9, 121, -1, -1, 0, 5, 3, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 1 - hour "
"i - 'Int_t' 1 - minute i - 'Int_t' 1 - second "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (void (*)(TString, Int_t&, Int_t&, Int_t&, Bool_t))(&HTime::getTimeFileName) ), 0);
   G__memfunc_setup("getEvtBuilderFileName",2103,G__UtilDict_1060_0_10, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (Int_t (*)(TString, Bool_t))(&HTime::getEvtBuilderFileName) ), 0);
   G__memfunc_setup("fileNameToTime",1395,G__UtilDict_1060_0_11, 108, -1, G__defined_typename("time_t"), 0, 2, 3, 1, 0, 
"u 'TString' - 0 - name g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (time_t (*)(TString, Bool_t))(&HTime::fileNameToTime) ), 0);
   G__memfunc_setup("runIdToTime",1108,G__UtilDict_1060_0_12, 108, -1, G__defined_typename("time_t"), 0, 3, 3, 1, 0, 
"l - 'time_t' 0 - runid i - 'Int_t' 0 '1' timezone "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (time_t (*)(time_t, Int_t, Bool_t))(&HTime::runIdToTime) ), 0);
   G__memfunc_setup("runIdToBrokenTime",1717,G__UtilDict_1060_0_13, 121, -1, -1, 0, 9, 3, 1, 0, 
"i - 'Int_t' 0 - runid i - 'Int_t' 1 - year "
"i - 'Int_t' 1 - month i - 'Int_t' 1 - day "
"i - 'Int_t' 1 - hour i - 'Int_t' 1 - min "
"i - 'Int_t' 1 - sec i - 'Int_t' 0 '1' timezone "
"g - 'Bool_t' 0 'kFALSE' print", (char*)NULL, (void*) G__func2void( (void (*)(Int_t, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t&, Int_t, Bool_t))(&HTime::runIdToBrokenTime) ), 0);
   G__memfunc_setup("isDST",455,G__UtilDict_1060_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 3, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) G__func2void( (Int_t (*)(TString))(&HTime::isDST) ), 0);
   G__memfunc_setup("Class",502,G__UtilDict_1060_0_15, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HTime::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1060_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTime::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1060_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HTime::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1060_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HTime::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1060_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1060_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTime::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1060_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTime::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1060_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HTime::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1060_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HTime::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HTime", 471, G__UtilDict_1060_0_27, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HTime), -1, 0, 1, 1, 1, 0, "u 'HTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HTime", 597, G__UtilDict_1060_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1060_0_29, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HTime), -1, 1, 1, 1, 1, 0, "u 'HTime' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSeed(void) {
   /* HSeed */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSeed));
   G__memfunc_setup("HSeed",457,G__UtilDict_1063_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSeed), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 '0' method i - 'Int_t' 0 '2' fallback "
"i - 'Int_t' 0 '-1' fixedseed g - 'Bool_t' 0 'kTRUE' noBlock", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPid",605,G__UtilDict_1063_0_2, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIP",473,G__UtilDict_1063_0_3, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIPPart",880,G__UtilDict_1063_0_4, 104, -1, G__defined_typename("UInt_t"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' field", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSeed",705,G__UtilDict_1063_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMethod",929,G__UtilDict_1063_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFallBack",1072,G__UtilDict_1063_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFixedSeed",1201,G__UtilDict_1063_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInitialSeed",1419,G__UtilDict_1063_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFirstSeed",1225,G__UtilDict_1063_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHostName",1119,G__UtilDict_1063_0_11, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__UtilDict_1063_0_12, 104, -1, G__defined_typename("UInt_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__UtilDict_1063_0_13, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1063_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSeed::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1063_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeed::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1063_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSeed::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1063_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSeed::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1063_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1063_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeed::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1063_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeed::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1063_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSeed::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1063_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSeed::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSeed", 457, G__UtilDict_1063_0_26, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSeed), -1, 0, 1, 1, 1, 0, "u 'HSeed' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSeed", 583, G__UtilDict_1063_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1063_0_28, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSeed), -1, 1, 1, 1, 1, 0, "u 'HSeed' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHMultiPagePDF(void) {
   /* HMultiPagePDF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF));
   G__memfunc_setup("HMultiPagePDF",1194,G__UtilDict_1068_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HMultiPagePDF), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"multipdf\"' out u 'TString' - 0 '\"landscape\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addPage",678,G__UtilDict_1068_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TCanvas' - 0 - input u 'TString' - 0 '\"\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("close",534,G__UtilDict_1068_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1068_0_4, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HMultiPagePDF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1068_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMultiPagePDF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1068_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HMultiPagePDF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1068_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HMultiPagePDF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1068_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1068_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMultiPagePDF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1068_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMultiPagePDF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1068_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HMultiPagePDF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1068_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HMultiPagePDF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HMultiPagePDF", 1320, G__UtilDict_1068_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSUProgress(void) {
   /* HSUProgress */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUProgress));
   G__memfunc_setup("HSUProgress",1093,G__UtilDict_1069_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUProgress), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '100' iMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetMaxValue",1103,G__UtilDict_1069_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetMaxValue",1091,G__UtilDict_1069_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__UtilDict_1069_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Restart",741,G__UtilDict_1069_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLast",692,G__UtilDict_1069_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Next",415,G__UtilDict_1069_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' iSteps", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Final",490,G__UtilDict_1069_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpinOn",899,G__UtilDict_1069_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpinOn",887,G__UtilDict_1069_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpinPer",1005,G__UtilDict_1069_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpinEvents",1339,G__UtilDict_1069_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpinChars",1195,G__UtilDict_1069_0_13, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpinChars",1207,G__UtilDict_1069_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pStr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetSpinChars",1207,G__UtilDict_1069_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSpinReal",1086,G__UtilDict_1069_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProgressOn",1342,G__UtilDict_1069_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProgressOn",1330,G__UtilDict_1069_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProgressPer",1448,G__UtilDict_1069_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProgressEvents",1782,G__UtilDict_1069_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProgressChar",1523,G__UtilDict_1069_0_21, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetProgressChar",1535,G__UtilDict_1069_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetProgressReal",1529,G__UtilDict_1069_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimerOn",1002,G__UtilDict_1069_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimerOn",990,G__UtilDict_1069_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimerPer",1108,G__UtilDict_1069_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetTimerEvents",1442,G__UtilDict_1069_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetTimerReal",1189,G__UtilDict_1069_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetFullTimerOn",1405,G__UtilDict_1069_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFullTimerOn",1393,G__UtilDict_1069_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1069_0_31, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSUProgress::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1069_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUProgress::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1069_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSUProgress::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1069_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSUProgress::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,G__UtilDict_1069_0_35, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,G__UtilDict_1069_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,G__UtilDict_1069_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1069_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1069_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUProgress::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1069_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUProgress::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1069_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUProgress::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1069_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUProgress::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSUProgress", 1093, G__UtilDict_1069_0_43, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSUProgress), -1, 0, 1, 1, 1, 0, "u 'HSUProgress' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSUProgress", 1219, G__UtilDict_1069_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1069_0_45, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSUProgress), -1, 1, 1, 1, 1, 0, "u 'HSUProgress' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSUExeMacro(void) {
   /* HSUExeMacro */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro));
   G__memfunc_setup("HSUExeMacro",1028,G__UtilDict_1070_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadArgs",813,G__UtilDict_1070_0_2, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iArg C - 'Char_t' 2 - vArg", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("openInput",962,G__UtilDict_1070_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addInputFile",1209,G__UtilDict_1070_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pStr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addFilesFromList",1612,G__UtilDict_1070_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pStr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openOutput",1091,G__UtilDict_1070_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeOutput",1212,G__UtilDict_1070_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("loadTree",816,G__UtilDict_1070_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iEvent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkBranches",1316,G__UtilDict_1070_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__UtilDict_1070_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBranchesEntry",1656,G__UtilDict_1070_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iEntry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvent",834,G__UtilDict_1070_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iEvent", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("nextEvent",961,G__UtilDict_1070_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTClonesArray",1527,G__UtilDict_1070_0_14, 85, G__get_linked_tagnum(&G__UtilDictLN_TClonesArray), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pBranchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHCategory",1222,G__UtilDict_1070_0_15, 85, G__get_linked_tagnum(&G__UtilDictLN_HCategory), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pCategoryName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBranch",910,G__UtilDict_1070_0_16, 85, G__get_linked_tagnum(&G__UtilDictLN_TBranch), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pBranchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printInfo",953,G__UtilDict_1070_0_17, 121, -1, -1, 0, 1, 1, 1, 8, "C - 'Char_t' 10 - pProgramName", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getExitOnError",1441,G__UtilDict_1070_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExitOnError",1453,G__UtilDict_1070_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setProgress",1185,G__UtilDict_1070_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HSUProgress' - 0 - pProgress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setProgress",1185,G__UtilDict_1070_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' bSet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getProgress",1173,G__UtilDict_1070_0_22, 85, G__get_linked_tagnum(&G__UtilDictLN_HSUProgress), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteProgress",1480,G__UtilDict_1070_0_23, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openParamFile",1315,G__UtilDict_1070_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 '0' pParamFileName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParamObject",1416,G__UtilDict_1070_0_25, 85, G__get_linked_tagnum(&G__UtilDictLN_TObject), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParamFileName",1586,G__UtilDict_1070_0_26, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isParamFileOpened",1704,G__UtilDict_1070_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOptString",1258,G__UtilDict_1070_0_28, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOptInt",926,G__UtilDict_1070_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOptFloat",1129,G__UtilDict_1070_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOptBool",1023,G__UtilDict_1070_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvents",949,G__UtilDict_1070_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvent",834,G__UtilDict_1070_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcPhi",885,G__UtilDict_1070_0_34, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 8, 
"i - 'Int_t' 0 - iSector f - 'Float_t' 0 - fPhiMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMdcTheta",1098,G__UtilDict_1070_0_35, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "f - 'Float_t' 0 - fThetaMdc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNotFileChange",1591,G__UtilDict_1070_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNotFileChange",1603,G__UtilDict_1070_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findAciveBranch",1495,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__UtilDictLN_HSUBranchElement), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - pBranchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNewArrayFromBranch",2123,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__UtilDictLN_TClonesArray), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - pBranchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNewHCategoryFromBranch",2514,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__UtilDictLN_HCategory), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - pBranchName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("notifyBranches",1471,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1070_0_42, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSUExeMacro::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1070_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUExeMacro::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1070_0_44, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSUExeMacro::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1070_0_45, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSUExeMacro::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1070_0_49, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1070_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUExeMacro::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1070_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUExeMacro::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1070_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUExeMacro::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1070_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUExeMacro::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSUExeMacro", 1028, G__UtilDict_1070_0_54, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro), -1, 0, 1, 1, 1, 0, "u 'HSUExeMacro' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSUExeMacro", 1154, G__UtilDict_1070_0_55, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1070_0_56, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSUExeMacro), -1, 1, 1, 1, 1, 0, "u 'HSUExeMacro' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSUDummyRec(void) {
   /* HSUDummyRec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec));
   G__memfunc_setup("HSUDummyRec",1046,G__UtilDict_1074_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec), -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' bVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSUDummyRec",1046,G__UtilDict_1074_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - pOutFileName g - 'Bool_t' 0 'kTRUE' bVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSUDummyRec",1046,G__UtilDict_1074_0_3, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kTRUE' bVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSUDummyRec",1046,G__UtilDict_1074_0_4, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUDummyRec), -1, 0, 4, 1, 1, 0, 
"C - 'Char_t' 10 - pOutFileName C - 'Text_t' 10 - name "
"C - 'Text_t' 10 - title g - 'Bool_t' 0 'kTRUE' bVerbose", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVerbose",1058,G__UtilDict_1074_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVerbose",1046,G__UtilDict_1074_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCategory",1150,G__UtilDict_1074_0_7, 85, G__get_linked_tagnum(&G__UtilDictLN_HCategory), -1, 0, 2, 3, 1, 0, 
"s - 'Cat_t' 0 - cat g - 'Bool_t' 0 'kTRUE' bRaport", (char*)NULL, (void*) G__func2void( (HCategory* (*)(Cat_t, Bool_t))(&HSUDummyRec::getCategory) ), 0);
   G__memfunc_setup("getCategory",1150,G__UtilDict_1074_0_8, 85, G__get_linked_tagnum(&G__UtilDictLN_HCategory), -1, 0, 2, 3, 1, 0, 
"C - 'Char_t' 10 - pName g - 'Bool_t' 0 'kTRUE' bRaport", (char*)NULL, (void*) G__func2void( (HCategory* (*)(const Char_t*, Bool_t))(&HSUDummyRec::getCategory) ), 0);
   G__memfunc_setup("getIterator",1162,G__UtilDict_1074_0_9, 85, G__get_linked_tagnum(&G__UtilDictLN_HIterator), -1, 0, 2, 1, 1, 0, 
"s - 'Cat_t' 0 - cat g - 'Bool_t' 0 'kTRUE' bDelete", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIterator",1162,G__UtilDict_1074_0_10, 85, G__get_linked_tagnum(&G__UtilDictLN_HIterator), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - pName g - 'Bool_t' 0 'kTRUE' bDelete", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addObjectToWrite",1614,G__UtilDict_1074_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'TObject' - 0 - pObj g - 'Bool_t' 0 'kTRUE' bDelete", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeObject",1253,G__UtilDict_1074_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - pObj", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeIterator",1496,G__UtilDict_1074_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HIterator' - 0 - pI", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeObjects",1269,G__UtilDict_1074_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'TFile' - 0 - pFile", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeObjects",1269,G__UtilDict_1074_0_15, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - pFileName g - 'Bool_t' 0 'kTRUE' bRecreate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutFile",1016,G__UtilDict_1074_0_16, 85, G__get_linked_tagnum(&G__UtilDictLN_TFile), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutFile",1028,G__UtilDict_1074_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'TFile' - 0 - pFile g - 'Bool_t' 0 'kFALSE' bCloseOld", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("openOutFile",1130,G__UtilDict_1074_0_18, 85, G__get_linked_tagnum(&G__UtilDictLN_TFile), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '0' pName g - 'Bool_t' 0 'kTRUE' bRecr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeAndCloseOutFile",2028,G__UtilDict_1074_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutFileName",1401,G__UtilDict_1074_0_20, 117, G__get_linked_tagnum(&G__UtilDictLN_TString), -1, 1, 0, 1, 1, 9, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutFileName",1413,G__UtilDict_1074_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 - option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__UtilDict_1074_0_23, 121, -1, -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getInitOk",910,G__UtilDict_1074_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInitOk",922,G__UtilDict_1074_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEvents",961,G__UtilDict_1074_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incEvents",943,G__UtilDict_1074_0_31, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEvents",949,G__UtilDict_1074_0_32, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWriteEvents",1484,G__UtilDict_1074_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWriteEvents",1472,G__UtilDict_1074_0_34, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefault",1041,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1074_0_36, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSUDummyRec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1074_0_37, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUDummyRec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1074_0_38, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSUDummyRec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1074_0_39, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSUDummyRec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1074_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1074_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUDummyRec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1074_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUDummyRec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1074_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUDummyRec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1074_0_47, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUDummyRec::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HSUDummyRec", 1172, G__UtilDict_1074_0_48, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHSUIteratorObject(void) {
   /* HSUIteratorObject */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject));
   G__memfunc_setup("HSUIteratorObject",1681,G__UtilDict_1075_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HSUIteratorObject",1681,G__UtilDict_1075_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject), -1, 0, 1, 1, 1, 0, "U 'HIterator' - 0 - pI", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("get",320,G__UtilDict_1075_0_3, 85, G__get_linked_tagnum(&G__UtilDictLN_HIterator), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("set",332,G__UtilDict_1075_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HIterator' - 0 - pI", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__UtilDict_1075_0_5, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HSUIteratorObject::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1075_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUIteratorObject::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1075_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HSUIteratorObject::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1075_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HSUIteratorObject::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1075_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1075_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUIteratorObject::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1075_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUIteratorObject::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1075_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HSUIteratorObject::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1075_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HSUIteratorObject::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HSUIteratorObject", 1681, G__UtilDict_1075_0_17, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject), -1, 0, 1, 1, 1, 0, "u 'HSUIteratorObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HSUIteratorObject", 1807, G__UtilDict_1075_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1075_0_19, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HSUIteratorObject), -1, 1, 1, 1, 1, 0, "u 'HSUIteratorObject' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHHitFilter(void) {
   /* HHitFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HHitFilter));
   G__memfunc_setup("HHitFilter",979,G__UtilDict_1076_0_1, 105, G__get_linked_tagnum(&G__UtilDictLN_HHitFilter), -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 '0' pCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setKine",723,G__UtilDict_1076_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__UtilDict_1076_0_4, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HHitFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1076_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHitFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1076_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HHitFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1076_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HHitFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1076_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1076_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHitFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1076_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HHitFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1076_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HHitFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1076_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HHitFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HHitFilter", 979, G__UtilDict_1076_0_16, (int) ('i'), G__get_linked_tagnum(&G__UtilDictLN_HHitFilter), -1, 0, 1, 1, 1, 0, "u 'HHitFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HHitFilter", 1105, G__UtilDict_1076_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__UtilDict_1076_0_18, (int) ('u'), G__get_linked_tagnum(&G__UtilDictLN_HHitFilter), -1, 1, 1, 1, 1, 0, "u 'HHitFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeantFilter(void) {
   /* HGeantFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter));
   G__memfunc_setup("HGeantFilter",1181,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter), -1, 0, 1, 1, 4, 0, "u 'HGeantFilter' - 1 - filter", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeantFilter",1181,G__UtilDict_1077_0_2, 105, G__get_linked_tagnum(&G__UtilDictLN_HGeantFilter), -1, 0, 4, 1, 1, 0, 
"C - 'Text_t' 0 - name C - 'Text_t' 0 - title "
"i - 'Int_t' 0 - id f - 'Float_t' 0 - acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setID",473,G__UtilDict_1077_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAcceptance",1331,G__UtilDict_1077_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - acc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__UtilDict_1077_0_9, 85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeantFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__UtilDict_1077_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__UtilDict_1077_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeantFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__UtilDict_1077_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeantFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__UtilDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__UtilDict_1077_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__UtilDict_1077_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__UtilDict_1077_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__UtilDict_1077_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeantFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__UtilDict_1077_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeantFilter::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeantFilter", 1307, G__UtilDict_1077_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncUtilDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&gDebuger),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HDebug),-1,-1,1,"gDebuger=",0,(char*)NULL);
   G__memvar_setup((void*)(&rlRaw),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"rlRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&rlHit),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"rlHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&rlUndefined),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"rlUndefined=",0,(char*)NULL);
   G__memvar_setup((void*)(&ctMatrix),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"ctMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)(&ctSplit),105,0,1,-1,G__defined_typename("Int_t"),-1,1,"ctSplit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdc),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdc=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRich),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRich=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShower),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShower=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTof),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTof=",0,(char*)NULL);
   G__memvar_setup((void*)(&catStart),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catStart=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTofino),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofino=",0,(char*)NULL);
   G__memvar_setup((void*)(&catSimul),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catSimul=",0,(char*)NULL);
   G__memvar_setup((void*)(&catEmc),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catEmc=",0,(char*)NULL);
   G__memvar_setup((void*)(&catPionTracker),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catPionTracker=",0,(char*)NULL);
   G__memvar_setup((void*)(&catFwDet),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catFwDet=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMatchU),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMatchU=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTracks),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTracks=",0,(char*)NULL);
   G__memvar_setup((void*)(&catPhyAna),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catPhyAna=",0,(char*)NULL);
   G__memvar_setup((void*)(&catPairs),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catPairs=",0,(char*)NULL);
   G__memvar_setup((void*)(&catFlex),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catFlex=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTrack=",0,(char*)NULL);
   G__memvar_setup((void*)(&catInvalid),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catInvalid=",0,(char*)NULL);
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {
}

static void G__cpp_setup_global6() {
   G__memvar_setup((void*)(&gHHistMap),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HHistMap),-1,-1,1,"gHHistMap=",0,(char*)NULL);
}

static void G__cpp_setup_global7() {
   G__memvar_setup((void*)(&catGeantKine),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catGeantKine=",0,(char*)NULL);
   G__memvar_setup((void*)(&catMdcGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catMdcGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRichGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRichGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catTofGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catTofGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catStartGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catStartGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catWallGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catWallGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRpcGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRpcGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catEmcGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catEmcGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catFwDetGeantRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catFwDetGeantRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&gLoop),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HLoop),-1,-1,1,"gLoop=",0,(char*)NULL);
}

static void G__cpp_setup_global8() {
   G__memvar_setup((void*)(&gHDiskCatalog),85,0,0,G__get_linked_tagnum(&G__UtilDictLN_HDiskCatalog),-1,-1,1,"gHDiskCatalog=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalUtilDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
  G__cpp_setup_global6();
  G__cpp_setup_global7();
  G__cpp_setup_global8();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
}

static void G__cpp_setup_func41() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcUtilDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__UtilDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TDirectory = { "TDirectory" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TCollection = { "TCollection" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR = { "vector<unsigned int,allocator<unsigned int> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ofstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HDebug = { "HDebug" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__UtilDictLN_TArray = { "TArray" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HObjTable = { "HObjTable" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TStopwatch = { "TStopwatch" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HEventHeader = { "HEventHeader" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HRunAnalizer = { "HRunAnalizer" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSymMat = { "HSymMat" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSymMat2 = { "HSymMat2" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSymMat3 = { "HSymMat3" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSymMat4 = { "HSymMat4" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSymMat5 = { "HSymMat5" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSymMat6 = { "HSymMat6" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TSocket = { "TSocket" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TAttFill = { "TAttFill" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TBranch = { "TBranch" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TAttLine = { "TAttLine" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TAttMarker = { "TAttMarker" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR = { "map<string,int,less<string>,allocator<pair<const string,int> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR = { "map<string,float,less<string>,allocator<pair<const string,float> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator = { "map<string,float,less<string>,allocator<pair<const string,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TArrayC = { "TArrayC" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HMessageMgr = { "HMessageMgr" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HGeantMedia = { "HGeantMedia" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSrcKeeper = { "HSrcKeeper" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HMessageMgrcLcLDetector = { "HMessageMgr::Detector" , 101 , -1 };
G__linked_taginfo G__UtilDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TNtuple = { "TNtuple" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HNtuple = { "HNtuple" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HNtupleMap = { "HNtupleMap" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TArrayS = { "TArrayS" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TArrayL = { "TArrayL" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TArrayL64 = { "TArrayL64" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HArrayC = { "HArrayC" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HArrayS = { "HArrayS" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HArrayI = { "HArrayI" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HArrayL = { "HArrayL" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HArrayL64 = { "HArrayL64" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HArrayF = { "HArrayF" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HArrayD = { "HArrayD" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TCutG = { "TCutG" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TAttText = { "TAttText" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HTool = { "HTool" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TH3 = { "TH3" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TMacro = { "TMacro" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HHistMap = { "HHistMap" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR = { "map<TString,TString,less<TString>,allocator<pair<const TString,TString> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR = { "map<TString,TObjArray,less<TString>,allocator<pair<const TString,TObjArray> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR = { "map<TString,TArrayI,less<TString>,allocator<pair<const TString,TArrayI> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTH1mUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUgRsPgRsPgR = { "map<TString,TH1**,less<TString>,allocator<pair<const TString,TH1**> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTH1mUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUgRsPgRsPgR = { "map<TString,TH1***,less<TString>,allocator<pair<const TString,TH1***> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTH1mUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUgRsPgRsPgR = { "map<TString,TH1****,less<TString>,allocator<pair<const TString,TH1****> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUgRsPgRsPgR = { "map<TString,TH1*****,less<TString>,allocator<pair<const TString,TH1*****> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUmUgRsPgRsPgR = { "map<TString,TH1******,less<TString>,allocator<pair<const TString,TH1******> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTCanvasmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUgRsPgRsPgR = { "map<TString,TCanvas**,less<TString>,allocator<pair<const TString,TCanvas**> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTCanvasmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUgRsPgRsPgR = { "map<TString,TCanvas***,less<TString>,allocator<pair<const TString,TCanvas***> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUgRsPgRsPgR = { "map<TString,TCanvas****,less<TString>,allocator<pair<const TString,TCanvas****> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUgRsPgRsPgR = { "map<TString,TCanvas*****,less<TString>,allocator<pair<const TString,TCanvas*****> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUmUgRsPgRsPgR = { "map<TString,TCanvas******,less<TString>,allocator<pair<const TString,TCanvas******> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTCutGmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCutGmUgRsPgRsPgR = { "map<TString,TCutG*,less<TString>,allocator<pair<const TString,TCutG*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTF1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTF1mUgRsPgRsPgR = { "map<TString,TF1*,less<TString>,allocator<pair<const TString,TF1*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR = { "map<TString,TObject*,less<TString>,allocator<pair<const TString,TObject*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOTMacromUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMacromUgRsPgRsPgR = { "map<TString,TMacro*,less<TString>,allocator<pair<const TString,TMacro*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR = { "vector<TH1*,allocator<TH1*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1*,allocator<TH1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR = { "vector<TCanvas*,allocator<TCanvas*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TCanvas*,allocator<TCanvas*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETCutGmUcOallocatorlETCutGmUgRsPgR = { "vector<TCutG*,allocator<TCutG*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETCutGmUcOallocatorlETCutGmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TCutG*,allocator<TCutG*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR = { "vector<TF1*,allocator<TF1*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TF1*,allocator<TF1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR = { "vector<TObject*,allocator<TObject*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TObject*,allocator<TObject*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETMacromUcOallocatorlETMacromUgRsPgR = { "vector<TMacro*,allocator<TMacro*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETMacromUcOallocatorlETMacromUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TMacro*,allocator<TMacro*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HFlex = { "HFlex" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR = { "map<TString,int,less<TString>,allocator<pair<const TString,int> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOdoublecOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOdoublegRsPgRsPgR = { "map<TString,double,less<TString>,allocator<pair<const TString,double> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HFilter = { "HFilter" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HFlexFiller = { "HFlexFiller" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_particleproperties = { "particleproperties" , 115 , -1 };
G__linked_taginfo G__UtilDictLN_HPhysicsConstants = { "HPhysicsConstants" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR = { "map<int,particleproperties,less<int>,allocator<pair<const int,particleproperties> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR = { "map<TString,particleproperties,less<TString>,allocator<pair<const TString,particleproperties> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR = { "map<int,TString,less<int>,allocator<pair<const int,TString> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HHistConverter = { "HHistConverter" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HBitMan = { "HBitMan" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HBitMancLcLword = { "HBitMan::word" , 115 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR = { "vector<HBitMan::word,allocator<HBitMan::word> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HBitMan::word,allocator<HBitMan::word> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOHBitMancLcLwordcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHBitMancLcLwordgRsPgRsPgR = { "map<TString,HBitMan::word,less<TString>,allocator<pair<const TString,HBitMan::word> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSTLTool = { "HSTLTool" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HPartialEvent = { "HPartialEvent" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HRecEvent = { "HRecEvent" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HCategoryManager = { "HCategoryManager" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TChain = { "TChain" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HGeantHeader = { "HGeantHeader" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSectorSelector = { "HSectorSelector" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HLoop = { "HLoop" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR = { "map<TString,HCategory*,less<TString>,allocator<pair<const TString,HCategory*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR = { "map<TString,HPartialEvent*,less<TString>,allocator<pair<const TString,HPartialEvent*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR = { "map<TString,short,less<TString>,allocator<pair<const TString,short> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HZip = { "HZip" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HDiskCatalog = { "HDiskCatalog" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_stat = { "stat" , 115 , -1 };
G__linked_taginfo G__UtilDictLN_HFileSys = { "HFileSys" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR = { "map<unsigned int,TString,less<unsigned int>,allocator<pair<const unsigned int,TString> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HDiskFile = { "HDiskFile" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HDiskDir = { "HDiskDir" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR = { "vector<HDiskFile,allocator<HDiskFile> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilecOallocatorlEHDiskFilegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HDiskFile,allocator<HDiskFile> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOHDiskDirmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHDiskDirmUgRsPgRsPgR = { "map<TString,HDiskDir*,less<TString>,allocator<pair<const TString,HDiskDir*> > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgR = { "vector<HDiskDir*,allocator<HDiskDir*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HDiskDir*,allocator<HDiskDir*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgR = { "vector<HDiskFile*,allocator<HDiskFile*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HDiskFile*,allocator<HDiskFile*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HDiskStat = { "HDiskStat" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETGraphcOallocatorlETGraphgRsPgR = { "vector<TGraph,allocator<TGraph> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETGraphcOallocatorlETGraphgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGraph,allocator<TGraph> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_maplETStringcOvectorlETGraphcOallocatorlETGraphgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOvectorlETGraphcOallocatorlETGraphgRsPgRsPgRsPgRsPgR = { "map<TString,vector<TGraph,allocator<TGraph> >,less<TString>,allocator<pair<const TString,vector<TGraph,allocator<TGraph> > > > >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR = { "vector<TGraph*,allocator<TGraph*> >" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGraph*,allocator<TGraph*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HTime = { "HTime" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TRandom = { "TRandom" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TRandom3 = { "TRandom3" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSeed = { "HSeed" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TVirtualPS = { "TVirtualPS" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_TPDF = { "TPDF" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HMultiPagePDF = { "HMultiPagePDF" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSUProgress = { "HSUProgress" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSUExeMacro = { "HSUExeMacro" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSUBranchElement = { "HSUBranchElement" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSUDummyRec = { "HSUDummyRec" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HSUIteratorObject = { "HSUIteratorObject" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HHitFilter = { "HHitFilter" , 99 , -1 };
G__linked_taginfo G__UtilDictLN_HGeantFilter = { "HGeantFilter" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableUtilDict() {
  G__UtilDictLN_TClass.tagnum = -1 ;
  G__UtilDictLN_TBuffer.tagnum = -1 ;
  G__UtilDictLN_TDirectory.tagnum = -1 ;
  G__UtilDictLN_TMemberInspector.tagnum = -1 ;
  G__UtilDictLN_TObject.tagnum = -1 ;
  G__UtilDictLN_TNamed.tagnum = -1 ;
  G__UtilDictLN_TCollection.tagnum = -1 ;
  G__UtilDictLN_TString.tagnum = -1 ;
  G__UtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR.tagnum = -1 ;
  G__UtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__UtilDictLN_string.tagnum = -1 ;
  G__UtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_TList.tagnum = -1 ;
  G__UtilDictLN_TObjArray.tagnum = -1 ;
  G__UtilDictLN_TClonesArray.tagnum = -1 ;
  G__UtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_HDebug.tagnum = -1 ;
  G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__UtilDictLN_TArray.tagnum = -1 ;
  G__UtilDictLN_TArrayI.tagnum = -1 ;
  G__UtilDictLN_HLocation.tagnum = -1 ;
  G__UtilDictLN_HObjTable.tagnum = -1 ;
  G__UtilDictLN_HTask.tagnum = -1 ;
  G__UtilDictLN_TStopwatch.tagnum = -1 ;
  G__UtilDictLN_HReconstructor.tagnum = -1 ;
  G__UtilDictLN_HEventHeader.tagnum = -1 ;
  G__UtilDictLN_HRunAnalizer.tagnum = -1 ;
  G__UtilDictLN_TArrayF.tagnum = -1 ;
  G__UtilDictLN_HSymMat.tagnum = -1 ;
  G__UtilDictLN_HSymMat2.tagnum = -1 ;
  G__UtilDictLN_HSymMat3.tagnum = -1 ;
  G__UtilDictLN_HSymMat4.tagnum = -1 ;
  G__UtilDictLN_HSymMat5.tagnum = -1 ;
  G__UtilDictLN_HSymMat6.tagnum = -1 ;
  G__UtilDictLN_TSocket.tagnum = -1 ;
  G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_TAttFill.tagnum = -1 ;
  G__UtilDictLN_TTree.tagnum = -1 ;
  G__UtilDictLN_TFile.tagnum = -1 ;
  G__UtilDictLN_TBranch.tagnum = -1 ;
  G__UtilDictLN_TAttLine.tagnum = -1 ;
  G__UtilDictLN_TAttMarker.tagnum = -1 ;
  G__UtilDictLN_TArrayD.tagnum = -1 ;
  G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__UtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_TH1.tagnum = -1 ;
  G__UtilDictLN_TArrayC.tagnum = -1 ;
  G__UtilDictLN_HMessageMgr.tagnum = -1 ;
  G__UtilDictLN_HGeantMedia.tagnum = -1 ;
  G__UtilDictLN_HSrcKeeper.tagnum = -1 ;
  G__UtilDictLN_HMessageMgrcLcLDetector.tagnum = -1 ;
  G__UtilDictLN_TCanvas.tagnum = -1 ;
  G__UtilDictLN_TNtuple.tagnum = -1 ;
  G__UtilDictLN_HNtuple.tagnum = -1 ;
  G__UtilDictLN_HNtupleMap.tagnum = -1 ;
  G__UtilDictLN_TArrayS.tagnum = -1 ;
  G__UtilDictLN_TArrayL.tagnum = -1 ;
  G__UtilDictLN_TArrayL64.tagnum = -1 ;
  G__UtilDictLN_HArrayC.tagnum = -1 ;
  G__UtilDictLN_HArrayS.tagnum = -1 ;
  G__UtilDictLN_HArrayI.tagnum = -1 ;
  G__UtilDictLN_HArrayL.tagnum = -1 ;
  G__UtilDictLN_HArrayL64.tagnum = -1 ;
  G__UtilDictLN_HArrayF.tagnum = -1 ;
  G__UtilDictLN_HArrayD.tagnum = -1 ;
  G__UtilDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__UtilDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__UtilDictLN_TF1.tagnum = -1 ;
  G__UtilDictLN_TH1D.tagnum = -1 ;
  G__UtilDictLN_TH1F.tagnum = -1 ;
  G__UtilDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__UtilDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__UtilDictLN_TH2.tagnum = -1 ;
  G__UtilDictLN_TGraph.tagnum = -1 ;
  G__UtilDictLN_TCutG.tagnum = -1 ;
  G__UtilDictLN_TAttText.tagnum = -1 ;
  G__UtilDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_TGraphErrors.tagnum = -1 ;
  G__UtilDictLN_HTool.tagnum = -1 ;
  G__UtilDictLN_TH3.tagnum = -1 ;
  G__UtilDictLN_TMacro.tagnum = -1 ;
  G__UtilDictLN_HHistMap.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTH1mUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTH1mUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTH1mUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTCanvasmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTCanvasmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTCutGmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCutGmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTF1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTF1mUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOTMacromUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMacromUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_vectorlETCutGmUcOallocatorlETCutGmUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETCutGmUcOallocatorlETCutGmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_vectorlETMacromUcOallocatorlETMacromUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETMacromUcOallocatorlETMacromUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_HFlex.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOdoublecOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOdoublegRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_HFilter.tagnum = -1 ;
  G__UtilDictLN_HCategory.tagnum = -1 ;
  G__UtilDictLN_HFlexFiller.tagnum = -1 ;
  G__UtilDictLN_particleproperties.tagnum = -1 ;
  G__UtilDictLN_HPhysicsConstants.tagnum = -1 ;
  G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_HHistConverter.tagnum = -1 ;
  G__UtilDictLN_HBitMan.tagnum = -1 ;
  G__UtilDictLN_HBitMancLcLword.tagnum = -1 ;
  G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOHBitMancLcLwordcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHBitMancLcLwordgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_HSTLTool.tagnum = -1 ;
  G__UtilDictLN_HPartialEvent.tagnum = -1 ;
  G__UtilDictLN_HRecEvent.tagnum = -1 ;
  G__UtilDictLN_HCategoryManager.tagnum = -1 ;
  G__UtilDictLN_TChain.tagnum = -1 ;
  G__UtilDictLN_HGeantHeader.tagnum = -1 ;
  G__UtilDictLN_HSectorSelector.tagnum = -1 ;
  G__UtilDictLN_HLoop.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_HZip.tagnum = -1 ;
  G__UtilDictLN_HDiskCatalog.tagnum = -1 ;
  G__UtilDictLN_stat.tagnum = -1 ;
  G__UtilDictLN_HFileSys.tagnum = -1 ;
  G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_HDiskFile.tagnum = -1 ;
  G__UtilDictLN_HDiskDir.tagnum = -1 ;
  G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilecOallocatorlEHDiskFilegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOHDiskDirmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHDiskDirmUgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_vectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_vectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_HDiskStat.tagnum = -1 ;
  G__UtilDictLN_vectorlETGraphcOallocatorlETGraphgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETGraphcOallocatorlETGraphgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_maplETStringcOvectorlETGraphcOallocatorlETGraphgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOvectorlETGraphcOallocatorlETGraphgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__UtilDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR.tagnum = -1 ;
  G__UtilDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__UtilDictLN_HTime.tagnum = -1 ;
  G__UtilDictLN_TRandom.tagnum = -1 ;
  G__UtilDictLN_TRandom3.tagnum = -1 ;
  G__UtilDictLN_HSeed.tagnum = -1 ;
  G__UtilDictLN_TVirtualPS.tagnum = -1 ;
  G__UtilDictLN_TPDF.tagnum = -1 ;
  G__UtilDictLN_HMultiPagePDF.tagnum = -1 ;
  G__UtilDictLN_HSUProgress.tagnum = -1 ;
  G__UtilDictLN_HSUExeMacro.tagnum = -1 ;
  G__UtilDictLN_HSUBranchElement.tagnum = -1 ;
  G__UtilDictLN_HIterator.tagnum = -1 ;
  G__UtilDictLN_HSUDummyRec.tagnum = -1 ;
  G__UtilDictLN_HSUIteratorObject.tagnum = -1 ;
  G__UtilDictLN_HHitFilter.tagnum = -1 ;
  G__UtilDictLN_HGeantFilter.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableUtilDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TDirectory);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TCollection);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TString);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEunsignedsPintcOallocatorlEunsignedsPintgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_basic_ofstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_string);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TList);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HDebug),sizeof(HDebug),-1,29952,"Class for debugging;",G__setup_memvarHDebug,G__setup_memfuncHDebug);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArray);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HLocation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HObjTable),sizeof(HObjTable),-1,95488,(char*)NULL,G__setup_memvarHObjTable,G__setup_memfuncHObjTable);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TStopwatch);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HEventHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HRunAnalizer),sizeof(HRunAnalizer),-1,62976,"Extract info from run files;",G__setup_memvarHRunAnalizer,G__setup_memfuncHRunAnalizer);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSymMat),sizeof(HSymMat),-1,62720,"Symmetric matrix  ",G__setup_memvarHSymMat,G__setup_memfuncHSymMat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSymMat2),sizeof(HSymMat2),-1,62720,"Symmetric matrix dimension 2",G__setup_memvarHSymMat2,G__setup_memfuncHSymMat2);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSymMat3),sizeof(HSymMat3),-1,62720,"Symmetric matrix dimension 3",G__setup_memvarHSymMat3,G__setup_memfuncHSymMat3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSymMat4),sizeof(HSymMat4),-1,62720,"Symmetric matrix dimension 4",G__setup_memvarHSymMat4,G__setup_memfuncHSymMat4);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSymMat5),sizeof(HSymMat5),-1,62720,"Symmetric matrix dimension 5",G__setup_memvarHSymMat5,G__setup_memfuncHSymMat5);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSymMat6),sizeof(HSymMat6),-1,62720,"Symmetric matrix dimension 6",G__setup_memvarHSymMat6,G__setup_memfuncHSymMat6);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TSocket);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TAttFill);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TBranch);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TAttLine);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TAttMarker);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplEstringcOintcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplEstringcOfloatcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOfloatgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TH1);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArrayC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HMessageMgr),sizeof(HMessageMgr),-1,62464,"Message logging facility",G__setup_memvarHMessageMgr,G__setup_memfuncHMessageMgr);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HGeantMedia);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSrcKeeper),sizeof(HSrcKeeper),-1,62720,(char*)NULL,G__setup_memvarHSrcKeeper,G__setup_memfuncHSrcKeeper);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HMessageMgrcLcLDetector);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TCanvas);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TNtuple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HNtuple),sizeof(HNtuple),-1,64768,(char*)NULL,G__setup_memvarHNtuple,G__setup_memfuncHNtuple);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HNtupleMap),sizeof(HNtupleMap),-1,29952,"map class arround TNtuple",G__setup_memvarHNtupleMap,G__setup_memfuncHNtupleMap);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArrayS);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArrayL);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TArrayL64);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HArrayC),sizeof(HArrayC),-1,62720,(char*)NULL,G__setup_memvarHArrayC,G__setup_memfuncHArrayC);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HArrayS),sizeof(HArrayS),-1,62720,(char*)NULL,G__setup_memvarHArrayS,G__setup_memfuncHArrayS);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HArrayI),sizeof(HArrayI),-1,62720,(char*)NULL,G__setup_memvarHArrayI,G__setup_memfuncHArrayI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HArrayL),sizeof(HArrayL),-1,62720,(char*)NULL,G__setup_memvarHArrayL,G__setup_memfuncHArrayL);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HArrayL64),sizeof(HArrayL64),-1,62720,(char*)NULL,G__setup_memvarHArrayL64,G__setup_memfuncHArrayL64);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HArrayF),sizeof(HArrayF),-1,62720,(char*)NULL,G__setup_memvarHArrayF,G__setup_memfuncHArrayF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HArrayD),sizeof(HArrayD),-1,62720,(char*)NULL,G__setup_memvarHArrayD,G__setup_memfuncHArrayD);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TH2);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TCutG);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TAttText);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TGraphErrors);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HTool),sizeof(HTool),-1,62720,"tool class",G__setup_memvarHTool,G__setup_memfuncHTool);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TH3);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TMacro);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HHistMap),sizeof(HHistMap),-1,62720,(char*)NULL,G__setup_memvarHHistMap,G__setup_memfuncHHistMap);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTStringcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTObjArraycOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjArraygRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTArrayIcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTArrayIgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTH1mUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTH1mUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTH1mUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTH1mUmUmUmUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTCanvasmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTCanvasmUmUmUmUmUmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCanvasmUmUmUmUmUmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTCutGmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTCutGmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTF1mUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTF1mUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTObjectmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTObjectmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOTMacromUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOTMacromUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETCutGmUcOallocatorlETCutGmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETCutGmUcOallocatorlETCutGmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETF1mUcOallocatorlETF1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETF1mUcOallocatorlETF1mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETObjectmUcOallocatorlETObjectmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETObjectmUcOallocatorlETObjectmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETMacromUcOallocatorlETMacromUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETMacromUcOallocatorlETMacromUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HFlex),sizeof(HFlex),-1,29952,(char*)NULL,G__setup_memvarHFlex,G__setup_memfuncHFlex);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOintcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOdoublecOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HFilter);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HFlexFiller),sizeof(HFlexFiller),-1,62720,(char*)NULL,G__setup_memvarHFlexFiller,G__setup_memfuncHFlexFiller);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_particleproperties);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HPhysicsConstants),sizeof(HPhysicsConstants),-1,28672,(char*)NULL,G__setup_memvarHPhysicsConstants,G__setup_memfuncHPhysicsConstants);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HHistConverter),sizeof(HHistConverter),-1,29952,"convert histogram from/to linear TArrayD",G__setup_memvarHHistConverter,G__setup_memfuncHHistConverter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HBitMan),sizeof(HBitMan),-1,29952,(char*)NULL,G__setup_memvarHBitMan,G__setup_memfuncHBitMan);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HBitMancLcLword);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlEHBitMancLcLwordcOallocatorlEHBitMancLcLwordgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOHBitMancLcLwordcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHBitMancLcLwordgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSTLTool),sizeof(HSTLTool),-1,29952,(char*)NULL,G__setup_memvarHSTLTool,G__setup_memfuncHSTLTool);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HPartialEvent);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HRecEvent);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HCategoryManager),sizeof(HCategoryManager),-1,29952,"A simple helper object",G__setup_memvarHCategoryManager,G__setup_memfuncHCategoryManager);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TChain);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HGeantHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSectorSelector),sizeof(HSectorSelector),-1,29952,"simple file to valide sector map",G__setup_memvarHSectorSelector,G__setup_memfuncHSectorSelector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HLoop),sizeof(HLoop),-1,29952,"simple class to fastly loop dst's",G__setup_memvarHLoop,G__setup_memfuncHLoop);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOHCategorymUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHCategorymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOHPartialEventmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHPartialEventmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOshortcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOshortgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HZip),sizeof(HZip),-1,29952,(char*)NULL,G__setup_memvarHZip,G__setup_memfuncHZip);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HDiskCatalog),sizeof(HDiskCatalog),-1,62720,(char*)NULL,G__setup_memvarHDiskCatalog,G__setup_memfuncHDiskCatalog);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_stat);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HFileSys),sizeof(HFileSys),-1,0,(char*)NULL,G__setup_memvarHFileSys,G__setup_memfuncHFileSys);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplEunsignedsPintcOTStringcOlesslEunsignedsPintgRcOallocatorlEpairlEconstsPunsignedsPintcOTStringgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HDiskFile),sizeof(HDiskFile),-1,62720,(char*)NULL,G__setup_memvarHDiskFile,G__setup_memfuncHDiskFile);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HDiskDir),sizeof(HDiskDir),-1,62720,(char*)NULL,G__setup_memvarHDiskDir,G__setup_memfuncHDiskDir);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEHDiskFilecOallocatorlEHDiskFilegRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilecOallocatorlEHDiskFilegRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOHDiskDirmUcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOHDiskDirmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskDirmUcOallocatorlEHDiskDirmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlEHDiskFilemUcOallocatorlEHDiskFilemUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HDiskStat),sizeof(HDiskStat),-1,62720,(char*)NULL,G__setup_memvarHDiskStat,G__setup_memfuncHDiskStat);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETGraphcOallocatorlETGraphgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETGraphcOallocatorlETGraphgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_maplETStringcOvectorlETGraphcOallocatorlETGraphgRsPgRcOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOvectorlETGraphcOallocatorlETGraphgRsPgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HTime),sizeof(HTime),-1,29952,(char*)NULL,G__setup_memvarHTime,G__setup_memfuncHTime);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TRandom);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TRandom3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSeed),sizeof(HSeed),-1,29952,(char*)NULL,G__setup_memvarHSeed,G__setup_memfuncHSeed);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TVirtualPS);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_TPDF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HMultiPagePDF),sizeof(HMultiPagePDF),-1,62720,(char*)NULL,G__setup_memvarHMultiPagePDF,G__setup_memfuncHMultiPagePDF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSUProgress),sizeof(HSUProgress),-1,1280,"! Progress bar class",G__setup_memvarHSUProgress,G__setup_memfuncHSUProgress);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSUExeMacro),sizeof(HSUExeMacro),-1,29952,"! Easy acces to branches in exe macro",G__setup_memvarHSUExeMacro,G__setup_memfuncHSUExeMacro);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HSUBranchElement);
   G__get_linked_tagnum_fwd(&G__UtilDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSUDummyRec),sizeof(HSUDummyRec),-1,62720,"Dummy reconstructor",G__setup_memvarHSUDummyRec,G__setup_memfuncHSUDummyRec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HSUIteratorObject),sizeof(HSUIteratorObject),-1,62720,"Wrapper HIterator -> TObject",G__setup_memvarHSUIteratorObject,G__setup_memfuncHSUIteratorObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HHitFilter),sizeof(HHitFilter),-1,29952,"HGeant hit filter",G__setup_memvarHHitFilter,G__setup_memfuncHHitFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__UtilDictLN_HGeantFilter),sizeof(HGeantFilter),-1,62976,"Filter HGeant-generated input  ",G__setup_memvarHGeantFilter,G__setup_memfuncHGeantFilter);
}
extern "C" void G__cpp_setupUtilDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupUtilDict()");
  G__set_cpp_environmentUtilDict();
  G__cpp_setup_tagtableUtilDict();

  G__cpp_setup_inheritanceUtilDict();

  G__cpp_setup_typetableUtilDict();

  G__cpp_setup_memvarUtilDict();

  G__cpp_setup_memfuncUtilDict();
  G__cpp_setup_globalUtilDict();
  G__cpp_setup_funcUtilDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncUtilDict();
  return;
}
class G__cpp_setup_initUtilDict {
  public:
    G__cpp_setup_initUtilDict() { G__add_setup_func("UtilDict",(G__incsetup)(&G__cpp_setupUtilDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initUtilDict() { G__remove_setup_func("UtilDict"); }
};
G__cpp_setup_initUtilDict G__cpp_setup_initializerUtilDict;


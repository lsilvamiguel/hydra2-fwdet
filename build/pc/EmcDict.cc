//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:52:28 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIEmcDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "EmcDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HEmcDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcDetector(void *p = 0);
   static void *newArray_HEmcDetector(Long_t size, void *p);
   static void delete_HEmcDetector(void *p);
   static void deleteArray_HEmcDetector(void *p);
   static void destruct_HEmcDetector(void *p);
   static void streamer_HEmcDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcDetector*)
   {
      ::HEmcDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcDetector", ::HEmcDetector::Class_Version(), "././hemcdetector.h", 6,
                  typeid(::HEmcDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcDetector) );
      instance.SetNew(&new_HEmcDetector);
      instance.SetNewArray(&newArray_HEmcDetector);
      instance.SetDelete(&delete_HEmcDetector);
      instance.SetDeleteArray(&deleteArray_HEmcDetector);
      instance.SetDestructor(&destruct_HEmcDetector);
      instance.SetStreamerFunc(&streamer_HEmcDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcDetector*)
   {
      return GenerateInitInstanceLocal((::HEmcDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcRaw(void *p = 0);
   static void *newArray_HEmcRaw(Long_t size, void *p);
   static void delete_HEmcRaw(void *p);
   static void deleteArray_HEmcRaw(void *p);
   static void destruct_HEmcRaw(void *p);
   static void streamer_HEmcRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcRaw*)
   {
      ::HEmcRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcRaw", ::HEmcRaw::Class_Version(), "././hemcraw.h", 6,
                  typeid(::HEmcRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcRaw) );
      instance.SetNew(&new_HEmcRaw);
      instance.SetNewArray(&newArray_HEmcRaw);
      instance.SetDelete(&delete_HEmcRaw);
      instance.SetDeleteArray(&deleteArray_HEmcRaw);
      instance.SetDestructor(&destruct_HEmcRaw);
      instance.SetStreamerFunc(&streamer_HEmcRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcRaw*)
   {
      return GenerateInitInstanceLocal((::HEmcRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCal(void *p = 0);
   static void *newArray_HEmcCal(Long_t size, void *p);
   static void delete_HEmcCal(void *p);
   static void deleteArray_HEmcCal(void *p);
   static void destruct_HEmcCal(void *p);
   static void streamer_HEmcCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCal*)
   {
      ::HEmcCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCal", ::HEmcCal::Class_Version(), "././hemccal.h", 8,
                  typeid(::HEmcCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCal::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCal) );
      instance.SetNew(&new_HEmcCal);
      instance.SetNewArray(&newArray_HEmcCal);
      instance.SetDelete(&delete_HEmcCal);
      instance.SetDeleteArray(&deleteArray_HEmcCal);
      instance.SetDestructor(&destruct_HEmcCal);
      instance.SetStreamerFunc(&streamer_HEmcCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCal*)
   {
      return GenerateInitInstanceLocal((::HEmcCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCalSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCalSim(void *p = 0);
   static void *newArray_HEmcCalSim(Long_t size, void *p);
   static void delete_HEmcCalSim(void *p);
   static void deleteArray_HEmcCalSim(void *p);
   static void destruct_HEmcCalSim(void *p);
   static void streamer_HEmcCalSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCalSim*)
   {
      ::HEmcCalSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCalSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCalSim", ::HEmcCalSim::Class_Version(), "././hemccalsim.h", 6,
                  typeid(::HEmcCalSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCalSim::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCalSim) );
      instance.SetNew(&new_HEmcCalSim);
      instance.SetNewArray(&newArray_HEmcCalSim);
      instance.SetDelete(&delete_HEmcCalSim);
      instance.SetDeleteArray(&deleteArray_HEmcCalSim);
      instance.SetDestructor(&destruct_HEmcCalSim);
      instance.SetStreamerFunc(&streamer_HEmcCalSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCalSim*)
   {
      return GenerateInitInstanceLocal((::HEmcCalSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCalSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCluster_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCluster(void *p = 0);
   static void *newArray_HEmcCluster(Long_t size, void *p);
   static void delete_HEmcCluster(void *p);
   static void deleteArray_HEmcCluster(void *p);
   static void destruct_HEmcCluster(void *p);
   static void streamer_HEmcCluster(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCluster*)
   {
      ::HEmcCluster *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCluster >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCluster", ::HEmcCluster::Class_Version(), "././hemccluster.h", 7,
                  typeid(::HEmcCluster), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCluster::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCluster) );
      instance.SetNew(&new_HEmcCluster);
      instance.SetNewArray(&newArray_HEmcCluster);
      instance.SetDelete(&delete_HEmcCluster);
      instance.SetDeleteArray(&deleteArray_HEmcCluster);
      instance.SetDestructor(&destruct_HEmcCluster);
      instance.SetStreamerFunc(&streamer_HEmcCluster);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCluster*)
   {
      return GenerateInitInstanceLocal((::HEmcCluster*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCluster*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcClusterSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcClusterSim(void *p = 0);
   static void *newArray_HEmcClusterSim(Long_t size, void *p);
   static void delete_HEmcClusterSim(void *p);
   static void deleteArray_HEmcClusterSim(void *p);
   static void destruct_HEmcClusterSim(void *p);
   static void streamer_HEmcClusterSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcClusterSim*)
   {
      ::HEmcClusterSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcClusterSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcClusterSim", ::HEmcClusterSim::Class_Version(), "././hemcclustersim.h", 6,
                  typeid(::HEmcClusterSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcClusterSim::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcClusterSim) );
      instance.SetNew(&new_HEmcClusterSim);
      instance.SetNewArray(&newArray_HEmcClusterSim);
      instance.SetDelete(&delete_HEmcClusterSim);
      instance.SetDeleteArray(&deleteArray_HEmcClusterSim);
      instance.SetDestructor(&destruct_HEmcClusterSim);
      instance.SetStreamerFunc(&streamer_HEmcClusterSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcClusterSim*)
   {
      return GenerateInitInstanceLocal((::HEmcClusterSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcClusterSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcTaskSet(void *p = 0);
   static void *newArray_HEmcTaskSet(Long_t size, void *p);
   static void delete_HEmcTaskSet(void *p);
   static void deleteArray_HEmcTaskSet(void *p);
   static void destruct_HEmcTaskSet(void *p);
   static void streamer_HEmcTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcTaskSet*)
   {
      ::HEmcTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcTaskSet", ::HEmcTaskSet::Class_Version(), "././hemctaskset.h", 6,
                  typeid(::HEmcTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcTaskSet) );
      instance.SetNew(&new_HEmcTaskSet);
      instance.SetNewArray(&newArray_HEmcTaskSet);
      instance.SetDelete(&delete_HEmcTaskSet);
      instance.SetDeleteArray(&deleteArray_HEmcTaskSet);
      instance.SetDestructor(&destruct_HEmcTaskSet);
      instance.SetStreamerFunc(&streamer_HEmcTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcTaskSet*)
   {
      return GenerateInitInstanceLocal((::HEmcTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcTrb3Lookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcTrb3Lookup(void *p = 0);
   static void *newArray_HEmcTrb3Lookup(Long_t size, void *p);
   static void delete_HEmcTrb3Lookup(void *p);
   static void deleteArray_HEmcTrb3Lookup(void *p);
   static void destruct_HEmcTrb3Lookup(void *p);
   static void streamer_HEmcTrb3Lookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcTrb3Lookup*)
   {
      ::HEmcTrb3Lookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcTrb3Lookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcTrb3Lookup", ::HEmcTrb3Lookup::Class_Version(), "././hemctrb3lookup.h", 63,
                  typeid(::HEmcTrb3Lookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcTrb3Lookup::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcTrb3Lookup) );
      instance.SetNew(&new_HEmcTrb3Lookup);
      instance.SetNewArray(&newArray_HEmcTrb3Lookup);
      instance.SetDelete(&delete_HEmcTrb3Lookup);
      instance.SetDeleteArray(&deleteArray_HEmcTrb3Lookup);
      instance.SetDestructor(&destruct_HEmcTrb3Lookup);
      instance.SetStreamerFunc(&streamer_HEmcTrb3Lookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcTrb3Lookup*)
   {
      return GenerateInitInstanceLocal((::HEmcTrb3Lookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcTrb3Lookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcTrb3Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcTrb3Unpacker(void *p = 0);
   static void *newArray_HEmcTrb3Unpacker(Long_t size, void *p);
   static void delete_HEmcTrb3Unpacker(void *p);
   static void deleteArray_HEmcTrb3Unpacker(void *p);
   static void destruct_HEmcTrb3Unpacker(void *p);
   static void streamer_HEmcTrb3Unpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcTrb3Unpacker*)
   {
      ::HEmcTrb3Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcTrb3Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcTrb3Unpacker", ::HEmcTrb3Unpacker::Class_Version(), "././hemctrb3unpacker.h", 9,
                  typeid(::HEmcTrb3Unpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcTrb3Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcTrb3Unpacker) );
      instance.SetNew(&new_HEmcTrb3Unpacker);
      instance.SetNewArray(&newArray_HEmcTrb3Unpacker);
      instance.SetDelete(&delete_HEmcTrb3Unpacker);
      instance.SetDeleteArray(&deleteArray_HEmcTrb3Unpacker);
      instance.SetDestructor(&destruct_HEmcTrb3Unpacker);
      instance.SetStreamerFunc(&streamer_HEmcTrb3Unpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcTrb3Unpacker*)
   {
      return GenerateInitInstanceLocal((::HEmcTrb3Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcTrb3Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCalPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCalPar(void *p = 0);
   static void *newArray_HEmcCalPar(Long_t size, void *p);
   static void delete_HEmcCalPar(void *p);
   static void deleteArray_HEmcCalPar(void *p);
   static void destruct_HEmcCalPar(void *p);
   static void streamer_HEmcCalPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCalPar*)
   {
      ::HEmcCalPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCalPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCalPar", ::HEmcCalPar::Class_Version(), "././hemccalpar.h", 53,
                  typeid(::HEmcCalPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCalPar::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCalPar) );
      instance.SetNew(&new_HEmcCalPar);
      instance.SetNewArray(&newArray_HEmcCalPar);
      instance.SetDelete(&delete_HEmcCalPar);
      instance.SetDeleteArray(&deleteArray_HEmcCalPar);
      instance.SetDestructor(&destruct_HEmcCalPar);
      instance.SetStreamerFunc(&streamer_HEmcCalPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCalPar*)
   {
      return GenerateInitInstanceLocal((::HEmcCalPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCalPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCalibrater_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCalibrater(void *p = 0);
   static void *newArray_HEmcCalibrater(Long_t size, void *p);
   static void delete_HEmcCalibrater(void *p);
   static void deleteArray_HEmcCalibrater(void *p);
   static void destruct_HEmcCalibrater(void *p);
   static void streamer_HEmcCalibrater(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCalibrater*)
   {
      ::HEmcCalibrater *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCalibrater >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCalibrater", ::HEmcCalibrater::Class_Version(), "././hemccalibrater.h", 11,
                  typeid(::HEmcCalibrater), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCalibrater::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCalibrater) );
      instance.SetNew(&new_HEmcCalibrater);
      instance.SetNewArray(&newArray_HEmcCalibrater);
      instance.SetDelete(&delete_HEmcCalibrater);
      instance.SetDeleteArray(&deleteArray_HEmcCalibrater);
      instance.SetDestructor(&destruct_HEmcCalibrater);
      instance.SetStreamerFunc(&streamer_HEmcCalibrater);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCalibrater*)
   {
      return GenerateInitInstanceLocal((::HEmcCalibrater*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCalibrater*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcGeomPar(void *p = 0);
   static void *newArray_HEmcGeomPar(Long_t size, void *p);
   static void delete_HEmcGeomPar(void *p);
   static void deleteArray_HEmcGeomPar(void *p);
   static void destruct_HEmcGeomPar(void *p);
   static void streamer_HEmcGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcGeomPar*)
   {
      ::HEmcGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcGeomPar", ::HEmcGeomPar::Class_Version(), "././hemcgeompar.h", 8,
                  typeid(::HEmcGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcGeomPar) );
      instance.SetNew(&new_HEmcGeomPar);
      instance.SetNewArray(&newArray_HEmcGeomPar);
      instance.SetDelete(&delete_HEmcGeomPar);
      instance.SetDeleteArray(&deleteArray_HEmcGeomPar);
      instance.SetDestructor(&destruct_HEmcGeomPar);
      instance.SetStreamerFunc(&streamer_HEmcGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcGeomPar*)
   {
      return GenerateInitInstanceLocal((::HEmcGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcDigiPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcDigiPar(void *p = 0);
   static void *newArray_HEmcDigiPar(Long_t size, void *p);
   static void delete_HEmcDigiPar(void *p);
   static void deleteArray_HEmcDigiPar(void *p);
   static void destruct_HEmcDigiPar(void *p);
   static void streamer_HEmcDigiPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcDigiPar*)
   {
      ::HEmcDigiPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcDigiPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcDigiPar", ::HEmcDigiPar::Class_Version(), "././hemcdigipar.h", 6,
                  typeid(::HEmcDigiPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcDigiPar::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcDigiPar) );
      instance.SetNew(&new_HEmcDigiPar);
      instance.SetNewArray(&newArray_HEmcDigiPar);
      instance.SetDelete(&delete_HEmcDigiPar);
      instance.SetDeleteArray(&deleteArray_HEmcDigiPar);
      instance.SetDestructor(&destruct_HEmcDigiPar);
      instance.SetStreamerFunc(&streamer_HEmcDigiPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcDigiPar*)
   {
      return GenerateInitInstanceLocal((::HEmcDigiPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcDigiPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcDigitizer(void *p = 0);
   static void *newArray_HEmcDigitizer(Long_t size, void *p);
   static void delete_HEmcDigitizer(void *p);
   static void deleteArray_HEmcDigitizer(void *p);
   static void destruct_HEmcDigitizer(void *p);
   static void streamer_HEmcDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcDigitizer*)
   {
      ::HEmcDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcDigitizer", ::HEmcDigitizer::Class_Version(), "././hemcdigitizer.h", 20,
                  typeid(::HEmcDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcDigitizer) );
      instance.SetNew(&new_HEmcDigitizer);
      instance.SetNewArray(&newArray_HEmcDigitizer);
      instance.SetDelete(&delete_HEmcDigitizer);
      instance.SetDeleteArray(&deleteArray_HEmcDigitizer);
      instance.SetDestructor(&destruct_HEmcDigitizer);
      instance.SetStreamerFunc(&streamer_HEmcDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcDigitizer*)
   {
      return GenerateInitInstanceLocal((::HEmcDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcClusterF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcClusterF(void *p = 0);
   static void *newArray_HEmcClusterF(Long_t size, void *p);
   static void delete_HEmcClusterF(void *p);
   static void deleteArray_HEmcClusterF(void *p);
   static void destruct_HEmcClusterF(void *p);
   static void streamer_HEmcClusterF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcClusterF*)
   {
      ::HEmcClusterF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcClusterF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcClusterF", ::HEmcClusterF::Class_Version(), "././hemcclusterf.h", 15,
                  typeid(::HEmcClusterF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcClusterF::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcClusterF) );
      instance.SetNew(&new_HEmcClusterF);
      instance.SetNewArray(&newArray_HEmcClusterF);
      instance.SetDelete(&delete_HEmcClusterF);
      instance.SetDeleteArray(&deleteArray_HEmcClusterF);
      instance.SetDestructor(&destruct_HEmcClusterF);
      instance.SetStreamerFunc(&streamer_HEmcClusterF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcClusterF*)
   {
      return GenerateInitInstanceLocal((::HEmcClusterF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcClusterF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcContFact(void *p = 0);
   static void *newArray_HEmcContFact(Long_t size, void *p);
   static void delete_HEmcContFact(void *p);
   static void deleteArray_HEmcContFact(void *p);
   static void destruct_HEmcContFact(void *p);
   static void streamer_HEmcContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcContFact*)
   {
      ::HEmcContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcContFact", ::HEmcContFact::Class_Version(), "././hemccontfact.h", 9,
                  typeid(::HEmcContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcContFact) );
      instance.SetNew(&new_HEmcContFact);
      instance.SetNewArray(&newArray_HEmcContFact);
      instance.SetDelete(&delete_HEmcContFact);
      instance.SetDeleteArray(&deleteArray_HEmcContFact);
      instance.SetDestructor(&destruct_HEmcContFact);
      instance.SetStreamerFunc(&streamer_HEmcContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcContFact*)
   {
      return GenerateInitInstanceLocal((::HEmcContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HEmcParRootFileIo(void *p);
   static void deleteArray_HEmcParRootFileIo(void *p);
   static void destruct_HEmcParRootFileIo(void *p);
   static void streamer_HEmcParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcParRootFileIo*)
   {
      ::HEmcParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcParRootFileIo", ::HEmcParRootFileIo::Class_Version(), "././hemcparrootfileio.h", 10,
                  typeid(::HEmcParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcParRootFileIo) );
      instance.SetDelete(&delete_HEmcParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HEmcParRootFileIo);
      instance.SetDestructor(&destruct_HEmcParRootFileIo);
      instance.SetStreamerFunc(&streamer_HEmcParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HEmcParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HEmcParAsciiFileIo(void *p);
   static void deleteArray_HEmcParAsciiFileIo(void *p);
   static void destruct_HEmcParAsciiFileIo(void *p);
   static void streamer_HEmcParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcParAsciiFileIo*)
   {
      ::HEmcParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcParAsciiFileIo", ::HEmcParAsciiFileIo::Class_Version(), "././hemcparasciifileio.h", 10,
                  typeid(::HEmcParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcParAsciiFileIo) );
      instance.SetDelete(&delete_HEmcParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HEmcParAsciiFileIo);
      instance.SetDestructor(&destruct_HEmcParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HEmcParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HEmcParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcTrb3LookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcTrb3LookupChan(void *p = 0);
   static void *newArray_HEmcTrb3LookupChan(Long_t size, void *p);
   static void delete_HEmcTrb3LookupChan(void *p);
   static void deleteArray_HEmcTrb3LookupChan(void *p);
   static void destruct_HEmcTrb3LookupChan(void *p);
   static void streamer_HEmcTrb3LookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcTrb3LookupChan*)
   {
      ::HEmcTrb3LookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcTrb3LookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcTrb3LookupChan", ::HEmcTrb3LookupChan::Class_Version(), "././hemctrb3lookup.h", 13,
                  typeid(::HEmcTrb3LookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcTrb3LookupChan::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcTrb3LookupChan) );
      instance.SetNew(&new_HEmcTrb3LookupChan);
      instance.SetNewArray(&newArray_HEmcTrb3LookupChan);
      instance.SetDelete(&delete_HEmcTrb3LookupChan);
      instance.SetDeleteArray(&deleteArray_HEmcTrb3LookupChan);
      instance.SetDestructor(&destruct_HEmcTrb3LookupChan);
      instance.SetStreamerFunc(&streamer_HEmcTrb3LookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcTrb3LookupChan*)
   {
      return GenerateInitInstanceLocal((::HEmcTrb3LookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcTrb3LookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcTrb3LookupBoard_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcTrb3LookupBoard(void *p = 0);
   static void *newArray_HEmcTrb3LookupBoard(Long_t size, void *p);
   static void delete_HEmcTrb3LookupBoard(void *p);
   static void deleteArray_HEmcTrb3LookupBoard(void *p);
   static void destruct_HEmcTrb3LookupBoard(void *p);
   static void streamer_HEmcTrb3LookupBoard(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcTrb3LookupBoard*)
   {
      ::HEmcTrb3LookupBoard *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcTrb3LookupBoard >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcTrb3LookupBoard", ::HEmcTrb3LookupBoard::Class_Version(), "././hemctrb3lookup.h", 41,
                  typeid(::HEmcTrb3LookupBoard), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcTrb3LookupBoard::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcTrb3LookupBoard) );
      instance.SetNew(&new_HEmcTrb3LookupBoard);
      instance.SetNewArray(&newArray_HEmcTrb3LookupBoard);
      instance.SetDelete(&delete_HEmcTrb3LookupBoard);
      instance.SetDeleteArray(&deleteArray_HEmcTrb3LookupBoard);
      instance.SetDestructor(&destruct_HEmcTrb3LookupBoard);
      instance.SetStreamerFunc(&streamer_HEmcTrb3LookupBoard);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcTrb3LookupBoard*)
   {
      return GenerateInitInstanceLocal((::HEmcTrb3LookupBoard*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcTrb3LookupBoard*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCalParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCalParCell(void *p = 0);
   static void *newArray_HEmcCalParCell(Long_t size, void *p);
   static void delete_HEmcCalParCell(void *p);
   static void deleteArray_HEmcCalParCell(void *p);
   static void destruct_HEmcCalParCell(void *p);
   static void streamer_HEmcCalParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCalParCell*)
   {
      ::HEmcCalParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCalParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCalParCell", ::HEmcCalParCell::Class_Version(), "././hemccalpar.h", 8,
                  typeid(::HEmcCalParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCalParCell::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCalParCell) );
      instance.SetNew(&new_HEmcCalParCell);
      instance.SetNewArray(&newArray_HEmcCalParCell);
      instance.SetDelete(&delete_HEmcCalParCell);
      instance.SetDeleteArray(&deleteArray_HEmcCalParCell);
      instance.SetDestructor(&destruct_HEmcCalParCell);
      instance.SetStreamerFunc(&streamer_HEmcCalParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCalParCell*)
   {
      return GenerateInitInstanceLocal((::HEmcCalParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCalParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCalParSec_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCalParSec(void *p = 0);
   static void *newArray_HEmcCalParSec(Long_t size, void *p);
   static void delete_HEmcCalParSec(void *p);
   static void deleteArray_HEmcCalParSec(void *p);
   static void destruct_HEmcCalParSec(void *p);
   static void streamer_HEmcCalParSec(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCalParSec*)
   {
      ::HEmcCalParSec *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCalParSec >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCalParSec", ::HEmcCalParSec::Class_Version(), "././hemccalpar.h", 39,
                  typeid(::HEmcCalParSec), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCalParSec::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCalParSec) );
      instance.SetNew(&new_HEmcCalParSec);
      instance.SetNewArray(&newArray_HEmcCalParSec);
      instance.SetDelete(&delete_HEmcCalParSec);
      instance.SetDeleteArray(&deleteArray_HEmcCalParSec);
      instance.SetDestructor(&destruct_HEmcCalParSec);
      instance.SetStreamerFunc(&streamer_HEmcCalParSec);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCalParSec*)
   {
      return GenerateInitInstanceLocal((::HEmcCalParSec*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCalParSec*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HEmcCellGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HEmcCellGeomPar(void *p = 0);
   static void *newArray_HEmcCellGeomPar(Long_t size, void *p);
   static void delete_HEmcCellGeomPar(void *p);
   static void deleteArray_HEmcCellGeomPar(void *p);
   static void destruct_HEmcCellGeomPar(void *p);
   static void streamer_HEmcCellGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HEmcCellGeomPar*)
   {
      ::HEmcCellGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HEmcCellGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HEmcCellGeomPar", ::HEmcCellGeomPar::Class_Version(), "././hemccellgeompar.h", 11,
                  typeid(::HEmcCellGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HEmcCellGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HEmcCellGeomPar) );
      instance.SetNew(&new_HEmcCellGeomPar);
      instance.SetNewArray(&newArray_HEmcCellGeomPar);
      instance.SetDelete(&delete_HEmcCellGeomPar);
      instance.SetDeleteArray(&deleteArray_HEmcCellGeomPar);
      instance.SetDestructor(&destruct_HEmcCellGeomPar);
      instance.SetStreamerFunc(&streamer_HEmcCellGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HEmcCellGeomPar*)
   {
      return GenerateInitInstanceLocal((::HEmcCellGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HEmcCellGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HEmcDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcDetector::Class_Name()
{
   return "HEmcDetector";
}

//______________________________________________________________________________
const char *HEmcDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcRaw::Class_Name()
{
   return "HEmcRaw";
}

//______________________________________________________________________________
const char *HEmcRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCal::Class_Name()
{
   return "HEmcCal";
}

//______________________________________________________________________________
const char *HEmcCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCalSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCalSim::Class_Name()
{
   return "HEmcCalSim";
}

//______________________________________________________________________________
const char *HEmcCalSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCalSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCalSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCalSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCluster::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCluster::Class_Name()
{
   return "HEmcCluster";
}

//______________________________________________________________________________
const char *HEmcCluster::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCluster*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCluster::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCluster*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCluster::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCluster*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCluster::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCluster*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcClusterSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcClusterSim::Class_Name()
{
   return "HEmcClusterSim";
}

//______________________________________________________________________________
const char *HEmcClusterSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcClusterSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcClusterSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcClusterSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcTaskSet::Class_Name()
{
   return "HEmcTaskSet";
}

//______________________________________________________________________________
const char *HEmcTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcTrb3Lookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcTrb3Lookup::Class_Name()
{
   return "HEmcTrb3Lookup";
}

//______________________________________________________________________________
const char *HEmcTrb3Lookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Lookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcTrb3Lookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Lookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcTrb3Lookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Lookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcTrb3Lookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Lookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcTrb3Unpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcTrb3Unpacker::Class_Name()
{
   return "HEmcTrb3Unpacker";
}

//______________________________________________________________________________
const char *HEmcTrb3Unpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcTrb3Unpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcTrb3Unpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcTrb3Unpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3Unpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCalPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCalPar::Class_Name()
{
   return "HEmcCalPar";
}

//______________________________________________________________________________
const char *HEmcCalPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCalPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCalPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCalPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCalibrater::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCalibrater::Class_Name()
{
   return "HEmcCalibrater";
}

//______________________________________________________________________________
const char *HEmcCalibrater::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalibrater*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCalibrater::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalibrater*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCalibrater::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalibrater*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCalibrater::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalibrater*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcGeomPar::Class_Name()
{
   return "HEmcGeomPar";
}

//______________________________________________________________________________
const char *HEmcGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcDigiPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcDigiPar::Class_Name()
{
   return "HEmcDigiPar";
}

//______________________________________________________________________________
const char *HEmcDigiPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigiPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcDigiPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigiPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcDigiPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigiPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcDigiPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigiPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcDigitizer::Class_Name()
{
   return "HEmcDigitizer";
}

//______________________________________________________________________________
const char *HEmcDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcClusterF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcClusterF::Class_Name()
{
   return "HEmcClusterF";
}

//______________________________________________________________________________
const char *HEmcClusterF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcClusterF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcClusterF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcClusterF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcClusterF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcContFact::Class_Name()
{
   return "HEmcContFact";
}

//______________________________________________________________________________
const char *HEmcContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcParRootFileIo::Class_Name()
{
   return "HEmcParRootFileIo";
}

//______________________________________________________________________________
const char *HEmcParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcParAsciiFileIo::Class_Name()
{
   return "HEmcParAsciiFileIo";
}

//______________________________________________________________________________
const char *HEmcParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcTrb3LookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcTrb3LookupChan::Class_Name()
{
   return "HEmcTrb3LookupChan";
}

//______________________________________________________________________________
const char *HEmcTrb3LookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcTrb3LookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcTrb3LookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcTrb3LookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcTrb3LookupBoard::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcTrb3LookupBoard::Class_Name()
{
   return "HEmcTrb3LookupBoard";
}

//______________________________________________________________________________
const char *HEmcTrb3LookupBoard::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupBoard*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcTrb3LookupBoard::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupBoard*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcTrb3LookupBoard::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupBoard*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcTrb3LookupBoard::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcTrb3LookupBoard*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCalParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCalParCell::Class_Name()
{
   return "HEmcCalParCell";
}

//______________________________________________________________________________
const char *HEmcCalParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCalParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCalParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCalParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCalParSec::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCalParSec::Class_Name()
{
   return "HEmcCalParSec";
}

//______________________________________________________________________________
const char *HEmcCalParSec::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParSec*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCalParSec::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParSec*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCalParSec::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParSec*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCalParSec::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCalParSec*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HEmcCellGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HEmcCellGeomPar::Class_Name()
{
   return "HEmcCellGeomPar";
}

//______________________________________________________________________________
const char *HEmcCellGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCellGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HEmcCellGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCellGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HEmcCellGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCellGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HEmcCellGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HEmcCellGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HEmcDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcDetector.

   HDetector::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcDetector.
      TClass *R__cl = ::HEmcDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numCells", &numCells);
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcDetector(void *p) {
      return  p ? new(p) ::HEmcDetector : new ::HEmcDetector;
   }
   static void *newArray_HEmcDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcDetector[nElements] : new ::HEmcDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcDetector(void *p) {
      delete ((::HEmcDetector*)p);
   }
   static void deleteArray_HEmcDetector(void *p) {
      delete [] ((::HEmcDetector*)p);
   }
   static void destruct_HEmcDetector(void *p) {
      typedef ::HEmcDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcDetector(TBuffer &buf, void *obj) {
      ((::HEmcDetector*)obj)->::HEmcDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcDetector

//______________________________________________________________________________
void HEmcRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> totMultiplicity;
      R__b >> sector;
      R__b >> cell;
      R__b >> fTime1;
      R__b >> fWidth1;
      R__b >> fTime2;
      R__b >> fWidth2;
      R__b >> fTime3;
      R__b >> fWidth3;
      R__b >> fTime4;
      R__b >> fWidth4;
      R__b.CheckByteCount(R__s, R__c, HEmcRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcRaw::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << totMultiplicity;
      R__b << sector;
      R__b << cell;
      R__b << fTime1;
      R__b << fWidth1;
      R__b << fTime2;
      R__b << fWidth2;
      R__b << fTime3;
      R__b << fWidth3;
      R__b << fTime4;
      R__b << fWidth4;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcRaw.
      TClass *R__cl = ::HEmcRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totMultiplicity", &totMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime1", &fTime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth1", &fWidth1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime2", &fTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth2", &fWidth2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime3", &fTime3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth3", &fWidth3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime4", &fTime4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWidth4", &fWidth4);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcRaw(void *p) {
      return  p ? new(p) ::HEmcRaw : new ::HEmcRaw;
   }
   static void *newArray_HEmcRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcRaw[nElements] : new ::HEmcRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcRaw(void *p) {
      delete ((::HEmcRaw*)p);
   }
   static void deleteArray_HEmcRaw(void *p) {
      delete [] ((::HEmcRaw*)p);
   }
   static void destruct_HEmcRaw(void *p) {
      typedef ::HEmcRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcRaw(TBuffer &buf, void *obj) {
      ((::HEmcRaw*)obj)->::HEmcRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcRaw

//______________________________________________________________________________
void HEmcCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nHits;
      R__b >> time1;
      R__b >> time2;
      R__b >> energy;
      R__b >> sector;
      R__b >> cell;
      R__b >> row;
      R__b >> column;
      R__b >> sigmaEnergy;
      R__b >> sigmaTime1;
      R__b >> sigmaTime2;
      R__b >> isRpcMatch;
      R__b >> clusterIndex;
      R__b >> statusTime1;
      R__b >> statusTime2;
      R__b.CheckByteCount(R__s, R__c, HEmcCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcCal::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nHits;
      R__b << time1;
      R__b << time2;
      R__b << energy;
      R__b << sector;
      R__b << cell;
      R__b << row;
      R__b << column;
      R__b << sigmaEnergy;
      R__b << sigmaTime1;
      R__b << sigmaTime2;
      R__b << isRpcMatch;
      R__b << clusterIndex;
      R__b << statusTime1;
      R__b << statusTime2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCal.
      TClass *R__cl = ::HEmcCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "row", &row);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "column", &column);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEnergy", &sigmaEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaTime1", &sigmaTime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaTime2", &sigmaTime2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isRpcMatch", &isRpcMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "clusterIndex", &clusterIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusTime1", &statusTime1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "statusTime2", &statusTime2);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCal(void *p) {
      return  p ? new(p) ::HEmcCal : new ::HEmcCal;
   }
   static void *newArray_HEmcCal(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCal[nElements] : new ::HEmcCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCal(void *p) {
      delete ((::HEmcCal*)p);
   }
   static void deleteArray_HEmcCal(void *p) {
      delete [] ((::HEmcCal*)p);
   }
   static void destruct_HEmcCal(void *p) {
      typedef ::HEmcCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCal(TBuffer &buf, void *obj) {
      ((::HEmcCal*)obj)->::HEmcCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCal

//______________________________________________________________________________
void HEmcCluster::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCluster.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> sector;
      R__b >> cell;
      R__b >> index;
      R__b >> ncells;
      R__b >> energy;
      R__b >> cellEnergy;
      R__b >> time;
      R__b >> sigmaEnergy;
      R__b >> sigmaTime;
      R__b >> xlab;
      R__b >> ylab;
      R__b >> zlab;
      R__b >> theta;
      R__b >> phi;
      R__b >> isActive;
      R__b.ReadStaticArray((unsigned char*)cellList);
      R__b >> rpcIndex;
      R__b >> nMatchedCells;
      R__b >> qualityDThDPh;
      R__b >> qualityDTime;
      R__b.CheckByteCount(R__s, R__c, HEmcCluster::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcCluster::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << sector;
      R__b << cell;
      R__b << index;
      R__b << ncells;
      R__b << energy;
      R__b << cellEnergy;
      R__b << time;
      R__b << sigmaEnergy;
      R__b << sigmaTime;
      R__b << xlab;
      R__b << ylab;
      R__b << zlab;
      R__b << theta;
      R__b << phi;
      R__b << isActive;
      R__b.WriteArray(cellList, 24);
      R__b << rpcIndex;
      R__b << nMatchedCells;
      R__b << qualityDThDPh;
      R__b << qualityDTime;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcCluster::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCluster.
      TClass *R__cl = ::HEmcCluster::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "index", &index);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ncells", &ncells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy", &energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellEnergy", &cellEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEnergy", &sigmaEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaTime", &sigmaTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlab", &xlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ylab", &ylab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlab", &zlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActive", &isActive);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellList[24]", cellList);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcIndex", &rpcIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMatchedCells", &nMatchedCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityDThDPh", &qualityDThDPh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "qualityDTime", &qualityDTime);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCluster(void *p) {
      return  p ? new(p) ::HEmcCluster : new ::HEmcCluster;
   }
   static void *newArray_HEmcCluster(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCluster[nElements] : new ::HEmcCluster[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCluster(void *p) {
      delete ((::HEmcCluster*)p);
   }
   static void deleteArray_HEmcCluster(void *p) {
      delete [] ((::HEmcCluster*)p);
   }
   static void destruct_HEmcCluster(void *p) {
      typedef ::HEmcCluster current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCluster(TBuffer &buf, void *obj) {
      ((::HEmcCluster*)obj)->::HEmcCluster::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCluster

//______________________________________________________________________________
void HEmcClusterSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcClusterSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HEmcCluster::Streamer(R__b);
      R__b >> nTracks;
      R__b >> totMult;
      R__b >> rpcTrack;
      R__b.ReadStaticArray((int*)listTracks);
      R__b.ReadStaticArray((float*)trackEnergy);
      R__b.CheckByteCount(R__s, R__c, HEmcClusterSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcClusterSim::IsA(), kTRUE);
      HEmcCluster::Streamer(R__b);
      R__b << nTracks;
      R__b << totMult;
      R__b << rpcTrack;
      R__b.WriteArray(listTracks, 5);
      R__b.WriteArray(trackEnergy, 5);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcClusterSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcClusterSim.
      TClass *R__cl = ::HEmcClusterSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totMult", &totMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "rpcTrack", &rpcTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTracks[5]", listTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackEnergy[5]", trackEnergy);
      HEmcCluster::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcClusterSim(void *p) {
      return  p ? new(p) ::HEmcClusterSim : new ::HEmcClusterSim;
   }
   static void *newArray_HEmcClusterSim(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcClusterSim[nElements] : new ::HEmcClusterSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcClusterSim(void *p) {
      delete ((::HEmcClusterSim*)p);
   }
   static void deleteArray_HEmcClusterSim(void *p) {
      delete [] ((::HEmcClusterSim*)p);
   }
   static void destruct_HEmcClusterSim(void *p) {
      typedef ::HEmcClusterSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcClusterSim(TBuffer &buf, void *obj) {
      ((::HEmcClusterSim*)obj)->::HEmcClusterSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcClusterSim

//______________________________________________________________________________
void HEmcCalSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCalSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HEmcCal::Streamer(R__b);
      R__b >> nTracks;
      R__b >> totMult;
      R__b.ReadStaticArray((int*)listTracks);
      R__b.ReadStaticArray((float*)trackEnergy);
      R__b >> time1track;
      R__b >> time2track;
      R__b.CheckByteCount(R__s, R__c, HEmcCalSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcCalSim::IsA(), kTRUE);
      HEmcCal::Streamer(R__b);
      R__b << nTracks;
      R__b << totMult;
      R__b.WriteArray(listTracks, 5);
      R__b.WriteArray(trackEnergy, 5);
      R__b << time1track;
      R__b << time2track;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcCalSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCalSim.
      TClass *R__cl = ::HEmcCalSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks", &nTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "totMult", &totMult);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listTracks[5]", listTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackEnergy[5]", trackEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1track", &time1track);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2track", &time2track);
      HEmcCal::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCalSim(void *p) {
      return  p ? new(p) ::HEmcCalSim : new ::HEmcCalSim;
   }
   static void *newArray_HEmcCalSim(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCalSim[nElements] : new ::HEmcCalSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCalSim(void *p) {
      delete ((::HEmcCalSim*)p);
   }
   static void deleteArray_HEmcCalSim(void *p) {
      delete [] ((::HEmcCalSim*)p);
   }
   static void destruct_HEmcCalSim(void *p) {
      typedef ::HEmcCalSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCalSim(TBuffer &buf, void *obj) {
      ((::HEmcCalSim*)obj)->::HEmcCalSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCalSim

//______________________________________________________________________________
void HEmcContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcContFact.
      TClass *R__cl = ::HEmcContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcContFact(void *p) {
      return  p ? new(p) ::HEmcContFact : new ::HEmcContFact;
   }
   static void *newArray_HEmcContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcContFact[nElements] : new ::HEmcContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcContFact(void *p) {
      delete ((::HEmcContFact*)p);
   }
   static void deleteArray_HEmcContFact(void *p) {
      delete [] ((::HEmcContFact*)p);
   }
   static void destruct_HEmcContFact(void *p) {
      typedef ::HEmcContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcContFact(TBuffer &buf, void *obj) {
      ((::HEmcContFact*)obj)->::HEmcContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcContFact

//______________________________________________________________________________
void HEmcParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcParRootFileIo.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetParRootFileIo::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HEmcParRootFileIo::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcParRootFileIo::IsA(), kTRUE);
      HDetParRootFileIo::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcParRootFileIo.
      TClass *R__cl = ::HEmcParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HEmcParRootFileIo(void *p) {
      delete ((::HEmcParRootFileIo*)p);
   }
   static void deleteArray_HEmcParRootFileIo(void *p) {
      delete [] ((::HEmcParRootFileIo*)p);
   }
   static void destruct_HEmcParRootFileIo(void *p) {
      typedef ::HEmcParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcParRootFileIo(TBuffer &buf, void *obj) {
      ((::HEmcParRootFileIo*)obj)->::HEmcParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcParRootFileIo

//______________________________________________________________________________
void HEmcParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcParAsciiFileIo.
      TClass *R__cl = ::HEmcParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HEmcParAsciiFileIo(void *p) {
      delete ((::HEmcParAsciiFileIo*)p);
   }
   static void deleteArray_HEmcParAsciiFileIo(void *p) {
      delete [] ((::HEmcParAsciiFileIo*)p);
   }
   static void destruct_HEmcParAsciiFileIo(void *p) {
      typedef ::HEmcParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HEmcParAsciiFileIo*)obj)->::HEmcParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcParAsciiFileIo

//______________________________________________________________________________
void HEmcTrb3Lookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcTrb3Lookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HEmcTrb3Lookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcTrb3Lookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcTrb3Lookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcTrb3Lookup.
      TClass *R__cl = ::HEmcTrb3Lookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcTrb3Lookup(void *p) {
      return  p ? new(p) ::HEmcTrb3Lookup : new ::HEmcTrb3Lookup;
   }
   static void *newArray_HEmcTrb3Lookup(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcTrb3Lookup[nElements] : new ::HEmcTrb3Lookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcTrb3Lookup(void *p) {
      delete ((::HEmcTrb3Lookup*)p);
   }
   static void deleteArray_HEmcTrb3Lookup(void *p) {
      delete [] ((::HEmcTrb3Lookup*)p);
   }
   static void destruct_HEmcTrb3Lookup(void *p) {
      typedef ::HEmcTrb3Lookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcTrb3Lookup(TBuffer &buf, void *obj) {
      ((::HEmcTrb3Lookup*)obj)->::HEmcTrb3Lookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcTrb3Lookup

//______________________________________________________________________________
void HEmcTrb3LookupBoard::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcTrb3LookupBoard.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HEmcTrb3LookupBoard::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcTrb3LookupBoard::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcTrb3LookupBoard::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcTrb3LookupBoard.
      TClass *R__cl = ::HEmcTrb3LookupBoard::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcTrb3LookupBoard(void *p) {
      return  p ? new(p) ::HEmcTrb3LookupBoard : new ::HEmcTrb3LookupBoard;
   }
   static void *newArray_HEmcTrb3LookupBoard(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcTrb3LookupBoard[nElements] : new ::HEmcTrb3LookupBoard[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcTrb3LookupBoard(void *p) {
      delete ((::HEmcTrb3LookupBoard*)p);
   }
   static void deleteArray_HEmcTrb3LookupBoard(void *p) {
      delete [] ((::HEmcTrb3LookupBoard*)p);
   }
   static void destruct_HEmcTrb3LookupBoard(void *p) {
      typedef ::HEmcTrb3LookupBoard current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcTrb3LookupBoard(TBuffer &buf, void *obj) {
      ((::HEmcTrb3LookupBoard*)obj)->::HEmcTrb3LookupBoard::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcTrb3LookupBoard

//______________________________________________________________________________
void HEmcTrb3LookupChan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcTrb3LookupChan.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> sector;
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HEmcTrb3LookupChan::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcTrb3LookupChan::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << sector;
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcTrb3LookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcTrb3LookupChan.
      TClass *R__cl = ::HEmcTrb3LookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sector", &sector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcTrb3LookupChan(void *p) {
      return  p ? new(p) ::HEmcTrb3LookupChan : new ::HEmcTrb3LookupChan;
   }
   static void *newArray_HEmcTrb3LookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcTrb3LookupChan[nElements] : new ::HEmcTrb3LookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcTrb3LookupChan(void *p) {
      delete ((::HEmcTrb3LookupChan*)p);
   }
   static void deleteArray_HEmcTrb3LookupChan(void *p) {
      delete [] ((::HEmcTrb3LookupChan*)p);
   }
   static void destruct_HEmcTrb3LookupChan(void *p) {
      typedef ::HEmcTrb3LookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcTrb3LookupChan(TBuffer &buf, void *obj) {
      ((::HEmcTrb3LookupChan*)obj)->::HEmcTrb3LookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcTrb3LookupChan

//______________________________________________________________________________
void HEmcCalPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCalPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HEmcCalPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcCalPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcCalPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCalPar.
      TClass *R__cl = ::HEmcCalPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCalPar(void *p) {
      return  p ? new(p) ::HEmcCalPar : new ::HEmcCalPar;
   }
   static void *newArray_HEmcCalPar(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCalPar[nElements] : new ::HEmcCalPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCalPar(void *p) {
      delete ((::HEmcCalPar*)p);
   }
   static void deleteArray_HEmcCalPar(void *p) {
      delete [] ((::HEmcCalPar*)p);
   }
   static void destruct_HEmcCalPar(void *p) {
      typedef ::HEmcCalPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCalPar(TBuffer &buf, void *obj) {
      ((::HEmcCalPar*)obj)->::HEmcCalPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCalPar

//______________________________________________________________________________
void HEmcCalParSec::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCalParSec.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HEmcCalParSec::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcCalParSec::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcCalParSec::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCalParSec.
      TClass *R__cl = ::HEmcCalParSec::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCalParSec(void *p) {
      return  p ? new(p) ::HEmcCalParSec : new ::HEmcCalParSec;
   }
   static void *newArray_HEmcCalParSec(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCalParSec[nElements] : new ::HEmcCalParSec[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCalParSec(void *p) {
      delete ((::HEmcCalParSec*)p);
   }
   static void deleteArray_HEmcCalParSec(void *p) {
      delete [] ((::HEmcCalParSec*)p);
   }
   static void destruct_HEmcCalParSec(void *p) {
      typedef ::HEmcCalParSec current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCalParSec(TBuffer &buf, void *obj) {
      ((::HEmcCalParSec*)obj)->::HEmcCalParSec::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCalParSec

//______________________________________________________________________________
void HEmcCalParCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCalParCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> tdcSlope;
      R__b >> tdcOffset;
      R__b >> adcSlope;
      R__b >> adcOffset;
      R__b.CheckByteCount(R__s, R__c, HEmcCalParCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcCalParCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << tdcSlope;
      R__b << tdcOffset;
      R__b << adcSlope;
      R__b << adcOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcCalParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCalParCell.
      TClass *R__cl = ::HEmcCalParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcSlope", &tdcSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcOffset", &tdcOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adcSlope", &adcSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adcOffset", &adcOffset);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCalParCell(void *p) {
      return  p ? new(p) ::HEmcCalParCell : new ::HEmcCalParCell;
   }
   static void *newArray_HEmcCalParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCalParCell[nElements] : new ::HEmcCalParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCalParCell(void *p) {
      delete ((::HEmcCalParCell*)p);
   }
   static void deleteArray_HEmcCalParCell(void *p) {
      delete [] ((::HEmcCalParCell*)p);
   }
   static void destruct_HEmcCalParCell(void *p) {
      typedef ::HEmcCalParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCalParCell(TBuffer &buf, void *obj) {
      ((::HEmcCalParCell*)obj)->::HEmcCalParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCalParCell

//______________________________________________________________________________
void HEmcGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetGeomPar::Streamer(R__b);
      R__b >> maxCells;
      R__b.CheckByteCount(R__s, R__c, HEmcGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcGeomPar::IsA(), kTRUE);
      HDetGeomPar::Streamer(R__b);
      R__b << maxCells;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcGeomPar.
      TClass *R__cl = ::HEmcGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCells", &maxCells);
      HDetGeomPar::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcGeomPar(void *p) {
      return  p ? new(p) ::HEmcGeomPar : new ::HEmcGeomPar;
   }
   static void *newArray_HEmcGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcGeomPar[nElements] : new ::HEmcGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcGeomPar(void *p) {
      delete ((::HEmcGeomPar*)p);
   }
   static void deleteArray_HEmcGeomPar(void *p) {
      delete [] ((::HEmcGeomPar*)p);
   }
   static void destruct_HEmcGeomPar(void *p) {
      typedef ::HEmcGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcGeomPar(TBuffer &buf, void *obj) {
      ((::HEmcGeomPar*)obj)->::HEmcGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcGeomPar

//______________________________________________________________________________
void HEmcCellGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCellGeomPar.

   HParSet::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcCellGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCellGeomPar.
      TClass *R__cl = ::HEmcCellGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*labPos", &labPos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDet", &pDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeomPar", &pGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMaxCells", &nMaxCells);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCellGeomPar(void *p) {
      return  p ? new(p) ::HEmcCellGeomPar : new ::HEmcCellGeomPar;
   }
   static void *newArray_HEmcCellGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCellGeomPar[nElements] : new ::HEmcCellGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCellGeomPar(void *p) {
      delete ((::HEmcCellGeomPar*)p);
   }
   static void deleteArray_HEmcCellGeomPar(void *p) {
      delete [] ((::HEmcCellGeomPar*)p);
   }
   static void destruct_HEmcCellGeomPar(void *p) {
      typedef ::HEmcCellGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCellGeomPar(TBuffer &buf, void *obj) {
      ((::HEmcCellGeomPar*)obj)->::HEmcCellGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCellGeomPar

//______________________________________________________________________________
void HEmcDigiPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcDigiPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> sigmaT;
      R__b >> phot2E;
      R__b >> phot2E2;
      R__b >> sigmaEIntern;
      R__b >> sigmaEReal;
      R__b >> sigmaEReal2;
      R__b.CheckByteCount(R__s, R__c, HEmcDigiPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HEmcDigiPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << sigmaT;
      R__b << phot2E;
      R__b << phot2E2;
      R__b << sigmaEIntern;
      R__b << sigmaEReal;
      R__b << sigmaEReal2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HEmcDigiPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcDigiPar.
      TClass *R__cl = ::HEmcDigiPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaT", &sigmaT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phot2E", &phot2E);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phot2E2", &phot2E2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEIntern", &sigmaEIntern);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEReal", &sigmaEReal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaEReal2", &sigmaEReal2);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcDigiPar(void *p) {
      return  p ? new(p) ::HEmcDigiPar : new ::HEmcDigiPar;
   }
   static void *newArray_HEmcDigiPar(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcDigiPar[nElements] : new ::HEmcDigiPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcDigiPar(void *p) {
      delete ((::HEmcDigiPar*)p);
   }
   static void deleteArray_HEmcDigiPar(void *p) {
      delete [] ((::HEmcDigiPar*)p);
   }
   static void destruct_HEmcDigiPar(void *p) {
      typedef ::HEmcDigiPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcDigiPar(TBuffer &buf, void *obj) {
      ((::HEmcDigiPar*)obj)->::HEmcDigiPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcDigiPar

//______________________________________________________________________________
void HEmcTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcTaskSet.

   HTaskSet::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcTaskSet.
      TClass *R__cl = ::HEmcTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcTaskSet(void *p) {
      return  p ? new(p) ::HEmcTaskSet : new ::HEmcTaskSet;
   }
   static void *newArray_HEmcTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcTaskSet[nElements] : new ::HEmcTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcTaskSet(void *p) {
      delete ((::HEmcTaskSet*)p);
   }
   static void deleteArray_HEmcTaskSet(void *p) {
      delete [] ((::HEmcTaskSet*)p);
   }
   static void destruct_HEmcTaskSet(void *p) {
      typedef ::HEmcTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcTaskSet(TBuffer &buf, void *obj) {
      ((::HEmcTaskSet*)obj)->::HEmcTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcTaskSet

//______________________________________________________________________________
void HEmcTrb3Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcTrb3Unpacker.

   HTrb3Unpacker::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcTrb3Unpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcTrb3Unpacker.
      TClass *R__cl = ::HEmcTrb3Unpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeRef", &timeRef);
      HTrb3Unpacker::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcTrb3Unpacker(void *p) {
      return  p ? new(p) ::HEmcTrb3Unpacker : new ::HEmcTrb3Unpacker;
   }
   static void *newArray_HEmcTrb3Unpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcTrb3Unpacker[nElements] : new ::HEmcTrb3Unpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcTrb3Unpacker(void *p) {
      delete ((::HEmcTrb3Unpacker*)p);
   }
   static void deleteArray_HEmcTrb3Unpacker(void *p) {
      delete [] ((::HEmcTrb3Unpacker*)p);
   }
   static void destruct_HEmcTrb3Unpacker(void *p) {
      typedef ::HEmcTrb3Unpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcTrb3Unpacker(TBuffer &buf, void *obj) {
      ((::HEmcTrb3Unpacker*)obj)->::HEmcTrb3Unpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcTrb3Unpacker

//______________________________________________________________________________
void HEmcCalibrater::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcCalibrater.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcCalibrater::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcCalibrater.
      TClass *R__cl = ::HEmcCalibrater::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRawCat", &pRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalCat", &pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDet", &pDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalpar", &pCalpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "embedding", &embedding);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcCalibrater(void *p) {
      return  p ? new(p) ::HEmcCalibrater : new ::HEmcCalibrater;
   }
   static void *newArray_HEmcCalibrater(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcCalibrater[nElements] : new ::HEmcCalibrater[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcCalibrater(void *p) {
      delete ((::HEmcCalibrater*)p);
   }
   static void deleteArray_HEmcCalibrater(void *p) {
      delete [] ((::HEmcCalibrater*)p);
   }
   static void destruct_HEmcCalibrater(void *p) {
      typedef ::HEmcCalibrater current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcCalibrater(TBuffer &buf, void *obj) {
      ((::HEmcCalibrater*)obj)->::HEmcCalibrater::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcCalibrater

//______________________________________________________________________________
void HEmcDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcDigitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcDigitizer.
      TClass *R__cl = ::HEmcDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellobjects", (void*)&cellobjects);
      R__insp.InspectMember("vector<celldata*>", (void*)&cellobjects, "cellobjects.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "embeddingmode", &embeddingmode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantEmcCat", &fGeantEmcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantKineCat", &fGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCat", &fCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartHitCat", &fStartHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEmcDet", &fEmcDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeomPar", &fGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiPar", &fDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterGeantEmc", &iterGeantEmc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "labTrans[6]", labTrans);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCell", &maxCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaT", &sigmaT);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phot2Energy[6]", phot2Energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "facEnergSmear[6]", facEnergSmear);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zVertBorder", &zVertBorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energyDepositCut", &energyDepositCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "signalVelocity", &signalVelocity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "halfOfCellLength", &halfOfCellLength);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcDigitizer(void *p) {
      return  p ? new(p) ::HEmcDigitizer : new ::HEmcDigitizer;
   }
   static void *newArray_HEmcDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcDigitizer[nElements] : new ::HEmcDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcDigitizer(void *p) {
      delete ((::HEmcDigitizer*)p);
   }
   static void deleteArray_HEmcDigitizer(void *p) {
      delete [] ((::HEmcDigitizer*)p);
   }
   static void destruct_HEmcDigitizer(void *p) {
      typedef ::HEmcDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcDigitizer(TBuffer &buf, void *obj) {
      ((::HEmcDigitizer*)obj)->::HEmcDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcDigitizer

//______________________________________________________________________________
void HEmcClusterF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HEmcClusterF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HEmcClusterF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HEmcClusterF.
      TClass *R__cl = ::HEmcClusterF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantKineCat", &fGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fEmcCalCat", &fEmcCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fClusterCat", &fClusterCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRpcCat", &fRpcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*emcCellsLab[6][255]", &emcCellsLab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaEmcLab[6][255]", thetaEmcLab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaTheta[6][255]", sigmaTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiEmcLab[6][255]", phiEmcLab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sigmaPhi[6][255]", sigmaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "energy[255]", energy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flagUsed[255]", flagUsed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSecECells[255]", &pSecECells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "listClustCell[255]", listClustCell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pClustCells[255]", &pClustCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThetaSigOfset", &dThetaSigOfset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThetaScale", &dThetaScale);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTimeOfset", &dTimeOfset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dTimeCut", &dTimeCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dThdPhCut", &dThdPhCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cellToCellSpeed", &cellToCellSpeed);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distOffset", &distOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeCutMin", &timeCutMin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeCutMax", &timeCutMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSimulation", &isSimulation);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HEmcClusterF(void *p) {
      return  p ? new(p) ::HEmcClusterF : new ::HEmcClusterF;
   }
   static void *newArray_HEmcClusterF(Long_t nElements, void *p) {
      return p ? new(p) ::HEmcClusterF[nElements] : new ::HEmcClusterF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HEmcClusterF(void *p) {
      delete ((::HEmcClusterF*)p);
   }
   static void deleteArray_HEmcClusterF(void *p) {
      delete [] ((::HEmcClusterF*)p);
   }
   static void destruct_HEmcClusterF(void *p) {
      typedef ::HEmcClusterF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HEmcClusterF(TBuffer &buf, void *obj) {
      ((::HEmcClusterF*)obj)->::HEmcClusterF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HEmcClusterF

/********************************************************
* ../build/pc/EmcDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableEmcDict();

extern "C" void G__set_cpp_environmentEmcDict() {
  G__cpp_reset_tagtableEmcDict();
}
#include <new>
extern "C" int G__cpp_dllrevEmcDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HEmcDetector */
static int G__EmcDict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcDetector[n];
     } else {
       p = new((void*) gvp) HEmcDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcDetector;
     } else {
       p = new((void*) gvp) HEmcDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HEmcDetector*) G__getstructoffset())->buildMatrixCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HEmcDetector*) G__getstructoffset())->buildLinearCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HEmcDetector*) G__getstructoffset())->getNumCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcDetector*) G__getstructoffset())->getMaxSecInSetup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcDetector::getCell((const Char_t) G__int(libp->para[0]), (const Char_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcDetector::getRowCol((const Int_t) G__int(libp->para[0]), *(Char_t*) G__Charref(&libp->para[1])
, *(Char_t*) G__Charref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcDetector(*(HEmcDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcDetector G__THEmcDetector;
static int G__EmcDict_190_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcDetector*) (soff+(sizeof(HEmcDetector)*i)))->~G__THEmcDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcDetector*) (soff))->~G__THEmcDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_190_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcDetector* dest = (HEmcDetector*) G__getstructoffset();
   *dest = *(HEmcDetector*) libp->para[0].ref;
   const HEmcDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcRaw */
static int G__EmcDict_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcRaw[n];
     } else {
       p = new((void*) gvp) HEmcRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcRaw;
     } else {
       p = new((void*) gvp) HEmcRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcRaw*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcRaw*) G__getstructoffset())->getMaxMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HEmcRaw*) G__getstructoffset())->getTotMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HEmcRaw*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcRaw*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcRaw*) G__getstructoffset())->getTime((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcRaw*) G__getstructoffset())->getWidth((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcRaw*) G__getstructoffset())->getTimeAndWidth((const Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcRaw*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcRaw*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcRaw*) G__getstructoffset())->setCell((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcRaw*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HEmcRaw*) G__getstructoffset())->setTimeAndWidth((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_191_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_191_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcRaw(*(HEmcRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcRaw G__THEmcRaw;
static int G__EmcDict_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcRaw*) (soff+(sizeof(HEmcRaw)*i)))->~G__THEmcRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcRaw*) (soff))->~G__THEmcRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_191_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcRaw* dest = (HEmcRaw*) G__getstructoffset();
   *dest = *(HEmcRaw*) libp->para[0].ref;
   const HEmcRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCal */
static int G__EmcDict_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCal[n];
     } else {
       p = new((void*) gvp) HEmcCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCal;
     } else {
       p = new((void*) gvp) HEmcCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setAddress((Char_t) G__int(libp->para[0]), (UChar_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]), (Char_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setNHits((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setTime1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setTime2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setCell((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setRow((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setColumn((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HEmcCal*) G__getstructoffset())->setMatchedRpc((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HEmcCal*) G__getstructoffset())->setMatchedRpc();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setSigmaEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setSigmaTime1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setSigmaTime2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setStatus1((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setStatus2((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->setClusterIndex((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcCal*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCal*) G__getstructoffset())->getTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCal*) G__getstructoffset())->getTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCal*) G__getstructoffset())->getEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HEmcCal*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcCal*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HEmcCal*) G__getstructoffset())->getRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HEmcCal*) G__getstructoffset())->getColumn());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HEmcCal*) G__getstructoffset())->isMatchedRpc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCal*) G__getstructoffset())->getSigmaEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCal*) G__getstructoffset())->getSigmaTime1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCal*) G__getstructoffset())->getSigmaTime2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcCal*) G__getstructoffset())->getStatus1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcCal*) G__getstructoffset())->getStatus2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcCal*) G__getstructoffset())->getClusterIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_192_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_192_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcCal(*(HEmcCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCal G__THEmcCal;
static int G__EmcDict_192_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCal*) (soff+(sizeof(HEmcCal)*i)))->~G__THEmcCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCal*) (soff))->~G__THEmcCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_192_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCal* dest = (HEmcCal*) G__getstructoffset();
   *dest = *(HEmcCal*) libp->para[0].ref;
   const HEmcCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCalSim */
static int G__EmcDict_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalSim[n];
     } else {
       p = new((void*) gvp) HEmcCalSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalSim;
     } else {
       p = new((void*) gvp) HEmcCalSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalSim*) G__getstructoffset())->setTrack((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalSim*) G__getstructoffset())->setTotMult((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalSim*) G__getstructoffset())->setTime1Track((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalSim*) G__getstructoffset())->setTime2Track((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcCalSim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const HEmcCalSim*) G__getstructoffset())->getTrack((Short_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const HEmcCalSim*) G__getstructoffset())->getTrack());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCalSim*) G__getstructoffset())->getTrackEnergy((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcCalSim*) G__getstructoffset())->getTotMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HEmcCalSim*) G__getstructoffset())->getTime1Track());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HEmcCalSim*) G__getstructoffset())->getTime2Track());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCalSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCalSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCalSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_193_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_193_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcCalSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcCalSim(*(HEmcCalSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCalSim G__THEmcCalSim;
static int G__EmcDict_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCalSim*) (soff+(sizeof(HEmcCalSim)*i)))->~G__THEmcCalSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCalSim*) (soff))->~G__THEmcCalSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalSim* dest = (HEmcCalSim*) G__getstructoffset();
   *dest = *(HEmcCalSim*) libp->para[0].ref;
   const HEmcCalSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCluster */
static int G__EmcDict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCluster* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCluster[n];
     } else {
       p = new((void*) gvp) HEmcCluster[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCluster;
     } else {
       p = new((void*) gvp) HEmcCluster;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HEmcCluster*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcCluster*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcCluster*) G__getstructoffset())->getIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getSigmaEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getSigmaTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getMaxEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getXLab());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getYLab());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getZLab());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->getXYZLab(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcCluster*) G__getstructoffset())->getCell((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcCluster*) G__getstructoffset())->getNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcCluster*) G__getstructoffset())->getTotalNCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HEmcCluster*) G__getstructoffset())->ifActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcCluster*) G__getstructoffset())->getRpcIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getQualDThDPh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcCluster*) G__getstructoffset())->getQualDTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 98, (long) ((const HEmcCluster*) G__getstructoffset())->getNMatchedCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setRpcIndex((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setQualDThDPh((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setQualDTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setNMatchedCells((UChar_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setIndex((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setSigmaEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setSigmaTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setMaxEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setXYZLab((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setCellList((Int_t) G__int(libp->para[0]), (UChar_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->setInactive();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCluster::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCluster::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCluster::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCluster::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCluster*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCluster::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCluster::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCluster::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_194_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCluster::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_194_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcCluster* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcCluster(*(HEmcCluster*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCluster G__THEmcCluster;
static int G__EmcDict_194_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCluster*) (soff+(sizeof(HEmcCluster)*i)))->~G__THEmcCluster();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCluster*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCluster*) (soff))->~G__THEmcCluster();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_194_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCluster* dest = (HEmcCluster*) G__getstructoffset();
   *dest = *(HEmcCluster*) libp->para[0].ref;
   const HEmcCluster& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcClusterSim */
static int G__EmcDict_195_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcClusterSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcClusterSim[n];
     } else {
       p = new((void*) gvp) HEmcClusterSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcClusterSim;
     } else {
       p = new((void*) gvp) HEmcClusterSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcClusterSim*) G__getstructoffset())->setTrack((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcClusterSim*) G__getstructoffset())->setRpcTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcClusterSim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const HEmcClusterSim*) G__getstructoffset())->getTrack((Short_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const HEmcClusterSim*) G__getstructoffset())->getTrack());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcClusterSim*) G__getstructoffset())->getTrackEnergy((Short_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HEmcClusterSim*) G__getstructoffset())->getTotMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcClusterSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcClusterSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcClusterSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcClusterSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcClusterSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcClusterSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcClusterSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcClusterSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcClusterSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcClusterSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcClusterSim(*(HEmcClusterSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcClusterSim G__THEmcClusterSim;
static int G__EmcDict_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcClusterSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcClusterSim*) (soff+(sizeof(HEmcClusterSim)*i)))->~G__THEmcClusterSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcClusterSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcClusterSim*) (soff))->~G__THEmcClusterSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcClusterSim* dest = (HEmcClusterSim*) G__getstructoffset();
   *dest = *(HEmcClusterSim*) libp->para[0].ref;
   const HEmcClusterSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcTaskSet */
static int G__EmcDict_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTaskSet[n];
     } else {
       p = new((void*) gvp) HEmcTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTaskSet;
     } else {
       p = new((void*) gvp) HEmcTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HEmcTaskSet((Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HEmcTaskSet((Text_t*) G__int(libp->para[0]), (Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HEmcTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HEmcTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HEmcTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcTaskSet G__THEmcTaskSet;
static int G__EmcDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcTaskSet*) (soff+(sizeof(HEmcTaskSet)*i)))->~G__THEmcTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcTaskSet*) (soff))->~G__THEmcTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcTrb3Lookup */
static int G__EmcDict_231_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3Lookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HEmcTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HEmcTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HEmcTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HEmcTrb3Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3Lookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEmcTrb3Lookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcTrb3Lookup[n];
       } else {
         p = new((void*) gvp) HEmcTrb3Lookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcTrb3Lookup;
       } else {
         p = new((void*) gvp) HEmcTrb3Lookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HEmcTrb3Lookup*) G__getstructoffset())->getBoard((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HEmcTrb3Lookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcTrb3Lookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcTrb3Lookup*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3Lookup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HEmcTrb3Lookup*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HEmcTrb3Lookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3Lookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3Lookup*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcTrb3Lookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3Lookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcTrb3Lookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcTrb3Lookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3Lookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3Lookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3Lookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3Lookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_231_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3Lookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_231_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcTrb3Lookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcTrb3Lookup(*(HEmcTrb3Lookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcTrb3Lookup G__THEmcTrb3Lookup;
static int G__EmcDict_231_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcTrb3Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcTrb3Lookup*) (soff+(sizeof(HEmcTrb3Lookup)*i)))->~G__THEmcTrb3Lookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcTrb3Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcTrb3Lookup*) (soff))->~G__THEmcTrb3Lookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_231_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3Lookup* dest = (HEmcTrb3Lookup*) G__getstructoffset();
   *dest = *(HEmcTrb3Lookup*) libp->para[0].ref;
   const HEmcTrb3Lookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcTrb3Unpacker */
static int G__EmcDict_232_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3Unpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3Unpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEmcTrb3Unpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcTrb3Unpacker[n];
       } else {
         p = new((void*) gvp) HEmcTrb3Unpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcTrb3Unpacker;
       } else {
         p = new((void*) gvp) HEmcTrb3Unpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3Unpacker*) G__getstructoffset())->disableTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcTrb3Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcTrb3Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcTrb3Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_232_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_232_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcTrb3Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcTrb3Unpacker(*(HEmcTrb3Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcTrb3Unpacker G__THEmcTrb3Unpacker;
static int G__EmcDict_232_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcTrb3Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcTrb3Unpacker*) (soff+(sizeof(HEmcTrb3Unpacker)*i)))->~G__THEmcTrb3Unpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcTrb3Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcTrb3Unpacker*) (soff))->~G__THEmcTrb3Unpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_232_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3Unpacker* dest = (HEmcTrb3Unpacker*) G__getstructoffset();
   *dest = *(HEmcTrb3Unpacker*) libp->para[0].ref;
   const HEmcTrb3Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCalPar */
static int G__EmcDict_243_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HEmcCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HEmcCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEmcCalPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcCalPar[n];
       } else {
         p = new((void*) gvp) HEmcCalPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcCalPar;
       } else {
         p = new((void*) gvp) HEmcCalPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HEmcCalParSec& obj = ((HEmcCalPar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcCalPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalPar*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCalPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCalPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCalPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_243_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_243_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcCalPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcCalPar(*(HEmcCalPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCalPar G__THEmcCalPar;
static int G__EmcDict_243_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCalPar*) (soff+(sizeof(HEmcCalPar)*i)))->~G__THEmcCalPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCalPar*) (soff))->~G__THEmcCalPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_243_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalPar* dest = (HEmcCalPar*) G__getstructoffset();
   *dest = *(HEmcCalPar*) libp->para[0].ref;
   const HEmcCalPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCalibrater */
static int G__EmcDict_244_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalibrater[n];
     } else {
       p = new((void*) gvp) HEmcCalibrater[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalibrater;
     } else {
       p = new((void*) gvp) HEmcCalibrater;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HEmcCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HEmcCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCalibrater::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalibrater::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCalibrater::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCalibrater::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalibrater*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalibrater::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalibrater::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalibrater::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_244_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalibrater::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCalibrater G__THEmcCalibrater;
static int G__EmcDict_244_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCalibrater*) (soff+(sizeof(HEmcCalibrater)*i)))->~G__THEmcCalibrater();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCalibrater*) (soff))->~G__THEmcCalibrater();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcGeomPar */
static int G__EmcDict_251_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HEmcGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HEmcGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEmcGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcGeomPar[n];
       } else {
         p = new((void*) gvp) HEmcGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcGeomPar;
       } else {
         p = new((void*) gvp) HEmcGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_251_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_251_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcGeomPar(*(HEmcGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcGeomPar G__THEmcGeomPar;
static int G__EmcDict_251_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcGeomPar*) (soff+(sizeof(HEmcGeomPar)*i)))->~G__THEmcGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcGeomPar*) (soff))->~G__THEmcGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_251_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcGeomPar* dest = (HEmcGeomPar*) G__getstructoffset();
   *dest = *(HEmcGeomPar*) libp->para[0].ref;
   const HEmcGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcDigiPar */
static int G__EmcDict_252_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcDigiPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcDigiPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HEmcDigiPar(
(const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1])
, (const char*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcDigiPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HEmcDigiPar((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcDigiPar((const char*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEmcDigiPar((const char*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcDigiPar[n];
       } else {
         p = new((void*) gvp) HEmcDigiPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcDigiPar;
       } else {
         p = new((void*) gvp) HEmcDigiPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcDigiPar*) G__getstructoffset())->getSigmaT());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcDigiPar*) G__getstructoffset())->getPhot2E());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcDigiPar*) G__getstructoffset())->getPhot2E2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcDigiPar*) G__getstructoffset())->getSigmaEIntern());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcDigiPar*) G__getstructoffset())->getSigmaEReal());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HEmcDigiPar*) G__getstructoffset())->getSigmaEReal2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDigiPar*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcDigiPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDigiPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcDigiPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcDigiPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDigiPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDigiPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcDigiPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDigiPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_252_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcDigiPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_252_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcDigiPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcDigiPar(*(HEmcDigiPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcDigiPar G__THEmcDigiPar;
static int G__EmcDict_252_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcDigiPar*) (soff+(sizeof(HEmcDigiPar)*i)))->~G__THEmcDigiPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcDigiPar*) (soff))->~G__THEmcDigiPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_252_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcDigiPar* dest = (HEmcDigiPar*) G__getstructoffset();
   *dest = *(HEmcDigiPar*) libp->para[0].ref;
   const HEmcDigiPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcDigitizer */
static int G__EmcDict_254_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcDigitizer[n];
     } else {
       p = new((void*) gvp) HEmcDigitizer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcDigitizer;
     } else {
       p = new((void*) gvp) HEmcDigitizer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HEmcDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HEmcDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDigitizer*) G__getstructoffset())->setzVertBorder((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDigitizer*) G__getstructoffset())->setEnergyDepositCut((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDigitizer*) G__getstructoffset())->setSignalVelocity((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDigitizer*) G__getstructoffset())->setEmbeddingMode((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HEmcDigitizer*) G__getstructoffset())->getEmbeddingMode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_254_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcDigitizer G__THEmcDigitizer;
static int G__EmcDict_254_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcDigitizer*) (soff+(sizeof(HEmcDigitizer)*i)))->~G__THEmcDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcDigitizer*) (soff))->~G__THEmcDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcClusterF */
static int G__EmcDict_270_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcClusterF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcClusterF[n];
     } else {
       p = new((void*) gvp) HEmcClusterF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcClusterF;
     } else {
       p = new((void*) gvp) HEmcClusterF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcClusterF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HEmcClusterF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HEmcClusterF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcClusterF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcClusterF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcClusterF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcClusterF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcClusterF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcClusterF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcClusterF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcClusterF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_270_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcClusterF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcClusterF G__THEmcClusterF;
static int G__EmcDict_270_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcClusterF*) (soff+(sizeof(HEmcClusterF)*i)))->~G__THEmcClusterF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcClusterF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcClusterF*) (soff))->~G__THEmcClusterF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcContFact */
static int G__EmcDict_275_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcContFact[n];
     } else {
       p = new((void*) gvp) HEmcContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcContFact;
     } else {
       p = new((void*) gvp) HEmcContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_275_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_275_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcContFact(*(HEmcContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcContFact G__THEmcContFact;
static int G__EmcDict_275_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcContFact*) (soff+(sizeof(HEmcContFact)*i)))->~G__THEmcContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcContFact*) (soff))->~G__THEmcContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_275_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcContFact* dest = (HEmcContFact*) G__getstructoffset();
   *dest = *(HEmcContFact*) libp->para[0].ref;
   const HEmcContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcParRootFileIo */
static int G__EmcDict_310_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HEmcParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HEmcParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HEmcParRootFileIo*) G__getstructoffset())->read((HEmcCalPar*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_310_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_310_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcParRootFileIo(*(HEmcParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcParRootFileIo G__THEmcParRootFileIo;
static int G__EmcDict_310_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcParRootFileIo*) (soff+(sizeof(HEmcParRootFileIo)*i)))->~G__THEmcParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcParRootFileIo*) (soff))->~G__THEmcParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_310_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcParRootFileIo* dest = (HEmcParRootFileIo*) G__getstructoffset();
   *dest = *(HEmcParRootFileIo*) libp->para[0].ref;
   const HEmcParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcParAsciiFileIo */
static int G__EmcDict_314_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HEmcParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HEmcParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_314_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_314_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcParAsciiFileIo(*(HEmcParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcParAsciiFileIo G__THEmcParAsciiFileIo;
static int G__EmcDict_314_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcParAsciiFileIo*) (soff+(sizeof(HEmcParAsciiFileIo)*i)))->~G__THEmcParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcParAsciiFileIo*) (soff))->~G__THEmcParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_314_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcParAsciiFileIo* dest = (HEmcParAsciiFileIo*) G__getstructoffset();
   *dest = *(HEmcParAsciiFileIo*) libp->para[0].ref;
   const HEmcParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcTrb3LookupChan */
static int G__EmcDict_317_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3LookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3LookupChan[n];
     } else {
       p = new((void*) gvp) HEmcTrb3LookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3LookupChan;
     } else {
       p = new((void*) gvp) HEmcTrb3LookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcTrb3LookupChan*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcTrb3LookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupChan*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupChan*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupChan*) G__getstructoffset())->fill(*(HEmcTrb3LookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupChan*) G__getstructoffset())->setSector((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupChan*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcTrb3LookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3LookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcTrb3LookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcTrb3LookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3LookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3LookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3LookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_317_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3LookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_317_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcTrb3LookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcTrb3LookupChan(*(HEmcTrb3LookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcTrb3LookupChan G__THEmcTrb3LookupChan;
static int G__EmcDict_317_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcTrb3LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcTrb3LookupChan*) (soff+(sizeof(HEmcTrb3LookupChan)*i)))->~G__THEmcTrb3LookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcTrb3LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcTrb3LookupChan*) (soff))->~G__THEmcTrb3LookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_317_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3LookupChan* dest = (HEmcTrb3LookupChan*) G__getstructoffset();
   *dest = *(HEmcTrb3LookupChan*) libp->para[0].ref;
   const HEmcTrb3LookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcTrb3LookupBoard */
static int G__EmcDict_318_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3LookupBoard* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3LookupBoard[n];
     } else {
       p = new((void*) gvp) HEmcTrb3LookupBoard[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcTrb3LookupBoard;
     } else {
       p = new((void*) gvp) HEmcTrb3LookupBoard;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcTrb3LookupBoard*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HEmcTrb3LookupBoard*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HEmcTrb3LookupChan& obj = ((HEmcTrb3LookupBoard*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupBoard*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcTrb3LookupBoard::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3LookupBoard::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcTrb3LookupBoard::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcTrb3LookupBoard::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcTrb3LookupBoard*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3LookupBoard::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3LookupBoard::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcTrb3LookupBoard::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_318_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcTrb3LookupBoard::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_318_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcTrb3LookupBoard* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcTrb3LookupBoard(*(HEmcTrb3LookupBoard*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcTrb3LookupBoard G__THEmcTrb3LookupBoard;
static int G__EmcDict_318_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcTrb3LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcTrb3LookupBoard*) (soff+(sizeof(HEmcTrb3LookupBoard)*i)))->~G__THEmcTrb3LookupBoard();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcTrb3LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcTrb3LookupBoard*) (soff))->~G__THEmcTrb3LookupBoard();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_318_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcTrb3LookupBoard* dest = (HEmcTrb3LookupBoard*) G__getstructoffset();
   *dest = *(HEmcTrb3LookupBoard*) libp->para[0].ref;
   const HEmcTrb3LookupBoard& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCalParCell */
static int G__EmcDict_319_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalParCell[n];
     } else {
       p = new((void*) gvp) HEmcCalParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalParCell;
     } else {
       p = new((void*) gvp) HEmcCalParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HEmcCalParCell*) G__getstructoffset())->getTdcSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HEmcCalParCell*) G__getstructoffset())->getTdcOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HEmcCalParCell*) G__getstructoffset())->getAdcSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HEmcCalParCell*) G__getstructoffset())->getAdcOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->getData((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->setTdcSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->setTdcOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->setAdcSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->setAdcOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->fill((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->fill(*(HEmcCalParCell*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCalParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCalParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCalParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_319_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_319_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcCalParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcCalParCell(*(HEmcCalParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCalParCell G__THEmcCalParCell;
static int G__EmcDict_319_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCalParCell*) (soff+(sizeof(HEmcCalParCell)*i)))->~G__THEmcCalParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCalParCell*) (soff))->~G__THEmcCalParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_319_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalParCell* dest = (HEmcCalParCell*) G__getstructoffset();
   *dest = *(HEmcCalParCell*) libp->para[0].ref;
   const HEmcCalParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCalParSec */
static int G__EmcDict_320_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalParSec* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCalParSec((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEmcCalParSec((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcCalParSec[n];
       } else {
         p = new((void*) gvp) HEmcCalParSec[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcCalParSec;
       } else {
         p = new((void*) gvp) HEmcCalParSec;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HEmcCalParCell& obj = ((HEmcCalParSec*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcCalParSec*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCalParSec::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalParSec::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCalParSec::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCalParSec::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCalParSec*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalParSec::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalParSec::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCalParSec::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_320_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCalParSec::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_320_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcCalParSec* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcCalParSec(*(HEmcCalParSec*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCalParSec G__THEmcCalParSec;
static int G__EmcDict_320_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCalParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCalParSec*) (soff+(sizeof(HEmcCalParSec)*i)))->~G__THEmcCalParSec();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCalParSec*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCalParSec*) (soff))->~G__THEmcCalParSec();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_320_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCalParSec* dest = (HEmcCalParSec*) G__getstructoffset();
   *dest = *(HEmcCalParSec*) libp->para[0].ref;
   const HEmcCalParSec& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HEmcCellGeomPar */
static int G__EmcDict_323_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCellGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCellGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HEmcCellGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCellGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HEmcCellGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HEmcCellGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HEmcCellGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcCellGeomPar[n];
       } else {
         p = new((void*) gvp) HEmcCellGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HEmcCellGeomPar;
       } else {
         p = new((void*) gvp) HEmcCellGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HEmcCellGeomPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCellGeomPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HEmcCellGeomPar*) G__getstructoffset())->getLabPos((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HEmcCellGeomPar*) G__getstructoffset())->getLabPos((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HEmcCellGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCellGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HEmcCellGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HEmcCellGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HEmcCellGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCellGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCellGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HEmcCellGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__EmcDict_323_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HEmcCellGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__EmcDict_323_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HEmcCellGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HEmcCellGeomPar(*(HEmcCellGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HEmcCellGeomPar G__THEmcCellGeomPar;
static int G__EmcDict_323_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HEmcCellGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HEmcCellGeomPar*) (soff+(sizeof(HEmcCellGeomPar)*i)))->~G__THEmcCellGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HEmcCellGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HEmcCellGeomPar*) (soff))->~G__THEmcCellGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__EmcDict_323_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HEmcCellGeomPar* dest = (HEmcCellGeomPar*) G__getstructoffset();
   *dest = *(HEmcCellGeomPar*) libp->para[0].ref;
   const HEmcCellGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HEmcDetector */

/* HEmcRaw */

/* HEmcCal */

/* HEmcCalSim */

/* HEmcCluster */

/* HEmcClusterSim */

/* HEmcTaskSet */

/* HEmcTrb3Lookup */

/* HEmcTrb3Unpacker */

/* HEmcCalPar */

/* HEmcCalibrater */

/* HEmcGeomPar */

/* HEmcDigiPar */

/* HEmcDigitizer */

/* HEmcClusterF */

/* HEmcContFact */

/* HEmcParRootFileIo */

/* HEmcParAsciiFileIo */

/* HEmcTrb3LookupChan */

/* HEmcTrb3LookupBoard */

/* HEmcCalParCell */

/* HEmcCalParSec */

/* HEmcCellGeomPar */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncEmcDict {
 public:
  G__Sizep2memfuncEmcDict(): p(&G__Sizep2memfuncEmcDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncEmcDict::*p)();
};

size_t G__get_sizep2memfuncEmcDict()
{
  G__Sizep2memfuncEmcDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceEmcDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector))) {
     HEmcDetector *G__Lderived;
     G__Lderived=(HEmcDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector),G__get_linked_tagnum(&G__EmcDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw))) {
     HEmcRaw *G__Lderived;
     G__Lderived=(HEmcRaw*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCal))) {
     HEmcCal *G__Lderived;
     G__Lderived=(HEmcCal*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCal),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim))) {
     HEmcCalSim *G__Lderived;
     G__Lderived=(HEmcCalSim*)0x1000;
     {
       HEmcCal *G__Lpbase=(HEmcCal*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim),G__get_linked_tagnum(&G__EmcDictLN_HEmcCal),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster))) {
     HEmcCluster *G__Lderived;
     G__Lderived=(HEmcCluster*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim))) {
     HEmcClusterSim *G__Lderived;
     G__Lderived=(HEmcClusterSim*)0x1000;
     {
       HEmcCluster *G__Lpbase=(HEmcCluster*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim),G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet))) {
     HEmcTaskSet *G__Lderived;
     G__Lderived=(HEmcTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet),G__get_linked_tagnum(&G__EmcDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet),G__get_linked_tagnum(&G__EmcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup))) {
     HEmcTrb3Lookup *G__Lderived;
     G__Lderived=(HEmcTrb3Lookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup),G__get_linked_tagnum(&G__EmcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker))) {
     HEmcTrb3Unpacker *G__Lderived;
     G__Lderived=(HEmcTrb3Unpacker*)0x1000;
     {
       HTrb3Unpacker *G__Lpbase=(HTrb3Unpacker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker),G__get_linked_tagnum(&G__EmcDictLN_HTrb3Unpacker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker),G__get_linked_tagnum(&G__EmcDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar))) {
     HEmcCalPar *G__Lderived;
     G__Lderived=(HEmcCalPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar),G__get_linked_tagnum(&G__EmcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater))) {
     HEmcCalibrater *G__Lderived;
     G__Lderived=(HEmcCalibrater*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater),G__get_linked_tagnum(&G__EmcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater),G__get_linked_tagnum(&G__EmcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar))) {
     HEmcGeomPar *G__Lderived;
     G__Lderived=(HEmcGeomPar*)0x1000;
     {
       HDetGeomPar *G__Lpbase=(HDetGeomPar*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar),G__get_linked_tagnum(&G__EmcDictLN_HDetGeomPar),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar),G__get_linked_tagnum(&G__EmcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar))) {
     HEmcDigiPar *G__Lderived;
     G__Lderived=(HEmcDigiPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar),G__get_linked_tagnum(&G__EmcDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar),G__get_linked_tagnum(&G__EmcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer))) {
     HEmcDigitizer *G__Lderived;
     G__Lderived=(HEmcDigitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer),G__get_linked_tagnum(&G__EmcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer),G__get_linked_tagnum(&G__EmcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF))) {
     HEmcClusterF *G__Lderived;
     G__Lderived=(HEmcClusterF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF),G__get_linked_tagnum(&G__EmcDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF),G__get_linked_tagnum(&G__EmcDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HParSet))) {
     HParSet *G__Lderived;
     G__Lderived=(HParSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HParSet),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HParSet),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact))) {
     HEmcContFact *G__Lderived;
     G__Lderived=(HEmcContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact),G__get_linked_tagnum(&G__EmcDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HDetGeomPar))) {
     HDetGeomPar *G__Lderived;
     G__Lderived=(HDetGeomPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HDetGeomPar),G__get_linked_tagnum(&G__EmcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HDetGeomPar),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HDetGeomPar),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo))) {
     HEmcParRootFileIo *G__Lderived;
     G__Lderived=(HEmcParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo),G__get_linked_tagnum(&G__EmcDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo),G__get_linked_tagnum(&G__EmcDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo))) {
     HEmcParAsciiFileIo *G__Lderived;
     G__Lderived=(HEmcParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo),G__get_linked_tagnum(&G__EmcDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo),G__get_linked_tagnum(&G__EmcDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan))) {
     HEmcTrb3LookupChan *G__Lderived;
     G__Lderived=(HEmcTrb3LookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard))) {
     HEmcTrb3LookupBoard *G__Lderived;
     G__Lderived=(HEmcTrb3LookupBoard*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell))) {
     HEmcCalParCell *G__Lderived;
     G__Lderived=(HEmcCalParCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec))) {
     HEmcCalParSec *G__Lderived;
     G__Lderived=(HEmcCalParSec*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar))) {
     HEmcCellGeomPar *G__Lderived;
     G__Lderived=(HEmcCellGeomPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar),G__get_linked_tagnum(&G__EmcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__EmcDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HParCond),G__get_linked_tagnum(&G__EmcDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HParCond),G__get_linked_tagnum(&G__EmcDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__EmcDictLN_HParCond),G__get_linked_tagnum(&G__EmcDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableEmcDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("UChar_t",98,-1,0,-1);
   G__setnewtype(-1,"Unsigned Character 1 byte (unsigned char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<ChannelRec>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTrb3TdcUnpacker::ChannelRec>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HTrb3TdcUnpacker*>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("celltrack",117,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizercLcLcelltrack),0,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("celldata",117,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizercLcLcelldata),0,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<celltrack*>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HEmcDigitizer::celltrack*>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<celldata*>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HEmcDigitizer::celldata*>",117,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Float_t>",117,G__get_linked_tagnum(&G__EmcDictLN_pairlEintcOfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HEmcDetector */
static void G__setup_memvarHEmcDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector));
   { HEmcDetector *p; p=(HEmcDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numCells=",0,"number of cells (without spares)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcRaw */
static void G__setup_memvarHEmcRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw));
   { HEmcRaw *p; p=(HEmcRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"totMultiplicity=",0,"number of hits");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"sector=",0,"sector number");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"cell=",0,"cell number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime1=",0,"tdc time of 1st hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWidth1=",0,"width of 1st hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime2=",0,"tdc time of 2nd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWidth2=",0,"width of 2nd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime3=",0,"tdc time of 3rd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWidth3=",0,"width of 3rd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime4=",0,"tdc time of 4th hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWidth4=",0,"width of 4th hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCal */
static void G__setup_memvarHEmcCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCal));
   { HEmcCal *p; p=(HEmcCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nHits=",0,"number of hits in this cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time1=",0,"time of first hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time2=",0,"time of second hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"energy=",0,"energy deposited in one crystal");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sector=",0,"sector number (0..5)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cell=",0,"cell number (0..254)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"row=",0,"row number (0..14)");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"column=",0,"column number (0..16)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaTime1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaTime2=",0,"?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isRpcMatch=",0,"kTRUE Emc cell has matching with RPC");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"clusterIndex=",0,"index of EmcCluster object");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"statusTime1=",0,">0 - ok.; <0 - hit was kicked out by threshold; =0-real data");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"statusTime2=",0,">0 - ok.; <0 - hit was kicked out by threshold; =0-real data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCalSim */
static void G__setup_memvarHEmcCalSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim));
   { HEmcCalSim *p; p=(HEmcCalSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTracks=",0,"number of tracks in list");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"totMult=",0,"total number of tracks hitting this crystal");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTracks[5]=",0,"list of tracknumbers (GEANT)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"trackEnergy[5]=",0,"energy deposit for each track");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time1track=",0,"track number of time1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"time2track=",0,"track number of time2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCluster */
static void G__setup_memvarHEmcCluster(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster));
   { HEmcCluster *p; p=(HEmcCluster*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"sector=",0,"sector number (0..5)");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cell=",0,"cell with maximum energy deposit (0..254)");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"index=",0,"cluster index in category catEmcCluster");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"ncells=",0,"number of cells in cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"energy=",0,"energy deposited in the cluster");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"cellEnergy=",0,"energy deposited in the cell(cell) with maximum energy deposit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time=",0,"weighted by enegry mean time  ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaEnergy=",0,"error of \"energy\"");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaTime=",0,"error of \"time\"   ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xlab=",0,"X coordinate of \"cell\" in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ylab=",0,"Y coordinate of \"cell\" in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zlab=",0,"Z coordinate of \"cell\" in Lab system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta=",0,"theta angle of \"cell\"  [degrees]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi=",0,"phi angle  of \"cell\" [degrees]");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"isActive=",0,"kFALSE means that cluster is bad ");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"cellList[24]=",0,"list of cells in cluster");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"rpcIndex=",0,"index of correlated HRpcCluster");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,2,"nMatchedCells=",0,"number EMC cells matched with RPC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"qualityDThDPh=",0,"quality of angle matching with RPC");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"qualityDTime=",0,"quality of time matching with RPC");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcClusterSim */
static void G__setup_memvarHEmcClusterSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim));
   { HEmcClusterSim *p; p=(HEmcClusterSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nTracks=",0,"number of tracks in list");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"totMult=",0,"total number of tracks in this cluster");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"rpcTrack=",0,"track number of matched rpc cluster    ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"listTracks[5]=",0,"list of GEANT tracknumbers sorted by energy");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"trackEnergy[5]=",0,"energy deposit for each track   ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcTaskSet */
static void G__setup_memvarHEmcTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet));
   { HEmcTaskSet *p; p=(HEmcTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcTrb3Lookup */
static void G__setup_memvarHEmcTrb3Lookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup));
   { HEmcTrb3Lookup *p; p=(HEmcTrb3Lookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HEmcTrb3LookupBoard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcTrb3Unpacker */
static void G__setup_memvarHEmcTrb3Unpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker));
   { HEmcTrb3Unpacker *p; p=(HEmcTrb3Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EmcDictLN_HLocation),-1,-1,2,"loc=",0,"location of raw cell object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup),-1,-1,2,"lookup=",0,"TRB3 lookup table");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"timeRef=",0,"use reference time ?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCalPar */
static void G__setup_memvarHEmcCalPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar));
   { HEmcCalPar *p; p=(HEmcCalPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HEmcCalParSec");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCalibrater */
static void G__setup_memvarHEmcCalibrater(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater));
   { HEmcCalibrater *p; p=(HEmcCalibrater*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,2,"pRawCat=",0,"pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,2,"pCalCat=",0,"pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HIterator),-1,-1,2,"iter=",0,"iterator on raw data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EmcDictLN_HLocation),-1,-1,2,"loc=",0,"location for new cal object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector),-1,-1,2,"pDet=",0,"pointer to Emc detector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar),-1,-1,2,"pCalpar=",0,"pointer to calibration parameters");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"embedding=",0,"flag is set if real data should be embedded into simulation data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcGeomPar */
static void G__setup_memvarHEmcGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar));
   { HEmcGeomPar *p; p=(HEmcGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcDigiPar */
static void G__setup_memvarHEmcDigiPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar));
   { HEmcDigiPar *p; p=(HEmcDigiPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaT=",0,"time resolution [ns]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phot2E=",0,"mean energy deposition in 1.5\" PMT per photon electron (1000./1306.) in MeV");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phot2E2=",0,"mean energy deposition in 3\" PMT per photon electron (1000./1306.) in MeV");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaEIntern=",0,"internal energy resolution");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaEReal=",0,"measured energy resolution in 1.5\" PMT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaEReal2=",0,"measured energy resolution in 3\" PMT");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcDigitizer */
static void G__setup_memvarHEmcDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer));
   { HEmcDigitizer *p; p=(HEmcDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR),G__defined_typename("vector<celldata*>"),-1,2,"cellobjects=",0,"temporary working array for digitized data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"embeddingmode=",0,"switch for keeping geant hits / realistic embedding");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EmcDictLN_HLocation),-1,-1,2,"fLoc=",0,"Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,2,"fGeantEmcCat=",0,"Pointer to Emc Geant data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HLinearCategory),-1,-1,2,"fGeantKineCat=",0,"Pointer to GeantKine data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,2,"fCalCat=",0,"Pointer to Cal  data category  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,2,"fStartHitCat=",0,"Pointer to the Start Hit data        ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector),-1,-1,2,"fEmcDet=",0,"Pointer to EmcDetector                 ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar),-1,-1,2,"fGeomPar=",0,"Geometry parameters                    ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar),-1,-1,2,"fDigiPar=",0,"Digitization parameters                ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HIterator),-1,-1,2,"iterGeantEmc=",0,"Iterator over catEmcGeantRaw category  ");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EmcDictLN_HGeomTransform),-1,-1,2,"labTrans[6]=",0,"Transfomation lad. <-> emc_module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxCell=",0,"maximum number of cells (including spares)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"sigmaT=",0,"time resolution");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phot2Energy[6]=",0,"mean energy deposition PMT per photon electron (1000./1306.) in MeV for 6 sectors");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"facEnergSmear[6]=",0,"factor for energy smearing for 6 sectors");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"zVertBorder=",0,"tracks without HGeantEmc hit but with vertex in region zVertBorder (coor.sys. om emc module) ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"energyDepositCut=",0,"Cut for the minimal energy deposit in cell. It is used for time1 determination");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"signalVelocity=",0,"Velocity of the signal propagation along cell (default: speed of light in the vacuum)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"halfOfCellLength=",0,"It is needed because HGeanEmc hits now are shifted by half of cell relative coor.system of EMC !");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcClusterF */
static void G__setup_memvarHEmcClusterF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF));
   { HEmcClusterF *p; p=(HEmcClusterF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__EmcDictLN_HLocation),-1,-1,4,"fLoc=",0,"Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,4,"fGeantKineCat=",0,"Pointer to Emc Geant data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,4,"fEmcCalCat=",0,"Pointer to EmcCal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,4,"fClusterCat=",0,"Pointer to Cluster data category ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HCategory),-1,-1,4,"fRpcCat=",0,"Pointer to Roc data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HGeomVector),-1,-1,4,"emcCellsLab[6][255]=",0,"Centre of input plane module (cell) [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"thetaEmcLab[6][255]=",0,"Theta of \"emcCellsLab\" point in lab.sys. [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigmaTheta[6][255]=",0,"Sigma of the theta  [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"phiEmcLab[6][255]=",0,"Phi of \"emcCellsLab\" point in lab.sys. [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"sigmaPhi[6][255]=",0,"Sigma of the phi    [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"energy[255]=",0,"[cell] For all hits in sector");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"flagUsed[255]=",0,"[cell] For all hits in sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcCal),-1,-1,4,"pSecECells[255]=",0,"[cell] All hits in sector");
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("UChar_t"),-1,4,"listClustCell[255]=",0,"[index] For one cluster");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcCal),-1,-1,4,"pClustCells[255]=",0,"[index] For one cluster ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dThetaSigOfset=",0,"(thetaEmc-thetaRpc)/sigmaDTheta+dThSigOfset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dThetaScale=",0,"dTheta = dThetaSigOfset/dThetaScale");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dTimeOfset=",0,"[ns] (time1 - timeRpcN + dTimeOfset)/sigmaDTof;");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dTimeCut=",0,"Nsigma cut for matchin in time ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"dThdPhCut=",0,"Nsigma cut for matching in angles ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"cellToCellSpeed=",0,"[ns/cell] speed of signal distribution from one cell to cell");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"distOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"timeCutMin=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"timeCutMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSimulation=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcContFact */
static void G__setup_memvarHEmcContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact));
   { HEmcContFact *p; p=(HEmcContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcParRootFileIo */
static void G__setup_memvarHEmcParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo));
   { HEmcParRootFileIo *p; p=(HEmcParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcParAsciiFileIo */
static void G__setup_memvarHEmcParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo));
   { HEmcParAsciiFileIo *p; p=(HEmcParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcTrb3LookupChan */
static void G__setup_memvarHEmcTrb3LookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan));
   { HEmcTrb3LookupChan *p; p=(HEmcTrb3LookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"sector=",0,"sector number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcTrb3LookupBoard */
static void G__setup_memvarHEmcTrb3LookupBoard(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard));
   { HEmcTrb3LookupBoard *p; p=(HEmcTrb3LookupBoard*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HEmcTrb3LookupChan objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCalParCell */
static void G__setup_memvarHEmcCalParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell));
   { HEmcCalParCell *p; p=(HEmcCalParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcSlope=",0,"TDC slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcOffset=",0,"TDC offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adcSlope=",0,"ADC slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adcOffset=",0,"ADC offset");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCalParSec */
static void G__setup_memvarHEmcCalParSec(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec));
   { HEmcCalParSec *p; p=(HEmcCalParSec*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HEmcCalParCell objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HEmcCellGeomPar */
static void G__setup_memvarHEmcCellGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar));
   { HEmcCellGeomPar *p; p=(HEmcCellGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TObjArray),-1,-1,2,"labPos=",0,"lab position of cell center");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector),-1,-1,2,"pDet=",0,"pointer to EMC detector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar),-1,-1,2,"pGeomPar=",0,"pointer to EMC geometry detector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMaxCells=",0,"maximum number of cells in one module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__EmcDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarEmcDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHEmcDetector(void) {
   /* HEmcDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector));
   G__memfunc_setup("HEmcDetector",1175,G__EmcDict_190_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - cat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildMatrixCategory",1987,G__EmcDict_190_0_3, 85, G__get_linked_tagnum(&G__EmcDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildLinearCategory",1961,G__EmcDict_190_0_4, 85, G__get_linked_tagnum(&G__EmcDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNumCells",1123,G__EmcDict_190_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSecInSetup",1609,G__EmcDict_190_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__EmcDict_190_0_9, 105, -1, G__defined_typename("Int_t"), 0, 2, 3, 1, 0, 
"c - 'Char_t' 10 - row c - 'Char_t' 10 - col", (char*)NULL, (void*) G__func2void( (Int_t (*)(const Char_t, const Char_t))(&HEmcDetector::getCell) ), 0);
   G__memfunc_setup("getRowCol",918,G__EmcDict_190_0_10, 121, -1, -1, 0, 3, 3, 1, 0, 
"i - 'Int_t' 10 - cell c - 'Char_t' 1 - row "
"c - 'Char_t' 1 - col", (char*)NULL, (void*) G__func2void( (void (*)(const Int_t, Char_t&, Char_t&))(&HEmcDetector::getRowCol) ), 0);
   G__memfunc_setup("Class",502,G__EmcDict_190_0_11, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_190_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_190_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_190_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_190_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_190_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_190_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_190_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_190_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcDetector", 1175, G__EmcDict_190_0_23, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector), -1, 0, 1, 1, 1, 0, "u 'HEmcDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcDetector", 1301, G__EmcDict_190_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_190_0_25, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcDetector), -1, 1, 1, 1, 1, 0, "u 'HEmcDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcRaw(void) {
   /* HEmcRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw));
   G__memfunc_setup("HEmcRaw",647,G__EmcDict_191_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__EmcDict_191_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxMultiplicity",1903,G__EmcDict_191_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotMultiplicity",1920,G__EmcDict_191_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__EmcDict_191_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__EmcDict_191_0_6, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__EmcDict_191_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth",832,G__EmcDict_191_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndWidth",1506,G__EmcDict_191_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - n f - 'Float_t' 1 - s "
"f - 'Float_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__EmcDict_191_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__EmcDict_191_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__EmcDict_191_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__EmcDict_191_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - s i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeAndWidth",1518,G__EmcDict_191_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - time f - 'Float_t' 10 - width", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_191_0_15, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_191_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_191_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_191_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_191_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_191_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_191_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_191_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_191_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcRaw", 647, G__EmcDict_191_0_27, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw), -1, 0, 1, 1, 1, 0, "u 'HEmcRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcRaw", 773, G__EmcDict_191_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_191_0_29, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcRaw), -1, 1, 1, 1, 1, 0, "u 'HEmcRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCal(void) {
   /* HEmcCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCal));
   G__memfunc_setup("HEmcCal",621,G__EmcDict_192_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__EmcDict_192_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setAddress",1042,G__EmcDict_192_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"c - 'Char_t' 0 - se b - 'UChar_t' 0 - ce "
"c - 'Char_t' 0 - ro c - 'Char_t' 0 - co", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHits",818,G__EmcDict_192_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1",780,G__EmcDict_192_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime2",781,G__EmcDict_192_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEnergy",950,G__EmcDict_192_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__EmcDict_192_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__EmcDict_192_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRow",644,G__EmcDict_192_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setColumn",954,G__EmcDict_192_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatchedRpc",1319,G__EmcDict_192_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaEnergy",1447,G__EmcDict_192_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaTime1",1277,G__EmcDict_192_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaTime2",1278,G__EmcDict_192_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus1",1025,G__EmcDict_192_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStatus2",1026,G__EmcDict_192_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterIndex",1574,G__EmcDict_192_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__EmcDict_192_0_19, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1",768,G__EmcDict_192_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime2",769,G__EmcDict_192_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnergy",938,G__EmcDict_192_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__EmcDict_192_0_23, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__EmcDict_192_0_24, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRow",632,G__EmcDict_192_0_25, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumn",942,G__EmcDict_192_0_26, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isMatchedRpc",1207,G__EmcDict_192_0_27, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaEnergy",1435,G__EmcDict_192_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaTime1",1265,G__EmcDict_192_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaTime2",1266,G__EmcDict_192_0_30, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus1",1013,G__EmcDict_192_0_31, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStatus2",1014,G__EmcDict_192_0_32, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterIndex",1562,G__EmcDict_192_0_33, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_192_0_34, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_192_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_192_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_192_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_192_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_192_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_192_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_192_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_192_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcCal", 621, G__EmcDict_192_0_46, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCal), -1, 0, 1, 1, 1, 0, "u 'HEmcCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCal", 747, G__EmcDict_192_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_192_0_48, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCal), -1, 1, 1, 1, 1, 0, "u 'HEmcCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCalSim(void) {
   /* HEmcCalSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim));
   G__memfunc_setup("HEmcCalSim",918,G__EmcDict_193_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__EmcDict_193_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - trackNumber f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotMult",1061,G__EmcDict_193_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime1Track",1281,G__EmcDict_193_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime2Track",1282,G__EmcDict_193_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__EmcDict_193_0_6, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__EmcDict_193_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackEnergy",1439,G__EmcDict_193_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotMult",1049,G__EmcDict_193_0_9, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime1Track",1269,G__EmcDict_193_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime2Track",1270,G__EmcDict_193_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_193_0_12, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCalSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_193_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_193_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCalSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_193_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCalSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_193_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_193_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_193_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_193_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_193_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcCalSim", 918, G__EmcDict_193_0_24, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim), -1, 0, 1, 1, 1, 0, "u 'HEmcCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCalSim", 1044, G__EmcDict_193_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_193_0_26, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalSim), -1, 1, 1, 1, 1, 0, "u 'HEmcCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCluster(void) {
   /* HEmcCluster */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster));
   G__memfunc_setup("HEmcCluster",1087,G__EmcDict_194_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__EmcDict_194_0_2, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__EmcDict_194_0_3, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,G__EmcDict_194_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnergy",938,G__EmcDict_194_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__EmcDict_194_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaEnergy",1435,G__EmcDict_194_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaTime",1216,G__EmcDict_194_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxEnergy",1232,G__EmcDict_194_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXLab",679,G__EmcDict_194_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYLab",680,G__EmcDict_194_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZLab",681,G__EmcDict_194_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYZLab",858,G__EmcDict_194_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__EmcDict_194_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__EmcDict_194_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__EmcDict_194_0_16, 98, -1, G__defined_typename("UChar_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCells",897,G__EmcDict_194_0_17, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotalNCells",1413,G__EmcDict_194_0_18, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ifActive",811,G__EmcDict_194_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRpcIndex",1117,G__EmcDict_194_0_20, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQualDThDPh",1231,G__EmcDict_194_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQualDTime",1190,G__EmcDict_194_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNMatchedCells",1591,G__EmcDict_194_0_23, 98, -1, G__defined_typename("UChar_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcIndex",1129,G__EmcDict_194_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQualDThDPh",1243,G__EmcDict_194_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQualDTime",1202,G__EmcDict_194_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNMatchedCells",1603,G__EmcDict_194_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "b - 'UChar_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__EmcDict_194_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIndex",836,G__EmcDict_194_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - ind", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEnergy",950,G__EmcDict_194_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__EmcDict_194_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaEnergy",1447,G__EmcDict_194_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaTime",1228,G__EmcDict_194_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxEnergy",1244,G__EmcDict_194_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZLab",870,G__EmcDict_194_0_35, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__EmcDict_194_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__EmcDict_194_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellList",1128,G__EmcDict_194_0_38, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - ncs B - 'UChar_t' 0 - list", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInactive",1151,G__EmcDict_194_0_39, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_194_0_40, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCluster::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_194_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCluster::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_194_0_42, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCluster::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_194_0_43, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCluster::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_194_0_47, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_194_0_48, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCluster::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_194_0_49, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCluster::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_194_0_50, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCluster::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_194_0_51, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCluster::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcCluster", 1087, G__EmcDict_194_0_52, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster), -1, 0, 1, 1, 1, 0, "u 'HEmcCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCluster", 1213, G__EmcDict_194_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_194_0_54, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCluster), -1, 1, 1, 1, 1, 0, "u 'HEmcCluster' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcClusterSim(void) {
   /* HEmcClusterSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim));
   G__memfunc_setup("HEmcClusterSim",1384,G__EmcDict_195_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__EmcDict_195_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - trackNumber f - 'Float_t' 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRpcTrack",1126,G__EmcDict_195_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__EmcDict_195_0_4, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__EmcDict_195_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackEnergy",1439,G__EmcDict_195_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "s - 'Short_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotMult",1049,G__EmcDict_195_0_7, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_195_0_8, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcClusterSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_195_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcClusterSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_195_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcClusterSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_195_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcClusterSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_195_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_195_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcClusterSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_195_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcClusterSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_195_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcClusterSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_195_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcClusterSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcClusterSim", 1384, G__EmcDict_195_0_20, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim), -1, 0, 1, 1, 1, 0, "u 'HEmcClusterSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcClusterSim", 1510, G__EmcDict_195_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_195_0_22, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterSim), -1, 1, 1, 1, 1, 0, "u 'HEmcClusterSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcTaskSet(void) {
   /* HEmcTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet));
   G__memfunc_setup("HEmcTaskSet",1052,G__EmcDict_212_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HEmcTaskSet",1052,G__EmcDict_212_0_2, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 0 - name C - 'Text_t' 0 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__EmcDict_212_0_3, 85, G__get_linked_tagnum(&G__EmcDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_212_0_4, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_212_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_212_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_212_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_212_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_212_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_212_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_212_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_212_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HEmcTaskSet", 1178, G__EmcDict_212_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcTrb3Lookup(void) {
   /* HEmcTrb3Lookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup));
   G__memfunc_setup("HEmcTrb3Lookup",1330,G__EmcDict_231_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"EmcTrb3Lookup\"' name C - 'Char_t' 10 '\"Lookup table for the TRB3 unpacker of the EMC detector\"' title "
"C - 'Char_t' 10 '\"EmcTrb3LookupProduction\"' context i - 'Int_t' 0 'Trbnet::kEmcTrb3MinTrbnetAddress' minTrbnetAddress "
"i - 'Int_t' 0 'Trbnet::kEmcTrb3MaxTrbnetAddress' maxTrbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__EmcDict_231_0_2, 85, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__EmcDict_231_0_3, 85, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__EmcDict_231_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__EmcDict_231_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__EmcDict_231_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__EmcDict_231_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__EmcDict_231_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__EmcDict_231_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__EmcDict_231_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_231_0_14, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcTrb3Lookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_231_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3Lookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_231_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcTrb3Lookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_231_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcTrb3Lookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_231_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_231_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3Lookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_231_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3Lookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_231_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3Lookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_231_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3Lookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcTrb3Lookup", 1330, G__EmcDict_231_0_26, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup), -1, 0, 1, 1, 1, 0, "u 'HEmcTrb3Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcTrb3Lookup", 1456, G__EmcDict_231_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_231_0_28, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Lookup), -1, 1, 1, 1, 1, 0, "u 'HEmcTrb3Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcTrb3Unpacker(void) {
   /* HEmcTrb3Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker));
   G__memfunc_setup("HEmcTrb3Unpacker",1521,G__EmcDict_232_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("disableTimeRef",1408,G__EmcDict_232_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_232_0_5, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcTrb3Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_232_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_232_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcTrb3Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_232_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcTrb3Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_232_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_232_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_232_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_232_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_232_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcTrb3Unpacker", 1521, G__EmcDict_232_0_17, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker), -1, 0, 1, 1, 1, 0, "u 'HEmcTrb3Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcTrb3Unpacker", 1647, G__EmcDict_232_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_232_0_19, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3Unpacker), -1, 1, 1, 1, 1, 0, "u 'HEmcTrb3Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCalPar(void) {
   /* HEmcCalPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar));
   G__memfunc_setup("HEmcCalPar",912,G__EmcDict_243_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"EmcCalPar\"' name C - 'Char_t' 10 '\"Calibration parameters of the Emc\"' title "
"C - 'Char_t' 10 '\"EmcCalParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__EmcDict_243_0_2, 117, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__EmcDict_243_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParams",1169,G__EmcDict_243_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__EmcDict_243_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__EmcDict_243_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__EmcDict_243_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_243_0_11, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCalPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_243_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_243_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCalPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_243_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCalPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_243_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_243_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_243_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_243_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_243_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcCalPar", 912, G__EmcDict_243_0_23, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar), -1, 0, 1, 1, 1, 0, "u 'HEmcCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCalPar", 1038, G__EmcDict_243_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_243_0_25, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalPar), -1, 1, 1, 1, 1, 0, "u 'HEmcCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCalibrater(void) {
   /* HEmcCalibrater */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater));
   G__memfunc_setup("HEmcCalibrater",1366,G__EmcDict_244_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HEmcCalibrater",1366,G__EmcDict_244_0_2, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalibrater), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EmcDict_244_0_6, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCalibrater::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_244_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalibrater::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_244_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCalibrater::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_244_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCalibrater::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_244_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_244_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalibrater::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_244_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalibrater::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_244_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalibrater::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_244_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalibrater::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCalibrater", 1492, G__EmcDict_244_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcGeomPar(void) {
   /* HEmcGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar));
   G__memfunc_setup("HEmcGeomPar",1032,G__EmcDict_251_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"EmcGeomPar\"' name C - 'Char_t' 10 '\"Emc geometry parameters\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNum",907,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInComp",1494,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompNum",1023,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EmcDict_251_0_8, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_251_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_251_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_251_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_251_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_251_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_251_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_251_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_251_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcGeomPar", 1032, G__EmcDict_251_0_20, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar), -1, 0, 1, 1, 1, 0, "u 'HEmcGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcGeomPar", 1158, G__EmcDict_251_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_251_0_22, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcGeomPar), -1, 1, 1, 1, 1, 0, "u 'HEmcGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcDigiPar(void) {
   /* HEmcDigiPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar));
   G__memfunc_setup("HEmcDigiPar",1021,G__EmcDict_252_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar), -1, 0, 3, 1, 1, 0, 
"C - - 10 '\"EmcDigiPar\"' name C - - 10 '\"Emc digitization parameters\"' title "
"C - - 10 '\"EmcDigiProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaT",901,G__EmcDict_252_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhot2E",850,G__EmcDict_252_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhot2E2",900,G__EmcDict_252_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaEIntern",1510,G__EmcDict_252_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaEReal",1274,G__EmcDict_252_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaEReal2",1324,G__EmcDict_252_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fill",423,G__EmcDict_252_0_9, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - sT f - 'Float_t' 0 - p2e "
"f - 'Float_t' 0 - p2e2 f - 'Float_t' 0 - seI "
"f - 'Float_t' 0 - seR f - 'Float_t' 0 - seR2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EmcDict_252_0_12, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcDigiPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_252_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDigiPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_252_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcDigiPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_252_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcDigiPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_252_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_252_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDigiPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_252_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcDigiPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_252_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDigiPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_252_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcDigiPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcDigiPar", 1021, G__EmcDict_252_0_24, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar), -1, 0, 1, 1, 1, 0, "u 'HEmcDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcDigiPar", 1147, G__EmcDict_252_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_252_0_26, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcDigiPar), -1, 1, 1, 1, 1, 0, "u 'HEmcDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcDigitizer(void) {
   /* HEmcDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer));
   G__memfunc_setup("clearCellobjects",1649,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HEmcDigitizer",1288,G__EmcDict_254_0_2, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HEmcDigitizer",1288,G__EmcDict_254_0_3, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcDigitizer), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setzVertBorder",1477,G__EmcDict_254_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - vc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEnergyDepositCut",1978,G__EmcDict_254_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - cut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSignalVelocity",1785,G__EmcDict_254_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEmbeddingMode",1616,G__EmcDict_254_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEmbeddingMode",1604,G__EmcDict_254_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVariables",1357,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParameterContainers",2307,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cellObjectsSize",1541,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 8, "", "size of \"cellobjects\" vector", (void*) NULL, 0);
   G__memfunc_setup("cellObjectIndex",1519,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 8, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - c", "sector&cell  ==>  index in \"cellobjects\" vector ", (void*) NULL, 0);
   G__memfunc_setup("sectorFromIndex",1564,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - ind", "index in \"cellobjects\" vector  ==>  sector", (void*) NULL, 0);
   G__memfunc_setup("cellFromIndex",1324,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 2, 8, "i - 'Int_t' 0 - ind", "index in \"cellobjects\" vector  ==>  cell", (void*) NULL, 0);
   G__memfunc_setup("getInputHit",1141,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__EmcDictLN_HGeantEmc), -1, 0, 2, 1, 2, 8, 
"U 'HGeantEmc' - 0 - pGeantEmc i - 'Int_t' 1 - inputTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_254_0_20, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_254_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_254_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_254_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_254_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_254_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_254_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_254_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_254_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcDigitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HEmcDigitizer", 1414, G__EmcDict_254_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcClusterF(void) {
   /* HEmcClusterF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF));
   G__memfunc_setup("HEmcClusterF",1157,G__EmcDict_270_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HEmcClusterF",1157,G__EmcDict_270_0_2, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcClusterF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initData",814,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("rpcMatch",818,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__EmcDictLN_HRpcCluster), -1, 0, 3, 1, 2, 0, 
"U 'HEmcCal' - 0 - cal f - 'Float_t' 1 - qualityDThDPh "
"f - 'Float_t' 1 - qualityDTime", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("maxEnergyCell",1328,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcDist",807,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 2, 8, 
"U 'HEmcCal' - 0 - cal1 U 'HEmcCal' - 0 - cal2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNearbyCell",1313,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 8, 
"i - 'Int_t' 0 - cell i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("cmpEnergy",938,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 3, 2, 0, 
"u 'pair<int,float>' 'pair<Int_t,Float_t>' 0 - p1 u 'pair<int,float>' 'pair<Int_t,Float_t>' 0 - p2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_270_0_13, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcClusterF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_270_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcClusterF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_270_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcClusterF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_270_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcClusterF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_270_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_270_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcClusterF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_270_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcClusterF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_270_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcClusterF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_270_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcClusterF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HEmcClusterF", 1283, G__EmcDict_270_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcContFact(void) {
   /* HEmcContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HEmcContFact",1135,G__EmcDict_275_0_2, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EmcDict_275_0_4, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_275_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_275_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_275_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_275_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_275_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_275_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_275_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_275_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcContFact", 1135, G__EmcDict_275_0_16, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact), -1, 0, 1, 1, 1, 0, "u 'HEmcContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcContFact", 1261, G__EmcDict_275_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_275_0_18, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcContFact), -1, 1, 1, 1, 1, 0, "u 'HEmcContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcParRootFileIo(void) {
   /* HEmcParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo));
   G__memfunc_setup("HEmcParRootFileIo",1628,G__EmcDict_310_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__EmcDict_310_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HEmcCalPar' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_310_0_4, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_310_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_310_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_310_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_310_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_310_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_310_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_310_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_310_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcParRootFileIo", 1628, G__EmcDict_310_0_16, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HEmcParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcParRootFileIo", 1754, G__EmcDict_310_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_310_0_18, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HEmcParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcParAsciiFileIo(void) {
   /* HEmcParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo));
   G__memfunc_setup("HEmcParAsciiFileIo",1697,G__EmcDict_314_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__EmcDict_314_0_4, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_314_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_314_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_314_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_314_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_314_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_314_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_314_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_314_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcParAsciiFileIo", 1697, G__EmcDict_314_0_16, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HEmcParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcParAsciiFileIo", 1823, G__EmcDict_314_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_314_0_18, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HEmcParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcTrb3LookupChan(void) {
   /* HEmcTrb3LookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan));
   G__memfunc_setup("HEmcTrb3LookupChan",1708,G__EmcDict_317_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__EmcDict_317_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__EmcDict_317_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__EmcDict_317_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - s i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__EmcDict_317_0_5, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__EmcDict_317_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HEmcTrb3LookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__EmcDict_317_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__EmcDict_317_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__EmcDict_317_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_317_0_10, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcTrb3LookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_317_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3LookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_317_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcTrb3LookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_317_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcTrb3LookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_317_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_317_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3LookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_317_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3LookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_317_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3LookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_317_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3LookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcTrb3LookupChan", 1708, G__EmcDict_317_0_22, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan), -1, 0, 1, 1, 1, 0, "u 'HEmcTrb3LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcTrb3LookupChan", 1834, G__EmcDict_317_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_317_0_24, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan), -1, 1, 1, 1, 1, 0, "u 'HEmcTrb3LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcTrb3LookupBoard(void) {
   /* HEmcTrb3LookupBoard */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard));
   G__memfunc_setup("HEmcTrb3LookupBoard",1818,G__EmcDict_318_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__EmcDict_318_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__EmcDict_318_0_3, 85, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__EmcDict_318_0_4, 117, G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__EmcDict_318_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_318_0_6, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcTrb3LookupBoard::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_318_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3LookupBoard::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_318_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcTrb3LookupBoard::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_318_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcTrb3LookupBoard::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_318_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_318_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3LookupBoard::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_318_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3LookupBoard::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_318_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcTrb3LookupBoard::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_318_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcTrb3LookupBoard::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcTrb3LookupBoard", 1818, G__EmcDict_318_0_18, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard), -1, 0, 1, 1, 1, 0, "u 'HEmcTrb3LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcTrb3LookupBoard", 1944, G__EmcDict_318_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_318_0_20, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcTrb3LookupBoard), -1, 1, 1, 1, 1, 0, "u 'HEmcTrb3LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCalParCell(void) {
   /* HEmcCalParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell));
   G__memfunc_setup("HEmcCalParCell",1296,G__EmcDict_319_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__EmcDict_319_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcSlope",1118,G__EmcDict_319_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcOffset",1218,G__EmcDict_319_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAdcSlope",1099,G__EmcDict_319_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAdcOffset",1199,G__EmcDict_319_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__EmcDict_319_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcSlope",1130,G__EmcDict_319_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcOffset",1230,G__EmcDict_319_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAdcSlope",1111,G__EmcDict_319_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAdcOffset",1211,G__EmcDict_319_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__EmcDict_319_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__EmcDict_319_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__EmcDict_319_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HEmcCalParCell' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_319_0_15, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCalParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_319_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_319_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCalParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_319_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCalParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_319_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_319_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_319_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_319_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_319_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcCalParCell", 1296, G__EmcDict_319_0_27, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell), -1, 0, 1, 1, 1, 0, "u 'HEmcCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCalParCell", 1422, G__EmcDict_319_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_319_0_29, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell), -1, 1, 1, 1, 1, 0, "u 'HEmcCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCalParSec(void) {
   /* HEmcCalParSec */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec));
   G__memfunc_setup("HEmcCalParSec",1195,G__EmcDict_320_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '255' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__EmcDict_320_0_2, 117, G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__EmcDict_320_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_320_0_4, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCalParSec::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_320_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalParSec::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_320_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCalParSec::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_320_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCalParSec::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_320_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_320_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalParSec::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_320_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalParSec::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_320_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCalParSec::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_320_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCalParSec::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcCalParSec", 1195, G__EmcDict_320_0_16, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec), -1, 0, 1, 1, 1, 0, "u 'HEmcCalParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCalParSec", 1321, G__EmcDict_320_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_320_0_18, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCalParSec), -1, 1, 1, 1, 1, 0, "u 'HEmcCalParSec' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHEmcCellGeomPar(void) {
   /* HEmcCellGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar));
   G__memfunc_setup("HEmcCellGeomPar",1416,G__EmcDict_323_0_1, 105, G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"EmcCellGeomPar\"' name C - 'Char_t' 10 '\"Emc cell geometry parameters\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSize",731,G__EmcDict_323_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParam",1054,G__EmcDict_323_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabPos",897,G__EmcDict_323_0_6, 85, G__get_linked_tagnum(&G__EmcDictLN_HGeomVector), -1, 0, 2, 1, 1, 9, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabPos",897,G__EmcDict_323_0_7, 85, G__get_linked_tagnum(&G__EmcDictLN_HGeomVector), -1, 0, 3, 1, 1, 9, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__EmcDict_323_0_8, 85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HEmcCellGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__EmcDict_323_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCellGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__EmcDict_323_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HEmcCellGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__EmcDict_323_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HEmcCellGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__EmcDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__EmcDict_323_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__EmcDict_323_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCellGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__EmcDict_323_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCellGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__EmcDict_323_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HEmcCellGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__EmcDict_323_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HEmcCellGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HEmcCellGeomPar", 1416, G__EmcDict_323_0_20, (int) ('i'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar), -1, 0, 1, 1, 1, 0, "u 'HEmcCellGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HEmcCellGeomPar", 1542, G__EmcDict_323_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__EmcDict_323_0_22, (int) ('u'), G__get_linked_tagnum(&G__EmcDictLN_HEmcCellGeomPar), -1, 1, 1, 1, 1, 0, "u 'HEmcCellGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncEmcDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&catEmcRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catEmcRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catEmcCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catEmcCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catEmcCluster),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catEmcCluster=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalEmcDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcEmcDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__EmcDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcDetector = { "HEmcDetector" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcRaw = { "HEmcRaw" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCal = { "HEmcCal" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCalSim = { "HEmcCalSim" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCluster = { "HEmcCluster" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcClusterSim = { "HEmcClusterSim" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__EmcDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcTaskSet = { "HEmcTaskSet" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HTrb3Unpacker = { "HTrb3Unpacker" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR = { "vector<HTrb3TdcUnpacker::ChannelRec,allocator<HTrb3TdcUnpacker::ChannelRec> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTrb3TdcUnpacker::ChannelRec,allocator<HTrb3TdcUnpacker::ChannelRec> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR = { "vector<HTrb3TdcUnpacker*,allocator<HTrb3TdcUnpacker*> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HTrb3TdcUnpacker*,allocator<HTrb3TdcUnpacker*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcTrb3Lookup = { "HEmcTrb3Lookup" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcTrb3Unpacker = { "HEmcTrb3Unpacker" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCalPar = { "HEmcCalPar" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCalibrater = { "HEmcCalibrater" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HLinearCategory = { "HLinearCategory" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcGeomPar = { "HEmcGeomPar" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcDigiPar = { "HEmcDigiPar" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HGeantEmc = { "HGeantEmc" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcDigitizer = { "HEmcDigitizer" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcDigitizercLcLcelltrack = { "HEmcDigitizer::celltrack" , 115 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcDigitizercLcLcelldata = { "HEmcDigitizer::celldata" , 115 , -1 };
G__linked_taginfo G__EmcDictLN_vectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgR = { "vector<HEmcDigitizer::celltrack*,allocator<HEmcDigitizer::celltrack*> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HEmcDigitizer::celltrack*,allocator<HEmcDigitizer::celltrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR = { "vector<HEmcDigitizer::celldata*,allocator<HEmcDigitizer::celldata*> >" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HEmcDigitizer::celldata*,allocator<HEmcDigitizer::celldata*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HRpcCluster = { "HRpcCluster" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcClusterF = { "HEmcClusterF" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_pairlEintcOfloatgR = { "pair<int,float>" , 115 , -1 };
G__linked_taginfo G__EmcDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcContFact = { "HEmcContFact" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcParRootFileIo = { "HEmcParRootFileIo" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcParAsciiFileIo = { "HEmcParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcTrb3LookupChan = { "HEmcTrb3LookupChan" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcTrb3LookupBoard = { "HEmcTrb3LookupBoard" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCalParCell = { "HEmcCalParCell" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCalParSec = { "HEmcCalParSec" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HEmcCellGeomPar = { "HEmcCellGeomPar" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__EmcDictLN_HParCond = { "HParCond" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableEmcDict() {
  G__EmcDictLN_TClass.tagnum = -1 ;
  G__EmcDictLN_TBuffer.tagnum = -1 ;
  G__EmcDictLN_TMemberInspector.tagnum = -1 ;
  G__EmcDictLN_TObject.tagnum = -1 ;
  G__EmcDictLN_TNamed.tagnum = -1 ;
  G__EmcDictLN_TString.tagnum = -1 ;
  G__EmcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__EmcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__EmcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EmcDictLN_TObjArray.tagnum = -1 ;
  G__EmcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__EmcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EmcDictLN_HTask.tagnum = -1 ;
  G__EmcDictLN_HCategory.tagnum = -1 ;
  G__EmcDictLN_HParIo.tagnum = -1 ;
  G__EmcDictLN_HDetector.tagnum = -1 ;
  G__EmcDictLN_HEmcDetector.tagnum = -1 ;
  G__EmcDictLN_HEmcRaw.tagnum = -1 ;
  G__EmcDictLN_HEmcCal.tagnum = -1 ;
  G__EmcDictLN_HEmcCalSim.tagnum = -1 ;
  G__EmcDictLN_HEmcCluster.tagnum = -1 ;
  G__EmcDictLN_HEmcClusterSim.tagnum = -1 ;
  G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__EmcDictLN_HTaskSet.tagnum = -1 ;
  G__EmcDictLN_HEmcTaskSet.tagnum = -1 ;
  G__EmcDictLN_HLocation.tagnum = -1 ;
  G__EmcDictLN_HldUnpack.tagnum = -1 ;
  G__EmcDictLN_HTrb3Unpacker.tagnum = -1 ;
  G__EmcDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR.tagnum = -1 ;
  G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EmcDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR.tagnum = -1 ;
  G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EmcDictLN_HEmcTrb3Lookup.tagnum = -1 ;
  G__EmcDictLN_HEmcTrb3Unpacker.tagnum = -1 ;
  G__EmcDictLN_HReconstructor.tagnum = -1 ;
  G__EmcDictLN_HIterator.tagnum = -1 ;
  G__EmcDictLN_HEmcCalPar.tagnum = -1 ;
  G__EmcDictLN_HEmcCalibrater.tagnum = -1 ;
  G__EmcDictLN_HGeomVector.tagnum = -1 ;
  G__EmcDictLN_HGeomTransform.tagnum = -1 ;
  G__EmcDictLN_HLinearCategory.tagnum = -1 ;
  G__EmcDictLN_HEmcGeomPar.tagnum = -1 ;
  G__EmcDictLN_HEmcDigiPar.tagnum = -1 ;
  G__EmcDictLN_HGeantEmc.tagnum = -1 ;
  G__EmcDictLN_HEmcDigitizer.tagnum = -1 ;
  G__EmcDictLN_HEmcDigitizercLcLcelltrack.tagnum = -1 ;
  G__EmcDictLN_HEmcDigitizercLcLcelldata.tagnum = -1 ;
  G__EmcDictLN_vectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgR.tagnum = -1 ;
  G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EmcDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__EmcDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR.tagnum = -1 ;
  G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__EmcDictLN_HRpcCluster.tagnum = -1 ;
  G__EmcDictLN_HEmcClusterF.tagnum = -1 ;
  G__EmcDictLN_pairlEintcOfloatgR.tagnum = -1 ;
  G__EmcDictLN_HParSet.tagnum = -1 ;
  G__EmcDictLN_HContainer.tagnum = -1 ;
  G__EmcDictLN_HContFact.tagnum = -1 ;
  G__EmcDictLN_HEmcContFact.tagnum = -1 ;
  G__EmcDictLN_HDetParIo.tagnum = -1 ;
  G__EmcDictLN_HParRootFile.tagnum = -1 ;
  G__EmcDictLN_HDetGeomPar.tagnum = -1 ;
  G__EmcDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__EmcDictLN_HEmcParRootFileIo.tagnum = -1 ;
  G__EmcDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__EmcDictLN_HEmcParAsciiFileIo.tagnum = -1 ;
  G__EmcDictLN_HEmcTrb3LookupChan.tagnum = -1 ;
  G__EmcDictLN_HEmcTrb3LookupBoard.tagnum = -1 ;
  G__EmcDictLN_HEmcCalParCell.tagnum = -1 ;
  G__EmcDictLN_HEmcCalParSec.tagnum = -1 ;
  G__EmcDictLN_HEmcCellGeomPar.tagnum = -1 ;
  G__EmcDictLN_HParamList.tagnum = -1 ;
  G__EmcDictLN_HParCond.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableEmcDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__EmcDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_TString);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcDetector),sizeof(HEmcDetector),-1,62720,"EMC detector class",G__setup_memvarHEmcDetector,G__setup_memfuncHEmcDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcRaw),sizeof(HEmcRaw),-1,29952,"raw data of EMC detector using TRB3 for readout",G__setup_memvarHEmcRaw,G__setup_memfuncHEmcRaw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCal),sizeof(HEmcCal),-1,29952,"EMC cal data class",G__setup_memvarHEmcCal,G__setup_memfuncHEmcCal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCalSim),sizeof(HEmcCalSim),-1,29952,(char*)NULL,G__setup_memvarHEmcCalSim,G__setup_memfuncHEmcCalSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCluster),sizeof(HEmcCluster),-1,29952,"EMC cal data class",G__setup_memvarHEmcCluster,G__setup_memfuncHEmcCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcClusterSim),sizeof(HEmcClusterSim),-1,29952,"EMC cal data class",G__setup_memvarHEmcClusterSim,G__setup_memfuncHEmcClusterSim);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcTaskSet),sizeof(HEmcTaskSet),-1,62720,"Set of tasks for the EMC",G__setup_memvarHEmcTaskSet,G__setup_memfuncHEmcTaskSet);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HldUnpack);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HTrb3Unpacker);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_vectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackercLcLChannelReccOallocatorlEHTrb3TdcUnpackercLcLChannelRecgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_vectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_reverse_iteratorlEvectorlEHTrb3TdcUnpackermUcOallocatorlEHTrb3TdcUnpackermUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcTrb3Lookup),sizeof(HEmcTrb3Lookup),-1,62720,"Lookup table for the TRB3 unpacker of the EMC detector",G__setup_memvarHEmcTrb3Lookup,G__setup_memfuncHEmcTrb3Lookup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcTrb3Unpacker),sizeof(HEmcTrb3Unpacker),-1,29952,"TRB unpacker for the EMC detector",G__setup_memvarHEmcTrb3Unpacker,G__setup_memfuncHEmcTrb3Unpacker);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCalPar),sizeof(HEmcCalPar),-1,62720,"Container for the calibration parameters of the Emc",G__setup_memvarHEmcCalPar,G__setup_memfuncHEmcCalPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCalibrater),sizeof(HEmcCalibrater),-1,62720,"Calibrater raw->cal for EMC data",G__setup_memvarHEmcCalibrater,G__setup_memfuncHEmcCalibrater);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HGeomVector);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HGeomTransform);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HLinearCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcGeomPar),sizeof(HEmcGeomPar),-1,62720,"Container for the Emc geometry parameters",G__setup_memvarHEmcGeomPar,G__setup_memfuncHEmcGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcDigiPar),sizeof(HEmcDigiPar),-1,62720,"Container for the EMC digitization parameters",G__setup_memvarHEmcDigiPar,G__setup_memfuncHEmcDigiPar);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HGeantEmc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcDigitizer),sizeof(HEmcDigitizer),-1,62720,"Digitizer of EMC data.",G__setup_memvarHEmcDigitizer,G__setup_memfuncHEmcDigitizer);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcDigitizercLcLcelltrack);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcDigitizercLcLcelldata);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelltrackmUcOallocatorlEHEmcDigitizercLcLcelltrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_vectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_reverse_iteratorlEvectorlEHEmcDigitizercLcLcelldatamUcOallocatorlEHEmcDigitizercLcLcelldatamUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HRpcCluster);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcClusterF),sizeof(HEmcClusterF),-1,62720,"ClusterF of EMC data.",G__setup_memvarHEmcClusterF,G__setup_memfuncHEmcClusterF);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_pairlEintcOfloatgR);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcContFact),sizeof(HEmcContFact),-1,62720,"Factory for parameter containers in libEmc",G__setup_memvarHEmcContFact,G__setup_memfuncHEmcContFact);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HDetGeomPar);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcParRootFileIo),sizeof(HEmcParRootFileIo),-1,62464,"Class for EMC parameter I/O from ROOT file",G__setup_memvarHEmcParRootFileIo,G__setup_memfuncHEmcParRootFileIo);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcParAsciiFileIo),sizeof(HEmcParAsciiFileIo),-1,62464,"Class for EMC parameter I/O from Ascii files",G__setup_memvarHEmcParAsciiFileIo,G__setup_memfuncHEmcParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcTrb3LookupChan),sizeof(HEmcTrb3LookupChan),-1,29952,"Channel level of the lookup table for the EMC TRB3 unpacker",G__setup_memvarHEmcTrb3LookupChan,G__setup_memfuncHEmcTrb3LookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcTrb3LookupBoard),sizeof(HEmcTrb3LookupBoard),-1,29952,"Board level of  the lookup table for the EMC TRB3 unpacker",G__setup_memvarHEmcTrb3LookupBoard,G__setup_memfuncHEmcTrb3LookupBoard);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCalParCell),sizeof(HEmcCalParCell),-1,29952,"Chan level of the Emc calibration parameters",G__setup_memvarHEmcCalParCell,G__setup_memfuncHEmcCalParCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCalParSec),sizeof(HEmcCalParSec),-1,29952,"Sector level of Emc calibration parameters",G__setup_memvarHEmcCalParSec,G__setup_memfuncHEmcCalParSec);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__EmcDictLN_HEmcCellGeomPar),sizeof(HEmcCellGeomPar),-1,62720,"Class for EMC cell geometry",G__setup_memvarHEmcCellGeomPar,G__setup_memfuncHEmcCellGeomPar);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__EmcDictLN_HParCond);
}
extern "C" void G__cpp_setupEmcDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupEmcDict()");
  G__set_cpp_environmentEmcDict();
  G__cpp_setup_tagtableEmcDict();

  G__cpp_setup_inheritanceEmcDict();

  G__cpp_setup_typetableEmcDict();

  G__cpp_setup_memvarEmcDict();

  G__cpp_setup_memfuncEmcDict();
  G__cpp_setup_globalEmcDict();
  G__cpp_setup_funcEmcDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncEmcDict();
  return;
}
class G__cpp_setup_initEmcDict {
  public:
    G__cpp_setup_initEmcDict() { G__add_setup_func("EmcDict",(G__incsetup)(&G__cpp_setupEmcDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initEmcDict() { G__remove_setup_func("EmcDict"); }
};
G__cpp_setup_initEmcDict G__cpp_setup_initializerEmcDict;


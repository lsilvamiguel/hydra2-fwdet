//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:51:10 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIRichDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RichDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HRichHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichHit(void *p = 0);
   static void *newArray_HRichHit(Long_t size, void *p);
   static void delete_HRichHit(void *p);
   static void deleteArray_HRichHit(void *p);
   static void destruct_HRichHit(void *p);
   static void streamer_HRichHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichHit*)
   {
      ::HRichHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichHit", ::HRichHit::Class_Version(), "././hrichhit.h", 23,
                  typeid(::HRichHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichHit::Dictionary, isa_proxy, 1,
                  sizeof(::HRichHit) );
      instance.SetNew(&new_HRichHit);
      instance.SetNewArray(&newArray_HRichHit);
      instance.SetDelete(&delete_HRichHit);
      instance.SetDeleteArray(&deleteArray_HRichHit);
      instance.SetDestructor(&destruct_HRichHit);
      instance.SetStreamerFunc(&streamer_HRichHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichHit*)
   {
      return GenerateInitInstanceLocal((::HRichHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichLabel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichLabel(void *p = 0);
   static void *newArray_HRichLabel(Long_t size, void *p);
   static void delete_HRichLabel(void *p);
   static void deleteArray_HRichLabel(void *p);
   static void destruct_HRichLabel(void *p);
   static void streamer_HRichLabel(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichLabel*)
   {
      ::HRichLabel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichLabel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichLabel", ::HRichLabel::Class_Version(), "././hrichlabel.h", 22,
                  typeid(::HRichLabel), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichLabel::Dictionary, isa_proxy, 0,
                  sizeof(::HRichLabel) );
      instance.SetNew(&new_HRichLabel);
      instance.SetNewArray(&newArray_HRichLabel);
      instance.SetDelete(&delete_HRichLabel);
      instance.SetDeleteArray(&deleteArray_HRichLabel);
      instance.SetDestructor(&destruct_HRichLabel);
      instance.SetStreamerFunc(&streamer_HRichLabel);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichLabel*)
   {
      return GenerateInitInstanceLocal((::HRichLabel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichLabel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPadSignal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPadSignal(void *p = 0);
   static void *newArray_HRichPadSignal(Long_t size, void *p);
   static void delete_HRichPadSignal(void *p);
   static void deleteArray_HRichPadSignal(void *p);
   static void destruct_HRichPadSignal(void *p);
   static void streamer_HRichPadSignal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPadSignal*)
   {
      ::HRichPadSignal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPadSignal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPadSignal", ::HRichPadSignal::Class_Version(), "././hrichpadsignal.h", 29,
                  typeid(::HRichPadSignal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPadSignal::Dictionary, isa_proxy, 0,
                  sizeof(::HRichPadSignal) );
      instance.SetNew(&new_HRichPadSignal);
      instance.SetNewArray(&newArray_HRichPadSignal);
      instance.SetDelete(&delete_HRichPadSignal);
      instance.SetDeleteArray(&deleteArray_HRichPadSignal);
      instance.SetDestructor(&destruct_HRichPadSignal);
      instance.SetStreamerFunc(&streamer_HRichPadSignal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPadSignal*)
   {
      return GenerateInitInstanceLocal((::HRichPadSignal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPadSignal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichAnalysisPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichAnalysisPar(void *p = 0);
   static void *newArray_HRichAnalysisPar(Long_t size, void *p);
   static void delete_HRichAnalysisPar(void *p);
   static void deleteArray_HRichAnalysisPar(void *p);
   static void destruct_HRichAnalysisPar(void *p);
   static void streamer_HRichAnalysisPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichAnalysisPar*)
   {
      ::HRichAnalysisPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichAnalysisPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichAnalysisPar", ::HRichAnalysisPar::Class_Version(), "././hrichanalysispar.h", 27,
                  typeid(::HRichAnalysisPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichAnalysisPar::Dictionary, isa_proxy, 1,
                  sizeof(::HRichAnalysisPar) );
      instance.SetNew(&new_HRichAnalysisPar);
      instance.SetNewArray(&newArray_HRichAnalysisPar);
      instance.SetDelete(&delete_HRichAnalysisPar);
      instance.SetDeleteArray(&deleteArray_HRichAnalysisPar);
      instance.SetDestructor(&destruct_HRichAnalysisPar);
      instance.SetStreamerFunc(&streamer_HRichAnalysisPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichAnalysisPar*)
   {
      return GenerateInitInstanceLocal((::HRichAnalysisPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichAnalysisPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichGeometryPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichGeometryPar(void *p = 0);
   static void *newArray_HRichGeometryPar(Long_t size, void *p);
   static void delete_HRichGeometryPar(void *p);
   static void deleteArray_HRichGeometryPar(void *p);
   static void destruct_HRichGeometryPar(void *p);
   static void streamer_HRichGeometryPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichGeometryPar*)
   {
      ::HRichGeometryPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichGeometryPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichGeometryPar", ::HRichGeometryPar::Class_Version(), "././hrichgeometrypar.h", 31,
                  typeid(::HRichGeometryPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichGeometryPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRichGeometryPar) );
      instance.SetNew(&new_HRichGeometryPar);
      instance.SetNewArray(&newArray_HRichGeometryPar);
      instance.SetDelete(&delete_HRichGeometryPar);
      instance.SetDeleteArray(&deleteArray_HRichGeometryPar);
      instance.SetDestructor(&destruct_HRichGeometryPar);
      instance.SetStreamerFunc(&streamer_HRichGeometryPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichGeometryPar*)
   {
      return GenerateInitInstanceLocal((::HRichGeometryPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichGeometryPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichHitHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichHitHeader(void *p = 0);
   static void *newArray_HRichHitHeader(Long_t size, void *p);
   static void delete_HRichHitHeader(void *p);
   static void deleteArray_HRichHitHeader(void *p);
   static void destruct_HRichHitHeader(void *p);
   static void streamer_HRichHitHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichHitHeader*)
   {
      ::HRichHitHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichHitHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichHitHeader", ::HRichHitHeader::Class_Version(), "././hrichhitheader.h", 23,
                  typeid(::HRichHitHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichHitHeader::Dictionary, isa_proxy, 0,
                  sizeof(::HRichHitHeader) );
      instance.SetNew(&new_HRichHitHeader);
      instance.SetNewArray(&newArray_HRichHitHeader);
      instance.SetDelete(&delete_HRichHitHeader);
      instance.SetDeleteArray(&deleteArray_HRichHitHeader);
      instance.SetDestructor(&destruct_HRichHitHeader);
      instance.SetStreamerFunc(&streamer_HRichHitHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichHitHeader*)
   {
      return GenerateInitInstanceLocal((::HRichHitHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichHitHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPadClean_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPadClean(void *p = 0);
   static void *newArray_HRichPadClean(Long_t size, void *p);
   static void delete_HRichPadClean(void *p);
   static void deleteArray_HRichPadClean(void *p);
   static void destruct_HRichPadClean(void *p);
   static void streamer_HRichPadClean(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPadClean*)
   {
      ::HRichPadClean *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPadClean >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPadClean", ::HRichPadClean::Class_Version(), "././hrichpadclean.h", 28,
                  typeid(::HRichPadClean), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPadClean::Dictionary, isa_proxy, 0,
                  sizeof(::HRichPadClean) );
      instance.SetNew(&new_HRichPadClean);
      instance.SetNewArray(&newArray_HRichPadClean);
      instance.SetDelete(&delete_HRichPadClean);
      instance.SetDeleteArray(&deleteArray_HRichPadClean);
      instance.SetDestructor(&destruct_HRichPadClean);
      instance.SetStreamerFunc(&streamer_HRichPadClean);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPadClean*)
   {
      return GenerateInitInstanceLocal((::HRichPadClean*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPadClean*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPadLabel_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPadLabel(void *p = 0);
   static void *newArray_HRichPadLabel(Long_t size, void *p);
   static void delete_HRichPadLabel(void *p);
   static void deleteArray_HRichPadLabel(void *p);
   static void destruct_HRichPadLabel(void *p);
   static void streamer_HRichPadLabel(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPadLabel*)
   {
      ::HRichPadLabel *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPadLabel >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPadLabel", ::HRichPadLabel::Class_Version(), "././hrichpadlabel.h", 27,
                  typeid(::HRichPadLabel), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPadLabel::Dictionary, isa_proxy, 0,
                  sizeof(::HRichPadLabel) );
      instance.SetNew(&new_HRichPadLabel);
      instance.SetNewArray(&newArray_HRichPadLabel);
      instance.SetDelete(&delete_HRichPadLabel);
      instance.SetDeleteArray(&deleteArray_HRichPadLabel);
      instance.SetDestructor(&destruct_HRichPadLabel);
      instance.SetStreamerFunc(&streamer_HRichPadLabel);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPadLabel*)
   {
      return GenerateInitInstanceLocal((::HRichPadLabel*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPadLabel*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichRingFind_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichRingFind(void *p = 0);
   static void *newArray_HRichRingFind(Long_t size, void *p);
   static void delete_HRichRingFind(void *p);
   static void deleteArray_HRichRingFind(void *p);
   static void destruct_HRichRingFind(void *p);
   static void streamer_HRichRingFind(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichRingFind*)
   {
      ::HRichRingFind *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichRingFind >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichRingFind", ::HRichRingFind::Class_Version(), "././hrichringfind.h", 30,
                  typeid(::HRichRingFind), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichRingFind::Dictionary, isa_proxy, 0,
                  sizeof(::HRichRingFind) );
      instance.SetNew(&new_HRichRingFind);
      instance.SetNewArray(&newArray_HRichRingFind);
      instance.SetDelete(&delete_HRichRingFind);
      instance.SetDeleteArray(&deleteArray_HRichRingFind);
      instance.SetDestructor(&destruct_HRichRingFind);
      instance.SetStreamerFunc(&streamer_HRichRingFind);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichRingFind*)
   {
      return GenerateInitInstanceLocal((::HRichRingFind*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichRingFind*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichAnalysis_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichAnalysis(void *p = 0);
   static void *newArray_HRichAnalysis(Long_t size, void *p);
   static void delete_HRichAnalysis(void *p);
   static void deleteArray_HRichAnalysis(void *p);
   static void destruct_HRichAnalysis(void *p);
   static void streamer_HRichAnalysis(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichAnalysis*)
   {
      ::HRichAnalysis *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichAnalysis >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichAnalysis", ::HRichAnalysis::Class_Version(), "././hrichanalysis.h", 40,
                  typeid(::HRichAnalysis), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichAnalysis::Dictionary, isa_proxy, 1,
                  sizeof(::HRichAnalysis) );
      instance.SetNew(&new_HRichAnalysis);
      instance.SetNewArray(&newArray_HRichAnalysis);
      instance.SetDelete(&delete_HRichAnalysis);
      instance.SetDeleteArray(&deleteArray_HRichAnalysis);
      instance.SetDestructor(&destruct_HRichAnalysis);
      instance.SetStreamerFunc(&streamer_HRichAnalysis);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichAnalysis*)
   {
      return GenerateInitInstanceLocal((::HRichAnalysis*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichAnalysis*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichCalSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichCalSim(void *p = 0);
   static void *newArray_HRichCalSim(Long_t size, void *p);
   static void delete_HRichCalSim(void *p);
   static void deleteArray_HRichCalSim(void *p);
   static void destruct_HRichCalSim(void *p);
   static void streamer_HRichCalSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichCalSim*)
   {
      ::HRichCalSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichCalSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichCalSim", ::HRichCalSim::Class_Version(), "././hrichcalsim.h", 25,
                  typeid(::HRichCalSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichCalSim::Dictionary, isa_proxy, 1,
                  sizeof(::HRichCalSim) );
      instance.SetNew(&new_HRichCalSim);
      instance.SetNewArray(&newArray_HRichCalSim);
      instance.SetDelete(&delete_HRichCalSim);
      instance.SetDeleteArray(&deleteArray_HRichCalSim);
      instance.SetDestructor(&destruct_HRichCalSim);
      instance.SetStreamerFunc(&streamer_HRichCalSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichCalSim*)
   {
      return GenerateInitInstanceLocal((::HRichCalSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichCalSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichHitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichHitSim(void *p = 0);
   static void *newArray_HRichHitSim(Long_t size, void *p);
   static void delete_HRichHitSim(void *p);
   static void deleteArray_HRichHitSim(void *p);
   static void destruct_HRichHitSim(void *p);
   static void streamer_HRichHitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichHitSim*)
   {
      ::HRichHitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichHitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichHitSim", ::HRichHitSim::Class_Version(), "././hrichhitsim.h", 22,
                  typeid(::HRichHitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichHitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HRichHitSim) );
      instance.SetNew(&new_HRichHitSim);
      instance.SetNewArray(&newArray_HRichHitSim);
      instance.SetDelete(&delete_HRichHitSim);
      instance.SetDeleteArray(&deleteArray_HRichHitSim);
      instance.SetDestructor(&destruct_HRichHitSim);
      instance.SetStreamerFunc(&streamer_HRichHitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichHitSim*)
   {
      return GenerateInitInstanceLocal((::HRichHitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichHitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichRingFindSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichRingFindSim(void *p = 0);
   static void *newArray_HRichRingFindSim(Long_t size, void *p);
   static void delete_HRichRingFindSim(void *p);
   static void deleteArray_HRichRingFindSim(void *p);
   static void destruct_HRichRingFindSim(void *p);
   static void streamer_HRichRingFindSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichRingFindSim*)
   {
      ::HRichRingFindSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichRingFindSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichRingFindSim", ::HRichRingFindSim::Class_Version(), "././hrichringfindsim.h", 26,
                  typeid(::HRichRingFindSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichRingFindSim::Dictionary, isa_proxy, 0,
                  sizeof(::HRichRingFindSim) );
      instance.SetNew(&new_HRichRingFindSim);
      instance.SetNewArray(&newArray_HRichRingFindSim);
      instance.SetDelete(&delete_HRichRingFindSim);
      instance.SetDeleteArray(&deleteArray_HRichRingFindSim);
      instance.SetDestructor(&destruct_HRichRingFindSim);
      instance.SetStreamerFunc(&streamer_HRichRingFindSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichRingFindSim*)
   {
      return GenerateInitInstanceLocal((::HRichRingFindSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichRingFindSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichAnalysisSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichAnalysisSim(void *p = 0);
   static void *newArray_HRichAnalysisSim(Long_t size, void *p);
   static void delete_HRichAnalysisSim(void *p);
   static void deleteArray_HRichAnalysisSim(void *p);
   static void destruct_HRichAnalysisSim(void *p);
   static void streamer_HRichAnalysisSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichAnalysisSim*)
   {
      ::HRichAnalysisSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichAnalysisSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichAnalysisSim", ::HRichAnalysisSim::Class_Version(), "././hrichanalysissim.h", 28,
                  typeid(::HRichAnalysisSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichAnalysisSim::Dictionary, isa_proxy, 0,
                  sizeof(::HRichAnalysisSim) );
      instance.SetNew(&new_HRichAnalysisSim);
      instance.SetNewArray(&newArray_HRichAnalysisSim);
      instance.SetDelete(&delete_HRichAnalysisSim);
      instance.SetDeleteArray(&deleteArray_HRichAnalysisSim);
      instance.SetDestructor(&destruct_HRichAnalysisSim);
      instance.SetStreamerFunc(&streamer_HRichAnalysisSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichAnalysisSim*)
   {
      return GenerateInitInstanceLocal((::HRichAnalysisSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichAnalysisSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichCal(void *p = 0);
   static void *newArray_HRichCal(Long_t size, void *p);
   static void delete_HRichCal(void *p);
   static void deleteArray_HRichCal(void *p);
   static void destruct_HRichCal(void *p);
   static void streamer_HRichCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichCal*)
   {
      ::HRichCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichCal", ::HRichCal::Class_Version(), "././hrichcal.h", 22,
                  typeid(::HRichCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichCal::Dictionary, isa_proxy, 0,
                  sizeof(::HRichCal) );
      instance.SetNew(&new_HRichCal);
      instance.SetNewArray(&newArray_HRichCal);
      instance.SetDelete(&delete_HRichCal);
      instance.SetDeleteArray(&deleteArray_HRichCal);
      instance.SetDestructor(&destruct_HRichCal);
      instance.SetStreamerFunc(&streamer_HRichCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichCal*)
   {
      return GenerateInitInstanceLocal((::HRichCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichCalParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichCalParCell(void *p = 0);
   static void *newArray_HRichCalParCell(Long_t size, void *p);
   static void delete_HRichCalParCell(void *p);
   static void deleteArray_HRichCalParCell(void *p);
   static void destruct_HRichCalParCell(void *p);
   static void streamer_HRichCalParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichCalParCell*)
   {
      ::HRichCalParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichCalParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichCalParCell", ::HRichCalParCell::Class_Version(), "././hrichcalparcell.h", 22,
                  typeid(::HRichCalParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichCalParCell::Dictionary, isa_proxy, 0,
                  sizeof(::HRichCalParCell) );
      instance.SetNew(&new_HRichCalParCell);
      instance.SetNewArray(&newArray_HRichCalParCell);
      instance.SetDelete(&delete_HRichCalParCell);
      instance.SetDeleteArray(&deleteArray_HRichCalParCell);
      instance.SetDestructor(&destruct_HRichCalParCell);
      instance.SetStreamerFunc(&streamer_HRichCalParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichCalParCell*)
   {
      return GenerateInitInstanceLocal((::HRichCalParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichCalParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichCalPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichCalPar(void *p = 0);
   static void *newArray_HRichCalPar(Long_t size, void *p);
   static void delete_HRichCalPar(void *p);
   static void deleteArray_HRichCalPar(void *p);
   static void destruct_HRichCalPar(void *p);
   static void streamer_HRichCalPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichCalPar*)
   {
      ::HRichCalPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichCalPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichCalPar", ::HRichCalPar::Class_Version(), "././hrichcalpar.h", 27,
                  typeid(::HRichCalPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichCalPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRichCalPar) );
      instance.SetNew(&new_HRichCalPar);
      instance.SetNewArray(&newArray_HRichCalPar);
      instance.SetDelete(&delete_HRichCalPar);
      instance.SetDeleteArray(&deleteArray_HRichCalPar);
      instance.SetDestructor(&destruct_HRichCalPar);
      instance.SetStreamerFunc(&streamer_HRichCalPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichCalPar*)
   {
      return GenerateInitInstanceLocal((::HRichCalPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichCalPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichContFact(void *p = 0);
   static void *newArray_HRichContFact(Long_t size, void *p);
   static void delete_HRichContFact(void *p);
   static void deleteArray_HRichContFact(void *p);
   static void destruct_HRichContFact(void *p);
   static void streamer_HRichContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichContFact*)
   {
      ::HRichContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichContFact", ::HRichContFact::Class_Version(), "././hrichcontfact.h", 25,
                  typeid(::HRichContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HRichContFact) );
      instance.SetNew(&new_HRichContFact);
      instance.SetNewArray(&newArray_HRichContFact);
      instance.SetDelete(&delete_HRichContFact);
      instance.SetDeleteArray(&deleteArray_HRichContFact);
      instance.SetDestructor(&destruct_HRichContFact);
      instance.SetStreamerFunc(&streamer_HRichContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichContFact*)
   {
      return GenerateInitInstanceLocal((::HRichContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichDetector(void *p = 0);
   static void *newArray_HRichDetector(Long_t size, void *p);
   static void delete_HRichDetector(void *p);
   static void deleteArray_HRichDetector(void *p);
   static void destruct_HRichDetector(void *p);
   static void streamer_HRichDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichDetector*)
   {
      ::HRichDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichDetector", ::HRichDetector::Class_Version(), "././hrichdetector.h", 26,
                  typeid(::HRichDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HRichDetector) );
      instance.SetNew(&new_HRichDetector);
      instance.SetNewArray(&newArray_HRichDetector);
      instance.SetDelete(&delete_HRichDetector);
      instance.SetDeleteArray(&deleteArray_HRichDetector);
      instance.SetDestructor(&destruct_HRichDetector);
      instance.SetStreamerFunc(&streamer_HRichDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichDetector*)
   {
      return GenerateInitInstanceLocal((::HRichDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichDigitisationPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichDigitisationPar(void *p = 0);
   static void *newArray_HRichDigitisationPar(Long_t size, void *p);
   static void delete_HRichDigitisationPar(void *p);
   static void deleteArray_HRichDigitisationPar(void *p);
   static void destruct_HRichDigitisationPar(void *p);
   static void streamer_HRichDigitisationPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichDigitisationPar*)
   {
      ::HRichDigitisationPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichDigitisationPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichDigitisationPar", ::HRichDigitisationPar::Class_Version(), "././hrichdigitisationpar.h", 26,
                  typeid(::HRichDigitisationPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichDigitisationPar::Dictionary, isa_proxy, 1,
                  sizeof(::HRichDigitisationPar) );
      instance.SetNew(&new_HRichDigitisationPar);
      instance.SetNewArray(&newArray_HRichDigitisationPar);
      instance.SetDelete(&delete_HRichDigitisationPar);
      instance.SetDeleteArray(&deleteArray_HRichDigitisationPar);
      instance.SetDestructor(&destruct_HRichDigitisationPar);
      instance.SetStreamerFunc(&streamer_HRichDigitisationPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichDigitisationPar*)
   {
      return GenerateInitInstanceLocal((::HRichDigitisationPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichDigitisationPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPad_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPad(void *p = 0);
   static void *newArray_HRichPad(Long_t size, void *p);
   static void delete_HRichPad(void *p);
   static void deleteArray_HRichPad(void *p);
   static void destruct_HRichPad(void *p);
   static void streamer_HRichPad(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPad*)
   {
      ::HRichPad *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPad >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPad", ::HRichPad::Class_Version(), "././hrichpad.h", 30,
                  typeid(::HRichPad), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPad::Dictionary, isa_proxy, 0,
                  sizeof(::HRichPad) );
      instance.SetNew(&new_HRichPad);
      instance.SetNewArray(&newArray_HRichPad);
      instance.SetDelete(&delete_HRichPad);
      instance.SetDeleteArray(&deleteArray_HRichPad);
      instance.SetDestructor(&destruct_HRichPad);
      instance.SetStreamerFunc(&streamer_HRichPad);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPad*)
   {
      return GenerateInitInstanceLocal((::HRichPad*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPad*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichTrack(void *p = 0);
   static void *newArray_HRichTrack(Long_t size, void *p);
   static void delete_HRichTrack(void *p);
   static void deleteArray_HRichTrack(void *p);
   static void destruct_HRichTrack(void *p);
   static void streamer_HRichTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichTrack*)
   {
      ::HRichTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichTrack", ::HRichTrack::Class_Version(), "././hrichtrack.h", 22,
                  typeid(::HRichTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichTrack::Dictionary, isa_proxy, 0,
                  sizeof(::HRichTrack) );
      instance.SetNew(&new_HRichTrack);
      instance.SetNewArray(&newArray_HRichTrack);
      instance.SetDelete(&delete_HRichTrack);
      instance.SetDeleteArray(&deleteArray_HRichTrack);
      instance.SetDestructor(&destruct_HRichTrack);
      instance.SetStreamerFunc(&streamer_HRichTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichTrack*)
   {
      return GenerateInitInstanceLocal((::HRichTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichDigitizer(void *p = 0);
   static void *newArray_HRichDigitizer(Long_t size, void *p);
   static void delete_HRichDigitizer(void *p);
   static void deleteArray_HRichDigitizer(void *p);
   static void destruct_HRichDigitizer(void *p);
   static void streamer_HRichDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichDigitizer*)
   {
      ::HRichDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichDigitizer", ::HRichDigitizer::Class_Version(), "././hrichdigitizer.h", 32,
                  typeid(::HRichDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HRichDigitizer) );
      instance.SetNew(&new_HRichDigitizer);
      instance.SetNewArray(&newArray_HRichDigitizer);
      instance.SetDelete(&delete_HRichDigitizer);
      instance.SetDeleteArray(&deleteArray_HRichDigitizer);
      instance.SetDestructor(&destruct_HRichDigitizer);
      instance.SetStreamerFunc(&streamer_HRichDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichDigitizer*)
   {
      return GenerateInitInstanceLocal((::HRichDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichDirClus_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichDirClus(void *p = 0);
   static void *newArray_HRichDirClus(Long_t size, void *p);
   static void delete_HRichDirClus(void *p);
   static void deleteArray_HRichDirClus(void *p);
   static void destruct_HRichDirClus(void *p);
   static void streamer_HRichDirClus(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichDirClus*)
   {
      ::HRichDirClus *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichDirClus >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichDirClus", ::HRichDirClus::Class_Version(), "././hrichdirclus.h", 25,
                  typeid(::HRichDirClus), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichDirClus::Dictionary, isa_proxy, 0,
                  sizeof(::HRichDirClus) );
      instance.SetNew(&new_HRichDirClus);
      instance.SetNewArray(&newArray_HRichDirClus);
      instance.SetDelete(&delete_HRichDirClus);
      instance.SetDeleteArray(&deleteArray_HRichDirClus);
      instance.SetDestructor(&destruct_HRichDirClus);
      instance.SetStreamerFunc(&streamer_HRichDirClus);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichDirClus*)
   {
      return GenerateInitInstanceLocal((::HRichDirClus*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichDirClus*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichFrameCorner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichFrameCorner(void *p = 0);
   static void *newArray_HRichFrameCorner(Long_t size, void *p);
   static void delete_HRichFrameCorner(void *p);
   static void deleteArray_HRichFrameCorner(void *p);
   static void destruct_HRichFrameCorner(void *p);
   static void streamer_HRichFrameCorner(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichFrameCorner*)
   {
      ::HRichFrameCorner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichFrameCorner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichFrameCorner", ::HRichFrameCorner::Class_Version(), "././hrichframecorner.h", 22,
                  typeid(::HRichFrameCorner), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichFrameCorner::Dictionary, isa_proxy, 0,
                  sizeof(::HRichFrameCorner) );
      instance.SetNew(&new_HRichFrameCorner);
      instance.SetNewArray(&newArray_HRichFrameCorner);
      instance.SetDelete(&delete_HRichFrameCorner);
      instance.SetDeleteArray(&deleteArray_HRichFrameCorner);
      instance.SetDestructor(&destruct_HRichFrameCorner);
      instance.SetStreamerFunc(&streamer_HRichFrameCorner);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichFrameCorner*)
   {
      return GenerateInitInstanceLocal((::HRichFrameCorner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichFrameCorner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichFrame_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichFrame(void *p = 0);
   static void *newArray_HRichFrame(Long_t size, void *p);
   static void delete_HRichFrame(void *p);
   static void deleteArray_HRichFrame(void *p);
   static void destruct_HRichFrame(void *p);
   static void streamer_HRichFrame(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichFrame*)
   {
      ::HRichFrame *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichFrame >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichFrame", ::HRichFrame::Class_Version(), "././hrichframe.h", 26,
                  typeid(::HRichFrame), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichFrame::Dictionary, isa_proxy, 0,
                  sizeof(::HRichFrame) );
      instance.SetNew(&new_HRichFrame);
      instance.SetNewArray(&newArray_HRichFrame);
      instance.SetDelete(&delete_HRichFrame);
      instance.SetDeleteArray(&deleteArray_HRichFrame);
      instance.SetDestructor(&destruct_HRichFrame);
      instance.SetStreamerFunc(&streamer_HRichFrame);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichFrame*)
   {
      return GenerateInitInstanceLocal((::HRichFrame*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichFrame*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichFrameTab_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichFrameTab(void *p = 0);
   static void *newArray_HRichFrameTab(Long_t size, void *p);
   static void delete_HRichFrameTab(void *p);
   static void deleteArray_HRichFrameTab(void *p);
   static void destruct_HRichFrameTab(void *p);
   static void streamer_HRichFrameTab(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichFrameTab*)
   {
      ::HRichFrameTab *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichFrameTab >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichFrameTab", ::HRichFrameTab::Class_Version(), "././hrichframetab.h", 24,
                  typeid(::HRichFrameTab), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichFrameTab::Dictionary, isa_proxy, 0,
                  sizeof(::HRichFrameTab) );
      instance.SetNew(&new_HRichFrameTab);
      instance.SetNewArray(&newArray_HRichFrameTab);
      instance.SetDelete(&delete_HRichFrameTab);
      instance.SetDeleteArray(&deleteArray_HRichFrameTab);
      instance.SetDestructor(&destruct_HRichFrameTab);
      instance.SetStreamerFunc(&streamer_HRichFrameTab);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichFrameTab*)
   {
      return GenerateInitInstanceLocal((::HRichFrameTab*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichFrameTab*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPadCorner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPadCorner(void *p = 0);
   static void *newArray_HRichPadCorner(Long_t size, void *p);
   static void delete_HRichPadCorner(void *p);
   static void deleteArray_HRichPadCorner(void *p);
   static void destruct_HRichPadCorner(void *p);
   static void streamer_HRichPadCorner(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPadCorner*)
   {
      ::HRichPadCorner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPadCorner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPadCorner", ::HRichPadCorner::Class_Version(), "././hrichpadcorner.h", 22,
                  typeid(::HRichPadCorner), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPadCorner::Dictionary, isa_proxy, 0,
                  sizeof(::HRichPadCorner) );
      instance.SetNew(&new_HRichPadCorner);
      instance.SetNewArray(&newArray_HRichPadCorner);
      instance.SetDelete(&delete_HRichPadCorner);
      instance.SetDeleteArray(&deleteArray_HRichPadCorner);
      instance.SetDestructor(&destruct_HRichPadCorner);
      instance.SetStreamerFunc(&streamer_HRichPadCorner);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPadCorner*)
   {
      return GenerateInitInstanceLocal((::HRichPadCorner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPadCorner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPadTab_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPadTab(void *p = 0);
   static void *newArray_HRichPadTab(Long_t size, void *p);
   static void delete_HRichPadTab(void *p);
   static void deleteArray_HRichPadTab(void *p);
   static void destruct_HRichPadTab(void *p);
   static void streamer_HRichPadTab(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPadTab*)
   {
      ::HRichPadTab *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPadTab >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPadTab", ::HRichPadTab::Class_Version(), "././hrichpadtab.h", 37,
                  typeid(::HRichPadTab), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPadTab::Dictionary, isa_proxy, 0,
                  sizeof(::HRichPadTab) );
      instance.SetNew(&new_HRichPadTab);
      instance.SetNewArray(&newArray_HRichPadTab);
      instance.SetDelete(&delete_HRichPadTab);
      instance.SetDeleteArray(&deleteArray_HRichPadTab);
      instance.SetDestructor(&destruct_HRichPadTab);
      instance.SetStreamerFunc(&streamer_HRichPadTab);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPadTab*)
   {
      return GenerateInitInstanceLocal((::HRichPadTab*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPadTab*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichWire_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichWire(void *p = 0);
   static void *newArray_HRichWire(Long_t size, void *p);
   static void delete_HRichWire(void *p);
   static void deleteArray_HRichWire(void *p);
   static void destruct_HRichWire(void *p);
   static void streamer_HRichWire(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichWire*)
   {
      ::HRichWire *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichWire >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichWire", ::HRichWire::Class_Version(), "././hrichwire.h", 24,
                  typeid(::HRichWire), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichWire::Dictionary, isa_proxy, 0,
                  sizeof(::HRichWire) );
      instance.SetNew(&new_HRichWire);
      instance.SetNewArray(&newArray_HRichWire);
      instance.SetDelete(&delete_HRichWire);
      instance.SetDeleteArray(&deleteArray_HRichWire);
      instance.SetDestructor(&destruct_HRichWire);
      instance.SetStreamerFunc(&streamer_HRichWire);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichWire*)
   {
      return GenerateInitInstanceLocal((::HRichWire*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichWire*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichWireTab_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichWireTab(void *p = 0);
   static void *newArray_HRichWireTab(Long_t size, void *p);
   static void delete_HRichWireTab(void *p);
   static void deleteArray_HRichWireTab(void *p);
   static void destruct_HRichWireTab(void *p);
   static void streamer_HRichWireTab(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichWireTab*)
   {
      ::HRichWireTab *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichWireTab >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichWireTab", ::HRichWireTab::Class_Version(), "././hrichwiretab.h", 27,
                  typeid(::HRichWireTab), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichWireTab::Dictionary, isa_proxy, 0,
                  sizeof(::HRichWireTab) );
      instance.SetNew(&new_HRichWireTab);
      instance.SetNewArray(&newArray_HRichWireTab);
      instance.SetDelete(&delete_HRichWireTab);
      instance.SetDeleteArray(&deleteArray_HRichWireTab);
      instance.SetDestructor(&destruct_HRichWireTab);
      instance.SetStreamerFunc(&streamer_HRichWireTab);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichWireTab*)
   {
      return GenerateInitInstanceLocal((::HRichWireTab*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichWireTab*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichHitCandidate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichHitCandidate(void *p = 0);
   static void *newArray_HRichHitCandidate(Long_t size, void *p);
   static void delete_HRichHitCandidate(void *p);
   static void deleteArray_HRichHitCandidate(void *p);
   static void destruct_HRichHitCandidate(void *p);
   static void streamer_HRichHitCandidate(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichHitCandidate*)
   {
      ::HRichHitCandidate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichHitCandidate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichHitCandidate", ::HRichHitCandidate::Class_Version(), "././hrichhitcandidate.h", 23,
                  typeid(::HRichHitCandidate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichHitCandidate::Dictionary, isa_proxy, 0,
                  sizeof(::HRichHitCandidate) );
      instance.SetNew(&new_HRichHitCandidate);
      instance.SetNewArray(&newArray_HRichHitCandidate);
      instance.SetDelete(&delete_HRichHitCandidate);
      instance.SetDeleteArray(&deleteArray_HRichHitCandidate);
      instance.SetDestructor(&destruct_HRichHitCandidate);
      instance.SetStreamerFunc(&streamer_HRichHitCandidate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichHitCandidate*)
   {
      return GenerateInitInstanceLocal((::HRichHitCandidate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichHitCandidate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichMappingPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichMappingPar(void *p = 0);
   static void *newArray_HRichMappingPar(Long_t size, void *p);
   static void delete_HRichMappingPar(void *p);
   static void deleteArray_HRichMappingPar(void *p);
   static void destruct_HRichMappingPar(void *p);
   static void streamer_HRichMappingPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichMappingPar*)
   {
      ::HRichMappingPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichMappingPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichMappingPar", ::HRichMappingPar::Class_Version(), "././hrichmappingpar.h", 23,
                  typeid(::HRichMappingPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichMappingPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRichMappingPar) );
      instance.SetNew(&new_HRichMappingPar);
      instance.SetNewArray(&newArray_HRichMappingPar);
      instance.SetDelete(&delete_HRichMappingPar);
      instance.SetDeleteArray(&deleteArray_HRichMappingPar);
      instance.SetDestructor(&destruct_HRichMappingPar);
      instance.SetStreamerFunc(&streamer_HRichMappingPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichMappingPar*)
   {
      return GenerateInitInstanceLocal((::HRichMappingPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichMappingPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPadFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPadFilter(void *p = 0);
   static void *newArray_HRichPadFilter(Long_t size, void *p);
   static void delete_HRichPadFilter(void *p);
   static void deleteArray_HRichPadFilter(void *p);
   static void destruct_HRichPadFilter(void *p);
   static void streamer_HRichPadFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPadFilter*)
   {
      ::HRichPadFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPadFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPadFilter", ::HRichPadFilter::Class_Version(), "././hrichpadfilter.h", 22,
                  typeid(::HRichPadFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPadFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HRichPadFilter) );
      instance.SetNew(&new_HRichPadFilter);
      instance.SetNewArray(&newArray_HRichPadFilter);
      instance.SetDelete(&delete_HRichPadFilter);
      instance.SetDeleteArray(&deleteArray_HRichPadFilter);
      instance.SetDestructor(&destruct_HRichPadFilter);
      instance.SetStreamerFunc(&streamer_HRichPadFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPadFilter*)
   {
      return GenerateInitInstanceLocal((::HRichPadFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPadFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichPadGraph_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichPadGraph(void *p = 0);
   static void *newArray_HRichPadGraph(Long_t size, void *p);
   static void delete_HRichPadGraph(void *p);
   static void deleteArray_HRichPadGraph(void *p);
   static void destruct_HRichPadGraph(void *p);
   static void streamer_HRichPadGraph(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichPadGraph*)
   {
      ::HRichPadGraph *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichPadGraph >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichPadGraph", ::HRichPadGraph::Class_Version(), "././hrichpadgraph.h", 25,
                  typeid(::HRichPadGraph), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichPadGraph::Dictionary, isa_proxy, 1,
                  sizeof(::HRichPadGraph) );
      instance.SetNew(&new_HRichPadGraph);
      instance.SetNewArray(&newArray_HRichPadGraph);
      instance.SetDelete(&delete_HRichPadGraph);
      instance.SetDeleteArray(&deleteArray_HRichPadGraph);
      instance.SetDestructor(&destruct_HRichPadGraph);
      instance.SetStreamerFunc(&streamer_HRichPadGraph);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichPadGraph*)
   {
      return GenerateInitInstanceLocal((::HRichPadGraph*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichPadGraph*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRichParAsciiFileIo(void *p);
   static void deleteArray_HRichParAsciiFileIo(void *p);
   static void destruct_HRichParAsciiFileIo(void *p);
   static void streamer_HRichParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichParAsciiFileIo*)
   {
      ::HRichParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichParAsciiFileIo", ::HRichParAsciiFileIo::Class_Version(), "././hrichparasciifileio.h", 22,
                  typeid(::HRichParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HRichParAsciiFileIo) );
      instance.SetDelete(&delete_HRichParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HRichParAsciiFileIo);
      instance.SetDestructor(&destruct_HRichParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HRichParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HRichParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRichParRootFileIo(void *p);
   static void deleteArray_HRichParRootFileIo(void *p);
   static void destruct_HRichParRootFileIo(void *p);
   static void streamer_HRichParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichParRootFileIo*)
   {
      ::HRichParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichParRootFileIo", ::HRichParRootFileIo::Class_Version(), "././hrichparrootfileio.h", 22,
                  typeid(::HRichParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HRichParRootFileIo) );
      instance.SetDelete(&delete_HRichParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HRichParRootFileIo);
      instance.SetDestructor(&destruct_HRichParRootFileIo);
      instance.SetStreamerFunc(&streamer_HRichParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HRichParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichTaskSet(void *p = 0);
   static void *newArray_HRichTaskSet(Long_t size, void *p);
   static void delete_HRichTaskSet(void *p);
   static void deleteArray_HRichTaskSet(void *p);
   static void destruct_HRichTaskSet(void *p);
   static void streamer_HRichTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichTaskSet*)
   {
      ::HRichTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichTaskSet", ::HRichTaskSet::Class_Version(), "././hrichtaskset.h", 22,
                  typeid(::HRichTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HRichTaskSet) );
      instance.SetNew(&new_HRichTaskSet);
      instance.SetNewArray(&newArray_HRichTaskSet);
      instance.SetDelete(&delete_HRichTaskSet);
      instance.SetDeleteArray(&deleteArray_HRichTaskSet);
      instance.SetDestructor(&destruct_HRichTaskSet);
      instance.SetStreamerFunc(&streamer_HRichTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichTaskSet*)
   {
      return GenerateInitInstanceLocal((::HRichTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichThresholdPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichThresholdPar(void *p = 0);
   static void *newArray_HRichThresholdPar(Long_t size, void *p);
   static void delete_HRichThresholdPar(void *p);
   static void deleteArray_HRichThresholdPar(void *p);
   static void destruct_HRichThresholdPar(void *p);
   static void streamer_HRichThresholdPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichThresholdPar*)
   {
      ::HRichThresholdPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichThresholdPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichThresholdPar", ::HRichThresholdPar::Class_Version(), "././hrichthresholdpar.h", 20,
                  typeid(::HRichThresholdPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichThresholdPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRichThresholdPar) );
      instance.SetNew(&new_HRichThresholdPar);
      instance.SetNewArray(&newArray_HRichThresholdPar);
      instance.SetDelete(&delete_HRichThresholdPar);
      instance.SetDeleteArray(&deleteArray_HRichThresholdPar);
      instance.SetDestructor(&destruct_HRichThresholdPar);
      instance.SetStreamerFunc(&streamer_HRichThresholdPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichThresholdPar*)
   {
      return GenerateInitInstanceLocal((::HRichThresholdPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichThresholdPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HRichUnpacker(void *p);
   static void deleteArray_HRichUnpacker(void *p);
   static void destruct_HRichUnpacker(void *p);
   static void streamer_HRichUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichUnpacker*)
   {
      ::HRichUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichUnpacker", ::HRichUnpacker::Class_Version(), "././hrichunpacker.h", 26,
                  typeid(::HRichUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HRichUnpacker) );
      instance.SetDelete(&delete_HRichUnpacker);
      instance.SetDeleteArray(&deleteArray_HRichUnpacker);
      instance.SetDestructor(&destruct_HRichUnpacker);
      instance.SetStreamerFunc(&streamer_HRichUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichUnpacker*)
   {
      return GenerateInitInstanceLocal((::HRichUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichWireSignal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichWireSignal(void *p = 0);
   static void *newArray_HRichWireSignal(Long_t size, void *p);
   static void delete_HRichWireSignal(void *p);
   static void deleteArray_HRichWireSignal(void *p);
   static void destruct_HRichWireSignal(void *p);
   static void streamer_HRichWireSignal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichWireSignal*)
   {
      ::HRichWireSignal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichWireSignal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichWireSignal", ::HRichWireSignal::Class_Version(), "././hrichwiresignal.h", 28,
                  typeid(::HRichWireSignal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichWireSignal::Dictionary, isa_proxy, 0,
                  sizeof(::HRichWireSignal) );
      instance.SetNew(&new_HRichWireSignal);
      instance.SetNewArray(&newArray_HRichWireSignal);
      instance.SetDelete(&delete_HRichWireSignal);
      instance.SetDeleteArray(&deleteArray_HRichWireSignal);
      instance.SetDestructor(&destruct_HRichWireSignal);
      instance.SetStreamerFunc(&streamer_HRichWireSignal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichWireSignal*)
   {
      return GenerateInitInstanceLocal((::HRichWireSignal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichWireSignal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700TaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700TaskSet(void *p = 0);
   static void *newArray_HRich700TaskSet(Long_t size, void *p);
   static void delete_HRich700TaskSet(void *p);
   static void deleteArray_HRich700TaskSet(void *p);
   static void destruct_HRich700TaskSet(void *p);
   static void streamer_HRich700TaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700TaskSet*)
   {
      ::HRich700TaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700TaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700TaskSet", ::HRich700TaskSet::Class_Version(), "././hrich700taskset.h", 22,
                  typeid(::HRich700TaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700TaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700TaskSet) );
      instance.SetNew(&new_HRich700TaskSet);
      instance.SetNewArray(&newArray_HRich700TaskSet);
      instance.SetDelete(&delete_HRich700TaskSet);
      instance.SetDeleteArray(&deleteArray_HRich700TaskSet);
      instance.SetDestructor(&destruct_HRich700TaskSet);
      instance.SetStreamerFunc(&streamer_HRich700TaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700TaskSet*)
   {
      return GenerateInitInstanceLocal((::HRich700TaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700TaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700DigiMapPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700DigiMapPar(void *p = 0);
   static void *newArray_HRich700DigiMapPar(Long_t size, void *p);
   static void delete_HRich700DigiMapPar(void *p);
   static void deleteArray_HRich700DigiMapPar(void *p);
   static void destruct_HRich700DigiMapPar(void *p);
   static void streamer_HRich700DigiMapPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700DigiMapPar*)
   {
      ::HRich700DigiMapPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700DigiMapPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700DigiMapPar", ::HRich700DigiMapPar::Class_Version(), "././hrich700digimappar.h", 24,
                  typeid(::HRich700DigiMapPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700DigiMapPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700DigiMapPar) );
      instance.SetNew(&new_HRich700DigiMapPar);
      instance.SetNewArray(&newArray_HRich700DigiMapPar);
      instance.SetDelete(&delete_HRich700DigiMapPar);
      instance.SetDeleteArray(&deleteArray_HRich700DigiMapPar);
      instance.SetDestructor(&destruct_HRich700DigiMapPar);
      instance.SetStreamerFunc(&streamer_HRich700DigiMapPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700DigiMapPar*)
   {
      return GenerateInitInstanceLocal((::HRich700DigiMapPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700DigiMapPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700EventDisplay_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700EventDisplay(void *p = 0);
   static void *newArray_HRich700EventDisplay(Long_t size, void *p);
   static void delete_HRich700EventDisplay(void *p);
   static void deleteArray_HRich700EventDisplay(void *p);
   static void destruct_HRich700EventDisplay(void *p);
   static void streamer_HRich700EventDisplay(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700EventDisplay*)
   {
      ::HRich700EventDisplay *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700EventDisplay >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700EventDisplay", ::HRich700EventDisplay::Class_Version(), "././hrich700eventdisplay.h", 17,
                  typeid(::HRich700EventDisplay), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700EventDisplay::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700EventDisplay) );
      instance.SetNew(&new_HRich700EventDisplay);
      instance.SetNewArray(&newArray_HRich700EventDisplay);
      instance.SetDelete(&delete_HRich700EventDisplay);
      instance.SetDeleteArray(&deleteArray_HRich700EventDisplay);
      instance.SetDestructor(&destruct_HRich700EventDisplay);
      instance.SetStreamerFunc(&streamer_HRich700EventDisplay);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700EventDisplay*)
   {
      return GenerateInitInstanceLocal((::HRich700EventDisplay*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700EventDisplay*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRichDrawHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRichDrawHist(void *p = 0);
   static void *newArray_HRichDrawHist(Long_t size, void *p);
   static void delete_HRichDrawHist(void *p);
   static void deleteArray_HRichDrawHist(void *p);
   static void destruct_HRichDrawHist(void *p);
   static void streamer_HRichDrawHist(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRichDrawHist*)
   {
      ::HRichDrawHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRichDrawHist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRichDrawHist", ::HRichDrawHist::Class_Version(), "././hrich700drawhist.h", 59,
                  typeid(::HRichDrawHist), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRichDrawHist::Dictionary, isa_proxy, 0,
                  sizeof(::HRichDrawHist) );
      instance.SetNew(&new_HRichDrawHist);
      instance.SetNewArray(&newArray_HRichDrawHist);
      instance.SetDelete(&delete_HRichDrawHist);
      instance.SetDeleteArray(&deleteArray_HRichDrawHist);
      instance.SetDestructor(&destruct_HRichDrawHist);
      instance.SetStreamerFunc(&streamer_HRichDrawHist);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRichDrawHist*)
   {
      return GenerateInitInstanceLocal((::HRichDrawHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRichDrawHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700HistManager_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700HistManager(void *p = 0);
   static void *newArray_HRich700HistManager(Long_t size, void *p);
   static void delete_HRich700HistManager(void *p);
   static void deleteArray_HRich700HistManager(void *p);
   static void destruct_HRich700HistManager(void *p);
   static void streamer_HRich700HistManager(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700HistManager*)
   {
      ::HRich700HistManager *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700HistManager >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700HistManager", ::HRich700HistManager::Class_Version(), "././hrich700histmanager.h", 29,
                  typeid(::HRich700HistManager), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700HistManager::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700HistManager) );
      instance.SetNew(&new_HRich700HistManager);
      instance.SetNewArray(&newArray_HRich700HistManager);
      instance.SetDelete(&delete_HRich700HistManager);
      instance.SetDeleteArray(&deleteArray_HRich700HistManager);
      instance.SetDestructor(&destruct_HRich700HistManager);
      instance.SetStreamerFunc(&streamer_HRich700HistManager);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700HistManager*)
   {
      return GenerateInitInstanceLocal((::HRich700HistManager*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700HistManager*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700GeoTestQa_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700GeoTestQa(void *p = 0);
   static void *newArray_HRich700GeoTestQa(Long_t size, void *p);
   static void delete_HRich700GeoTestQa(void *p);
   static void deleteArray_HRich700GeoTestQa(void *p);
   static void destruct_HRich700GeoTestQa(void *p);
   static void streamer_HRich700GeoTestQa(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700GeoTestQa*)
   {
      ::HRich700GeoTestQa *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700GeoTestQa >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700GeoTestQa", ::HRich700GeoTestQa::Class_Version(), "././hrich700geotestqa.h", 20,
                  typeid(::HRich700GeoTestQa), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700GeoTestQa::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700GeoTestQa) );
      instance.SetNew(&new_HRich700GeoTestQa);
      instance.SetNewArray(&newArray_HRich700GeoTestQa);
      instance.SetDelete(&delete_HRich700GeoTestQa);
      instance.SetDeleteArray(&deleteArray_HRich700GeoTestQa);
      instance.SetDestructor(&destruct_HRich700GeoTestQa);
      instance.SetStreamerFunc(&streamer_HRich700GeoTestQa);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700GeoTestQa*)
   {
      return GenerateInitInstanceLocal((::HRich700GeoTestQa*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700GeoTestQa*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700Pmt_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HRich700Pmt_Dictionary();
   static void *new_HRich700Pmt(void *p = 0);
   static void *newArray_HRich700Pmt(Long_t size, void *p);
   static void delete_HRich700Pmt(void *p);
   static void deleteArray_HRich700Pmt(void *p);
   static void destruct_HRich700Pmt(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700Pmt*)
   {
      ::HRich700Pmt *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HRich700Pmt),0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700Pmt", "././hrich700pmt.h", 6,
                  typeid(::HRich700Pmt), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &HRich700Pmt_Dictionary, isa_proxy, 0,
                  sizeof(::HRich700Pmt) );
      instance.SetNew(&new_HRich700Pmt);
      instance.SetNewArray(&newArray_HRich700Pmt);
      instance.SetDelete(&delete_HRich700Pmt);
      instance.SetDeleteArray(&deleteArray_HRich700Pmt);
      instance.SetDestructor(&destruct_HRich700Pmt);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700Pmt*)
   {
      return GenerateInitInstanceLocal((::HRich700Pmt*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700Pmt*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HRich700Pmt_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700Pmt*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700DigiPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700DigiPar(void *p = 0);
   static void *newArray_HRich700DigiPar(Long_t size, void *p);
   static void delete_HRich700DigiPar(void *p);
   static void deleteArray_HRich700DigiPar(void *p);
   static void destruct_HRich700DigiPar(void *p);
   static void streamer_HRich700DigiPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700DigiPar*)
   {
      ::HRich700DigiPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700DigiPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700DigiPar", ::HRich700DigiPar::Class_Version(), "././hrich700digipar.h", 11,
                  typeid(::HRich700DigiPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700DigiPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700DigiPar) );
      instance.SetNew(&new_HRich700DigiPar);
      instance.SetNewArray(&newArray_HRich700DigiPar);
      instance.SetDelete(&delete_HRich700DigiPar);
      instance.SetDeleteArray(&deleteArray_HRich700DigiPar);
      instance.SetDestructor(&destruct_HRich700DigiPar);
      instance.SetStreamerFunc(&streamer_HRich700DigiPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700DigiPar*)
   {
      return GenerateInitInstanceLocal((::HRich700DigiPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700DigiPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700Digitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700Digitizer(void *p = 0);
   static void *newArray_HRich700Digitizer(Long_t size, void *p);
   static void delete_HRich700Digitizer(void *p);
   static void deleteArray_HRich700Digitizer(void *p);
   static void destruct_HRich700Digitizer(void *p);
   static void streamer_HRich700Digitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700Digitizer*)
   {
      ::HRich700Digitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700Digitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700Digitizer", ::HRich700Digitizer::Class_Version(), "././hrich700digitizer.h", 19,
                  typeid(::HRich700Digitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700Digitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700Digitizer) );
      instance.SetNew(&new_HRich700Digitizer);
      instance.SetNewArray(&newArray_HRich700Digitizer);
      instance.SetDelete(&delete_HRich700Digitizer);
      instance.SetDeleteArray(&deleteArray_HRich700Digitizer);
      instance.SetDestructor(&destruct_HRich700Digitizer);
      instance.SetStreamerFunc(&streamer_HRich700Digitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700Digitizer*)
   {
      return GenerateInitInstanceLocal((::HRich700Digitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700Digitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700RingFinderPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700RingFinderPar(void *p = 0);
   static void *newArray_HRich700RingFinderPar(Long_t size, void *p);
   static void delete_HRich700RingFinderPar(void *p);
   static void deleteArray_HRich700RingFinderPar(void *p);
   static void destruct_HRich700RingFinderPar(void *p);
   static void streamer_HRich700RingFinderPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700RingFinderPar*)
   {
      ::HRich700RingFinderPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700RingFinderPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700RingFinderPar", ::HRich700RingFinderPar::Class_Version(), "././hrich700ringfinderpar.h", 11,
                  typeid(::HRich700RingFinderPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700RingFinderPar::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700RingFinderPar) );
      instance.SetNew(&new_HRich700RingFinderPar);
      instance.SetNewArray(&newArray_HRich700RingFinderPar);
      instance.SetDelete(&delete_HRich700RingFinderPar);
      instance.SetDeleteArray(&deleteArray_HRich700RingFinderPar);
      instance.SetDestructor(&destruct_HRich700RingFinderPar);
      instance.SetStreamerFunc(&streamer_HRich700RingFinderPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700RingFinderPar*)
   {
      return GenerateInitInstanceLocal((::HRich700RingFinderPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700RingFinderPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700RingFinderIdeal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700RingFinderIdeal(void *p = 0);
   static void *newArray_HRich700RingFinderIdeal(Long_t size, void *p);
   static void delete_HRich700RingFinderIdeal(void *p);
   static void deleteArray_HRich700RingFinderIdeal(void *p);
   static void destruct_HRich700RingFinderIdeal(void *p);
   static void streamer_HRich700RingFinderIdeal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700RingFinderIdeal*)
   {
      ::HRich700RingFinderIdeal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700RingFinderIdeal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700RingFinderIdeal", ::HRich700RingFinderIdeal::Class_Version(), "././hrich700ringfinderideal.h", 17,
                  typeid(::HRich700RingFinderIdeal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700RingFinderIdeal::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700RingFinderIdeal) );
      instance.SetNew(&new_HRich700RingFinderIdeal);
      instance.SetNewArray(&newArray_HRich700RingFinderIdeal);
      instance.SetDelete(&delete_HRich700RingFinderIdeal);
      instance.SetDeleteArray(&deleteArray_HRich700RingFinderIdeal);
      instance.SetDestructor(&destruct_HRich700RingFinderIdeal);
      instance.SetStreamerFunc(&streamer_HRich700RingFinderIdeal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700RingFinderIdeal*)
   {
      return GenerateInitInstanceLocal((::HRich700RingFinderIdeal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700RingFinderIdeal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700RingFinderHough_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700RingFinderHough(void *p = 0);
   static void *newArray_HRich700RingFinderHough(Long_t size, void *p);
   static void delete_HRich700RingFinderHough(void *p);
   static void deleteArray_HRich700RingFinderHough(void *p);
   static void destruct_HRich700RingFinderHough(void *p);
   static void streamer_HRich700RingFinderHough(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700RingFinderHough*)
   {
      ::HRich700RingFinderHough *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700RingFinderHough >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700RingFinderHough", ::HRich700RingFinderHough::Class_Version(), "././hrich700ringfinderhough.h", 79,
                  typeid(::HRich700RingFinderHough), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700RingFinderHough::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700RingFinderHough) );
      instance.SetNew(&new_HRich700RingFinderHough);
      instance.SetNewArray(&newArray_HRich700RingFinderHough);
      instance.SetDelete(&delete_HRich700RingFinderHough);
      instance.SetDeleteArray(&deleteArray_HRich700RingFinderHough);
      instance.SetDestructor(&destruct_HRich700RingFinderHough);
      instance.SetStreamerFunc(&streamer_HRich700RingFinderHough);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700RingFinderHough*)
   {
      return GenerateInitInstanceLocal((::HRich700RingFinderHough*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700RingFinderHough*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HRich700RecoQa_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HRich700RecoQa(void *p = 0);
   static void *newArray_HRich700RecoQa(Long_t size, void *p);
   static void delete_HRich700RecoQa(void *p);
   static void deleteArray_HRich700RecoQa(void *p);
   static void destruct_HRich700RecoQa(void *p);
   static void streamer_HRich700RecoQa(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HRich700RecoQa*)
   {
      ::HRich700RecoQa *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HRich700RecoQa >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HRich700RecoQa", ::HRich700RecoQa::Class_Version(), "././hrich700recoqa.h", 19,
                  typeid(::HRich700RecoQa), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HRich700RecoQa::Dictionary, isa_proxy, 0,
                  sizeof(::HRich700RecoQa) );
      instance.SetNew(&new_HRich700RecoQa);
      instance.SetNewArray(&newArray_HRich700RecoQa);
      instance.SetDelete(&delete_HRich700RecoQa);
      instance.SetDeleteArray(&deleteArray_HRich700RecoQa);
      instance.SetDestructor(&destruct_HRich700RecoQa);
      instance.SetStreamerFunc(&streamer_HRich700RecoQa);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HRich700RecoQa*)
   {
      return GenerateInitInstanceLocal((::HRich700RecoQa*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HRich700RecoQa*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HRichHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichHit::Class_Name()
{
   return "HRichHit";
}

//______________________________________________________________________________
const char *HRichHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichLabel::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichLabel::Class_Name()
{
   return "HRichLabel";
}

//______________________________________________________________________________
const char *HRichLabel::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichLabel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichLabel::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichLabel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichLabel::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichLabel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichLabel::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichLabel*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPadSignal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPadSignal::Class_Name()
{
   return "HRichPadSignal";
}

//______________________________________________________________________________
const char *HRichPadSignal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadSignal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPadSignal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadSignal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPadSignal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadSignal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPadSignal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadSignal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichAnalysisPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichAnalysisPar::Class_Name()
{
   return "HRichAnalysisPar";
}

//______________________________________________________________________________
const char *HRichAnalysisPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichAnalysisPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichAnalysisPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichAnalysisPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichGeometryPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichGeometryPar::Class_Name()
{
   return "HRichGeometryPar";
}

//______________________________________________________________________________
const char *HRichGeometryPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichGeometryPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichGeometryPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichGeometryPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichGeometryPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichGeometryPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichGeometryPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichGeometryPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichHitHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichHitHeader::Class_Name()
{
   return "HRichHitHeader";
}

//______________________________________________________________________________
const char *HRichHitHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichHitHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichHitHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichHitHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPadClean::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPadClean::Class_Name()
{
   return "HRichPadClean";
}

//______________________________________________________________________________
const char *HRichPadClean::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadClean*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPadClean::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadClean*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPadClean::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadClean*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPadClean::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadClean*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPadLabel::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPadLabel::Class_Name()
{
   return "HRichPadLabel";
}

//______________________________________________________________________________
const char *HRichPadLabel::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadLabel*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPadLabel::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadLabel*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPadLabel::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadLabel*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPadLabel::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadLabel*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichRingFind::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichRingFind::Class_Name()
{
   return "HRichRingFind";
}

//______________________________________________________________________________
const char *HRichRingFind::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFind*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichRingFind::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFind*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichRingFind::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFind*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichRingFind::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFind*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichAnalysis::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichAnalysis::Class_Name()
{
   return "HRichAnalysis";
}

//______________________________________________________________________________
const char *HRichAnalysis::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysis*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichAnalysis::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysis*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichAnalysis::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysis*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichAnalysis::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysis*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichCalSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichCalSim::Class_Name()
{
   return "HRichCalSim";
}

//______________________________________________________________________________
const char *HRichCalSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichCalSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichCalSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichCalSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichHitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichHitSim::Class_Name()
{
   return "HRichHitSim";
}

//______________________________________________________________________________
const char *HRichHitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichHitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichHitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichHitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichRingFindSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichRingFindSim::Class_Name()
{
   return "HRichRingFindSim";
}

//______________________________________________________________________________
const char *HRichRingFindSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFindSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichRingFindSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFindSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichRingFindSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFindSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichRingFindSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichRingFindSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichAnalysisSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichAnalysisSim::Class_Name()
{
   return "HRichAnalysisSim";
}

//______________________________________________________________________________
const char *HRichAnalysisSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichAnalysisSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichAnalysisSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichAnalysisSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichAnalysisSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichCal::Class_Name()
{
   return "HRichCal";
}

//______________________________________________________________________________
const char *HRichCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichCalParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichCalParCell::Class_Name()
{
   return "HRichCalParCell";
}

//______________________________________________________________________________
const char *HRichCalParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichCalParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichCalParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichCalParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichCalPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichCalPar::Class_Name()
{
   return "HRichCalPar";
}

//______________________________________________________________________________
const char *HRichCalPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichCalPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichCalPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichCalPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichCalPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichContFact::Class_Name()
{
   return "HRichContFact";
}

//______________________________________________________________________________
const char *HRichContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichDetector::Class_Name()
{
   return "HRichDetector";
}

//______________________________________________________________________________
const char *HRichDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichDigitisationPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichDigitisationPar::Class_Name()
{
   return "HRichDigitisationPar";
}

//______________________________________________________________________________
const char *HRichDigitisationPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitisationPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichDigitisationPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitisationPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichDigitisationPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitisationPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichDigitisationPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitisationPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPad::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPad::Class_Name()
{
   return "HRichPad";
}

//______________________________________________________________________________
const char *HRichPad::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPad*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPad::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPad*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPad::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPad*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPad::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPad*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichTrack::Class_Name()
{
   return "HRichTrack";
}

//______________________________________________________________________________
const char *HRichTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichDigitizer::Class_Name()
{
   return "HRichDigitizer";
}

//______________________________________________________________________________
const char *HRichDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichDirClus::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichDirClus::Class_Name()
{
   return "HRichDirClus";
}

//______________________________________________________________________________
const char *HRichDirClus::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDirClus*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichDirClus::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDirClus*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichDirClus::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDirClus*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichDirClus::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDirClus*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichFrameCorner::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichFrameCorner::Class_Name()
{
   return "HRichFrameCorner";
}

//______________________________________________________________________________
const char *HRichFrameCorner::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameCorner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichFrameCorner::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameCorner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichFrameCorner::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameCorner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichFrameCorner::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameCorner*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichFrame::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichFrame::Class_Name()
{
   return "HRichFrame";
}

//______________________________________________________________________________
const char *HRichFrame::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrame*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichFrame::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrame*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichFrame::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrame*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichFrame::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrame*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichFrameTab::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichFrameTab::Class_Name()
{
   return "HRichFrameTab";
}

//______________________________________________________________________________
const char *HRichFrameTab::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameTab*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichFrameTab::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameTab*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichFrameTab::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameTab*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichFrameTab::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichFrameTab*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPadCorner::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPadCorner::Class_Name()
{
   return "HRichPadCorner";
}

//______________________________________________________________________________
const char *HRichPadCorner::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadCorner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPadCorner::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadCorner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPadCorner::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadCorner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPadCorner::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadCorner*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPadTab::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPadTab::Class_Name()
{
   return "HRichPadTab";
}

//______________________________________________________________________________
const char *HRichPadTab::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadTab*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPadTab::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadTab*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPadTab::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadTab*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPadTab::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadTab*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichWire::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichWire::Class_Name()
{
   return "HRichWire";
}

//______________________________________________________________________________
const char *HRichWire::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWire*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichWire::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWire*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichWire::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWire*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichWire::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWire*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichWireTab::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichWireTab::Class_Name()
{
   return "HRichWireTab";
}

//______________________________________________________________________________
const char *HRichWireTab::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireTab*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichWireTab::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireTab*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichWireTab::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireTab*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichWireTab::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireTab*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichHitCandidate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichHitCandidate::Class_Name()
{
   return "HRichHitCandidate";
}

//______________________________________________________________________________
const char *HRichHitCandidate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitCandidate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichHitCandidate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitCandidate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichHitCandidate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitCandidate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichHitCandidate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichHitCandidate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichMappingPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichMappingPar::Class_Name()
{
   return "HRichMappingPar";
}

//______________________________________________________________________________
const char *HRichMappingPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichMappingPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichMappingPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichMappingPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichMappingPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichMappingPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichMappingPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichMappingPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPadFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPadFilter::Class_Name()
{
   return "HRichPadFilter";
}

//______________________________________________________________________________
const char *HRichPadFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPadFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPadFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPadFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichPadGraph::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichPadGraph::Class_Name()
{
   return "HRichPadGraph";
}

//______________________________________________________________________________
const char *HRichPadGraph::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadGraph*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichPadGraph::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadGraph*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichPadGraph::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadGraph*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichPadGraph::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichPadGraph*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichParAsciiFileIo::Class_Name()
{
   return "HRichParAsciiFileIo";
}

//______________________________________________________________________________
const char *HRichParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichParRootFileIo::Class_Name()
{
   return "HRichParRootFileIo";
}

//______________________________________________________________________________
const char *HRichParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichTaskSet::Class_Name()
{
   return "HRichTaskSet";
}

//______________________________________________________________________________
const char *HRichTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichThresholdPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichThresholdPar::Class_Name()
{
   return "HRichThresholdPar";
}

//______________________________________________________________________________
const char *HRichThresholdPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichThresholdPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichThresholdPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichThresholdPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichThresholdPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichThresholdPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichThresholdPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichThresholdPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichUnpacker::Class_Name()
{
   return "HRichUnpacker";
}

//______________________________________________________________________________
const char *HRichUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichWireSignal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichWireSignal::Class_Name()
{
   return "HRichWireSignal";
}

//______________________________________________________________________________
const char *HRichWireSignal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireSignal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichWireSignal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireSignal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichWireSignal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireSignal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichWireSignal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichWireSignal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700TaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700TaskSet::Class_Name()
{
   return "HRich700TaskSet";
}

//______________________________________________________________________________
const char *HRich700TaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700TaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700TaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700TaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700TaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700TaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700TaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700TaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700DigiMapPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700DigiMapPar::Class_Name()
{
   return "HRich700DigiMapPar";
}

//______________________________________________________________________________
const char *HRich700DigiMapPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiMapPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700DigiMapPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiMapPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700DigiMapPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiMapPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700DigiMapPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiMapPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700EventDisplay::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700EventDisplay::Class_Name()
{
   return "HRich700EventDisplay";
}

//______________________________________________________________________________
const char *HRich700EventDisplay::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700EventDisplay*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700EventDisplay::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700EventDisplay*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700EventDisplay::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700EventDisplay*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700EventDisplay::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700EventDisplay*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRichDrawHist::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRichDrawHist::Class_Name()
{
   return "HRichDrawHist";
}

//______________________________________________________________________________
const char *HRichDrawHist::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDrawHist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRichDrawHist::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDrawHist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRichDrawHist::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDrawHist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRichDrawHist::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRichDrawHist*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700HistManager::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700HistManager::Class_Name()
{
   return "HRich700HistManager";
}

//______________________________________________________________________________
const char *HRich700HistManager::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700HistManager*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700HistManager::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700HistManager*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700HistManager::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700HistManager*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700HistManager::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700HistManager*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700GeoTestQa::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700GeoTestQa::Class_Name()
{
   return "HRich700GeoTestQa";
}

//______________________________________________________________________________
const char *HRich700GeoTestQa::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700GeoTestQa*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700GeoTestQa::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700GeoTestQa*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700GeoTestQa::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700GeoTestQa*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700GeoTestQa::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700GeoTestQa*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700DigiPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700DigiPar::Class_Name()
{
   return "HRich700DigiPar";
}

//______________________________________________________________________________
const char *HRich700DigiPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700DigiPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700DigiPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700DigiPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700DigiPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700Digitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700Digitizer::Class_Name()
{
   return "HRich700Digitizer";
}

//______________________________________________________________________________
const char *HRich700Digitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700Digitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700Digitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700Digitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700Digitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700Digitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700Digitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700Digitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700RingFinderPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700RingFinderPar::Class_Name()
{
   return "HRich700RingFinderPar";
}

//______________________________________________________________________________
const char *HRich700RingFinderPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700RingFinderPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700RingFinderPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700RingFinderPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700RingFinderIdeal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700RingFinderIdeal::Class_Name()
{
   return "HRich700RingFinderIdeal";
}

//______________________________________________________________________________
const char *HRich700RingFinderIdeal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderIdeal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700RingFinderIdeal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderIdeal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700RingFinderIdeal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderIdeal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700RingFinderIdeal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderIdeal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700RingFinderHough::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700RingFinderHough::Class_Name()
{
   return "HRich700RingFinderHough";
}

//______________________________________________________________________________
const char *HRich700RingFinderHough::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderHough*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700RingFinderHough::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderHough*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700RingFinderHough::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderHough*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700RingFinderHough::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RingFinderHough*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HRich700RecoQa::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HRich700RecoQa::Class_Name()
{
   return "HRich700RecoQa";
}

//______________________________________________________________________________
const char *HRich700RecoQa::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RecoQa*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HRich700RecoQa::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RecoQa*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HRich700RecoQa::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RecoQa*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HRich700RecoQa::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HRich700RecoQa*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HRichAnalysis::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichAnalysis.
      TClass *R__cl = ::HRichAnalysis::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iActiveSector", &iActiveSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLeftBorder", &pLeftBorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRightBorder", &pRightBorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pPads", &pPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLabelArea", &pLabelArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRings", &pRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIterHitHeader", &fIterHitHeader);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadFiredNr", &iPadFiredNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadFired[6]", fPadFired);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadCleanedNr", &iPadCleanedNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iClusterCleanedNr", &iClusterCleanedNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iClustersCleaned", &iClustersCleaned);
      R__insp.InspectMember(iClustersCleaned, "iClustersCleaned.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLabelNr", &iLabelNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingNr", &iRingNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingNrTot", &iRingNrTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sectorPairNrTot", &sectorPairNrTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "allPairNrTot", &allPairNrTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFakePad", &iFakePad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFakeLocalMax4", &iFakeLocalMax4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFakeLocalMax8", &iFakeLocalMax8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxFiredTotalPads", &maxFiredTotalPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pPadClean", &pPadClean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pPadLabel", &pPadLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRingFind", &pRingFind);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSectorPads", &pSectorPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCols", &maxCols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxRows", &maxRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxPads", &maxPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "secWithCurrent", &secWithCurrent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCalCat", &m_pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitCat", &m_pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitHdrCat", &m_pHitHdrCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fpAnalysisPar", &fpAnalysisPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fpGeomPar", &fpGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadActive", &iPadActive);
      R__insp.InspectMember(iPadActive, "iPadActive.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hithdrLoop", &hithdrLoop);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kSkipEvtIfNoRing", &kSkipEvtIfNoRing);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichAnalysis(void *p) {
      return  p ? new(p) ::HRichAnalysis : new ::HRichAnalysis;
   }
   static void *newArray_HRichAnalysis(Long_t nElements, void *p) {
      return p ? new(p) ::HRichAnalysis[nElements] : new ::HRichAnalysis[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichAnalysis(void *p) {
      delete ((::HRichAnalysis*)p);
   }
   static void deleteArray_HRichAnalysis(void *p) {
      delete [] ((::HRichAnalysis*)p);
   }
   static void destruct_HRichAnalysis(void *p) {
      typedef ::HRichAnalysis current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichAnalysis(TBuffer &buf, void *obj) {
      ((::HRichAnalysis*)obj)->::HRichAnalysis::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichAnalysis

//______________________________________________________________________________
void HRichAnalysisPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichAnalysisPar.
      TClass *R__cl = ::HRichAnalysisPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iCutOffThresheold", &iCutOffThresheold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingRadius", &iRingRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingRadiusError", &iRingRadiusError);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingMatrixSize", &iRingMatrixSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingMatrix", &iRingMatrix);
      R__insp.InspectMember(iRingMatrix, "iRingMatrix.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingMaskSize", &iRingMaskSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingMask", &iRingMask);
      R__insp.InspectMember(iRingMask, "iRingMask.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveCleanAlonePad", &isActiveCleanAlonePad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iCleanAlonePadBorder", &iCleanAlonePadBorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iCleanAlonePadLowerThreshold", &iCleanAlonePadLowerThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveCleanHighPulse", &isActiveCleanHighPulse);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iCleanHighPulseBorder", &iCleanHighPulseBorder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iCleanHighPulseUpperThreshold", &iCleanHighPulseUpperThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveLabelPads", &isActiveLabelPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLabeledPadsDistance", &iLabeledPadsDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxFiredSectorPads", &maxFiredSectorPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveBorderAmplitReduction", &isActiveBorderAmplitReduction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveTestDensity", &isActiveTestDensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThresholdDensity", &fThresholdDensity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSurfaceArea", &fSurfaceArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveDynamicThrAmplitude", &isActiveDynamicThrAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLowerAmplFactor", &fLowerAmplFactor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFormulaParam1", &fFormulaParam1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFormulaParam2", &fFormulaParam2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFormulaParam3", &fFormulaParam3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveFiredRingPadsRatio", &isActiveFiredRingPadsRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFiredRingPadsRatio", &fFiredRingPadsRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveTestAsymmetry", &isActiveTestAsymmetry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveTestCharge", &isActiveTestCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingMinCharge", &fRingMinCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingMaxCharge", &fRingMaxCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveFakesRejection", &isActiveFakesRejection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFakeQualityRatio", &fFakeQualityRatio);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFakeCentroidCut", &fFakeCentroidCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iSuperiorAlgorithmID", &iSuperiorAlgorithmID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveRingFindFitMatrix", &isActiveRingFindFitMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iMinimalFitMatrixRingQuality", &iMinimalFitMatrixRingQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iMinimalFitMatrixRingDistance", &iMinimalFitMatrixRingDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iHowManyFitMatrixRings", &iHowManyFitMatrixRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveRingHoughTransf", &isActiveRingHoughTransf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iMinimalHoughTransfRingQuality", &iMinimalHoughTransfRingQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iMinimalHoughTransfRingDistance", &iMinimalHoughTransfRingDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iHowManyHoughTransfRings", &iHowManyHoughTransfRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmpCorrFac", &fAmpCorrFac);
      R__insp.InspectMember(fAmpCorrFac, "fAmpCorrFac.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filename[40]", filename);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichAnalysisPar(void *p) {
      return  p ? new(p) ::HRichAnalysisPar : new ::HRichAnalysisPar;
   }
   static void *newArray_HRichAnalysisPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRichAnalysisPar[nElements] : new ::HRichAnalysisPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichAnalysisPar(void *p) {
      delete ((::HRichAnalysisPar*)p);
   }
   static void deleteArray_HRichAnalysisPar(void *p) {
      delete [] ((::HRichAnalysisPar*)p);
   }
   static void destruct_HRichAnalysisPar(void *p) {
      typedef ::HRichAnalysisPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichAnalysisPar(TBuffer &buf, void *obj) {
      ((::HRichAnalysisPar*)obj)->::HRichAnalysisPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichAnalysisPar

//______________________________________________________________________________
void HRichAnalysisSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichAnalysisSim.

   HRichAnalysis::Streamer(R__b);
}

//______________________________________________________________________________
void HRichAnalysisSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichAnalysisSim.
      TClass *R__cl = ::HRichAnalysisSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRings", &pRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "kSkipEvtIfNoRing", &kSkipEvtIfNoRing);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRingFindSim", &pRingFindSim);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pTrackCat", &m_pTrackCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRichCalSim", &pRichCalSim);
      HRichAnalysis::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichAnalysisSim(void *p) {
      return  p ? new(p) ::HRichAnalysisSim : new ::HRichAnalysisSim;
   }
   static void *newArray_HRichAnalysisSim(Long_t nElements, void *p) {
      return p ? new(p) ::HRichAnalysisSim[nElements] : new ::HRichAnalysisSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichAnalysisSim(void *p) {
      delete ((::HRichAnalysisSim*)p);
   }
   static void deleteArray_HRichAnalysisSim(void *p) {
      delete [] ((::HRichAnalysisSim*)p);
   }
   static void destruct_HRichAnalysisSim(void *p) {
      typedef ::HRichAnalysisSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichAnalysisSim(TBuffer &buf, void *obj) {
      ((::HRichAnalysisSim*)obj)->::HRichAnalysisSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichAnalysisSim

//______________________________________________________________________________
void HRichCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> fCharge;
      R__b >> fSector;
      R__b >> fRow;
      R__b >> fCol;
      R__b >> fEventNr;
      R__b >> isCleanedSingle;
      R__b >> isCleanedHigh;
      R__b >> isCleanedSector;
      R__b.CheckByteCount(R__s, R__c, HRichCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichCal::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << fCharge;
      R__b << fSector;
      R__b << fRow;
      R__b << fCol;
      R__b << fEventNr;
      R__b << isCleanedSingle;
      R__b << isCleanedHigh;
      R__b << isCleanedSector;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichCal.
      TClass *R__cl = ::HRichCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCol", &fCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNr", &fEventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCleanedSingle", &isCleanedSingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCleanedHigh", &isCleanedHigh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCleanedSector", &isCleanedSector);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichCal(void *p) {
      return  p ? new(p) ::HRichCal : new ::HRichCal;
   }
   static void *newArray_HRichCal(Long_t nElements, void *p) {
      return p ? new(p) ::HRichCal[nElements] : new ::HRichCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichCal(void *p) {
      delete ((::HRichCal*)p);
   }
   static void deleteArray_HRichCal(void *p) {
      delete [] ((::HRichCal*)p);
   }
   static void destruct_HRichCal(void *p) {
      typedef ::HRichCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichCal(TBuffer &buf, void *obj) {
      ((::HRichCal*)obj)->::HRichCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichCal

//______________________________________________________________________________
void HRichCalPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichCalPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      fParamsTable.Streamer(R__b);
      fLoc.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRichCalPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichCalPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      fParamsTable.Streamer(R__b);
      fLoc.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichCalPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichCalPar.
      TClass *R__cl = ::HRichCalPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParamsTable", &fParamsTable);
      R__insp.InspectMember(fParamsTable, "fParamsTable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichCalPar(void *p) {
      return  p ? new(p) ::HRichCalPar : new ::HRichCalPar;
   }
   static void *newArray_HRichCalPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRichCalPar[nElements] : new ::HRichCalPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichCalPar(void *p) {
      delete ((::HRichCalPar*)p);
   }
   static void deleteArray_HRichCalPar(void *p) {
      delete [] ((::HRichCalPar*)p);
   }
   static void destruct_HRichCalPar(void *p) {
      typedef ::HRichCalPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichCalPar(TBuffer &buf, void *obj) {
      ((::HRichCalPar*)obj)->::HRichCalPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichCalPar

//______________________________________________________________________________
void HRichCalParCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichCalParCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> fSector;
      R__b >> fRow;
      R__b >> fCol;
      R__b >> fOffset;
      R__b >> fSigma;
      R__b.CheckByteCount(R__s, R__c, HRichCalParCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichCalParCell::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << fSector;
      R__b << fRow;
      R__b << fCol;
      R__b << fOffset;
      R__b << fSigma;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichCalParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichCalParCell.
      TClass *R__cl = ::HRichCalParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRow", &fRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCol", &fCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffset", &fOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigma", &fSigma);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichCalParCell(void *p) {
      return  p ? new(p) ::HRichCalParCell : new ::HRichCalParCell;
   }
   static void *newArray_HRichCalParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HRichCalParCell[nElements] : new ::HRichCalParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichCalParCell(void *p) {
      delete ((::HRichCalParCell*)p);
   }
   static void deleteArray_HRichCalParCell(void *p) {
      delete [] ((::HRichCalParCell*)p);
   }
   static void destruct_HRichCalParCell(void *p) {
      typedef ::HRichCalParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichCalParCell(TBuffer &buf, void *obj) {
      ((::HRichCalParCell*)obj)->::HRichCalParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichCalParCell

//______________________________________________________________________________
void HRichCalSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichCalSim.
      TClass *R__cl = ::HRichCalSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackIds[10]", fTrackIds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofTracks", &fNofTracks);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCt", &fCt);
      HRichCal::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichCalSim(void *p) {
      return  p ? new(p) ::HRichCalSim : new ::HRichCalSim;
   }
   static void *newArray_HRichCalSim(Long_t nElements, void *p) {
      return p ? new(p) ::HRichCalSim[nElements] : new ::HRichCalSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichCalSim(void *p) {
      delete ((::HRichCalSim*)p);
   }
   static void deleteArray_HRichCalSim(void *p) {
      delete [] ((::HRichCalSim*)p);
   }
   static void destruct_HRichCalSim(void *p) {
      typedef ::HRichCalSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichCalSim(TBuffer &buf, void *obj) {
      ((::HRichCalSim*)obj)->::HRichCalSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichCalSim

//______________________________________________________________________________
void HRichContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HRichContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichContFact.
      TClass *R__cl = ::HRichContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichContFact(void *p) {
      return  p ? new(p) ::HRichContFact : new ::HRichContFact;
   }
   static void *newArray_HRichContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HRichContFact[nElements] : new ::HRichContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichContFact(void *p) {
      delete ((::HRichContFact*)p);
   }
   static void deleteArray_HRichContFact(void *p) {
      delete [] ((::HRichContFact*)p);
   }
   static void destruct_HRichContFact(void *p) {
      typedef ::HRichContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichContFact(TBuffer &buf, void *obj) {
      ((::HRichContFact*)obj)->::HRichContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichContFact

//______________________________________________________________________________
void HRichDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetector::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRichDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichDetector::IsA(), kTRUE);
      HDetector::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichDetector.
      TClass *R__cl = ::HRichDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichDetector(void *p) {
      return  p ? new(p) ::HRichDetector : new ::HRichDetector;
   }
   static void *newArray_HRichDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HRichDetector[nElements] : new ::HRichDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichDetector(void *p) {
      delete ((::HRichDetector*)p);
   }
   static void deleteArray_HRichDetector(void *p) {
      delete [] ((::HRichDetector*)p);
   }
   static void destruct_HRichDetector(void *p) {
      typedef ::HRichDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichDetector(TBuffer &buf, void *obj) {
      ((::HRichDetector*)obj)->::HRichDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichDetector

//______________________________________________________________________________
void HRichDigitisationPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichDigitisationPar.
      TClass *R__cl = ::HRichDigitisationPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElectronsNr", &fElectronsNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaValue", &fSigmaValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIncreaseNoise", &fIncreaseNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargePerChannel", &fChargePerChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQupper", &fQupper);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameter1", &fParameter1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParameter2", &fParameter2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor1", &fFactor1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor2", &fFactor2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor1Sig", &fFactor1Sig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor2Sig", &fFactor2Sig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExpSlope", &fExpSlope);
      R__insp.InspectMember(fExpSlope, "fExpSlope.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBinsNr", &fBinsNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhotonLen", &fPhotonLen);
      R__insp.InspectMember(fPhotonLen, "fPhotonLen.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhotonEff", &fPhotonEff);
      R__insp.InspectMember(fPhotonEff, "fPhotonEff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrSec[6]", corrSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeScaling", &fChargeScaling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filename[40]", filename);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichDigitisationPar(void *p) {
      return  p ? new(p) ::HRichDigitisationPar : new ::HRichDigitisationPar;
   }
   static void *newArray_HRichDigitisationPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRichDigitisationPar[nElements] : new ::HRichDigitisationPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichDigitisationPar(void *p) {
      delete ((::HRichDigitisationPar*)p);
   }
   static void deleteArray_HRichDigitisationPar(void *p) {
      delete [] ((::HRichDigitisationPar*)p);
   }
   static void destruct_HRichDigitisationPar(void *p) {
      typedef ::HRichDigitisationPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichDigitisationPar(TBuffer &buf, void *obj) {
      ((::HRichDigitisationPar*)obj)->::HRichDigitisationPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichDigitisationPar

//______________________________________________________________________________
void HRichDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichDigitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRichDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichDigitizer.
      TClass *R__cl = ::HRichDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catRichPhoton", &catRichPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catRichDirect", &catRichDirect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catTrack", &catTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catCal", &catCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*catKine", &catKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRichPhoton", &iterRichPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRichDirect", &iterRichDirect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRichTrack", &iterRichTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterRichCal", &iterRichCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDigitisationPar", &pDigitisationPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeometryPar", &pGeometryPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalPar", &pCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ga", &ga);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeOnWireList", &fChargeOnWireList);
      R__insp.InspectMember(fChargeOnWireList, "fChargeOnWireList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackNumberList", &fTrackNumberList);
      R__insp.InspectMember(fTrackNumberList, "fTrackNumberList.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc1", &loc1);
      R__insp.InspectMember(loc1, "loc1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "locat", &locat);
      R__insp.InspectMember(locat, "locat.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isActiveNoise", &isActiveNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isOEM", &isOEM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "countFBphot", &countFBphot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "countNoisePad", &countNoisePad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWiresNr", &fWiresNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWiresDist", &fWiresDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "distWirePads", &distWirePads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYShift", &fYShift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "binsQE", &binsQE);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargePerChannel", &fChargePerChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeScaling", &fChargeScaling);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElectronsNr", &fElectronsNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor1", &fFactor1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor1Sig", &fFactor1Sig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor2", &fFactor2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFactor2Sig", &fFactor2Sig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIncreaseNoise", &fIncreaseNoise);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParam1", &fParam1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fParam2", &fParam2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fQupper", &fQupper);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaValue", &fSigmaValue);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSlopeCorrection", &fSlopeCorrection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fExpSlope", &fExpSlope);
      R__insp.InspectMember(fExpSlope, "fExpSlope.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "correction[6]", correction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photeffic", &photeffic);
      R__insp.InspectMember(photeffic, "photeffic.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "photlength", &photlength);
      R__insp.InspectMember(photlength, "photlength.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noiseProb", &noiseProb);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDigitPadMatrix[9]", fDigitPadMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDeltaElectrons", &useDeltaElectrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "useDeltaMomSelection", &useDeltaMomSelection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ionID", &ionID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momMaxDeltaElecCut", &momMaxDeltaElecCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "momMinDeltaCut[6]", momMinDeltaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "probDeltaAccepted", &probDeltaAccepted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mDeltaTrackProb", (void*)&mDeltaTrackProb);
      R__insp.InspectMember("map<HGeantKine*,Float_t>", (void*)&mDeltaTrackProb, "mDeltaTrackProb.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "itDelta", (void*)&itDelta);
      R__insp.InspectMember("map<HGeantKine*,float,less<HGeantKine*>,allocator<pair<HGeantKine* const,float> > >::iterator", (void*)&itDelta, "itDelta.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mapTracks", (void*)&mapTracks);
      R__insp.InspectMember("map<Int_t,vector<HRichTrack*> >", (void*)&mapTracks, "mapTracks.", false);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichDigitizer(void *p) {
      return  p ? new(p) ::HRichDigitizer : new ::HRichDigitizer;
   }
   static void *newArray_HRichDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HRichDigitizer[nElements] : new ::HRichDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichDigitizer(void *p) {
      delete ((::HRichDigitizer*)p);
   }
   static void deleteArray_HRichDigitizer(void *p) {
      delete [] ((::HRichDigitizer*)p);
   }
   static void destruct_HRichDigitizer(void *p) {
      typedef ::HRichDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichDigitizer(TBuffer &buf, void *obj) {
      ((::HRichDigitizer*)obj)->::HRichDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichDigitizer

//______________________________________________________________________________
void HRichDirClus::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichDirClus.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fSector;
      R__b >> fNrPads;
      R__b >> fDimX;
      R__b >> fDimY;
      R__b >> fTotalCharge;
      R__b >> fPhiDiff;
      R__b >> fTheta;
      R__b >> fMeanX;
      R__b >> fMeanY;
      R__b.CheckByteCount(R__s, R__c, HRichDirClus::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichDirClus::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fSector;
      R__b << fNrPads;
      R__b << fDimX;
      R__b << fDimY;
      R__b << fTotalCharge;
      R__b << fPhiDiff;
      R__b << fTheta;
      R__b << fMeanX;
      R__b << fMeanY;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichDirClus::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichDirClus.
      TClass *R__cl = ::HRichDirClus::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrPads", &fNrPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDimX", &fDimX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDimY", &fDimY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTotalCharge", &fTotalCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiDiff", &fPhiDiff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanX", &fMeanX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanY", &fMeanY);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichDirClus(void *p) {
      return  p ? new(p) ::HRichDirClus : new ::HRichDirClus;
   }
   static void *newArray_HRichDirClus(Long_t nElements, void *p) {
      return p ? new(p) ::HRichDirClus[nElements] : new ::HRichDirClus[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichDirClus(void *p) {
      delete ((::HRichDirClus*)p);
   }
   static void deleteArray_HRichDirClus(void *p) {
      delete [] ((::HRichDirClus*)p);
   }
   static void destruct_HRichDirClus(void *p) {
      typedef ::HRichDirClus current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichDirClus(TBuffer &buf, void *obj) {
      ((::HRichDirClus*)obj)->::HRichDirClus::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichDirClus

//______________________________________________________________________________
void HRichFrame::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichFrame.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fCornerNr;
      fFrameArr.Streamer(R__b);
      fFrameCorners.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRichFrame::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichFrame::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fCornerNr;
      fFrameArr.Streamer(R__b);
      fFrameCorners.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichFrame::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichFrame.
      TClass *R__cl = ::HRichFrame::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCornerNr", &fCornerNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrameArr", &fFrameArr);
      R__insp.InspectMember(fFrameArr, "fFrameArr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrameCorners", &fFrameCorners);
      R__insp.InspectMember(fFrameCorners, "fFrameCorners.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichFrame(void *p) {
      return  p ? new(p) ::HRichFrame : new ::HRichFrame;
   }
   static void *newArray_HRichFrame(Long_t nElements, void *p) {
      return p ? new(p) ::HRichFrame[nElements] : new ::HRichFrame[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichFrame(void *p) {
      delete ((::HRichFrame*)p);
   }
   static void deleteArray_HRichFrame(void *p) {
      delete [] ((::HRichFrame*)p);
   }
   static void destruct_HRichFrame(void *p) {
      typedef ::HRichFrame current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichFrame(TBuffer &buf, void *obj) {
      ((::HRichFrame*)obj)->::HRichFrame::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichFrame

//______________________________________________________________________________
void HRichFrameCorner::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichFrameCorner.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fXcor;
      R__b >> fYcor;
      R__b >> fCornerNr;
      R__b >> fFlagArea;
      R__b.CheckByteCount(R__s, R__c, HRichFrameCorner::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichFrameCorner::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fXcor;
      R__b << fYcor;
      R__b << fCornerNr;
      R__b << fFlagArea;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichFrameCorner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichFrameCorner.
      TClass *R__cl = ::HRichFrameCorner::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXcor", &fXcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYcor", &fYcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCornerNr", &fCornerNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlagArea", &fFlagArea);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichFrameCorner(void *p) {
      return  p ? new(p) ::HRichFrameCorner : new ::HRichFrameCorner;
   }
   static void *newArray_HRichFrameCorner(Long_t nElements, void *p) {
      return p ? new(p) ::HRichFrameCorner[nElements] : new ::HRichFrameCorner[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichFrameCorner(void *p) {
      delete ((::HRichFrameCorner*)p);
   }
   static void deleteArray_HRichFrameCorner(void *p) {
      delete [] ((::HRichFrameCorner*)p);
   }
   static void destruct_HRichFrameCorner(void *p) {
      typedef ::HRichFrameCorner current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichFrameCorner(TBuffer &buf, void *obj) {
      ((::HRichFrameCorner*)obj)->::HRichFrameCorner::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichFrameCorner

//______________________________________________________________________________
void HRichFrameTab::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichFrameTab.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fNrFrames;
      R__b >> fpFrame;
      R__b.CheckByteCount(R__s, R__c, HRichFrameTab::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichFrameTab::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fNrFrames;
      R__b << fpFrame;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichFrameTab::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichFrameTab.
      TClass *R__cl = ::HRichFrameTab::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrFrames", &fNrFrames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fpFrame", &fpFrame);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichFrameTab(void *p) {
      return  p ? new(p) ::HRichFrameTab : new ::HRichFrameTab;
   }
   static void *newArray_HRichFrameTab(Long_t nElements, void *p) {
      return p ? new(p) ::HRichFrameTab[nElements] : new ::HRichFrameTab[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichFrameTab(void *p) {
      delete ((::HRichFrameTab*)p);
   }
   static void deleteArray_HRichFrameTab(void *p) {
      delete [] ((::HRichFrameTab*)p);
   }
   static void destruct_HRichFrameTab(void *p) {
      typedef ::HRichFrameTab current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichFrameTab(TBuffer &buf, void *obj) {
      ((::HRichFrameTab*)obj)->::HRichFrameTab::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichFrameTab

//______________________________________________________________________________
void HRichGeometryPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichGeometryPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fSectorsNr;
      fSectorActive.Streamer(R__b);
      R__b >> fColumns;
      R__b >> fRows;
      R__b >> fDistanceWiresPads;
      fSectorPhi.Streamer(R__b);
      R__b >> fSectorShift;
      fFrame.Streamer(R__b);
      fPads.Streamer(R__b);
      fWires.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRichGeometryPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichGeometryPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fSectorsNr;
      fSectorActive.Streamer(R__b);
      R__b << fColumns;
      R__b << fRows;
      R__b << fDistanceWiresPads;
      fSectorPhi.Streamer(R__b);
      R__b << fSectorShift;
      fFrame.Streamer(R__b);
      fPads.Streamer(R__b);
      fWires.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichGeometryPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichGeometryPar.
      TClass *R__cl = ::HRichGeometryPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSectorsNr", &fSectorsNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSectorActive", &fSectorActive);
      R__insp.InspectMember(fSectorActive, "fSectorActive.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fColumns", &fColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRows", &fRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistanceWiresPads", &fDistanceWiresPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSectorPhi", &fSectorPhi);
      R__insp.InspectMember(fSectorPhi, "fSectorPhi.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSectorShift", &fSectorShift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFrame", &fFrame);
      R__insp.InspectMember(fFrame, "fFrame.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPads", &fPads);
      R__insp.InspectMember(fPads, "fPads.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWires", &fWires);
      R__insp.InspectMember(fWires, "fWires.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichGeometryPar(void *p) {
      return  p ? new(p) ::HRichGeometryPar : new ::HRichGeometryPar;
   }
   static void *newArray_HRichGeometryPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRichGeometryPar[nElements] : new ::HRichGeometryPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichGeometryPar(void *p) {
      delete ((::HRichGeometryPar*)p);
   }
   static void deleteArray_HRichGeometryPar(void *p) {
      delete [] ((::HRichGeometryPar*)p);
   }
   static void destruct_HRichGeometryPar(void *p) {
      typedef ::HRichGeometryPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichGeometryPar(TBuffer &buf, void *obj) {
      ((::HRichGeometryPar*)obj)->::HRichGeometryPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichGeometryPar

//______________________________________________________________________________
void HRichHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichHit.
      TClass *R__cl = ::HRichHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRich700CircleCenterX", &fRich700CircleCenterX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRich700CircleCenterY", &fRich700CircleCenterY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRich700CircleRadius", &fRich700CircleRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRich700CircleChi2", &fRich700CircleChi2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRich700NofRichCals", &fRich700NofRichCals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingX", &iRingX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingY", &iRingY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingQuality", &iRingQuality);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingPatMat", &iRingPatMat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingHouTra", &iRingHouTra);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingPadNr", &iRingPadNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingAmplitude", &iRingAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingLocalMax4", &iRingLocalMax4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingLocalMax8", &iRingLocalMax8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingClusterNr", &iRingClusterNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingClusterSize", &fRingClusterSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingClusterLMax4", &fRingClusterLMax4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingClusterLMax8", &fRingClusterLMax8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingAlgorithmIndex", &iRingAlgorithmIndex);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingImage[256]", iRingImage);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingFreeParam", &iRingFreeParam);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingMaxLabel", &iRingMaxLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxClusterSize", &fMaxClusterSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxClusterSum", &fMaxClusterSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxThrClusterSize", &fMaxThrClusterSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabX", &fLabX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabY", &fLabY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabZ", &fLabZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadX", &fPadX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadY", &fPadY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanTheta", &fMeanTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMeanPhi", &fMeanPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSector", &nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lEventNr", &lEventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAddress", &fAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestDens", &fTestDens);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestBord", &fTestBord);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestDyna", &fTestDyna);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestRati", &fTestRati);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestAsym", &fTestAsym);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTestCharge", &fTestCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRejFake", &fRejFake);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTests", &fTests);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingCentroid", &fRingCentroid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRingRadius", &fRingRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBorderFactor", &fBorderFactor);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichHit(void *p) {
      return  p ? new(p) ::HRichHit : new ::HRichHit;
   }
   static void *newArray_HRichHit(Long_t nElements, void *p) {
      return p ? new(p) ::HRichHit[nElements] : new ::HRichHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichHit(void *p) {
      delete ((::HRichHit*)p);
   }
   static void deleteArray_HRichHit(void *p) {
      delete [] ((::HRichHit*)p);
   }
   static void destruct_HRichHit(void *p) {
      typedef ::HRichHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichHit(TBuffer &buf, void *obj) {
      ((::HRichHit*)obj)->::HRichHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichHit

//______________________________________________________________________________
void HRichHitCandidate::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichHitCandidate.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fX;
      R__b >> fY;
      R__b >> fA;
      R__b >> fPadLabel;
      R__b >> fMaxLabel;
      R__b >> xMean;
      R__b >> yMean;
      R__b >> nEqualNeighbors;
      R__b.CheckByteCount(R__s, R__c, HRichHitCandidate::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichHitCandidate::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fX;
      R__b << fY;
      R__b << fA;
      R__b << fPadLabel;
      R__b << fMaxLabel;
      R__b << xMean;
      R__b << yMean;
      R__b << nEqualNeighbors;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichHitCandidate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichHitCandidate.
      TClass *R__cl = ::HRichHitCandidate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fA", &fA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadLabel", &fPadLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxLabel", &fMaxLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMean", &xMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMean", &yMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEqualNeighbors", &nEqualNeighbors);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichHitCandidate(void *p) {
      return  p ? new(p) ::HRichHitCandidate : new ::HRichHitCandidate;
   }
   static void *newArray_HRichHitCandidate(Long_t nElements, void *p) {
      return p ? new(p) ::HRichHitCandidate[nElements] : new ::HRichHitCandidate[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichHitCandidate(void *p) {
      delete ((::HRichHitCandidate*)p);
   }
   static void deleteArray_HRichHitCandidate(void *p) {
      delete [] ((::HRichHitCandidate*)p);
   }
   static void destruct_HRichHitCandidate(void *p) {
      typedef ::HRichHitCandidate current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichHitCandidate(TBuffer &buf, void *obj) {
      ((::HRichHitCandidate*)obj)->::HRichHitCandidate::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichHitCandidate

//______________________________________________________________________________
void HRichHitHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichHitHeader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> iEventNr;
      R__b >> iPadFiredNr;
      R__b >> iPadCleanedNr;
      R__b >> iClusterCleanedNr;
      R__b >> iRingNr;
      R__b >> iExecutedAnalysis;
      R__b >> iFakePad;
      R__b >> iFakeLocalMax4;
      R__b >> iFakeLocalMax8;
      R__b >> m_nSector;
      R__b >> detCurrentSec;
      R__b.CheckByteCount(R__s, R__c, HRichHitHeader::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichHitHeader::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << iEventNr;
      R__b << iPadFiredNr;
      R__b << iPadCleanedNr;
      R__b << iClusterCleanedNr;
      R__b << iRingNr;
      R__b << iExecutedAnalysis;
      R__b << iFakePad;
      R__b << iFakeLocalMax4;
      R__b << iFakeLocalMax8;
      R__b << m_nSector;
      R__b << detCurrentSec;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichHitHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichHitHeader.
      TClass *R__cl = ::HRichHitHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iEventNr", &iEventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadFiredNr", &iPadFiredNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadCleanedNr", &iPadCleanedNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iClusterCleanedNr", &iClusterCleanedNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iClustersCleaned", &iClustersCleaned);
      R__insp.InspectMember(iClustersCleaned, "iClustersCleaned.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingNr", &iRingNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iExecutedAnalysis", &iExecutedAnalysis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFakePad", &iFakePad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFakeLocalMax4", &iFakeLocalMax4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFakeLocalMax8", &iFakeLocalMax8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSector", &m_nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "detCurrentSec", &detCurrentSec);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichHitHeader(void *p) {
      return  p ? new(p) ::HRichHitHeader : new ::HRichHitHeader;
   }
   static void *newArray_HRichHitHeader(Long_t nElements, void *p) {
      return p ? new(p) ::HRichHitHeader[nElements] : new ::HRichHitHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichHitHeader(void *p) {
      delete ((::HRichHitHeader*)p);
   }
   static void deleteArray_HRichHitHeader(void *p) {
      delete [] ((::HRichHitHeader*)p);
   }
   static void destruct_HRichHitHeader(void *p) {
      typedef ::HRichHitHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichHitHeader(TBuffer &buf, void *obj) {
      ((::HRichHitHeader*)obj)->::HRichHitHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichHitHeader

//______________________________________________________________________________
void HRichHitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichHitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HRichHit::Streamer(R__b);
      R__b >> track1;
      R__b >> track2;
      R__b >> track3;
      R__b >> weigTrack1;
      R__b >> weigTrack2;
      R__b >> weigTrack3;
      R__b >> flag1;
      R__b >> flag2;
      R__b >> flag3;
      R__b.CheckByteCount(R__s, R__c, HRichHitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichHitSim::IsA(), kTRUE);
      HRichHit::Streamer(R__b);
      R__b << track1;
      R__b << track2;
      R__b << track3;
      R__b << weigTrack1;
      R__b << weigTrack2;
      R__b << weigTrack3;
      R__b << flag1;
      R__b << flag2;
      R__b << flag3;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichHitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichHitSim.
      TClass *R__cl = ::HRichHitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingPadNTrack1[256]", iRingPadNTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingPadNTrack2[256]", iRingPadNTrack2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingTrack[256]", iRingTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingFlag[256]", iRingFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track1", &track1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track2", &track2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "track3", &track3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weigTrack1", &weigTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weigTrack2", &weigTrack2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weigTrack3", &weigTrack3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag1", &flag1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag2", &flag2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "flag3", &flag3);
      HRichHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichHitSim(void *p) {
      return  p ? new(p) ::HRichHitSim : new ::HRichHitSim;
   }
   static void *newArray_HRichHitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HRichHitSim[nElements] : new ::HRichHitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichHitSim(void *p) {
      delete ((::HRichHitSim*)p);
   }
   static void deleteArray_HRichHitSim(void *p) {
      delete [] ((::HRichHitSim*)p);
   }
   static void destruct_HRichHitSim(void *p) {
      typedef ::HRichHitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichHitSim(TBuffer &buf, void *obj) {
      ((::HRichHitSim*)obj)->::HRichHitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichHitSim

//______________________________________________________________________________
void HRichLabel::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichLabel.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> iLeftX;
      R__b >> iRightX;
      R__b >> iLowerY;
      R__b >> iUpperY;
      R__b >> iSignature;
      R__b >> iFiredPadsNr;
      R__b >> iLabeledPadsNr;
      R__b.CheckByteCount(R__s, R__c, HRichLabel::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichLabel::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << iLeftX;
      R__b << iRightX;
      R__b << iLowerY;
      R__b << iUpperY;
      R__b << iSignature;
      R__b << iFiredPadsNr;
      R__b << iLabeledPadsNr;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichLabel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichLabel.
      TClass *R__cl = ::HRichLabel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLeftX", &iLeftX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRightX", &iRightX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLowerY", &iLowerY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iUpperY", &iUpperY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iSignature", &iSignature);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iFiredPadsNr", &iFiredPadsNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLabeledPadsNr", &iLabeledPadsNr);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichLabel(void *p) {
      return  p ? new(p) ::HRichLabel : new ::HRichLabel;
   }
   static void *newArray_HRichLabel(Long_t nElements, void *p) {
      return p ? new(p) ::HRichLabel[nElements] : new ::HRichLabel[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichLabel(void *p) {
      delete ((::HRichLabel*)p);
   }
   static void deleteArray_HRichLabel(void *p) {
      delete [] ((::HRichLabel*)p);
   }
   static void destruct_HRichLabel(void *p) {
      typedef ::HRichLabel current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichLabel(TBuffer &buf, void *obj) {
      ((::HRichLabel*)obj)->::HRichLabel::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichLabel

//______________________________________________________________________________
void HRichMappingPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichMappingPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b.ReadStaticArray((int*)fAddrArrHW);
      R__b.ReadStaticArray((int*)fAddrArrSW);
      R__b.CheckByteCount(R__s, R__c, HRichMappingPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichMappingPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b.WriteArray(fAddrArrHW, 16384);
      R__b.WriteArray(fAddrArrSW, 9696);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichMappingPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichMappingPar.
      TClass *R__cl = ::HRichMappingPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAddrArrHW[16384]", fAddrArrHW);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAddrArrSW[9696]", fAddrArrSW);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichMappingPar(void *p) {
      return  p ? new(p) ::HRichMappingPar : new ::HRichMappingPar;
   }
   static void *newArray_HRichMappingPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRichMappingPar[nElements] : new ::HRichMappingPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichMappingPar(void *p) {
      delete ((::HRichMappingPar*)p);
   }
   static void deleteArray_HRichMappingPar(void *p) {
      delete [] ((::HRichMappingPar*)p);
   }
   static void destruct_HRichMappingPar(void *p) {
      typedef ::HRichMappingPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichMappingPar(TBuffer &buf, void *obj) {
      ((::HRichMappingPar*)obj)->::HRichMappingPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichMappingPar

//______________________________________________________________________________
void HRichPad::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichPad.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fCornersNr;
      fPadCornersArray.Streamer(R__b);
      R__b >> fX;
      R__b >> fY;
      R__b >> fPadX;
      R__b >> fPadY;
      R__b >> fPadNr;
      R__b >> fPadFlag;
      R__b >> fAmplitFraction;
      R__b.ReadStaticArray((float*)fXlab);
      R__b.ReadStaticArray((float*)fYlab);
      R__b.ReadStaticArray((float*)fZlab);
      R__b >> fTheta;
      R__b.ReadStaticArray((float*)fPhi);
      R__b >> fXmin;
      R__b >> fYmin;
      R__b >> fXmax;
      R__b >> fYmax;
      R__b >> fPadActive;
      R__b.CheckByteCount(R__s, R__c, HRichPad::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichPad::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fCornersNr;
      fPadCornersArray.Streamer(R__b);
      R__b << fX;
      R__b << fY;
      R__b << fPadX;
      R__b << fPadY;
      R__b << fPadNr;
      R__b << fPadFlag;
      R__b << fAmplitFraction;
      R__b.WriteArray(fXlab, 6);
      R__b.WriteArray(fYlab, 6);
      R__b.WriteArray(fZlab, 6);
      R__b << fTheta;
      R__b.WriteArray(fPhi, 6);
      R__b << fXmin;
      R__b << fYmin;
      R__b << fXmax;
      R__b << fYmax;
      R__b << fPadActive;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichPad::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPad.
      TClass *R__cl = ::HRichPad::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCornersNr", &fCornersNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadCornersArray", &fPadCornersArray);
      R__insp.InspectMember(fPadCornersArray, "fPadCornersArray.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX", &fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY", &fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadX", &fPadX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadY", &fPadY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadNr", &fPadNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadFlag", &fPadFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplitFraction", &fAmplitFraction);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXlab[6]", fXlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYlab[6]", fYlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZlab[6]", fZlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi[6]", fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmin", &fXmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmin", &fYmin);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXmax", &fXmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYmax", &fYmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadActive", &fPadActive);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPad(void *p) {
      return  p ? new(p) ::HRichPad : new ::HRichPad;
   }
   static void *newArray_HRichPad(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPad[nElements] : new ::HRichPad[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPad(void *p) {
      delete ((::HRichPad*)p);
   }
   static void deleteArray_HRichPad(void *p) {
      delete [] ((::HRichPad*)p);
   }
   static void destruct_HRichPad(void *p) {
      typedef ::HRichPad current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPad(TBuffer &buf, void *obj) {
      ((::HRichPad*)obj)->::HRichPad::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPad

//______________________________________________________________________________
void HRichPadClean::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichPadClean.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> iCount;
      iTempCluster.Streamer(R__b);
      R__b >> minX;
      R__b >> maxX;
      R__b >> minY;
      R__b >> maxY;
      R__b >> deltaPhi;
      R__b >> chargeTot;
      R__b >> padNr;
      R__b.CheckByteCount(R__s, R__c, HRichPadClean::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichPadClean::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << iCount;
      iTempCluster.Streamer(R__b);
      R__b << minX;
      R__b << maxX;
      R__b << minY;
      R__b << maxY;
      R__b << deltaPhi;
      R__b << chargeTot;
      R__b << padNr;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichPadClean::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPadClean.
      TClass *R__cl = ::HRichPadClean::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iCount", &iCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iTempCluster", &iTempCluster);
      R__insp.InspectMember(iTempCluster, "iTempCluster.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minX", &minX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxX", &maxX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minY", &minY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxY", &maxY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "deltaPhi", &deltaPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeTot", &chargeTot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "padNr", &padNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRichClusCat", &fRichClusCat);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPadClean(void *p) {
      return  p ? new(p) ::HRichPadClean : new ::HRichPadClean;
   }
   static void *newArray_HRichPadClean(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPadClean[nElements] : new ::HRichPadClean[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPadClean(void *p) {
      delete ((::HRichPadClean*)p);
   }
   static void deleteArray_HRichPadClean(void *p) {
      delete [] ((::HRichPadClean*)p);
   }
   static void destruct_HRichPadClean(void *p) {
      typedef ::HRichPadClean current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPadClean(TBuffer &buf, void *obj) {
      ((::HRichPadClean*)obj)->::HRichPadClean::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPadClean

//______________________________________________________________________________
void HRichPadCorner::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichPadCorner.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fXcor;
      R__b >> fYcor;
      R__b >> fCornerNr;
      R__b >> fAreaFlag;
      R__b.CheckByteCount(R__s, R__c, HRichPadCorner::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichPadCorner::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fXcor;
      R__b << fYcor;
      R__b << fCornerNr;
      R__b << fAreaFlag;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichPadCorner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPadCorner.
      TClass *R__cl = ::HRichPadCorner::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXcor", &fXcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYcor", &fYcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCornerNr", &fCornerNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAreaFlag", &fAreaFlag);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPadCorner(void *p) {
      return  p ? new(p) ::HRichPadCorner : new ::HRichPadCorner;
   }
   static void *newArray_HRichPadCorner(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPadCorner[nElements] : new ::HRichPadCorner[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPadCorner(void *p) {
      delete ((::HRichPadCorner*)p);
   }
   static void deleteArray_HRichPadCorner(void *p) {
      delete [] ((::HRichPadCorner*)p);
   }
   static void destruct_HRichPadCorner(void *p) {
      typedef ::HRichPadCorner current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPadCorner(TBuffer &buf, void *obj) {
      ((::HRichPadCorner*)obj)->::HRichPadCorner::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPadCorner

//______________________________________________________________________________
void HRichPadFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichPadFilter.

   HFilter::Streamer(R__b);
}

//______________________________________________________________________________
void HRichPadFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPadFilter.
      TClass *R__cl = ::HRichPadFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      HFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPadFilter(void *p) {
      return  p ? new(p) ::HRichPadFilter : new ::HRichPadFilter;
   }
   static void *newArray_HRichPadFilter(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPadFilter[nElements] : new ::HRichPadFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPadFilter(void *p) {
      delete ((::HRichPadFilter*)p);
   }
   static void deleteArray_HRichPadFilter(void *p) {
      delete [] ((::HRichPadFilter*)p);
   }
   static void destruct_HRichPadFilter(void *p) {
      typedef ::HRichPadFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPadFilter(TBuffer &buf, void *obj) {
      ((::HRichPadFilter*)obj)->::HRichPadFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPadFilter

//______________________________________________________________________________
void HRichPadGraph::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPadGraph.
      TClass *R__cl = ::HRichPadGraph::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iNodeListLen", &iNodeListLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iNodeNr", &iNodeNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLinkNodeNr", &iLinkNodeNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLabel", &iLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pNodeList", &pNodeList);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPadGraph(void *p) {
      return  p ? new(p) ::HRichPadGraph : new ::HRichPadGraph;
   }
   static void *newArray_HRichPadGraph(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPadGraph[nElements] : new ::HRichPadGraph[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPadGraph(void *p) {
      delete ((::HRichPadGraph*)p);
   }
   static void deleteArray_HRichPadGraph(void *p) {
      delete [] ((::HRichPadGraph*)p);
   }
   static void destruct_HRichPadGraph(void *p) {
      typedef ::HRichPadGraph current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPadGraph(TBuffer &buf, void *obj) {
      ((::HRichPadGraph*)obj)->::HRichPadGraph::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPadGraph

//______________________________________________________________________________
void HRichPadLabel::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichPadLabel.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> iGraphArray;
      iLabelGraphConnection.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRichPadLabel::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichPadLabel::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << iGraphArray;
      iLabelGraphConnection.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichPadLabel::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPadLabel.
      TClass *R__cl = ::HRichPadLabel::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iGraphArray", &iGraphArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iLabelGraphConnection", &iLabelGraphConnection);
      R__insp.InspectMember(iLabelGraphConnection, "iLabelGraphConnection.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPadLabel(void *p) {
      return  p ? new(p) ::HRichPadLabel : new ::HRichPadLabel;
   }
   static void *newArray_HRichPadLabel(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPadLabel[nElements] : new ::HRichPadLabel[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPadLabel(void *p) {
      delete ((::HRichPadLabel*)p);
   }
   static void deleteArray_HRichPadLabel(void *p) {
      delete [] ((::HRichPadLabel*)p);
   }
   static void destruct_HRichPadLabel(void *p) {
      typedef ::HRichPadLabel current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPadLabel(TBuffer &buf, void *obj) {
      ((::HRichPadLabel*)obj)->::HRichPadLabel::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPadLabel

//______________________________________________________________________________
void HRichPadSignal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichPadSignal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fAmplitude;
      R__b >> fLabel;
      R__b >> fLock;
      R__b >> isCleanedSingle;
      R__b >> isCleanedHigh;
      R__b.CheckByteCount(R__s, R__c, HRichPadSignal::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichPadSignal::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fAmplitude;
      R__b << fLabel;
      R__b << fLock;
      R__b << isCleanedSingle;
      R__b << isCleanedHigh;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichPadSignal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPadSignal.
      TClass *R__cl = ::HRichPadSignal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAmplitude", &fAmplitude);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabel", &fLabel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLock", &fLock);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCleanedSingle", &isCleanedSingle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isCleanedHigh", &isCleanedHigh);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPadSignal(void *p) {
      return  p ? new(p) ::HRichPadSignal : new ::HRichPadSignal;
   }
   static void *newArray_HRichPadSignal(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPadSignal[nElements] : new ::HRichPadSignal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPadSignal(void *p) {
      delete ((::HRichPadSignal*)p);
   }
   static void deleteArray_HRichPadSignal(void *p) {
      delete [] ((::HRichPadSignal*)p);
   }
   static void destruct_HRichPadSignal(void *p) {
      typedef ::HRichPadSignal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPadSignal(TBuffer &buf, void *obj) {
      ((::HRichPadSignal*)obj)->::HRichPadSignal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPadSignal

//______________________________________________________________________________
void HRichPadTab::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichPadTab.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fPadsArray->Streamer(R__b);
      R__b >> fActivePadsNr;
      R__b >> fPadsLongestRow;
      R__b >> fMiddlePad;
      R__b >> fPadsLongestRowMiddle;
      fPadParams.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRichPadTab::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichPadTab::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fPadsArray->Streamer(R__b);
      R__b << fActivePadsNr;
      R__b << fPadsLongestRow;
      R__b << fMiddlePad;
      R__b << fPadsLongestRowMiddle;
      fPadParams.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichPadTab::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichPadTab.
      TClass *R__cl = ::HRichPadTab::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPadsArray", &fPadsArray);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fActivePadsNr", &fActivePadsNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadsLongestRow", &fPadsLongestRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMiddlePad", &fMiddlePad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadsLongestRowMiddle", &fPadsLongestRowMiddle);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadParams", &fPadParams);
      R__insp.InspectMember(fPadParams, "fPadParams.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichPadTab(void *p) {
      return  p ? new(p) ::HRichPadTab : new ::HRichPadTab;
   }
   static void *newArray_HRichPadTab(Long_t nElements, void *p) {
      return p ? new(p) ::HRichPadTab[nElements] : new ::HRichPadTab[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichPadTab(void *p) {
      delete ((::HRichPadTab*)p);
   }
   static void deleteArray_HRichPadTab(void *p) {
      delete [] ((::HRichPadTab*)p);
   }
   static void destruct_HRichPadTab(void *p) {
      typedef ::HRichPadTab current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichPadTab(TBuffer &buf, void *obj) {
      ((::HRichPadTab*)obj)->::HRichPadTab::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichPadTab

//______________________________________________________________________________
void HRichParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HRichParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichParAsciiFileIo.
      TClass *R__cl = ::HRichParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRichParAsciiFileIo(void *p) {
      delete ((::HRichParAsciiFileIo*)p);
   }
   static void deleteArray_HRichParAsciiFileIo(void *p) {
      delete [] ((::HRichParAsciiFileIo*)p);
   }
   static void destruct_HRichParAsciiFileIo(void *p) {
      typedef ::HRichParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HRichParAsciiFileIo*)obj)->::HRichParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichParAsciiFileIo

//______________________________________________________________________________
void HRichParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichParRootFileIo.

   HDetParRootFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HRichParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichParRootFileIo.
      TClass *R__cl = ::HRichParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRichParRootFileIo(void *p) {
      delete ((::HRichParRootFileIo*)p);
   }
   static void deleteArray_HRichParRootFileIo(void *p) {
      delete [] ((::HRichParRootFileIo*)p);
   }
   static void destruct_HRichParRootFileIo(void *p) {
      typedef ::HRichParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichParRootFileIo(TBuffer &buf, void *obj) {
      ((::HRichParRootFileIo*)obj)->::HRichParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichParRootFileIo

//______________________________________________________________________________
void HRichRingFind::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichRingFind.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HRichRingFind::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichRingFind.
      TClass *R__cl = ::HRichRingFind::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pAnalysisParams", &pAnalysisParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeometryParams", &pGeometryParams);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxRings", &maxRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iInnerCount", &iInnerCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iInnerPhot4", &iInnerPhot4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iInnerPhot8", &iInnerPhot8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterSize", &fClusterSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterLMax4", &fClusterLMax4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterLMax8", &fClusterLMax8);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingImageSize", &iRingImageSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingTempImage", &iRingTempImage);
      R__insp.InspectMember(iRingTempImage, "iRingTempImage.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xMeanMax", &xMeanMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yMeanMax", &yMeanMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xPadMeanMax", &xPadMeanMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "yPadMeanMax", &yPadMeanMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "thetaMeanMax", &thetaMeanMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phiMeanMax", &phiMeanMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxClusterSize", &fMaxClusterSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxClusterSum", &fMaxClusterSum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxThrClusterSize", &fMaxThrClusterSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iCount", &iCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iHitCount", &iHitCount);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCols", &maxCols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxRows", &maxRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iMatrixSize", &iMatrixSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iMatrixHalfSize", &iMatrixHalfSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ly_from", &ly_from);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ly_to", &ly_to);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lx_from", &lx_from);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lx_to", &lx_to);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_col_ij", &d_col_ij);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_row_ij", &d_row_ij);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_col_jk", &d_col_jk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d_row_jk", &d_row_jk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d2_colrow_jk", &d2_colrow_jk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d2_colrow_ij", &d2_colrow_ij);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadActive", &iPadActive);
      R__insp.InspectMember(iPadActive, "iPadActive.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadPlane", &iPadPlane);
      R__insp.InspectMember(iPadPlane, "iPadPlane.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadPlaneCopy", &iPadPlaneCopy);
      R__insp.InspectMember(iPadPlaneCopy, "iPadPlaneCopy.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadCol", &iPadCol);
      R__insp.InspectMember(iPadCol, "iPadCol.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iPadRow", &iPadRow);
      R__insp.InspectMember(iPadRow, "iPadRow.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "iRingNr", &iRingNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRings", &pRings);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitList1", &fHitList1);
      R__insp.InspectMember(fHitList1, "fHitList1.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitList2", &fHitList2);
      R__insp.InspectMember(fHitList2, "fHitList2.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitCandidate", &fHitCandidate);
      R__insp.InspectMember(fHitCandidate, "fHitCandidate.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichRingFind(void *p) {
      return  p ? new(p) ::HRichRingFind : new ::HRichRingFind;
   }
   static void *newArray_HRichRingFind(Long_t nElements, void *p) {
      return p ? new(p) ::HRichRingFind[nElements] : new ::HRichRingFind[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichRingFind(void *p) {
      delete ((::HRichRingFind*)p);
   }
   static void deleteArray_HRichRingFind(void *p) {
      delete [] ((::HRichRingFind*)p);
   }
   static void destruct_HRichRingFind(void *p) {
      typedef ::HRichRingFind current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichRingFind(TBuffer &buf, void *obj) {
      ((::HRichRingFind*)obj)->::HRichRingFind::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichRingFind

//______________________________________________________________________________
void HRichRingFindSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichRingFindSim.

   HRichRingFind::Streamer(R__b);
}

//______________________________________________________________________________
void HRichRingFindSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichRingFindSim.
      TClass *R__cl = ::HRichRingFindSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRings", &pRings);
      HRichRingFind::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichRingFindSim(void *p) {
      return  p ? new(p) ::HRichRingFindSim : new ::HRichRingFindSim;
   }
   static void *newArray_HRichRingFindSim(Long_t nElements, void *p) {
      return p ? new(p) ::HRichRingFindSim[nElements] : new ::HRichRingFindSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichRingFindSim(void *p) {
      delete ((::HRichRingFindSim*)p);
   }
   static void deleteArray_HRichRingFindSim(void *p) {
      delete [] ((::HRichRingFindSim*)p);
   }
   static void destruct_HRichRingFindSim(void *p) {
      typedef ::HRichRingFindSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichRingFindSim(TBuffer &buf, void *obj) {
      ((::HRichRingFindSim*)obj)->::HRichRingFindSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichRingFindSim

//______________________________________________________________________________
void HRichTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b >> fSkipEvent;
      R__b >> fNoiseOn;
      R__b.CheckByteCount(R__s, R__c, HRichTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b << fSkipEvent;
      R__b << fNoiseOn;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichTaskSet.
      TClass *R__cl = ::HRichTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkipEvent", &fSkipEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoiseOn", &fNoiseOn);
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichTaskSet(void *p) {
      return  p ? new(p) ::HRichTaskSet : new ::HRichTaskSet;
   }
   static void *newArray_HRichTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HRichTaskSet[nElements] : new ::HRichTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichTaskSet(void *p) {
      delete ((::HRichTaskSet*)p);
   }
   static void deleteArray_HRichTaskSet(void *p) {
      delete [] ((::HRichTaskSet*)p);
   }
   static void destruct_HRichTaskSet(void *p) {
      typedef ::HRichTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichTaskSet(TBuffer &buf, void *obj) {
      ((::HRichTaskSet*)obj)->::HRichTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichTaskSet

//______________________________________________________________________________
void HRichThresholdPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichThresholdPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> fCalParVers;
      R__b.ReadStaticArray((float*)fSigmaMultiplier);
      R__b.CheckByteCount(R__s, R__c, HRichThresholdPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichThresholdPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << fCalParVers;
      R__b.WriteArray(fSigmaMultiplier, 6);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichThresholdPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichThresholdPar.
      TClass *R__cl = ::HRichThresholdPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCalParVers", &fCalParVers);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSigmaMultiplier[6]", fSigmaMultiplier);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichThresholdPar(void *p) {
      return  p ? new(p) ::HRichThresholdPar : new ::HRichThresholdPar;
   }
   static void *newArray_HRichThresholdPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRichThresholdPar[nElements] : new ::HRichThresholdPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichThresholdPar(void *p) {
      delete ((::HRichThresholdPar*)p);
   }
   static void deleteArray_HRichThresholdPar(void *p) {
      delete [] ((::HRichThresholdPar*)p);
   }
   static void destruct_HRichThresholdPar(void *p) {
      typedef ::HRichThresholdPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichThresholdPar(TBuffer &buf, void *obj) {
      ((::HRichThresholdPar*)obj)->::HRichThresholdPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichThresholdPar

//______________________________________________________________________________
void HRichTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichTrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fTrackNr;
      R__b >> fEventNr;
      R__b >> fFlag;
      R__b >> fAddress;
      R__b.CheckByteCount(R__s, R__c, HRichTrack::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichTrack::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fTrackNr;
      R__b << fEventNr;
      R__b << fFlag;
      R__b << fAddress;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichTrack.
      TClass *R__cl = ::HRichTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackNr", &fTrackNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNr", &fEventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFlag", &fFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAddress", &fAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichTrack(void *p) {
      return  p ? new(p) ::HRichTrack : new ::HRichTrack;
   }
   static void *newArray_HRichTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HRichTrack[nElements] : new ::HRichTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichTrack(void *p) {
      delete ((::HRichTrack*)p);
   }
   static void deleteArray_HRichTrack(void *p) {
      delete [] ((::HRichTrack*)p);
   }
   static void destruct_HRichTrack(void *p) {
      typedef ::HRichTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichTrack(TBuffer &buf, void *obj) {
      ((::HRichTrack*)obj)->::HRichTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichTrack

//______________________________________________________________________________
void HRichUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichUnpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HRichUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichUnpacker.
      TClass *R__cl = ::HRichUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRichId", &fRichId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNr", &fEventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStartEvt", &fStartEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSecMisMatchCntr", &fSecMisMatchCntr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataWord", (void*)&fDataWord);
      R__insp.InspectMember("HRichUnpacker::DataWord", (void*)&fDataWord, "fDataWord.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fpCalCat", &fpCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fpMapPar", &fpMapPar);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HRichUnpacker(void *p) {
      delete ((::HRichUnpacker*)p);
   }
   static void deleteArray_HRichUnpacker(void *p) {
      delete [] ((::HRichUnpacker*)p);
   }
   static void destruct_HRichUnpacker(void *p) {
      typedef ::HRichUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichUnpacker(TBuffer &buf, void *obj) {
      ((::HRichUnpacker*)obj)->::HRichUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichUnpacker

//______________________________________________________________________________
void HRichWire::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichWire.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fWireNr;
      R__b >> fWireX;
      R__b.CheckByteCount(R__s, R__c, HRichWire::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichWire::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fWireNr;
      R__b << fWireX;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichWire::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichWire.
      TClass *R__cl = ::HRichWire::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWireNr", &fWireNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWireX", &fWireX);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichWire(void *p) {
      return  p ? new(p) ::HRichWire : new ::HRichWire;
   }
   static void *newArray_HRichWire(Long_t nElements, void *p) {
      return p ? new(p) ::HRichWire[nElements] : new ::HRichWire[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichWire(void *p) {
      delete ((::HRichWire*)p);
   }
   static void deleteArray_HRichWire(void *p) {
      delete [] ((::HRichWire*)p);
   }
   static void destruct_HRichWire(void *p) {
      typedef ::HRichWire current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichWire(TBuffer &buf, void *obj) {
      ((::HRichWire*)obj)->::HRichWire::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichWire

//______________________________________________________________________________
void HRichWireSignal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichWireSignal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fSector;
      R__b >> fWireNr;
      R__b >> fCharge;
      R__b >> fXpos;
      R__b >> fYpos;
      R__b >> fEnergy;
      R__b.CheckByteCount(R__s, R__c, HRichWireSignal::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichWireSignal::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fSector;
      R__b << fWireNr;
      R__b << fCharge;
      R__b << fXpos;
      R__b << fYpos;
      R__b << fEnergy;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichWireSignal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichWireSignal.
      TClass *R__cl = ::HRichWireSignal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSector", &fSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWireNr", &fWireNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXpos", &fXpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYpos", &fYpos);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEnergy", &fEnergy);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichWireSignal(void *p) {
      return  p ? new(p) ::HRichWireSignal : new ::HRichWireSignal;
   }
   static void *newArray_HRichWireSignal(Long_t nElements, void *p) {
      return p ? new(p) ::HRichWireSignal[nElements] : new ::HRichWireSignal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichWireSignal(void *p) {
      delete ((::HRichWireSignal*)p);
   }
   static void deleteArray_HRichWireSignal(void *p) {
      delete [] ((::HRichWireSignal*)p);
   }
   static void destruct_HRichWireSignal(void *p) {
      typedef ::HRichWireSignal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichWireSignal(TBuffer &buf, void *obj) {
      ((::HRichWireSignal*)obj)->::HRichWireSignal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichWireSignal

//______________________________________________________________________________
void HRichWireTab::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichWireTab.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fNrWires;
      R__b >> fDistWire;
      fWiresArr.Streamer(R__b);
      fWirePosX.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRichWireTab::IsA());
   } else {
      R__c = R__b.WriteVersion(HRichWireTab::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fNrWires;
      R__b << fDistWire;
      fWiresArr.Streamer(R__b);
      fWirePosX.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRichWireTab::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichWireTab.
      TClass *R__cl = ::HRichWireTab::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNrWires", &fNrWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistWire", &fDistWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWiresArr", &fWiresArr);
      R__insp.InspectMember(fWiresArr, "fWiresArr.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWirePosX", &fWirePosX);
      R__insp.InspectMember(fWirePosX, "fWirePosX.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichWireTab(void *p) {
      return  p ? new(p) ::HRichWireTab : new ::HRichWireTab;
   }
   static void *newArray_HRichWireTab(Long_t nElements, void *p) {
      return p ? new(p) ::HRichWireTab[nElements] : new ::HRichWireTab[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichWireTab(void *p) {
      delete ((::HRichWireTab*)p);
   }
   static void deleteArray_HRichWireTab(void *p) {
      delete [] ((::HRichWireTab*)p);
   }
   static void destruct_HRichWireTab(void *p) {
      typedef ::HRichWireTab current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichWireTab(TBuffer &buf, void *obj) {
      ((::HRichWireTab*)obj)->::HRichWireTab::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichWireTab

//______________________________________________________________________________
void HRichDrawHist::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRichDrawHist.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HRichDrawHist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRichDrawHist.
      TClass *R__cl = ::HRichDrawHist::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRichDrawHist(void *p) {
      return  p ? new(p) ::HRichDrawHist : new ::HRichDrawHist;
   }
   static void *newArray_HRichDrawHist(Long_t nElements, void *p) {
      return p ? new(p) ::HRichDrawHist[nElements] : new ::HRichDrawHist[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRichDrawHist(void *p) {
      delete ((::HRichDrawHist*)p);
   }
   static void deleteArray_HRichDrawHist(void *p) {
      delete [] ((::HRichDrawHist*)p);
   }
   static void destruct_HRichDrawHist(void *p) {
      typedef ::HRichDrawHist current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRichDrawHist(TBuffer &buf, void *obj) {
      ((::HRichDrawHist*)obj)->::HRichDrawHist::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRichDrawHist

//______________________________________________________________________________
void HRich700EventDisplay::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700EventDisplay.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRich700EventDisplay::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700EventDisplay.
      TClass *R__cl = ::HRich700EventDisplay::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichPhoton", &fCatRichPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichDirect", &fCatRichDirect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTrack", &fCatTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatCal", &fCatCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichHit", &fCatRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichCal", &fCatRichCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatKine", &fCatKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiMap", &fDigiMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNum", &fEventNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrawRichPhotons", &fDrawRichPhotons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrawRichDirects", &fDrawRichDirects);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrawRichCals", &fDrawRichCals);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDrawRichHits", &fDrawRichHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofEventsToDraw", &fNofEventsToDraw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofDrawnEvents", &fNofDrawnEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanvas", (void*)&fCanvas);
      R__insp.InspectMember("vector<TCanvas*>", (void*)&fCanvas, "fCanvas.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputDir", (void*)&fOutputDir);
      R__insp.InspectMember("string", (void*)&fOutputDir, "fOutputDir.", false);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700EventDisplay(void *p) {
      return  p ? new(p) ::HRich700EventDisplay : new ::HRich700EventDisplay;
   }
   static void *newArray_HRich700EventDisplay(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700EventDisplay[nElements] : new ::HRich700EventDisplay[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700EventDisplay(void *p) {
      delete ((::HRich700EventDisplay*)p);
   }
   static void deleteArray_HRich700EventDisplay(void *p) {
      delete [] ((::HRich700EventDisplay*)p);
   }
   static void destruct_HRich700EventDisplay(void *p) {
      typedef ::HRich700EventDisplay current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700EventDisplay(TBuffer &buf, void *obj) {
      ((::HRich700EventDisplay*)obj)->::HRich700EventDisplay::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700EventDisplay

//______________________________________________________________________________
void HRich700GeoTestQa::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700GeoTestQa.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRich700GeoTestQa::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700GeoTestQa.
      TClass *R__cl = ::HRich700GeoTestQa::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatKine", &fCatKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichPhoton", &fCatRichPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichDirect", &fCatRichDirect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichMirror", &fCatRichMirror);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatTrack", &fCatTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatCal", &fCatCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichHit", &fCatRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiMap", &fDigiMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNum", &fEventNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHM", &fHM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanvas", (void*)&fCanvas);
      R__insp.InspectMember("vector<TCanvas*>", (void*)&fCanvas, "fCanvas.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputDir", (void*)&fOutputDir);
      R__insp.InspectMember("string", (void*)&fOutputDir, "fOutputDir.", false);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700GeoTestQa(void *p) {
      return  p ? new(p) ::HRich700GeoTestQa : new ::HRich700GeoTestQa;
   }
   static void *newArray_HRich700GeoTestQa(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700GeoTestQa[nElements] : new ::HRich700GeoTestQa[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700GeoTestQa(void *p) {
      delete ((::HRich700GeoTestQa*)p);
   }
   static void deleteArray_HRich700GeoTestQa(void *p) {
      delete [] ((::HRich700GeoTestQa*)p);
   }
   static void destruct_HRich700GeoTestQa(void *p) {
      typedef ::HRich700GeoTestQa current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700GeoTestQa(TBuffer &buf, void *obj) {
      ((::HRich700GeoTestQa*)obj)->::HRich700GeoTestQa::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700GeoTestQa

//______________________________________________________________________________
void HRich700HistManager::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700HistManager.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         map<string,TNamed*> &R__stl =  fMap;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(TNamed));
         if (R__tcl2==0) {
            Error("fMap streamer","Missing the TClass object for TNamed!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            string R__t;
            {TString R__str;
             R__str.Streamer(R__b);
             R__t = R__str.Data();}
            TNamed* R__t2;
            R__t2 = (TNamed*)R__b.ReadObjectAny(R__tcl2);
            typedef string Value_t;
            std::pair<Value_t const, TNamed* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HRich700HistManager::IsA());
   } else {
      R__c = R__b.WriteVersion(HRich700HistManager::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         map<string,TNamed*> &R__stl =  fMap;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<string,TNamed*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            {TString R__str(((*R__k).first ).c_str());
             R__str.Streamer(R__b);};
            R__b << ((*R__k).second);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRich700HistManager::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700HistManager.
      TClass *R__cl = ::HRich700HistManager::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMap", (void*)&fMap);
      R__insp.InspectMember("map<string,TNamed*>", (void*)&fMap, "fMap.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700HistManager(void *p) {
      return  p ? new(p) ::HRich700HistManager : new ::HRich700HistManager;
   }
   static void *newArray_HRich700HistManager(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700HistManager[nElements] : new ::HRich700HistManager[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700HistManager(void *p) {
      delete ((::HRich700HistManager*)p);
   }
   static void deleteArray_HRich700HistManager(void *p) {
      delete [] ((::HRich700HistManager*)p);
   }
   static void destruct_HRich700HistManager(void *p) {
      typedef ::HRich700HistManager current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700HistManager(TBuffer &buf, void *obj) {
      ((::HRich700HistManager*)obj)->::HRich700HistManager::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700HistManager

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700Pmt(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HRich700Pmt : new ::HRich700Pmt;
   }
   static void *newArray_HRich700Pmt(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HRich700Pmt[nElements] : new ::HRich700Pmt[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700Pmt(void *p) {
      delete ((::HRich700Pmt*)p);
   }
   static void deleteArray_HRich700Pmt(void *p) {
      delete [] ((::HRich700Pmt*)p);
   }
   static void destruct_HRich700Pmt(void *p) {
      typedef ::HRich700Pmt current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::HRich700Pmt

//______________________________________________________________________________
void HRich700DigiPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700DigiPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fCrossTalkProbability;
      R__b >> fNofNoiseHits;
      R__b.CheckByteCount(R__s, R__c, HRich700DigiPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRich700DigiPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fCrossTalkProbability;
      R__b << fNofNoiseHits;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRich700DigiPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700DigiPar.
      TClass *R__cl = ::HRich700DigiPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCrossTalkProbability", &fCrossTalkProbability);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofNoiseHits", &fNofNoiseHits);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700DigiPar(void *p) {
      return  p ? new(p) ::HRich700DigiPar : new ::HRich700DigiPar;
   }
   static void *newArray_HRich700DigiPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700DigiPar[nElements] : new ::HRich700DigiPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700DigiPar(void *p) {
      delete ((::HRich700DigiPar*)p);
   }
   static void deleteArray_HRich700DigiPar(void *p) {
      delete [] ((::HRich700DigiPar*)p);
   }
   static void destruct_HRich700DigiPar(void *p) {
      typedef ::HRich700DigiPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700DigiPar(TBuffer &buf, void *obj) {
      ((::HRich700DigiPar*)obj)->::HRich700DigiPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700DigiPar

//______________________________________________________________________________
void HRich700Digitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700Digitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRich700Digitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700Digitizer.
      TClass *R__cl = ::HRich700Digitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatKine", &fCatKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichPhoton", &fCatRichPhoton);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichDirect", &fCatRichDirect);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichCal", &fCatRichCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiPar", &fDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiMap", &fDigiMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStoreOnlyConvertedPhotonTrackIds", &fStoreOnlyConvertedPhotonTrackIds);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseDeltaElectrons", &fUseDeltaElectrons);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUseDeltaMomSelection", &fUseDeltaMomSelection);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIonID", &fIonID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomMaxDeltaElecCut", &fMomMaxDeltaElecCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomMinDeltaCut[6]", fMomMinDeltaCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fProbDeltaAccepted", &fProbDeltaAccepted);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmDeltaTrackProb", (void*)&fmDeltaTrackProb);
      R__insp.InspectMember("map<HGeantKine*,Float_t>", (void*)&fmDeltaTrackProb, "fmDeltaTrackProb.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fitDelta", (void*)&fitDelta);
      R__insp.InspectMember("map<HGeantKine*,float,less<HGeantKine*>,allocator<pair<HGeantKine* const,float> > >::iterator", (void*)&fitDelta, "fitDelta.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmt", (void*)&fPmt);
      R__insp.InspectMember("HRich700Pmt", (void*)&fPmt, "fPmt.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCrossTalkProbability", &fCrossTalkProbability);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofNoiseHits", &fNofNoiseHits);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700Digitizer(void *p) {
      return  p ? new(p) ::HRich700Digitizer : new ::HRich700Digitizer;
   }
   static void *newArray_HRich700Digitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700Digitizer[nElements] : new ::HRich700Digitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700Digitizer(void *p) {
      delete ((::HRich700Digitizer*)p);
   }
   static void deleteArray_HRich700Digitizer(void *p) {
      delete [] ((::HRich700Digitizer*)p);
   }
   static void destruct_HRich700Digitizer(void *p) {
      typedef ::HRich700Digitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700Digitizer(TBuffer &buf, void *obj) {
      ((::HRich700Digitizer*)obj)->::HRich700Digitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700Digitizer

//______________________________________________________________________________
void HRich700DigiMapPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700DigiMapPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      {
         map<Int_t,HRich700PmtData> &R__stl =  fPmtDataMapPmtId;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(HRich700PmtData));
         if (R__tcl2==0) {
            Error("fPmtDataMapPmtId streamer","Missing the TClass object for HRich700PmtData!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            HRich700PmtData R__t2;
            R__b.StreamObject(&R__t2,R__tcl2);
            typedef int Value_t;
            std::pair<Value_t const, HRich700PmtData > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         map<pair<Int_t,Int_t>,HRich700PmtData> &R__stl =  fPmtDataMapXY;
         R__stl.clear();
         TClass *R__tcl1 = TBuffer::GetClass(typeid(pair<int,int>));
         if (R__tcl1==0) {
            Error("fPmtDataMapXY streamer","Missing the TClass object for pair<int,int>!");
            return;
         }
         TClass *R__tcl2 = TBuffer::GetClass(typeid(HRich700PmtData));
         if (R__tcl2==0) {
            Error("fPmtDataMapXY streamer","Missing the TClass object for HRich700PmtData!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            pair<int,int> R__t;
            R__b.StreamObject(&R__t,R__tcl1);
            HRich700PmtData R__t2;
            R__b.StreamObject(&R__t2,R__tcl2);
            typedef pair<int,int> Value_t;
            std::pair<Value_t const, HRich700PmtData > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      R__b >> fNofPixelsInRow;
      R__b >> fPmtSize;
      R__b >> fPmtGap;
      fArrayPmt.Streamer(R__b);
      fArrayPhiMean.Streamer(R__b);
      fArrayThetaMean.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HRich700DigiMapPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRich700DigiMapPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      {
         map<Int_t,HRich700PmtData> &R__stl =  fPmtDataMapPmtId;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl2 = TBuffer::GetClass(typeid(HRich700PmtData));
         if (R__tcl2==0) {
            Error("fPmtDataMapPmtIdstreamer","Missing the TClass object for HRich700PmtData!");
            return;
         }
            map<Int_t,HRich700PmtData>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b.StreamObject((HRich700PmtData*)&((*R__k).second),R__tcl2);
            }
         }
      }
      {
         map<pair<Int_t,Int_t>,HRich700PmtData> &R__stl =  fPmtDataMapXY;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
         TClass *R__tcl1 = TBuffer::GetClass(typeid(pair<int,int>));
         if (R__tcl1==0) {
            Error("fPmtDataMapXY streamer","Missing the TClass object for pair<int,int>!");
            return;
         }
         TClass *R__tcl2 = TBuffer::GetClass(typeid(HRich700PmtData));
         if (R__tcl2==0) {
            Error("fPmtDataMapXYstreamer","Missing the TClass object for HRich700PmtData!");
            return;
         }
            map<pair<Int_t,Int_t>,HRich700PmtData>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b.StreamObject((pair<int,int>*)&((*R__k).first ),R__tcl1);
            R__b.StreamObject((HRich700PmtData*)&((*R__k).second),R__tcl2);
            }
         }
      }
      R__b << fNofPixelsInRow;
      R__b << fPmtSize;
      R__b << fPmtGap;
      fArrayPmt.Streamer(R__b);
      fArrayPhiMean.Streamer(R__b);
      fArrayThetaMean.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRich700DigiMapPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700DigiMapPar.
      TClass *R__cl = ::HRich700DigiMapPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmtDataMapPmtId", (void*)&fPmtDataMapPmtId);
      R__insp.InspectMember("map<Int_t,HRich700PmtData>", (void*)&fPmtDataMapPmtId, "fPmtDataMapPmtId.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmtDataMapXY", (void*)&fPmtDataMapXY);
      R__insp.InspectMember("map<pair<Int_t,Int_t>,HRich700PmtData>", (void*)&fPmtDataMapXY, "fPmtDataMapXY.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofPixelsInRow", &fNofPixelsInRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmtSize", &fPmtSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPmtGap", &fPmtGap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrayPmt", &fArrayPmt);
      R__insp.InspectMember(fArrayPmt, "fArrayPmt.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrayPhiMean", &fArrayPhiMean);
      R__insp.InspectMember(fArrayPhiMean, "fArrayPhiMean.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fArrayThetaMean", &fArrayThetaMean);
      R__insp.InspectMember(fArrayThetaMean, "fArrayThetaMean.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fhxyPhiMean", &fhxyPhiMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fhxyThetaMean", &fhxyThetaMean);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxX", &fmaxX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fmaxY", &fmaxY);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700DigiMapPar(void *p) {
      return  p ? new(p) ::HRich700DigiMapPar : new ::HRich700DigiMapPar;
   }
   static void *newArray_HRich700DigiMapPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700DigiMapPar[nElements] : new ::HRich700DigiMapPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700DigiMapPar(void *p) {
      delete ((::HRich700DigiMapPar*)p);
   }
   static void deleteArray_HRich700DigiMapPar(void *p) {
      delete [] ((::HRich700DigiMapPar*)p);
   }
   static void destruct_HRich700DigiMapPar(void *p) {
      typedef ::HRich700DigiMapPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700DigiMapPar(TBuffer &buf, void *obj) {
      ((::HRich700DigiMapPar*)obj)->::HRich700DigiMapPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700DigiMapPar

//______________________________________________________________________________
void HRich700RingFinderPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700RingFinderPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fNofParts;
      R__b >> fMaxDistance;
      R__b >> fMinDistance;
      R__b >> fMinRadius;
      R__b >> fMaxRadius;
      R__b >> fNofBinsX;
      R__b >> fNofBinsY;
      R__b >> fHTCut;
      R__b >> fNofBinsR;
      R__b >> fHTCutR;
      R__b >> fMinNofHitsInArea;
      R__b >> fUsedHitsAllCut;
      R__b >> fRmsCoeffCOP;
      R__b >> fMaxCutCOP;
      R__b.CheckByteCount(R__s, R__c, HRich700RingFinderPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HRich700RingFinderPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fNofParts;
      R__b << fMaxDistance;
      R__b << fMinDistance;
      R__b << fMinRadius;
      R__b << fMaxRadius;
      R__b << fNofBinsX;
      R__b << fNofBinsY;
      R__b << fHTCut;
      R__b << fNofBinsR;
      R__b << fHTCutR;
      R__b << fMinNofHitsInArea;
      R__b << fUsedHitsAllCut;
      R__b << fRmsCoeffCOP;
      R__b << fMaxCutCOP;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRich700RingFinderPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700RingFinderPar.
      TClass *R__cl = ::HRich700RingFinderPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofParts", &fNofParts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDistance", &fMaxDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDistance", &fMinDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinRadius", &fMinRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxRadius", &fMaxRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofBinsX", &fNofBinsX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofBinsY", &fNofBinsY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTCut", &fHTCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofBinsR", &fNofBinsR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTCutR", &fHTCutR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinNofHitsInArea", &fMinNofHitsInArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsedHitsAllCut", &fUsedHitsAllCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsCoeffCOP", &fRmsCoeffCOP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxCutCOP", &fMaxCutCOP);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700RingFinderPar(void *p) {
      return  p ? new(p) ::HRich700RingFinderPar : new ::HRich700RingFinderPar;
   }
   static void *newArray_HRich700RingFinderPar(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700RingFinderPar[nElements] : new ::HRich700RingFinderPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700RingFinderPar(void *p) {
      delete ((::HRich700RingFinderPar*)p);
   }
   static void deleteArray_HRich700RingFinderPar(void *p) {
      delete [] ((::HRich700RingFinderPar*)p);
   }
   static void destruct_HRich700RingFinderPar(void *p) {
      typedef ::HRich700RingFinderPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700RingFinderPar(TBuffer &buf, void *obj) {
      ((::HRich700RingFinderPar*)obj)->::HRich700RingFinderPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700RingFinderPar

//______________________________________________________________________________
void HRich700RingFinderIdeal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700RingFinderIdeal.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRich700RingFinderIdeal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700RingFinderIdeal.
      TClass *R__cl = ::HRich700RingFinderIdeal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatKine", &fCatKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichCal", &fCatRichCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichHit", &fCatRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiMap", &fDigiMap);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700RingFinderIdeal(void *p) {
      return  p ? new(p) ::HRich700RingFinderIdeal : new ::HRich700RingFinderIdeal;
   }
   static void *newArray_HRich700RingFinderIdeal(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700RingFinderIdeal[nElements] : new ::HRich700RingFinderIdeal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700RingFinderIdeal(void *p) {
      delete ((::HRich700RingFinderIdeal*)p);
   }
   static void deleteArray_HRich700RingFinderIdeal(void *p) {
      delete [] ((::HRich700RingFinderIdeal*)p);
   }
   static void destruct_HRich700RingFinderIdeal(void *p) {
      typedef ::HRich700RingFinderIdeal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700RingFinderIdeal(TBuffer &buf, void *obj) {
      ((::HRich700RingFinderIdeal*)obj)->::HRich700RingFinderIdeal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700RingFinderIdeal

//______________________________________________________________________________
void HRich700RingFinderHough::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700RingFinderHough.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRich700RingFinderHough::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700RingFinderHough.
      TClass *R__cl = ::HRich700RingFinderHough::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofParts", &fNofParts);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDistance", &fMaxDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDistance", &fMinDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinDistanceSq", &fMinDistanceSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxDistanceSq", &fMaxDistanceSq);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinRadius", &fMinRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxRadius", &fMaxRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDx", &fDx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDy", &fDy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDr", &fDr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofBinsX", &fNofBinsX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofBinsY", &fNofBinsY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofBinsXY", &fNofBinsXY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTCut", &fHTCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNofBinsR", &fNofBinsR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHTCutR", &fHTCutR);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinNofHitsInArea", &fMinNofHitsInArea);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsedHitsAllCut", &fUsedHitsAllCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRmsCoeffCOP", &fRmsCoeffCOP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMaxCutCOP", &fMaxCutCOP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurMinX", &fCurMinX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCurMinY", &fCurMinY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fData", (void*)&fData);
      R__insp.InspectMember("vector<HRich700HoughHit>", (void*)&fData, "fData.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHist", (void*)&fHist);
      R__insp.InspectMember("vector<UShort_t>", (void*)&fHist, "fHist.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHistR", (void*)&fHistR);
      R__insp.InspectMember("vector<UShort_t>", (void*)&fHistR, "fHistR.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitInd", (void*)&fHitInd);
      R__insp.InspectMember("vector<vector<UShort_t> >", (void*)&fHitInd, "fHitInd.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fFoundRings", (void*)&fFoundRings);
      R__insp.InspectMember("vector<HRich700Ring>", (void*)&fFoundRings, "fFoundRings.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichCal", &fCatRichCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichHit", &fCatRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fDigiMap", &fDigiMap);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRingPar", &fRingPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNum", &fEventNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fIsSimulation", &fIsSimulation);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700RingFinderHough(void *p) {
      return  p ? new(p) ::HRich700RingFinderHough : new ::HRich700RingFinderHough;
   }
   static void *newArray_HRich700RingFinderHough(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700RingFinderHough[nElements] : new ::HRich700RingFinderHough[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700RingFinderHough(void *p) {
      delete ((::HRich700RingFinderHough*)p);
   }
   static void deleteArray_HRich700RingFinderHough(void *p) {
      delete [] ((::HRich700RingFinderHough*)p);
   }
   static void destruct_HRich700RingFinderHough(void *p) {
      typedef ::HRich700RingFinderHough current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700RingFinderHough(TBuffer &buf, void *obj) {
      ((::HRich700RingFinderHough*)obj)->::HRich700RingFinderHough::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700RingFinderHough

//______________________________________________________________________________
void HRich700RecoQa::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700RecoQa.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HRich700RecoQa::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700RecoQa.
      TClass *R__cl = ::HRich700RecoQa::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatKine", &fCatKine);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichHit", &fCatRichHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCatRichCal", &fCatRichCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNum", &fEventNum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHM", &fHM);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitMap", (void*)&fHitMap);
      R__insp.InspectMember("map<Int_t,Int_t>", (void*)&fHitMap, "fHitMap.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMinNofRichCalsAcc", &fMinNofRichCalsAcc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrueQuota", &fTrueQuota);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCanvas", (void*)&fCanvas);
      R__insp.InspectMember("vector<TCanvas*>", (void*)&fCanvas, "fCanvas.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOutputDir", (void*)&fOutputDir);
      R__insp.InspectMember("string", (void*)&fOutputDir, "fOutputDir.", false);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700RecoQa(void *p) {
      return  p ? new(p) ::HRich700RecoQa : new ::HRich700RecoQa;
   }
   static void *newArray_HRich700RecoQa(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700RecoQa[nElements] : new ::HRich700RecoQa[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700RecoQa(void *p) {
      delete ((::HRich700RecoQa*)p);
   }
   static void deleteArray_HRich700RecoQa(void *p) {
      delete [] ((::HRich700RecoQa*)p);
   }
   static void destruct_HRich700RecoQa(void *p) {
      typedef ::HRich700RecoQa current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700RecoQa(TBuffer &buf, void *obj) {
      ((::HRich700RecoQa*)obj)->::HRich700RecoQa::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700RecoQa

//______________________________________________________________________________
void HRich700TaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HRich700TaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b >> fNoRingFinder;
      R__b.CheckByteCount(R__s, R__c, HRich700TaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HRich700TaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b << fNoRingFinder;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HRich700TaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HRich700TaskSet.
      TClass *R__cl = ::HRich700TaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fNoRingFinder", &fNoRingFinder);
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HRich700TaskSet(void *p) {
      return  p ? new(p) ::HRich700TaskSet : new ::HRich700TaskSet;
   }
   static void *newArray_HRich700TaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HRich700TaskSet[nElements] : new ::HRich700TaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HRich700TaskSet(void *p) {
      delete ((::HRich700TaskSet*)p);
   }
   static void deleteArray_HRich700TaskSet(void *p) {
      delete [] ((::HRich700TaskSet*)p);
   }
   static void destruct_HRich700TaskSet(void *p) {
      typedef ::HRich700TaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HRich700TaskSet(TBuffer &buf, void *obj) {
      ((::HRich700TaskSet*)obj)->::HRich700TaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HRich700TaskSet

namespace ROOTDict {
   void maplEintcOHRich700PmtDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOHRich700PmtDatagR_Dictionary();
   static void *new_maplEintcOHRich700PmtDatagR(void *p = 0);
   static void *newArray_maplEintcOHRich700PmtDatagR(Long_t size, void *p);
   static void delete_maplEintcOHRich700PmtDatagR(void *p);
   static void deleteArray_maplEintcOHRich700PmtDatagR(void *p);
   static void destruct_maplEintcOHRich700PmtDatagR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<int,HRich700PmtData>*)
   {
      map<int,HRich700PmtData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,HRich700PmtData>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,HRich700PmtData>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,HRich700PmtData>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEintcOHRich700PmtDatagR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,HRich700PmtData>) );
      instance.SetNew(&new_maplEintcOHRich700PmtDatagR);
      instance.SetNewArray(&newArray_maplEintcOHRich700PmtDatagR);
      instance.SetDelete(&delete_maplEintcOHRich700PmtDatagR);
      instance.SetDeleteArray(&deleteArray_maplEintcOHRich700PmtDatagR);
      instance.SetDestructor(&destruct_maplEintcOHRich700PmtDatagR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<int,HRich700PmtData> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,HRich700PmtData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOHRich700PmtDatagR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<int,HRich700PmtData>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEintcOHRich700PmtDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,HRich700PmtData> : new map<int,HRich700PmtData>;
   }
   static void *newArray_maplEintcOHRich700PmtDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,HRich700PmtData>[nElements] : new map<int,HRich700PmtData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOHRich700PmtDatagR(void *p) {
      delete ((map<int,HRich700PmtData>*)p);
   }
   static void deleteArray_maplEintcOHRich700PmtDatagR(void *p) {
      delete [] ((map<int,HRich700PmtData>*)p);
   }
   static void destruct_maplEintcOHRich700PmtDatagR(void *p) {
      typedef map<int,HRich700PmtData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<int,HRich700PmtData>

namespace ROOTDict {
   void maplEpairlEintcOintgRcOHRich700PmtDatagR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEpairlEintcOintgRcOHRich700PmtDatagR_Dictionary();
   static void *new_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p = 0);
   static void *newArray_maplEpairlEintcOintgRcOHRich700PmtDatagR(Long_t size, void *p);
   static void delete_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p);
   static void deleteArray_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p);
   static void destruct_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<pair<int,int>,HRich700PmtData>*)
   {
      map<pair<int,int>,HRich700PmtData> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<pair<int,int>,HRich700PmtData>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<pair<int,int>,HRich700PmtData>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<pair<int,int>,HRich700PmtData>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEpairlEintcOintgRcOHRich700PmtDatagR_Dictionary, isa_proxy, 0,
                  sizeof(map<pair<int,int>,HRich700PmtData>) );
      instance.SetNew(&new_maplEpairlEintcOintgRcOHRich700PmtDatagR);
      instance.SetNewArray(&newArray_maplEpairlEintcOintgRcOHRich700PmtDatagR);
      instance.SetDelete(&delete_maplEpairlEintcOintgRcOHRich700PmtDatagR);
      instance.SetDeleteArray(&deleteArray_maplEpairlEintcOintgRcOHRich700PmtDatagR);
      instance.SetDestructor(&destruct_maplEpairlEintcOintgRcOHRich700PmtDatagR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<pair<int,int>,HRich700PmtData> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<pair<int,int>,HRich700PmtData>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEpairlEintcOintgRcOHRich700PmtDatagR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<pair<int,int>,HRich700PmtData>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<pair<int,int>,HRich700PmtData> : new map<pair<int,int>,HRich700PmtData>;
   }
   static void *newArray_maplEpairlEintcOintgRcOHRich700PmtDatagR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<pair<int,int>,HRich700PmtData>[nElements] : new map<pair<int,int>,HRich700PmtData>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p) {
      delete ((map<pair<int,int>,HRich700PmtData>*)p);
   }
   static void deleteArray_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p) {
      delete [] ((map<pair<int,int>,HRich700PmtData>*)p);
   }
   static void destruct_maplEpairlEintcOintgRcOHRich700PmtDatagR(void *p) {
      typedef map<pair<int,int>,HRich700PmtData> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<pair<int,int>,HRich700PmtData>

namespace ROOTDict {
   void maplEstringcOTNamedmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEstringcOTNamedmUgR_Dictionary();
   static void *new_maplEstringcOTNamedmUgR(void *p = 0);
   static void *newArray_maplEstringcOTNamedmUgR(Long_t size, void *p);
   static void delete_maplEstringcOTNamedmUgR(void *p);
   static void deleteArray_maplEstringcOTNamedmUgR(void *p);
   static void destruct_maplEstringcOTNamedmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<string,TNamed*>*)
   {
      map<string,TNamed*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<string,TNamed*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<string,TNamed*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<string,TNamed*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEstringcOTNamedmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<string,TNamed*>) );
      instance.SetNew(&new_maplEstringcOTNamedmUgR);
      instance.SetNewArray(&newArray_maplEstringcOTNamedmUgR);
      instance.SetDelete(&delete_maplEstringcOTNamedmUgR);
      instance.SetDeleteArray(&deleteArray_maplEstringcOTNamedmUgR);
      instance.SetDestructor(&destruct_maplEstringcOTNamedmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<string,TNamed*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<string,TNamed*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEstringcOTNamedmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<string,TNamed*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEstringcOTNamedmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TNamed*> : new map<string,TNamed*>;
   }
   static void *newArray_maplEstringcOTNamedmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<string,TNamed*>[nElements] : new map<string,TNamed*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEstringcOTNamedmUgR(void *p) {
      delete ((map<string,TNamed*>*)p);
   }
   static void deleteArray_maplEstringcOTNamedmUgR(void *p) {
      delete [] ((map<string,TNamed*>*)p);
   }
   static void destruct_maplEstringcOTNamedmUgR(void *p) {
      typedef map<string,TNamed*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<string,TNamed*>

/********************************************************
* ../build/pc/RichDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableRichDict();

extern "C" void G__set_cpp_environmentRichDict() {
  G__cpp_reset_tagtableRichDict();
}
#include <new>
extern "C" int G__cpp_dllrevRichDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HRichHit */
static int G__RichDict_203_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHit[n];
     } else {
       p = new((void*) gvp) HRichHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHit;
     } else {
       p = new((void*) gvp) HRichHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichHit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) HRichHit(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichHit(*(HRichHit*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HRichHit(*(HRichHit*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichHit& obj = ((HRichHit*) G__getstructoffset())->operator=(*(HRichHit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->calcAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getEventNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->getXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->getLabXYZ((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingCenterX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingCenterY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRichHit*) G__getstructoffset())->getRich700CircleCenterX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRichHit*) G__getstructoffset())->getRich700CircleCenterY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRichHit*) G__getstructoffset())->getRich700CircleRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRichHit*) G__getstructoffset())->getRich700CircleChi2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRich700NofRichCals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->dumpToStdout();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getPadY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getPadX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->getTestRati());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->getTestAsym());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->getTestCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getMeanTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getMeanPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->getTestDens());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->getTestBord());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->getTestDyna());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->getRejFake());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingQuality());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingPatMat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingHouTra());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingPadNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingLocalMax4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingLocalMax8());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingClusterNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingAlgorithmIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getRingClusterSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getRingClusterLMax4());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getRingClusterLMax8());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingMaxClusterSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingMaxClusterSum());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHit*) G__getstructoffset())->getRingMaxThrClusterSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getCentroid());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHit*) G__getstructoffset())->getRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setEventNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setTheta((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setPhi((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setLabXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingCenterX((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingCenterY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRich700CircleCenterX((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRich700CircleCenterY((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRich700CircleRadius((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRich700CircleChi2((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRich700NofRichCals((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setPadY((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setPadX((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setMeanTheta((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setMeanPhi((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setTestDens((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_68(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setTestBord((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_69(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setTestDyna((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_70(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setTestRati((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_71(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setTestAsym((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_72(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setTestCharge((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_73(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRejFake((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_74(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingQuality((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_75(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingPatMat((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_76(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingHouTra((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_77(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingAmplitude((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_78(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingPadNr((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_79(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingLocalMax4((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_80(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingLocalMax8((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_81(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingClusterNr((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_82(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingAlgorithmIndex((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_83(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingClusterSize((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_84(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingClusterLMax4((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_85(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingClusterLMax8((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_86(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingMaxClusterSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_87(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingMaxClusterSum((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_88(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRingMaxThrClusterSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_89(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setCentroid((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_90(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->setRadius((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_91(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichHit*) G__getstructoffset())->isNewRich());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_92(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_93(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_94(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_95(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_99(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_100(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_101(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_102(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_203_0_103(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichHit G__THRichHit;
static int G__RichDict_203_0_104(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichHit*) (soff+(sizeof(HRichHit)*i)))->~G__THRichHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichHit*) (soff))->~G__THRichHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichLabel */
static int G__RichDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichLabel* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichLabel[n];
     } else {
       p = new((void*) gvp) HRichLabel[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichLabel;
     } else {
       p = new((void*) gvp) HRichLabel;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichLabel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichLabel* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichLabel(*(HRichLabel*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HRichLabel(*(HRichLabel*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichLabel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichLabel& obj = ((HRichLabel*) G__getstructoffset())->operator=(*(HRichLabel*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichLabel*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichLabel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichLabel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichLabel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichLabel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichLabel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichLabel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichLabel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichLabel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichLabel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichLabel G__THRichLabel;
static int G__RichDict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichLabel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichLabel*) (soff+(sizeof(HRichLabel)*i)))->~G__THRichLabel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichLabel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichLabel*) (soff))->~G__THRichLabel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPadSignal */
static int G__RichDict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadSignal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadSignal[n];
     } else {
       p = new((void*) gvp) HRichPadSignal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadSignal;
     } else {
       p = new((void*) gvp) HRichPadSignal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadSignal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichPadSignal((const Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRichPadSignal((const Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadSignal*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadSignal*) G__getstructoffset())->getAmplitude());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadSignal*) G__getstructoffset())->addAmplitude((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadSignal*) G__getstructoffset())->getLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadSignal*) G__getstructoffset())->getLock());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRichPadSignal*) G__getstructoffset())->getIsCleanedSingle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRichPadSignal*) G__getstructoffset())->getIsCleanedHigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadSignal*) G__getstructoffset())->setAmplitude((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadSignal*) G__getstructoffset())->setLabel((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadSignal*) G__getstructoffset())->setLock((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadSignal*) G__getstructoffset())->setIsCleanedSingle((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadSignal*) G__getstructoffset())->setIsCleanedHigh((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPadSignal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadSignal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPadSignal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPadSignal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadSignal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadSignal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadSignal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadSignal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_205_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadSignal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_205_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichPadSignal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichPadSignal(*(HRichPadSignal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPadSignal G__THRichPadSignal;
static int G__RichDict_205_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPadSignal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPadSignal*) (soff+(sizeof(HRichPadSignal)*i)))->~G__THRichPadSignal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPadSignal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPadSignal*) (soff))->~G__THRichPadSignal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_205_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadSignal* dest = (HRichPadSignal*) G__getstructoffset();
   *dest = *(HRichPadSignal*) libp->para[0].ref;
   const HRichPadSignal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichAnalysisPar */
static int G__RichDict_209_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichAnalysisPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysisPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichAnalysisPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysisPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichAnalysisPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysisPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRichAnalysisPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichAnalysisPar[n];
       } else {
         p = new((void*) gvp) HRichAnalysisPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichAnalysisPar;
       } else {
         p = new((void*) gvp) HRichAnalysisPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysisPar*) G__getstructoffset())->defaultInit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysisPar*) G__getstructoffset())->setFileName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichAnalysisPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysisPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichAnalysisPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichAnalysisPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysisPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysisPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichAnalysisPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysisPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_209_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichAnalysisPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichAnalysisPar G__THRichAnalysisPar;
static int G__RichDict_209_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichAnalysisPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichAnalysisPar*) (soff+(sizeof(HRichAnalysisPar)*i)))->~G__THRichAnalysisPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichAnalysisPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichAnalysisPar*) (soff))->~G__THRichAnalysisPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichGeometryPar */
static int G__RichDict_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichGeometryPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichGeometryPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichGeometryPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichGeometryPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichGeometryPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichGeometryPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRichGeometryPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichGeometryPar[n];
       } else {
         p = new((void*) gvp) HRichGeometryPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichGeometryPar;
       } else {
         p = new((void*) gvp) HRichGeometryPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->incrementSectorNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->calcCol((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->calcRow((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->initParameters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->getSectorsNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->getColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->getRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->getPadsNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->getSectorActive((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichGeometryPar*) G__getstructoffset())->getPadStatus((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichGeometryPar*) G__getstructoffset())->getSectorShift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichGeometryPar*) G__getstructoffset())->getDistanceWiresPads());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichGeometryPar*) G__getstructoffset())->getSectorPhi((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichGeometryPar*) G__getstructoffset())->getFramePar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichGeometryPar*) G__getstructoffset())->getWiresPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichGeometryPar*) G__getstructoffset())->getPadsPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->setSectorActive((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->setColumns((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->setRows((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->setSectorPhi((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->setSectorShift((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->setDistanceWiresPads((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichGeometryPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichGeometryPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichGeometryPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichGeometryPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichGeometryPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichGeometryPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichGeometryPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichGeometryPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_210_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichGeometryPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichGeometryPar G__THRichGeometryPar;
static int G__RichDict_210_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichGeometryPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichGeometryPar*) (soff+(sizeof(HRichGeometryPar)*i)))->~G__THRichGeometryPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichGeometryPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichGeometryPar*) (soff))->~G__THRichGeometryPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichHitHeader */
static int G__RichDict_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHitHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHitHeader[n];
     } else {
       p = new((void*) gvp) HRichHitHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHitHeader;
     } else {
       p = new((void*) gvp) HRichHitHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHitHeader*) G__getstructoffset())->getCurrentSec());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitHeader*) G__getstructoffset())->getEventNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitHeader*) G__getstructoffset())->getExecutedAnalysis());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitHeader*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitHeader*) G__getstructoffset())->setCurrentSec((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitHeader*) G__getstructoffset())->setEventNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitHeader*) G__getstructoffset())->setExecutedAnalysis((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitHeader*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichHitHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichHitHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichHitHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHitHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_211_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHitHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_211_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichHitHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichHitHeader(*(HRichHitHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichHitHeader G__THRichHitHeader;
static int G__RichDict_211_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichHitHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichHitHeader*) (soff+(sizeof(HRichHitHeader)*i)))->~G__THRichHitHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichHitHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichHitHeader*) (soff))->~G__THRichHitHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_211_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHitHeader* dest = (HRichHitHeader*) G__getstructoffset();
   *dest = *(HRichHitHeader*) libp->para[0].ref;
   const HRichHitHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPadClean */
static int G__RichDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadClean* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadClean[n];
     } else {
       p = new((void*) gvp) HRichPadClean[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadClean;
     } else {
       p = new((void*) gvp) HRichPadClean;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadClean));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadClean* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichPadClean(*(HRichPadClean*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HRichPadClean(*(HRichPadClean*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadClean));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichPadClean& obj = ((HRichPadClean*) G__getstructoffset())->operator=(*(HRichPadClean*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((HRichPadClean*) G__getstructoffset())->CleanAlonePad((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HRichPadClean*) G__getstructoffset())->CleanAlonePad((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HRichPadClean*) G__getstructoffset())->CleanAlonePad((HRichAnalysis*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 105, (long) ((HRichPadClean*) G__getstructoffset())->CleanHighPulse((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 105, (long) ((HRichPadClean*) G__getstructoffset())->CleanHighPulse((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 105, (long) ((HRichPadClean*) G__getstructoffset())->CleanHighPulse((HRichAnalysis*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadClean*) G__getstructoffset())->Execute((HRichAnalysis*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichPadClean*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPadClean*) G__getstructoffset())->calculateDPhi((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPadClean::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadClean::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPadClean::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPadClean::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadClean*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadClean::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadClean::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadClean::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadClean::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPadClean G__THRichPadClean;
static int G__RichDict_212_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPadClean*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPadClean*) (soff+(sizeof(HRichPadClean)*i)))->~G__THRichPadClean();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPadClean*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPadClean*) (soff))->~G__THRichPadClean();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPadLabel */
static int G__RichDict_213_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadLabel* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadLabel[n];
     } else {
       p = new((void*) gvp) HRichPadLabel[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadLabel;
     } else {
       p = new((void*) gvp) HRichPadLabel;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadLabel* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichPadLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRichPadLabel((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichPadLabel& obj = ((HRichPadLabel*) G__getstructoffset())->operator=(*(HRichPadLabel*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadLabel*) G__getstructoffset())->LabelPads((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadLabel*) G__getstructoffset())->Execute((HRichAnalysis*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadLabel*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPadLabel::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadLabel::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPadLabel::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPadLabel::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadLabel*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadLabel::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadLabel::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadLabel::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadLabel::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPadLabel G__THRichPadLabel;
static int G__RichDict_213_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPadLabel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPadLabel*) (soff+(sizeof(HRichPadLabel)*i)))->~G__THRichPadLabel();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPadLabel*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPadLabel*) (soff))->~G__THRichPadLabel();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichRingFind */
static int G__RichDict_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichRingFind* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichRingFind[n];
     } else {
       p = new((void*) gvp) HRichRingFind[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichRingFind;
     } else {
       p = new((void*) gvp) HRichRingFind;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichRingFind));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFind*) G__getstructoffset())->init((HRichAnalysis*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichRingFind*) G__getstructoffset())->GetAlgorithmNr((HRichAnalysis*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichRingFind*) G__getstructoffset())->CalcDistance(*(HRichHit*) libp->para[0].ref, *(HRichHit*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichRingFind*) G__getstructoffset())->CalcDistanceMean(*(HRichHit*) libp->para[0].ref, *(HRichHit*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichRingFind*) G__getstructoffset())->CalcDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(HRichHit*) libp->para[2].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichRingFind*) G__getstructoffset())->CalcDistance((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFind*) G__getstructoffset())->TestDensity((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFind*) G__getstructoffset())->TestBorder((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFind*) G__getstructoffset())->TestDynamic((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFind*) G__getstructoffset())->TestRatio((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFind*) G__getstructoffset())->TestAsymmetry((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFind*) G__getstructoffset())->TestRingCharge((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichRingFind*) G__getstructoffset())->TestRing((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichRingFind*) G__getstructoffset())->CleanIdenticalPairs((HRichAnalysis*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->MaxFinding((HRichAnalysis*) G__int(libp->para[0]), (TList*) G__int(libp->para[1])
, (TArrayI*) G__int(libp->para[2]), (TArrayI*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->MaxAnalysis((HRichAnalysis*) G__int(libp->para[0]), (TList*) G__int(libp->para[1])
, (TArrayI*) G__int(libp->para[2]), (TArrayI*) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->MaxCluster((HRichAnalysis*) G__int(libp->para[0]), (TArrayI*) G__int(libp->para[1])
, (TArrayI*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichRingFind*) G__getstructoffset())->MaxLabAmpl((TList*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->MaxSelector((HRichAnalysis*) G__int(libp->para[0]), (TList*) G__int(libp->para[1])
, (TArrayI*) G__int(libp->para[2]), (TArrayI*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->MaxMarker((HRichAnalysis*) G__int(libp->para[0]), (TArrayI*) G__int(libp->para[1])
, (TArrayI*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->CloseMaxRejection((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->CalcRingParameters((HRichAnalysis*) G__int(libp->para[0]), (HRichHit*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->CalcFakeContribution((HRichAnalysis*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->CalcRingClusters((HRichAnalysis*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (HRichHit*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HRichRingFind*) G__getstructoffset())->RingFindFitMatrix((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HRichRingFind*) G__getstructoffset())->RingFindFitMatrix((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      ((HRichRingFind*) G__getstructoffset())->RingFindHoughTransf((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HRichRingFind*) G__getstructoffset())->RingFindHoughTransf((HRichAnalysis*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichRingFind*) G__getstructoffset())->MatchRings((HRichAnalysis*) G__int(libp->para[0]), (TList*) G__int(libp->para[1])
, (TList*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichRingFind*) G__getstructoffset())->Execute((HRichAnalysis*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichRingFind::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichRingFind::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichRingFind::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichRingFind::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFind*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichRingFind::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichRingFind::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichRingFind::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_214_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichRingFind::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichRingFind G__THRichRingFind;
static int G__RichDict_214_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichRingFind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichRingFind*) (soff+(sizeof(HRichRingFind)*i)))->~G__THRichRingFind();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichRingFind*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichRingFind*) (soff))->~G__THRichRingFind();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichAnalysis */
static int G__RichDict_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichAnalysis* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysis[n];
     } else {
       p = new((void*) gvp) HRichAnalysis[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysis;
     } else {
       p = new((void*) gvp) HRichAnalysis;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichAnalysis* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysis(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichAnalysis(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysis((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichAnalysis((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichAnalysis*) G__getstructoffset())->initParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysis*) G__getstructoffset())->GetPadsXNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysis*) G__getstructoffset())->GetPadsYNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->SetActiveSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysis*) G__getstructoffset())->GetActiveSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysis*) G__getstructoffset())->SetNextSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysis*) G__getstructoffset())->GetPadNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->GetPad((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->GetPad((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysis*) G__getstructoffset())->GetLabelNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->GetLabel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysis*) G__getstructoffset())->GetRingNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->GetRing((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichAnalysis*) G__getstructoffset())->IsOut((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichAnalysis*) G__getstructoffset())->IsOut((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichAnalysis*) G__getstructoffset())->IsOut((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->getCalCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->getHitCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->getHitHdrCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->setCalCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->setHitCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->setHitHdrCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->getAnalysisPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichAnalysis*) G__getstructoffset())->getGeometryPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->setAnalysisPar((HRichAnalysisPar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->setGeometryPar((HRichGeometryPar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichAnalysis::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysis::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichAnalysis::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichAnalysis::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysis*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysis::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichAnalysis::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysis::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_215_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichAnalysis::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichAnalysis G__THRichAnalysis;
static int G__RichDict_215_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichAnalysis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichAnalysis*) (soff+(sizeof(HRichAnalysis)*i)))->~G__THRichAnalysis();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichAnalysis*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichAnalysis*) (soff))->~G__THRichAnalysis();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichCalSim */
static int G__RichDict_220_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCalSim[n];
     } else {
       p = new((void*) gvp) HRichCalSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCalSim;
     } else {
       p = new((void*) gvp) HRichCalSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichCalSim((Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) HRichCalSim((Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichCalSim(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HRichCalSim(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalSim*) G__getstructoffset())->setEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalSim*) G__getstructoffset())->addEnergy((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalSim*) G__getstructoffset())->addHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichCalSim*) G__getstructoffset())->checkTrackId((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalSim*) G__getstructoffset())->addTrackId((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichCalSim*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichCalSim*) G__getstructoffset())->getNofTrackIds());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichCalSim*) G__getstructoffset())->getTrackId((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRichCalSim*) G__getstructoffset())->getEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichCalSim*) G__getstructoffset())->isNewRich());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichCalSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichCalSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichCalSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCalSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_220_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCalSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_220_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichCalSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichCalSim(*(HRichCalSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichCalSim G__THRichCalSim;
static int G__RichDict_220_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichCalSim*) (soff+(sizeof(HRichCalSim)*i)))->~G__THRichCalSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichCalSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichCalSim*) (soff))->~G__THRichCalSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_220_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalSim* dest = (HRichCalSim*) G__getstructoffset();
   *dest = *(HRichCalSim*) libp->para[0].ref;
   const HRichCalSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichHitSim */
static int G__RichDict_221_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHitSim[n];
     } else {
       p = new((void*) gvp) HRichHitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHitSim;
     } else {
       p = new((void*) gvp) HRichHitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichHitSim& obj = ((HRichHitSim*) G__getstructoffset())->operator=(*(HRichHitSim*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichHitSim& obj = ((HRichHitSim*) G__getstructoffset())->operator=(*(HRichHit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichHitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichHitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichHitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_221_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichHitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichHitSim(*(HRichHitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichHitSim G__THRichHitSim;
static int G__RichDict_221_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichHitSim*) (soff+(sizeof(HRichHitSim)*i)))->~G__THRichHitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichHitSim*) (soff))->~G__THRichHitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichRingFindSim */
static int G__RichDict_222_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichRingFindSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichRingFindSim[n];
     } else {
       p = new((void*) gvp) HRichRingFindSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichRingFindSim;
     } else {
       p = new((void*) gvp) HRichRingFindSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichRingFindSim*) G__getstructoffset())->init((HRichAnalysisSim*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichRingFindSim*) G__getstructoffset())->Execute((HRichAnalysisSim*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichRingFindSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichRingFindSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichRingFindSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichRingFindSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichRingFindSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichRingFindSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichRingFindSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichRingFindSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_222_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichRingFindSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichRingFindSim G__THRichRingFindSim;
static int G__RichDict_222_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichRingFindSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichRingFindSim*) (soff+(sizeof(HRichRingFindSim)*i)))->~G__THRichRingFindSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichRingFindSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichRingFindSim*) (soff))->~G__THRichRingFindSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichAnalysisSim */
static int G__RichDict_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichAnalysisSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysisSim[n];
     } else {
       p = new((void*) gvp) HRichAnalysisSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysisSim;
     } else {
       p = new((void*) gvp) HRichAnalysisSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichAnalysisSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysisSim(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichAnalysisSim(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichAnalysisSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichAnalysisSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysisSim*) G__getstructoffset())->getPadsNTrack1((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysisSim*) G__getstructoffset())->getPadsNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysisSim*) G__getstructoffset())->getTrack((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichAnalysisSim*) G__getstructoffset())->getFlag((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichAnalysisSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysisSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichAnalysisSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichAnalysisSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichAnalysisSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysisSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichAnalysisSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichAnalysisSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_223_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichAnalysisSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichAnalysisSim G__THRichAnalysisSim;
static int G__RichDict_223_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichAnalysisSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichAnalysisSim*) (soff+(sizeof(HRichAnalysisSim)*i)))->~G__THRichAnalysisSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichAnalysisSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichAnalysisSim*) (soff))->~G__THRichAnalysisSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichCal */
static int G__RichDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCal[n];
     } else {
       p = new((void*) gvp) HRichCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCal;
     } else {
       p = new((void*) gvp) HRichCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichCal((Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) HRichCal((Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 3
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichCal(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   } else {
     p = new((void*) gvp) HRichCal(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRichCal*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRichCal*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRichCal*) G__getstructoffset())->getRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRichCal*) G__getstructoffset())->getCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRichCal*) G__getstructoffset())->getEventNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRichCal*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRichCal*) G__getstructoffset())->getIsCleanedSingle());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRichCal*) G__getstructoffset())->getIsCleanedHigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRichCal*) G__getstructoffset())->getIsCleanedSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setRow((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setCol((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setIsCleanedSingle((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setIsCleanedHigh((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setIsCleanedSector((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->setEventNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichCal*) G__getstructoffset())->addCharge((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_225_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_225_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichCal(*(HRichCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichCal G__THRichCal;
static int G__RichDict_225_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichCal*) (soff+(sizeof(HRichCal)*i)))->~G__THRichCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichCal*) (soff))->~G__THRichCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_225_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCal* dest = (HRichCal*) G__getstructoffset();
   *dest = *(HRichCal*) libp->para[0].ref;
   const HRichCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichCalParCell */
static int G__RichDict_229_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCalParCell[n];
     } else {
       p = new((void*) gvp) HRichCalParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCalParCell;
     } else {
       p = new((void*) gvp) HRichCalParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichCalParCell((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) HRichCalParCell((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRichCalParCell*) G__getstructoffset())->getOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HRichCalParCell*) G__getstructoffset())->getSigma());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HRichCalParCell*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HRichCalParCell*) G__getstructoffset())->getRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((const HRichCalParCell*) G__getstructoffset())->getCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HRichCalParCell*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->setOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->setSigma((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->setParams((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->setSector((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->setRow((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->setCol((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichCalParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichCalParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichCalParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCalParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_229_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCalParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_229_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichCalParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichCalParCell(*(HRichCalParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichCalParCell G__THRichCalParCell;
static int G__RichDict_229_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichCalParCell*) (soff+(sizeof(HRichCalParCell)*i)))->~G__THRichCalParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichCalParCell*) (soff))->~G__THRichCalParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_229_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalParCell* dest = (HRichCalParCell*) G__getstructoffset();
   *dest = *(HRichCalParCell*) libp->para[0].ref;
   const HRichCalParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichCalPar */
static int G__RichDict_230_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichCalPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRichCalPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichCalPar[n];
       } else {
         p = new((void*) gvp) HRichCalPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichCalPar;
       } else {
         p = new((void*) gvp) HRichCalPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichCalPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalPar*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichCalPar*) G__getstructoffset())->getSlot(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichCalPar*) G__getstructoffset())->getObject(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichCalPar*) G__getstructoffset())->setCell((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichCalPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichCalPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichCalPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichCalPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCalPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichCalPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_230_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichCalPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_230_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichCalPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichCalPar(*(HRichCalPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichCalPar G__THRichCalPar;
static int G__RichDict_230_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichCalPar*) (soff+(sizeof(HRichCalPar)*i)))->~G__THRichCalPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichCalPar*) (soff))->~G__THRichCalPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_230_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichCalPar* dest = (HRichCalPar*) G__getstructoffset();
   *dest = *(HRichCalPar*) libp->para[0].ref;
   const HRichCalPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichContFact */
static int G__RichDict_236_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichContFact[n];
     } else {
       p = new((void*) gvp) HRichContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichContFact;
     } else {
       p = new((void*) gvp) HRichContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_236_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_236_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichContFact(*(HRichContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichContFact G__THRichContFact;
static int G__RichDict_236_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichContFact*) (soff+(sizeof(HRichContFact)*i)))->~G__THRichContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichContFact*) (soff))->~G__THRichContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_236_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichContFact* dest = (HRichContFact*) G__getstructoffset();
   *dest = *(HRichContFact*) libp->para[0].ref;
   const HRichContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichDetector */
static int G__RichDict_238_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDetector[n];
     } else {
       p = new((void*) gvp) HRichDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDetector;
     } else {
       p = new((void*) gvp) HRichDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HRichDetector*) G__getstructoffset())->buildLinearCat((const Text_t*) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HRichDetector*) G__getstructoffset())->buildLinearCat((const Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichDetector*) G__getstructoffset())->buildMatrixCat((const Text_t*) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 85, (long) ((HRichDetector*) G__getstructoffset())->buildSimMatrixCat((const Text_t*) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Int_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 85, (long) ((HRichDetector*) G__getstructoffset())->buildSimMatrixCat((const Text_t*) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HRichDetector*) G__getstructoffset())->buildTask((const Text_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HRichDetector*) G__getstructoffset())->buildTask((const Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_238_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_238_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichDetector(*(HRichDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichDetector G__THRichDetector;
static int G__RichDict_238_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichDetector*) (soff+(sizeof(HRichDetector)*i)))->~G__THRichDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichDetector*) (soff))->~G__THRichDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_238_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDetector* dest = (HRichDetector*) G__getstructoffset();
   *dest = *(HRichDetector*) libp->para[0].ref;
   const HRichDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichDigitisationPar */
static int G__RichDict_239_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDigitisationPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitisationPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichDigitisationPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitisationPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichDigitisationPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitisationPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRichDigitisationPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichDigitisationPar[n];
       } else {
         p = new((void*) gvp) HRichDigitisationPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichDigitisationPar;
       } else {
         p = new((void*) gvp) HRichDigitisationPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDigitisationPar*) G__getstructoffset())->setFileName((Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getElectronsNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getChargePerChannel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getSigmaValue());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getIncreaseNoise());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichDigitisationPar*) G__getstructoffset())->getQEBinsNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRichDigitisationPar*) G__getstructoffset())->getPhotonLenArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRichDigitisationPar*) G__getstructoffset())->getPhotonEffArray());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRichDigitisationPar*) G__getstructoffset())->getCorrectionParams((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getQupper());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getFactor1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getFactor2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getFactor1Sig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getFactor2Sig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getParameter1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getParameter2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDigitisationPar*) G__getstructoffset())->getChargeScaling());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HRichDigitisationPar*) G__getstructoffset())->getExpSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichDigitisationPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDigitisationPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichDigitisationPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichDigitisationPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDigitisationPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDigitisationPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDigitisationPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDigitisationPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_239_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDigitisationPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichDigitisationPar G__THRichDigitisationPar;
static int G__RichDict_239_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichDigitisationPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichDigitisationPar*) (soff+(sizeof(HRichDigitisationPar)*i)))->~G__THRichDigitisationPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichDigitisationPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichDigitisationPar*) (soff))->~G__THRichDigitisationPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPad */
static int G__RichDict_535_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPad* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPad[n];
     } else {
       p = new((void*) gvp) HRichPad[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPad;
     } else {
       p = new((void*) gvp) HRichPad;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPad* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichPad(*(HRichPad*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HRichPad(*(HRichPad*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichPad& obj = ((HRichPad*) G__getstructoffset())->operator=(*(HRichPad*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->calcPadCenter();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichPad*) G__getstructoffset())->isOut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichPad*) G__getstructoffset())->isOutX((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPad*) G__getstructoffset())->addCorner((HRichPadCorner*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichPad*) G__getstructoffset())->getCorner((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPad*) G__getstructoffset())->getCornersNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getXmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getYmin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getXmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getYmax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPad*) G__getstructoffset())->getPadX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPad*) G__getstructoffset())->getPadY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPad*) G__getstructoffset())->getPadNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->getXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->getPadXY((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPad*) G__getstructoffset())->getPadFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichPad*) G__getstructoffset())->getPadActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getXlab((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getYlab((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getZlab((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getPhi((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->getXYZlab((const Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]), (Float_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->getAngles((const Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPad*) G__getstructoffset())->getAmplitFraction());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPad*) G__getstructoffset())->setCorner((HRichPadCorner*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setXmin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setYmin((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setXmax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setYmax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setX((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setY((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setPadX((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setPadY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setPadNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setXY((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setPadXY((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setPadFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setPadActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setAmplitFraction((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setXlab((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setYlab((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setZlab((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setXYZlab((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setTheta((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->setPhi((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->CalcNrtoXY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->CalcXYtoNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPad::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPad::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPad::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPad::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPad*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_63(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPad::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_64(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPad::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_65(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPad::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_535_0_66(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPad::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPad G__THRichPad;
static int G__RichDict_535_0_67(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPad*) (soff+(sizeof(HRichPad)*i)))->~G__THRichPad();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPad*) (soff))->~G__THRichPad();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichTrack */
static int G__RichDict_536_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichTrack[n];
     } else {
       p = new((void*) gvp) HRichTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichTrack;
     } else {
       p = new((void*) gvp) HRichTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichTrack*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichTrack*) G__getstructoffset())->getEventNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichTrack*) G__getstructoffset())->getFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichTrack*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichTrack*) G__getstructoffset())->setTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichTrack*) G__getstructoffset())->setEventNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichTrack*) G__getstructoffset())->setFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichTrack*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_536_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_536_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichTrack(*(HRichTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichTrack G__THRichTrack;
static int G__RichDict_536_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichTrack*) (soff+(sizeof(HRichTrack)*i)))->~G__THRichTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichTrack*) (soff))->~G__THRichTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_536_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichTrack* dest = (HRichTrack*) G__getstructoffset();
   *dest = *(HRichTrack*) libp->para[0].ref;
   const HRichTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichDigitizer */
static int G__RichDict_538_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitizer[n];
     } else {
       p = new((void*) gvp) HRichDigitizer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitizer;
     } else {
       p = new((void*) gvp) HRichDigitizer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HRichDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) HRichDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichDigitizer::getDigitizer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichDigitizer*) G__getstructoffset())->getDeltaElectronUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HRichDigitizer*) G__getstructoffset())->setDeltaElectronMinMomCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_538_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichDigitizer G__THRichDigitizer;
static int G__RichDict_538_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichDigitizer*) (soff+(sizeof(HRichDigitizer)*i)))->~G__THRichDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichDigitizer*) (soff))->~G__THRichDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichDirClus */
static int G__RichDict_559_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDirClus* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDirClus[n];
     } else {
       p = new((void*) gvp) HRichDirClus[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDirClus;
     } else {
       p = new((void*) gvp) HRichDirClus;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDirClus));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichDirClus*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichDirClus*) G__getstructoffset())->getNrPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDirClus*) G__getstructoffset())->getXDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDirClus*) G__getstructoffset())->getYDim());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDirClus*) G__getstructoffset())->getTotalCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDirClus*) G__getstructoffset())->getPhiDiff());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDirClus*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDirClus*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichDirClus*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setXYDim((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setTotalCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setNrPad((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setPhiDiff((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setTheta((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->setY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichDirClus::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDirClus::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichDirClus::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichDirClus::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDirClus*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDirClus::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDirClus::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDirClus::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_559_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDirClus::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_559_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichDirClus* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichDirClus(*(HRichDirClus*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDirClus));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichDirClus G__THRichDirClus;
static int G__RichDict_559_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichDirClus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichDirClus*) (soff+(sizeof(HRichDirClus)*i)))->~G__THRichDirClus();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichDirClus*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichDirClus*) (soff))->~G__THRichDirClus();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_559_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDirClus* dest = (HRichDirClus*) G__getstructoffset();
   *dest = *(HRichDirClus*) libp->para[0].ref;
   const HRichDirClus& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichFrameCorner */
static int G__RichDict_560_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichFrameCorner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichFrameCorner[n];
     } else {
       p = new((void*) gvp) HRichFrameCorner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichFrameCorner;
     } else {
       p = new((void*) gvp) HRichFrameCorner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichFrameCorner*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichFrameCorner*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameCorner*) G__getstructoffset())->getXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrameCorner*) G__getstructoffset())->getCornerNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrameCorner*) G__getstructoffset())->getFlagArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameCorner*) G__getstructoffset())->setX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameCorner*) G__getstructoffset())->setY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameCorner*) G__getstructoffset())->setXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameCorner*) G__getstructoffset())->setCornerNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameCorner*) G__getstructoffset())->setFlagArea((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichFrameCorner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrameCorner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichFrameCorner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichFrameCorner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameCorner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrameCorner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichFrameCorner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrameCorner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_560_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichFrameCorner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_560_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichFrameCorner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichFrameCorner(*(HRichFrameCorner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichFrameCorner G__THRichFrameCorner;
static int G__RichDict_560_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichFrameCorner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichFrameCorner*) (soff+(sizeof(HRichFrameCorner)*i)))->~G__THRichFrameCorner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichFrameCorner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichFrameCorner*) (soff))->~G__THRichFrameCorner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_560_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichFrameCorner* dest = (HRichFrameCorner*) G__getstructoffset();
   *dest = *(HRichFrameCorner*) libp->para[0].ref;
   const HRichFrameCorner& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichFrame */
static int G__RichDict_561_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichFrame[n];
     } else {
       p = new((void*) gvp) HRichFrame[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichFrame;
     } else {
       p = new((void*) gvp) HRichFrame;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrame*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrame*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichFrame*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichFrame*) G__getstructoffset())->calculateFlagArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrame*) G__getstructoffset())->isOut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrame*) G__getstructoffset())->addCorner((HRichFrameCorner*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichFrame*) G__getstructoffset())->getCorner((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrame*) G__getstructoffset())->getCornerNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrame*) G__getstructoffset())->setCorner((HRichFrameCorner*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichFrame::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrame::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichFrame::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichFrame::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrame*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrame::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichFrame::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrame::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_561_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichFrame::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichFrame G__THRichFrame;
static int G__RichDict_561_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichFrame*) (soff+(sizeof(HRichFrame)*i)))->~G__THRichFrame();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichFrame*) (soff))->~G__THRichFrame();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichFrameTab */
static int G__RichDict_563_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichFrameTab* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichFrameTab[n];
     } else {
       p = new((void*) gvp) HRichFrameTab[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichFrameTab;
     } else {
       p = new((void*) gvp) HRichFrameTab;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichFrameTab*) G__getstructoffset())->init());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameTab*) G__getstructoffset())->createFrames((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameTab*) G__getstructoffset())->deleteFrames();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrameTab*) G__getstructoffset())->isOut((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichFrameTab*) G__getstructoffset())->getNFrames());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichFrameTab*) G__getstructoffset())->getFrame((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichFrameTab::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrameTab::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichFrameTab::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichFrameTab::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichFrameTab*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrameTab::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichFrameTab::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichFrameTab::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_563_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichFrameTab::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_563_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichFrameTab* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichFrameTab(*(HRichFrameTab*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichFrameTab G__THRichFrameTab;
static int G__RichDict_563_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichFrameTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichFrameTab*) (soff+(sizeof(HRichFrameTab)*i)))->~G__THRichFrameTab();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichFrameTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichFrameTab*) (soff))->~G__THRichFrameTab();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_563_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichFrameTab* dest = (HRichFrameTab*) G__getstructoffset();
   *dest = *(HRichFrameTab*) libp->para[0].ref;
   const HRichFrameTab& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPadCorner */
static int G__RichDict_564_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadCorner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadCorner[n];
     } else {
       p = new((void*) gvp) HRichPadCorner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadCorner;
     } else {
       p = new((void*) gvp) HRichPadCorner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadCorner* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichPadCorner(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) HRichPadCorner(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadCorner* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichPadCorner(*(HRichPadCorner*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HRichPadCorner(*(HRichPadCorner*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichPadCorner& obj = ((HRichPadCorner*) G__getstructoffset())->operator=(*(HRichPadCorner*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPadCorner*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichPadCorner*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadCorner*) G__getstructoffset())->getCornerNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadCorner*) G__getstructoffset())->getAreaFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadCorner*) G__getstructoffset())->getXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadCorner*) G__getstructoffset())->setX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadCorner*) G__getstructoffset())->setY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadCorner*) G__getstructoffset())->setXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadCorner*) G__getstructoffset())->setCornerNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadCorner*) G__getstructoffset())->setAreaFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPadCorner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadCorner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPadCorner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPadCorner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadCorner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadCorner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadCorner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadCorner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_564_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadCorner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPadCorner G__THRichPadCorner;
static int G__RichDict_564_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPadCorner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPadCorner*) (soff+(sizeof(HRichPadCorner)*i)))->~G__THRichPadCorner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPadCorner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPadCorner*) (soff))->~G__THRichPadCorner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPadTab */
static int G__RichDict_565_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadTab* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadTab[n];
     } else {
       p = new((void*) gvp) HRichPadTab[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadTab;
     } else {
       p = new((void*) gvp) HRichPadTab;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadTab));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->incActivePadsNr();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->printParamsFull();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichPadTab*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichPadTab*) G__getstructoffset())->isOut((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadTab*) G__getstructoffset())->createPads());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichPadTab*) G__getstructoffset())->getPad((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichPadTab*) G__getstructoffset())->getPad((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichPadTab*) G__getstructoffset())->getPad((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadTab*) G__getstructoffset())->getActivePadsNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->setPad((HRichPad*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->setPad((HRichPad*) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPadTab::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadTab::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPadTab::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPadTab::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadTab*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadTab::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadTab::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadTab::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_565_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadTab::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_565_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichPadTab* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichPadTab(*(HRichPadTab*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadTab));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPadTab G__THRichPadTab;
static int G__RichDict_565_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPadTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPadTab*) (soff+(sizeof(HRichPadTab)*i)))->~G__THRichPadTab();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPadTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPadTab*) (soff))->~G__THRichPadTab();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_565_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadTab* dest = (HRichPadTab*) G__getstructoffset();
   *dest = *(HRichPadTab*) libp->para[0].ref;
   const HRichPadTab& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichWire */
static int G__RichDict_566_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichWire* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichWire[n];
     } else {
       p = new((void*) gvp) HRichWire[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichWire;
     } else {
       p = new((void*) gvp) HRichWire;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichWire));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichWire*) G__getstructoffset())->getWireX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichWire*) G__getstructoffset())->getWireNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWire*) G__getstructoffset())->setWireX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWire*) G__getstructoffset())->setWireNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichWire::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWire::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichWire::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichWire::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWire*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWire::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichWire::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWire::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_566_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichWire::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_566_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichWire* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichWire(*(HRichWire*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichWire));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichWire G__THRichWire;
static int G__RichDict_566_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichWire*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichWire*) (soff+(sizeof(HRichWire)*i)))->~G__THRichWire();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichWire*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichWire*) (soff))->~G__THRichWire();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_566_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichWire* dest = (HRichWire*) G__getstructoffset();
   *dest = *(HRichWire*) libp->para[0].ref;
   const HRichWire& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichWireTab */
static int G__RichDict_567_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichWireTab* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichWireTab[n];
     } else {
       p = new((void*) gvp) HRichWireTab[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichWireTab;
     } else {
       p = new((void*) gvp) HRichWireTab;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichWireTab));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireTab*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireTab*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireTab*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichWireTab*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireTab*) G__getstructoffset())->addWire((HRichWire*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichWireTab*) G__getstructoffset())->getNrWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichWireTab*) G__getstructoffset())->getDistWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRichWireTab*) G__getstructoffset())->getWire((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichWireTab*) G__getstructoffset())->setWire((HRichWire*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireTab*) G__getstructoffset())->setNrWires((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireTab*) G__getstructoffset())->setDistWire((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichWireTab::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWireTab::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichWireTab::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichWireTab::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireTab*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWireTab::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichWireTab::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWireTab::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_567_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichWireTab::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichWireTab G__THRichWireTab;
static int G__RichDict_567_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichWireTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichWireTab*) (soff+(sizeof(HRichWireTab)*i)))->~G__THRichWireTab();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichWireTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichWireTab*) (soff))->~G__THRichWireTab();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichHitCandidate */
static int G__RichDict_568_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHitCandidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHitCandidate[n];
     } else {
       p = new((void*) gvp) HRichHitCandidate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichHitCandidate;
     } else {
       p = new((void*) gvp) HRichHitCandidate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHitCandidate* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 5
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichHitCandidate(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]));
   } else {
     p = new((void*) gvp) HRichHitCandidate(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]), (const Int_t) G__int(libp->para[3])
, (const Int_t) G__int(libp->para[4]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->Reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitCandidate*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitCandidate*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitCandidate*) G__getstructoffset())->getA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHitCandidate*) G__getstructoffset())->getXMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichHitCandidate*) G__getstructoffset())->getYMean());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitCandidate*) G__getstructoffset())->getPadLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitCandidate*) G__getstructoffset())->getMaxLabel());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichHitCandidate*) G__getstructoffset())->getNoEqualNeighbors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setX((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setY((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setA((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setXMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setYMean((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setPadLabel((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setMaxLabel((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->setNoEqualNeighbors((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichHitCandidate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitCandidate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichHitCandidate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichHitCandidate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichHitCandidate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitCandidate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHitCandidate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichHitCandidate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_568_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichHitCandidate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_568_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichHitCandidate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichHitCandidate(*(HRichHitCandidate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichHitCandidate G__THRichHitCandidate;
static int G__RichDict_568_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichHitCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichHitCandidate*) (soff+(sizeof(HRichHitCandidate)*i)))->~G__THRichHitCandidate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichHitCandidate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichHitCandidate*) (soff))->~G__THRichHitCandidate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_568_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichHitCandidate* dest = (HRichHitCandidate*) G__getstructoffset();
   *dest = *(HRichHitCandidate*) libp->para[0].ref;
   const HRichHitCandidate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichMappingPar */
static int G__RichDict_569_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichMappingPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichMappingPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichMappingPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichMappingPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichMappingPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichMappingPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRichMappingPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichMappingPar[n];
       } else {
         p = new((void*) gvp) HRichMappingPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichMappingPar;
       } else {
         p = new((void*) gvp) HRichMappingPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichMappingPar*) G__getstructoffset())->setAddress((UInt_t) G__int(libp->para[0]), (UInt_t) G__int(libp->para[1])
, (UInt_t) G__int(libp->para[2]), (UInt_t) G__int(libp->para[3])
, (UInt_t) G__int(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichMappingPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichMappingPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichMappingPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichMappingPar*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichMappingPar*) G__getstructoffset())->isValidSWAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichMappingPar*) G__getstructoffset())->isValidHWAddress((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichMappingPar*) G__getstructoffset())->getHWAddress((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(UInt_t*) G__UIntref(&libp->para[2]), *(UInt_t*) G__UIntref(&libp->para[3])
, *(UInt_t*) G__UIntref(&libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichMappingPar*) G__getstructoffset())->getSWAddress((Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichMappingPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichMappingPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichMappingPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichMappingPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichMappingPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichMappingPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichMappingPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichMappingPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_569_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichMappingPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_569_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichMappingPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichMappingPar(*(HRichMappingPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichMappingPar G__THRichMappingPar;
static int G__RichDict_569_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichMappingPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichMappingPar*) (soff+(sizeof(HRichMappingPar)*i)))->~G__THRichMappingPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichMappingPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichMappingPar*) (soff))->~G__THRichMappingPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_569_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichMappingPar* dest = (HRichMappingPar*) G__getstructoffset();
   *dest = *(HRichMappingPar*) libp->para[0].ref;
   const HRichMappingPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPadFilter */
static int G__RichDict_587_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadFilter[n];
     } else {
       p = new((void*) gvp) HRichPadFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadFilter;
     } else {
       p = new((void*) gvp) HRichPadFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPadFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPadFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPadFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_587_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_587_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichPadFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichPadFilter(*(HRichPadFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPadFilter G__THRichPadFilter;
static int G__RichDict_587_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPadFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPadFilter*) (soff+(sizeof(HRichPadFilter)*i)))->~G__THRichPadFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPadFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPadFilter*) (soff))->~G__THRichPadFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_587_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadFilter* dest = (HRichPadFilter*) G__getstructoffset();
   *dest = *(HRichPadFilter*) libp->para[0].ref;
   const HRichPadFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichPadGraph */
static int G__RichDict_588_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadGraph* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadGraph[n];
     } else {
       p = new((void*) gvp) HRichPadGraph[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichPadGraph;
     } else {
       p = new((void*) gvp) HRichPadGraph;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichPadGraph* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichPadGraph(*(HRichPadGraph*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HRichPadGraph(*(HRichPadGraph*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HRichPadGraph& obj = ((HRichPadGraph*) G__getstructoffset())->operator=(*(HRichPadGraph*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadGraph*) G__getstructoffset())->InitGraph((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadGraph*) G__getstructoffset())->AddNode((HRichPadGraph*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichPadGraph*) G__getstructoffset())->MarkNodes((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichPadGraph::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadGraph::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichPadGraph::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichPadGraph::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichPadGraph*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadGraph::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadGraph::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichPadGraph::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_588_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichPadGraph::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichPadGraph G__THRichPadGraph;
static int G__RichDict_588_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichPadGraph*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichPadGraph*) (soff+(sizeof(HRichPadGraph)*i)))->~G__THRichPadGraph();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichPadGraph*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichPadGraph*) (soff))->~G__THRichPadGraph();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichParAsciiFileIo */
static int G__RichDict_601_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRichParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_601_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_601_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichParAsciiFileIo(*(HRichParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichParAsciiFileIo G__THRichParAsciiFileIo;
static int G__RichDict_601_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichParAsciiFileIo*) (soff+(sizeof(HRichParAsciiFileIo)*i)))->~G__THRichParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichParAsciiFileIo*) (soff))->~G__THRichParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_601_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichParAsciiFileIo* dest = (HRichParAsciiFileIo*) G__getstructoffset();
   *dest = *(HRichParAsciiFileIo*) libp->para[0].ref;
   const HRichParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichParRootFileIo */
static int G__RichDict_636_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HRichParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_636_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_636_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichParRootFileIo(*(HRichParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichParRootFileIo G__THRichParRootFileIo;
static int G__RichDict_636_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichParRootFileIo*) (soff+(sizeof(HRichParRootFileIo)*i)))->~G__THRichParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichParRootFileIo*) (soff))->~G__THRichParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_636_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichParRootFileIo* dest = (HRichParRootFileIo*) G__getstructoffset();
   *dest = *(HRichParRootFileIo*) libp->para[0].ref;
   const HRichParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichTaskSet */
static int G__RichDict_641_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichTaskSet[n];
     } else {
       p = new((void*) gvp) HRichTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichTaskSet;
     } else {
       p = new((void*) gvp) HRichTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRichTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HRichTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HRichTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HRichTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_641_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichTaskSet G__THRichTaskSet;
static int G__RichDict_641_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichTaskSet*) (soff+(sizeof(HRichTaskSet)*i)))->~G__THRichTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichTaskSet*) (soff))->~G__THRichTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichThresholdPar */
static int G__RichDict_642_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichThresholdPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichThresholdPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRichThresholdPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichThresholdPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichThresholdPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichThresholdPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRichThresholdPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichThresholdPar[n];
       } else {
         p = new((void*) gvp) HRichThresholdPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRichThresholdPar;
       } else {
         p = new((void*) gvp) HRichThresholdPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRichThresholdPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichThresholdPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichThresholdPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichThresholdPar*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichThresholdPar*) G__getstructoffset())->getCalParVers());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichThresholdPar*) G__getstructoffset())->getSigmaMultiplier((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichThresholdPar*) G__getstructoffset())->setCalParVers((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichThresholdPar*) G__getstructoffset())->setSigmaMultiplier((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichThresholdPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichThresholdPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichThresholdPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichThresholdPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichThresholdPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichThresholdPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichThresholdPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichThresholdPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_642_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichThresholdPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_642_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichThresholdPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichThresholdPar(*(HRichThresholdPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichThresholdPar G__THRichThresholdPar;
static int G__RichDict_642_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichThresholdPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichThresholdPar*) (soff+(sizeof(HRichThresholdPar)*i)))->~G__THRichThresholdPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichThresholdPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichThresholdPar*) (soff))->~G__THRichThresholdPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_642_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichThresholdPar* dest = (HRichThresholdPar*) G__getstructoffset();
   *dest = *(HRichThresholdPar*) libp->para[0].ref;
   const HRichThresholdPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichUnpacker */
static int G__RichDict_646_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichUnpacker((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRichUnpacker((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichUnpacker((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRichUnpacker((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_646_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_646_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichUnpacker(*(HRichUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichUnpacker G__THRichUnpacker;
static int G__RichDict_646_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichUnpacker*) (soff+(sizeof(HRichUnpacker)*i)))->~G__THRichUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichUnpacker*) (soff))->~G__THRichUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_646_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichUnpacker* dest = (HRichUnpacker*) G__getstructoffset();
   *dest = *(HRichUnpacker*) libp->para[0].ref;
   const HRichUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichWireSignal */
static int G__RichDict_649_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichWireSignal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichWireSignal[n];
     } else {
       p = new((void*) gvp) HRichWireSignal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichWireSignal;
     } else {
       p = new((void*) gvp) HRichWireSignal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichWireSignal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichWireSignal((const Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) HRichWireSignal((const Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichWireSignal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 6
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRichWireSignal(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5]));
   } else {
     p = new((void*) gvp) HRichWireSignal(
(const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3])
, (const Float_t) G__double(libp->para[4]), (const Float_t) G__double(libp->para[5]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichWireSignal*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichWireSignal*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichWireSignal*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRichWireSignal*) G__getstructoffset())->getEnergy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->getXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->setX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->setY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->setXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->setEne((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichWireSignal*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRichWireSignal*) G__getstructoffset())->getWireNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->setWireNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichWireSignal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWireSignal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichWireSignal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichWireSignal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichWireSignal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWireSignal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichWireSignal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichWireSignal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_649_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichWireSignal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_649_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichWireSignal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichWireSignal(*(HRichWireSignal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichWireSignal G__THRichWireSignal;
static int G__RichDict_649_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichWireSignal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichWireSignal*) (soff+(sizeof(HRichWireSignal)*i)))->~G__THRichWireSignal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichWireSignal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichWireSignal*) (soff))->~G__THRichWireSignal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_649_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichWireSignal* dest = (HRichWireSignal*) G__getstructoffset();
   *dest = *(HRichWireSignal*) libp->para[0].ref;
   const HRichWireSignal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700TaskSet */
static int G__RichDict_650_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700TaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700TaskSet[n];
     } else {
       p = new((void*) gvp) HRich700TaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700TaskSet;
     } else {
       p = new((void*) gvp) HRich700TaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700TaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HRich700TaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HRich700TaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HRich700TaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HRich700TaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HRich700TaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700TaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700TaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700TaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700TaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700TaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700TaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700TaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700TaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_650_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700TaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700TaskSet G__THRich700TaskSet;
static int G__RichDict_650_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700TaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700TaskSet*) (soff+(sizeof(HRich700TaskSet)*i)))->~G__THRich700TaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700TaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700TaskSet*) (soff))->~G__THRich700TaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700DigiMapPar */
static int G__RichDict_714_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700DigiMapPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700DigiMapPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRich700DigiMapPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700DigiMapPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRich700DigiMapPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700DigiMapPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRich700DigiMapPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700DigiMapPar[n];
       } else {
         p = new((void*) gvp) HRich700DigiMapPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700DigiMapPar;
       } else {
         p = new((void*) gvp) HRich700DigiMapPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700DigiMapPar*) G__getstructoffset())->getLocation((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Int_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<Double_t,Double_t>* pobj;
         pair<Double_t,Double_t> xobj = ((HRich700DigiMapPar*) G__getstructoffset())->getXY((Int_t*) G__int(libp->para[0]));
         pobj = new pair<Double_t,Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         pair<Double_t,Double_t>* pobj;
         pair<Double_t,Double_t> xobj = ((HRich700DigiMapPar*) G__getstructoffset())->getPmtCenter((Int_t) G__int(libp->para[0]));
         pobj = new pair<Double_t,Double_t>(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<Double_t,Double_t> >* pobj;
         vector<pair<Double_t,Double_t> > xobj = ((HRich700DigiMapPar*) G__getstructoffset())->getPmtCenters();
         pobj = new vector<pair<Double_t,Double_t> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRich700DigiMapPar*) G__getstructoffset())->getPmtSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRich700DigiMapPar*) G__getstructoffset())->getPmtGap());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getNPmts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getNPixelInRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<Int_t,Int_t> >* pobj;
         vector<pair<Int_t,Int_t> > xobj = ((HRich700DigiMapPar*) G__getstructoffset())->getDirectNeighbourPixels((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new vector<pair<Int_t,Int_t> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<Int_t,Int_t> >* pobj;
         vector<pair<Int_t,Int_t> > xobj = ((HRich700DigiMapPar*) G__getstructoffset())->getDiagonalNeighbourPixels((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         pobj = new vector<pair<Int_t,Int_t> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         vector<pair<Int_t,Int_t> >* pobj;
         vector<pair<Int_t,Int_t> > xobj = ((HRich700DigiMapPar*) G__getstructoffset())->getNoisePixels((UInt_t) G__int(libp->para[0]));
         pobj = new vector<pair<Int_t,Int_t> >(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getPMTId((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getPMTId((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getPMTData((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getInterpolatedSectorThetaPhi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getInterpolatedThetaPhiPMT((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getSector((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getSectorPixels((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getSectorPMTInd((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getSectorPMTId((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getSectorPhiThetaDegPixels((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getSectorPhiThetaDegPMTInd((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]), *(Float_t*) G__Floatref(&libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiMapPar*) G__getstructoffset())->getSectorPhiThetaDegPMTId((Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700DigiMapPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700DigiMapPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700DigiMapPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700DigiMapPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700DigiMapPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700DigiMapPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700DigiMapPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700DigiMapPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700DigiMapPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_714_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700DigiMapPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_714_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRich700DigiMapPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRich700DigiMapPar(*(HRich700DigiMapPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700DigiMapPar G__THRich700DigiMapPar;
static int G__RichDict_714_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700DigiMapPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700DigiMapPar*) (soff+(sizeof(HRich700DigiMapPar)*i)))->~G__THRich700DigiMapPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700DigiMapPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700DigiMapPar*) (soff))->~G__THRich700DigiMapPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_714_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700DigiMapPar* dest = (HRich700DigiMapPar*) G__getstructoffset();
   *dest = *(HRich700DigiMapPar*) libp->para[0].ref;
   const HRich700DigiMapPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700EventDisplay */
static int G__RichDict_715_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700EventDisplay* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700EventDisplay[n];
     } else {
       p = new((void*) gvp) HRich700EventDisplay[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700EventDisplay;
     } else {
       p = new((void*) gvp) HRich700EventDisplay;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700EventDisplay*) G__getstructoffset())->setOutputDir(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700EventDisplay*) G__getstructoffset())->setNofEventsToDraw((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700EventDisplay::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700EventDisplay::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700EventDisplay::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700EventDisplay::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700EventDisplay*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700EventDisplay::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700EventDisplay::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700EventDisplay::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_715_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700EventDisplay::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700EventDisplay G__THRich700EventDisplay;
static int G__RichDict_715_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700EventDisplay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700EventDisplay*) (soff+(sizeof(HRich700EventDisplay)*i)))->~G__THRich700EventDisplay();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700EventDisplay*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700EventDisplay*) (soff))->~G__THRich700EventDisplay();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRichDrawHist */
static int G__RichDict_753_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichDrawHist::SetDefaultDrawStyle();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      HRichDrawHist::DrawH1(
(TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      HRichDrawHist::DrawH1(
(TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      HRichDrawHist::DrawH1(
(TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      HRichDrawHist::DrawH1((TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HRichDrawHist::DrawH1((TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HRichDrawHist::DrawH1((TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref);
      G__setnull(result7);
      break;
   case 3:
      HRichDrawHist::DrawH1((TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HRichDrawHist::DrawH1((TH1*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HRichDrawHist::DrawH1((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HRichDrawHist::DrawH2((TH2*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, *(string*) libp->para[4].ref);
      G__setnull(result7);
      break;
   case 4:
      HRichDrawHist::DrawH2((TH2*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HRichDrawHist::DrawH2((TH2*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HRichDrawHist::DrawH2((TH2*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HRichDrawHist::DrawH2((TH2*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 10:
      HRichDrawHist::DrawH1(
*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]), *(string*) libp->para[9].ref);
      G__setnull(result7);
      break;
   case 9:
      HRichDrawHist::DrawH1(
*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      HRichDrawHist::DrawH1(
*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      HRichDrawHist::DrawH1(
*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      HRichDrawHist::DrawH1(*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HRichDrawHist::DrawH1(*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HRichDrawHist::DrawH1(*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HRichDrawHist::DrawH1(*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HRichDrawHist::DrawH1(*(vector<TH1*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      HRichDrawHist::DrawGraph(
(TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7])
, (Int_t) G__int(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      HRichDrawHist::DrawGraph(
(TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]), (Int_t) G__int(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      HRichDrawHist::DrawGraph(
(TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5])
, (Int_t) G__int(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      HRichDrawHist::DrawGraph((TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]), (Int_t) G__int(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HRichDrawHist::DrawGraph((TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HRichDrawHist::DrawGraph((TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), *(string*) libp->para[3].ref);
      G__setnull(result7);
      break;
   case 3:
      HRichDrawHist::DrawGraph((TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HRichDrawHist::DrawGraph((TGraph*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HRichDrawHist::DrawGraph((TGraph*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 9:
      HRichDrawHist::DrawGraph(
*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
      G__setnull(result7);
      break;
   case 8:
      HRichDrawHist::DrawGraph(
*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      HRichDrawHist::DrawGraph(
*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      HRichDrawHist::DrawGraph(*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      HRichDrawHist::DrawGraph(*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, (Bool_t) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HRichDrawHist::DrawGraph(*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HRichDrawHist::DrawGraph(*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref
, (HistScale) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HRichDrawHist::DrawGraph(*(vector<TGraph*>*) libp->para[0].ref, *(vector<string>*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HRichDrawHist::DrawGraph2D((TGraph2D*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3])
, *(string*) libp->para[4].ref);
      G__setnull(result7);
      break;
   case 4:
      HRichDrawHist::DrawGraph2D((TGraph2D*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]), (HistScale) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HRichDrawHist::DrawGraph2D((TGraph2D*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1])
, (HistScale) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HRichDrawHist::DrawGraph2D((TGraph2D*) G__int(libp->para[0]), (HistScale) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HRichDrawHist::DrawGraph2D((TGraph2D*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichDrawHist::DrawTextOnPad(*(string*) libp->para[0].ref, (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      HRichDrawHist::DrawH1andFitGauss((TH1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      HRichDrawHist::DrawH1andFitGauss((TH1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      HRichDrawHist::DrawH1andFitGauss((TH1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      HRichDrawHist::DrawH1andFitGauss((TH1*) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      HRichDrawHist::DrawH1andFitGauss((TH1*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRichDrawHist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDrawHist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRichDrawHist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRichDrawHist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRichDrawHist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDrawHist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDrawHist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRichDrawHist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_753_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRichDrawHist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__RichDict_753_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDrawHist *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDrawHist[n];
     } else {
       p = new((void*) gvp) HRichDrawHist[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRichDrawHist;
     } else {
       p = new((void*) gvp) HRichDrawHist;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_753_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRichDrawHist* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRichDrawHist(*(HRichDrawHist*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRichDrawHist G__THRichDrawHist;
static int G__RichDict_753_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRichDrawHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRichDrawHist*) (soff+(sizeof(HRichDrawHist)*i)))->~G__THRichDrawHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRichDrawHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRichDrawHist*) (soff))->~G__THRichDrawHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_753_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRichDrawHist* dest = (HRichDrawHist*) G__getstructoffset();
   *dest = *(HRichDrawHist*) libp->para[0].ref;
   const HRichDrawHist& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700HistManager */
static int G__RichDict_777_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700HistManager* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700HistManager[n];
     } else {
       p = new((void*) gvp) HRich700HistManager[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700HistManager;
     } else {
       p = new((void*) gvp) HRich700HistManager;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->Add(*(string*) libp->para[0].ref, (TNamed*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRich700HistManager*) G__getstructoffset())->H1(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRich700HistManager*) G__getstructoffset())->H2(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRich700HistManager*) G__getstructoffset())->H3(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRich700HistManager*) G__getstructoffset())->G1(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRich700HistManager*) G__getstructoffset())->G2(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRich700HistManager*) G__getstructoffset())->P1(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((const HRich700HistManager*) G__getstructoffset())->P2(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((const HRich700HistManager*) G__getstructoffset())->Exists(*(string*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->WriteToFile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->ReadFromFile((TFile*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->ShrinkEmptyBinsH1(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->ShrinkEmptyBinsH2(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->Scale(*(string*) libp->para[0].ref, (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->NormalizeToIntegral(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->Rebin(*(string*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const string* pobj;
         const string xobj = ((const HRich700HistManager*) G__getstructoffset())->ToString();
         pobj = new string(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700HistManager::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700HistManager::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700HistManager::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700HistManager::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700HistManager*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700HistManager::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700HistManager::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700HistManager::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_777_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700HistManager::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_777_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRich700HistManager* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRich700HistManager(*(HRich700HistManager*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700HistManager G__THRich700HistManager;
static int G__RichDict_777_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700HistManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700HistManager*) (soff+(sizeof(HRich700HistManager)*i)))->~G__THRich700HistManager();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700HistManager*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700HistManager*) (soff))->~G__THRich700HistManager();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_777_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700HistManager* dest = (HRich700HistManager*) G__getstructoffset();
   *dest = *(HRich700HistManager*) libp->para[0].ref;
   const HRich700HistManager& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700GeoTestQa */
static int G__RichDict_919_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700GeoTestQa* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700GeoTestQa[n];
     } else {
       p = new((void*) gvp) HRich700GeoTestQa[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700GeoTestQa;
     } else {
       p = new((void*) gvp) HRich700GeoTestQa;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700GeoTestQa*) G__getstructoffset())->setOutputDir(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700GeoTestQa::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700GeoTestQa::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700GeoTestQa::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700GeoTestQa::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700GeoTestQa*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700GeoTestQa::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700GeoTestQa::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700GeoTestQa::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_919_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700GeoTestQa::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700GeoTestQa G__THRich700GeoTestQa;
static int G__RichDict_919_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700GeoTestQa*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700GeoTestQa*) (soff+(sizeof(HRich700GeoTestQa)*i)))->~G__THRich700GeoTestQa();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700GeoTestQa*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700GeoTestQa*) (soff))->~G__THRich700GeoTestQa();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700Pmt */
static int G__RichDict_920_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700Pmt* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700Pmt[n];
     } else {
       p = new((void*) gvp) HRich700Pmt[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700Pmt;
     } else {
       p = new((void*) gvp) HRich700Pmt;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700Pmt));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_920_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRich700Pmt*) G__getstructoffset())->isPhotonDetected((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_920_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700Pmt*) G__getstructoffset())->SetDetectorType((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_920_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700Pmt*) G__getstructoffset())->SetCollectionEfficiency((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_920_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) HRich700Pmt::getWavelength((Double_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700Pmt G__THRich700Pmt;
static int G__RichDict_920_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700Pmt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700Pmt*) (soff+(sizeof(HRich700Pmt)*i)))->~G__THRich700Pmt();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700Pmt*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700Pmt*) (soff))->~G__THRich700Pmt();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700DigiPar */
static int G__RichDict_921_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700DigiPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700DigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRich700DigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700DigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRich700DigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700DigiPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRich700DigiPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700DigiPar[n];
       } else {
         p = new((void*) gvp) HRich700DigiPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700DigiPar;
       } else {
         p = new((void*) gvp) HRich700DigiPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HRich700DigiPar*) G__getstructoffset())->getCrossTalkProbability());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700DigiPar*) G__getstructoffset())->getNofNoiseHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700DigiPar*) G__getstructoffset())->setCrossTalkProbability((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700DigiPar*) G__getstructoffset())->setNofNoiseHits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700DigiPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700DigiPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700DigiPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700DigiPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700DigiPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700DigiPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700DigiPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700DigiPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700DigiPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_921_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700DigiPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_921_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRich700DigiPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRich700DigiPar(*(HRich700DigiPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700DigiPar G__THRich700DigiPar;
static int G__RichDict_921_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700DigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700DigiPar*) (soff+(sizeof(HRich700DigiPar)*i)))->~G__THRich700DigiPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700DigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700DigiPar*) (soff))->~G__THRich700DigiPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_921_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700DigiPar* dest = (HRich700DigiPar*) G__getstructoffset();
   *dest = *(HRich700DigiPar*) libp->para[0].ref;
   const HRich700DigiPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700Digitizer */
static int G__RichDict_922_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700Digitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700Digitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRich700Digitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700Digitizer((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRich700Digitizer((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700Digitizer[n];
       } else {
         p = new((void*) gvp) HRich700Digitizer[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700Digitizer;
       } else {
         p = new((void*) gvp) HRich700Digitizer;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700Digitizer::getDigitizer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700Digitizer*) G__getstructoffset())->setStoreOnlyConvertedPhotonTrackIds((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700Digitizer*) G__getstructoffset())->setCrossTalkProbability((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700Digitizer*) G__getstructoffset())->setNofNoiseHits((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]), (Bool_t) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronUse((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HRich700Digitizer*) G__getstructoffset())->getDeltaElectronUse());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   case 3:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronMinMomCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HRich700Digitizer*) G__getstructoffset())->setDeltaElectronMinMomCut();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700Digitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700Digitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700Digitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700Digitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700Digitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700Digitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700Digitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700Digitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_922_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700Digitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700Digitizer G__THRich700Digitizer;
static int G__RichDict_922_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700Digitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700Digitizer*) (soff+(sizeof(HRich700Digitizer)*i)))->~G__THRich700Digitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700Digitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700Digitizer*) (soff))->~G__THRich700Digitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700RingFinderPar */
static int G__RichDict_954_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700RingFinderPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RingFinderPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HRich700RingFinderPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RingFinderPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRich700RingFinderPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RingFinderPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRich700RingFinderPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700RingFinderPar[n];
       } else {
         p = new((void*) gvp) HRich700RingFinderPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700RingFinderPar;
       } else {
         p = new((void*) gvp) HRich700RingFinderPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700RingFinderPar*) G__getstructoffset())->getNofParts());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRich700RingFinderPar*) G__getstructoffset())->getMaxDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRich700RingFinderPar*) G__getstructoffset())->getMinDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRich700RingFinderPar*) G__getstructoffset())->getMaxRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRich700RingFinderPar*) G__getstructoffset())->getMinRadius());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700RingFinderPar*) G__getstructoffset())->getNofBinsX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700RingFinderPar*) G__getstructoffset())->getNofBinsY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700RingFinderPar*) G__getstructoffset())->getNofBinsR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700RingFinderPar*) G__getstructoffset())->getHTCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700RingFinderPar*) G__getstructoffset())->getHTCutR());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HRich700RingFinderPar*) G__getstructoffset())->getMinNofHitsInArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRich700RingFinderPar*) G__getstructoffset())->getUsedHitsAllCut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRich700RingFinderPar*) G__getstructoffset())->getRmsCoeffCOP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HRich700RingFinderPar*) G__getstructoffset())->getMaxCutCOP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->getNofParts((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->getMaxDistance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->getMinDistance((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->getMaxRadius((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->getMinRadius((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setNofBinsX((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setNofBinsY((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setNofBinsR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setHTCut((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setHTCutR((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setMinNofHitsInArea((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setUsedHitsAllCut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setRmsCoeffCOP((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->setMaxCutCOP((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700RingFinderPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700RingFinderPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700RingFinderPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RingFinderPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_954_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RingFinderPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RichDict_954_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HRich700RingFinderPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HRich700RingFinderPar(*(HRich700RingFinderPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700RingFinderPar G__THRich700RingFinderPar;
static int G__RichDict_954_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700RingFinderPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700RingFinderPar*) (soff+(sizeof(HRich700RingFinderPar)*i)))->~G__THRich700RingFinderPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700RingFinderPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700RingFinderPar*) (soff))->~G__THRich700RingFinderPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RichDict_954_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700RingFinderPar* dest = (HRich700RingFinderPar*) G__getstructoffset();
   *dest = *(HRich700RingFinderPar*) libp->para[0].ref;
   const HRich700RingFinderPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700RingFinderIdeal */
static int G__RichDict_955_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700RingFinderIdeal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RingFinderIdeal[n];
     } else {
       p = new((void*) gvp) HRich700RingFinderIdeal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RingFinderIdeal;
     } else {
       p = new((void*) gvp) HRich700RingFinderIdeal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700RingFinderIdeal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderIdeal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700RingFinderIdeal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700RingFinderIdeal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderIdeal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderIdeal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RingFinderIdeal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderIdeal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_955_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RingFinderIdeal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700RingFinderIdeal G__THRich700RingFinderIdeal;
static int G__RichDict_955_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700RingFinderIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700RingFinderIdeal*) (soff+(sizeof(HRich700RingFinderIdeal)*i)))->~G__THRich700RingFinderIdeal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700RingFinderIdeal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700RingFinderIdeal*) (soff))->~G__THRich700RingFinderIdeal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700RingFinderHough */
static int G__RichDict_966_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700RingFinderHough* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RingFinderHough((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HRich700RingFinderHough((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RingFinderHough((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HRich700RingFinderHough((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700RingFinderHough[n];
       } else {
         p = new((void*) gvp) HRich700RingFinderHough[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HRich700RingFinderHough;
       } else {
         p = new((void*) gvp) HRich700RingFinderHough;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->setParameters();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->HoughTransformReconstruction();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->DefineLocalAreaAndHits((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->HoughTransform((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->HoughTransformGroup((UShort_t) G__int(libp->para[0]), (UShort_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->FindPeak((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->RemoveHitsOfFoundRing((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (HRich700Ring*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->RingSelection();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->AddRing((HRich700Ring*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->RecoToMc((HRich700Ring*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700RingFinderHough::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderHough::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700RingFinderHough::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700RingFinderHough::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RingFinderHough*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderHough::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RingFinderHough::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RingFinderHough::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_966_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RingFinderHough::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700RingFinderHough G__THRich700RingFinderHough;
static int G__RichDict_966_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700RingFinderHough*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700RingFinderHough*) (soff+(sizeof(HRich700RingFinderHough)*i)))->~G__THRich700RingFinderHough();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700RingFinderHough*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700RingFinderHough*) (soff))->~G__THRich700RingFinderHough();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HRich700RecoQa */
static int G__RichDict_979_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HRich700RecoQa* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RecoQa[n];
     } else {
       p = new((void*) gvp) HRich700RecoQa[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HRich700RecoQa;
     } else {
       p = new((void*) gvp) HRich700RecoQa;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RecoQa*) G__getstructoffset())->setOutputDir(*(string*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HRich700RecoQa::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RecoQa::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HRich700RecoQa::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HRich700RecoQa::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HRich700RecoQa*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RecoQa::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RecoQa::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HRich700RecoQa::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RichDict_979_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HRich700RecoQa::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HRich700RecoQa G__THRich700RecoQa;
static int G__RichDict_979_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HRich700RecoQa*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HRich700RecoQa*) (soff+(sizeof(HRich700RecoQa)*i)))->~G__THRich700RecoQa();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HRich700RecoQa*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HRich700RecoQa*) (soff))->~G__THRich700RecoQa();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HRichHit */

/* HRichLabel */

/* HRichPadSignal */

/* HRichAnalysisPar */

/* HRichGeometryPar */

/* HRichHitHeader */

/* HRichPadClean */

/* HRichPadLabel */

/* HRichRingFind */

/* HRichAnalysis */

/* HRichCalSim */

/* HRichHitSim */

/* HRichRingFindSim */

/* HRichAnalysisSim */

/* HRichCal */

/* HRichCalParCell */

/* HRichCalPar */

/* HRichContFact */

/* HRichDetector */

/* HRichDigitisationPar */

/* HRichPad */

/* HRichTrack */

/* HRichDigitizer */

/* HRichDirClus */

/* HRichFrameCorner */

/* HRichFrame */

/* HRichFrameTab */

/* HRichPadCorner */

/* HRichPadTab */

/* HRichWire */

/* HRichWireTab */

/* HRichHitCandidate */

/* HRichMappingPar */

/* HRichPadFilter */

/* HRichPadGraph */

/* HRichParAsciiFileIo */

/* HRichParRootFileIo */

/* HRichTaskSet */

/* HRichThresholdPar */

/* HRichUnpacker */

/* HRichWireSignal */

/* HRich700TaskSet */

/* HRich700DigiMapPar */

/* HRich700EventDisplay */

/* HRichDrawHist */

/* HRich700HistManager */

/* HRich700GeoTestQa */

/* HRich700Pmt */

/* HRich700DigiPar */

/* HRich700Digitizer */

/* HRich700RingFinderPar */

/* HRich700RingFinderIdeal */

/* HRich700RingFinderHough */

/* HRich700RecoQa */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRichDict {
 public:
  G__Sizep2memfuncRichDict(): p(&G__Sizep2memfuncRichDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRichDict::*p)();
};

size_t G__get_sizep2memfuncRichDict()
{
  G__Sizep2memfuncRichDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRichDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichHit))) {
     HRichHit *G__Lderived;
     G__Lderived=(HRichHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHit),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichLabel))) {
     HRichLabel *G__Lderived;
     G__Lderived=(HRichLabel*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichLabel),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal))) {
     HRichPadSignal *G__Lderived;
     G__Lderived=(HRichPadSignal*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar))) {
     HRichAnalysisPar *G__Lderived;
     G__Lderived=(HRichAnalysisPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar),G__get_linked_tagnum(&G__RichDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar))) {
     HRichGeometryPar *G__Lderived;
     G__Lderived=(HRichGeometryPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar),G__get_linked_tagnum(&G__RichDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader))) {
     HRichHitHeader *G__Lderived;
     G__Lderived=(HRichHitHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPadClean))) {
     HRichPadClean *G__Lderived;
     G__Lderived=(HRichPadClean*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadClean),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel))) {
     HRichPadLabel *G__Lderived;
     G__Lderived=(HRichPadLabel*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichRingFind))) {
     HRichRingFind *G__Lderived;
     G__Lderived=(HRichRingFind*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichRingFind),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis))) {
     HRichAnalysis *G__Lderived;
     G__Lderived=(HRichAnalysis*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HParCond),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HParCond),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HParCond),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichCalSim))) {
     HRichCalSim *G__Lderived;
     G__Lderived=(HRichCalSim*)0x1000;
     {
       HRichCal *G__Lpbase=(HRichCal*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalSim),G__get_linked_tagnum(&G__RichDictLN_HRichCal),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalSim),G__get_linked_tagnum(&G__RichDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalSim),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichHitSim))) {
     HRichHitSim *G__Lderived;
     G__Lderived=(HRichHitSim*)0x1000;
     {
       HRichHit *G__Lpbase=(HRichHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitSim),G__get_linked_tagnum(&G__RichDictLN_HRichHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitSim),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim))) {
     HRichRingFindSim *G__Lderived;
     G__Lderived=(HRichRingFindSim*)0x1000;
     {
       HRichRingFind *G__Lpbase=(HRichRingFind*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim),G__get_linked_tagnum(&G__RichDictLN_HRichRingFind),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim))) {
     HRichAnalysisSim *G__Lderived;
     G__Lderived=(HRichAnalysisSim*)0x1000;
     {
       HRichAnalysis *G__Lpbase=(HRichAnalysis*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim),G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HLocatedDataObject))) {
     HLocatedDataObject *G__Lderived;
     G__Lderived=(HLocatedDataObject*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HLocatedDataObject),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichCal))) {
     HRichCal *G__Lderived;
     G__Lderived=(HRichCal*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCal),G__get_linked_tagnum(&G__RichDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCal),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell))) {
     HRichCalParCell *G__Lderived;
     G__Lderived=(HRichCalParCell*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell),G__get_linked_tagnum(&G__RichDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichCalPar))) {
     HRichCalPar *G__Lderived;
     G__Lderived=(HRichCalPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichContFact))) {
     HRichContFact *G__Lderived;
     G__Lderived=(HRichContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichContFact),G__get_linked_tagnum(&G__RichDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichContFact),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichContFact),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichDetector))) {
     HRichDetector *G__Lderived;
     G__Lderived=(HRichDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDetector),G__get_linked_tagnum(&G__RichDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDetector),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDetector),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar))) {
     HRichDigitisationPar *G__Lderived;
     G__Lderived=(HRichDigitisationPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar),G__get_linked_tagnum(&G__RichDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPad))) {
     HRichPad *G__Lderived;
     G__Lderived=(HRichPad*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPad),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichTrack))) {
     HRichTrack *G__Lderived;
     G__Lderived=(HRichTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTrack),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer))) {
     HRichDigitizer *G__Lderived;
     G__Lderived=(HRichDigitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichDirClus))) {
     HRichDirClus *G__Lderived;
     G__Lderived=(HRichDirClus*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDirClus),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner))) {
     HRichFrameCorner *G__Lderived;
     G__Lderived=(HRichFrameCorner*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichFrame))) {
     HRichFrame *G__Lderived;
     G__Lderived=(HRichFrame*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrame),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab))) {
     HRichFrameTab *G__Lderived;
     G__Lderived=(HRichFrameTab*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner))) {
     HRichPadCorner *G__Lderived;
     G__Lderived=(HRichPadCorner*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPadTab))) {
     HRichPadTab *G__Lderived;
     G__Lderived=(HRichPadTab*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadTab),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichWire))) {
     HRichWire *G__Lderived;
     G__Lderived=(HRichWire*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWire),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichWireTab))) {
     HRichWireTab *G__Lderived;
     G__Lderived=(HRichWireTab*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWireTab),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate))) {
     HRichHitCandidate *G__Lderived;
     G__Lderived=(HRichHitCandidate*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar))) {
     HRichMappingPar *G__Lderived;
     G__Lderived=(HRichMappingPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter))) {
     HRichPadFilter *G__Lderived;
     G__Lderived=(HRichPadFilter*)0x1000;
     {
       HFilter *G__Lpbase=(HFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter),G__get_linked_tagnum(&G__RichDictLN_HFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph))) {
     HRichPadGraph *G__Lderived;
     G__Lderived=(HRichPadGraph*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo))) {
     HRichParAsciiFileIo *G__Lderived;
     G__Lderived=(HRichParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo),G__get_linked_tagnum(&G__RichDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo),G__get_linked_tagnum(&G__RichDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo))) {
     HRichParRootFileIo *G__Lderived;
     G__Lderived=(HRichParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo),G__get_linked_tagnum(&G__RichDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo),G__get_linked_tagnum(&G__RichDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet))) {
     HRichTaskSet *G__Lderived;
     G__Lderived=(HRichTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet),G__get_linked_tagnum(&G__RichDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar))) {
     HRichThresholdPar *G__Lderived;
     G__Lderived=(HRichThresholdPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker))) {
     HRichUnpacker *G__Lderived;
     G__Lderived=(HRichUnpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker),G__get_linked_tagnum(&G__RichDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal))) {
     HRichWireSignal *G__Lderived;
     G__Lderived=(HRichWireSignal*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet))) {
     HRich700TaskSet *G__Lderived;
     G__Lderived=(HRich700TaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet),G__get_linked_tagnum(&G__RichDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar))) {
     HRich700DigiMapPar *G__Lderived;
     G__Lderived=(HRich700DigiMapPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),G__get_linked_tagnum(&G__RichDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay))) {
     HRich700EventDisplay *G__Lderived;
     G__Lderived=(HRich700EventDisplay*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist))) {
     HRichDrawHist *G__Lderived;
     G__Lderived=(HRichDrawHist*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager))) {
     HRich700HistManager *G__Lderived;
     G__Lderived=(HRich700HistManager*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa))) {
     HRich700GeoTestQa *G__Lderived;
     G__Lderived=(HRich700GeoTestQa*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar))) {
     HRich700DigiPar *G__Lderived;
     G__Lderived=(HRich700DigiPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar),G__get_linked_tagnum(&G__RichDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer))) {
     HRich700Digitizer *G__Lderived;
     G__Lderived=(HRich700Digitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar))) {
     HRich700RingFinderPar *G__Lderived;
     G__Lderived=(HRich700RingFinderPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar),G__get_linked_tagnum(&G__RichDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar),G__get_linked_tagnum(&G__RichDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal))) {
     HRich700RingFinderIdeal *G__Lderived;
     G__Lderived=(HRich700RingFinderIdeal*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough))) {
     HRich700RingFinderHough *G__Lderived;
     G__Lderived=(HRich700RingFinderHough*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa))) {
     HRich700RecoQa *G__Lderived;
     G__Lderived=(HRich700RecoQa*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa),G__get_linked_tagnum(&G__RichDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa),G__get_linked_tagnum(&G__RichDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa),G__get_linked_tagnum(&G__RichDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa),G__get_linked_tagnum(&G__RichDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRichDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("UShort_t",114,-1,0,-1);
   G__setnewtype(-1,"Unsigned Short integer 2 bytes (unsigned short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__RichDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__RichDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__RichDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__RichDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,Float_t>",117,G__get_linked_tagnum(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,float>",117,G__get_linked_tagnum(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<HGeantKine*,float,less<HGeantKine*> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRichTrack*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,vector<HRichTrack*> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HRichTrack*,allocator<HRichTrack*> > >",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<HRichTrack*,allocator<HRichTrack*> >,less<int> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<UInt_t,Int_t>",117,G__get_linked_tagnum(&G__RichDictLN_pairlEunsignedsPintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<std::pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<UInt_t,Int_t> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<unsigned int,int> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TCanvas*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TH1*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<string>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEstringcOallocatorlEstringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEstringcOallocatorlEstringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TGraph*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TNamed*>",117,G__get_linked_tagnum(&G__RichDictLN_maplEstringcOTNamedmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTNamedmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TNamed*,less<string> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEstringcOTNamedmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTNamedmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__RichDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__RichDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__RichDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,particleproperties>",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,particleproperties>",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,particleproperties,less<int> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,particleproperties>",117,G__get_linked_tagnum(&G__RichDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<TString,particleproperties,less<TString> >",117,G__get_linked_tagnum(&G__RichDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,TString>",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString>",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,TString,less<int> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantKine*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantRichPhoton*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantMdc*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantTof*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantRpc*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantWall*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantEmc*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantStart*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeantFwDet*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRich700Hit>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700HitcOallocatorlEHRich700HitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700HitcOallocatorlEHRich700HitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700HitcOallocatorlEHRich700HitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700HitcOallocatorlEHRich700HitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700HitcOallocatorlEHRich700HitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,HRich700PmtData>",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOHRich700PmtDatacOlesslEintgRcOallocatorlEpairlEconstsPintcOHRich700PmtDatagRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HRich700PmtData>",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOHRich700PmtDatacOlesslEintgRcOallocatorlEpairlEconstsPintcOHRich700PmtDatagRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HRich700PmtData,less<int> >",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOHRich700PmtDatacOlesslEintgRcOallocatorlEpairlEconstsPintcOHRich700PmtDatagRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Int_t>",117,G__get_linked_tagnum(&G__RichDictLN_pairlEintcOintgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<Int_t,Int_t>,HRich700PmtData>",117,G__get_linked_tagnum(&G__RichDictLN_maplEpairlEintcOintgRcOHRich700PmtDatacOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOHRich700PmtDatagRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<int,int>,HRich700PmtData>",117,G__get_linked_tagnum(&G__RichDictLN_maplEpairlEintcOintgRcOHRich700PmtDatacOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOHRich700PmtDatagRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<pair<int,int>,HRich700PmtData,less<pair<int,int> > >",117,G__get_linked_tagnum(&G__RichDictLN_maplEpairlEintcOintgRcOHRich700PmtDatacOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOHRich700PmtDatagRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Double_t,Double_t>",117,G__get_linked_tagnum(&G__RichDictLN_pairlEdoublecOdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<Double_t,Double_t> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<double,double> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<Int_t,Int_t> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<pair<int,int> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRichCalSim*>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRich700HoughHit>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<UShort_t>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<UShort_t> >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<vector<unsigned short,allocator<unsigned short> > >",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HRich700Ring>",117,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700RingcOallocatorlEHRich700RinggRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700RingcOallocatorlEHRich700RinggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700RingcOallocatorlEHRich700RinggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700RingcOallocatorlEHRich700RinggRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700RingcOallocatorlEHRich700RinggRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,Int_t>",117,G__get_linked_tagnum(&G__RichDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HRichHit */
static void G__setup_memvarHRichHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHit));
   { HRichHit *p; p=(HRichHit*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fRich700CircleCenterX)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fRich700CircleCenterX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRich700CircleCenterY)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fRich700CircleCenterY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRich700CircleRadius)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fRich700CircleRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRich700CircleChi2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fRich700CircleChi2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRich700NofRichCals)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fRich700NofRichCals=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingX=",0,"x coordinate of a ring in pad units , RICH700 : PMT index x");
   G__memvar_setup((void*)((long)(&p->iRingY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingY=",0,"y coordinate of a ring in pad units , RICH700 : PMT index y");
   G__memvar_setup((void*)((long)(&p->iRingQuality)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingQuality=",0,"! this is iRingPatMat or iRingHouTra");
   G__memvar_setup((void*)((long)(&p->iRingPatMat)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingPatMat=",0,"maximum amplitude of Pattern Matrix (PM)");
   G__memvar_setup((void*)((long)(&p->iRingHouTra)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingHouTra=",0,"maximum amplitude of Hough Transform (HT)");
   G__memvar_setup((void*)((long)(&p->iRingPadNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingPadNr=",0,"number of fired pads in a ring");
   G__memvar_setup((void*)((long)(&p->iRingAmplitude)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingAmplitude=",0,"integrated charge (charge of all pads) in a ring");
   G__memvar_setup((void*)((long)(&p->iRingLocalMax4)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingLocalMax4=",0,"number of 4-connected local maxima in a ring");
   G__memvar_setup((void*)((long)(&p->iRingLocalMax8)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingLocalMax8=",0,"number of 8-connected local maxima in a ring");
   G__memvar_setup((void*)((long)(&p->iRingClusterNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingClusterNr=",0,"number of clusters in a ring");
   G__memvar_setup((void*)((long)(&p->fRingClusterSize)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRingClusterSize=",0,"mean custer size in a ring");
   G__memvar_setup((void*)((long)(&p->fRingClusterLMax4)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRingClusterLMax4=",0,"mean cluster size with 4-connected local maximum");
   G__memvar_setup((void*)((long)(&p->fRingClusterLMax8)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRingClusterLMax8=",0,"mean cluster size with 8-connected local maximum");
   G__memvar_setup((void*)((long)(&p->iRingAlgorithmIndex)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingAlgorithmIndex=",0,"index describing algorithm, odd - PM, even - HT");
   G__memvar_setup((void*)(&HRichHit::iRingImageSize),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"iRingImageSize=",0,"! this must be == iRingMaskSize");
   G__memvar_setup((void*)((long)(&p->iRingImage)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingImage[256]=",0,"! used internally to calculate clusters");
   G__memvar_setup((void*)((long)(&p->iRingFreeParam)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingFreeParam=",0,"! pad label number");
   G__memvar_setup((void*)((long)(&p->iRingMaxLabel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingMaxLabel=",0,"! local maximum label number");
   G__memvar_setup((void*)((long)(&p->fMaxClusterSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fMaxClusterSize=",0,"local maximum cluster size");
   G__memvar_setup((void*)((long)(&p->fMaxClusterSum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fMaxClusterSum=",0,"integrated amplitude of a local maximum cluster");
   G__memvar_setup((void*)((long)(&p->fMaxThrClusterSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fMaxThrClusterSize=",0,"local maximum cluster size above threshold");
   G__memvar_setup((void*)((long)(&p->fLabX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fLabX=",0,"x ring position in LAB");
   G__memvar_setup((void*)((long)(&p->fLabY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fLabY=",0,"y ring position in LAB");
   G__memvar_setup((void*)((long)(&p->fLabZ)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fLabZ=",0,"z ring position in LAB");
   G__memvar_setup((void*)((long)(&p->fX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fX=",0,"x coordinate of a ring in cm (weighted mean of local max cluster) on padplane");
   G__memvar_setup((void*)((long)(&p->fY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fY=",0,"y coordinate of a ring in cm (weighted mean of local max cluster) on padplane");
   G__memvar_setup((void*)((long)(&p->fPadX)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fPadX=",0,"x coordinate of a ring in pad units (with pad fraction, mean)");
   G__memvar_setup((void*)((long)(&p->fPadY)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fPadY=",0,"y coordinate of a ring in pad units (with pad fraction, mean)");
   G__memvar_setup((void*)((long)(&p->fMeanTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMeanTheta=",0,"theta (weighted mean of local max cluster)");
   G__memvar_setup((void*)((long)(&p->fMeanPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fMeanPhi=",0,"phi (weighted mean of local max cluster)");
   G__memvar_setup((void*)((long)(&p->fTheta)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fTheta=",0,"theta angle of presumable lepton emitted from a target (in deg)");
   G__memvar_setup((void*)((long)(&p->fPhi)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fPhi=",0,"phi angle of presumable lepton emitted from a target (in deg)");
   G__memvar_setup((void*)((long)(&p->nSector)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"nSector=",0,"sector number, 0-5, 0 is the uppermost");
   G__memvar_setup((void*)((long)(&p->lEventNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"lEventNr=",0,"event number");
   G__memvar_setup((void*)((long)(&p->fAddress)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fAddress=",0,"address of a pad - centre of a ring");
   G__memvar_setup((void*)((long)(&p->fTestDens)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fTestDens=",0,"density test");
   G__memvar_setup((void*)((long)(&p->fTestBord)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fTestBord=",0,"border amplitude decrease test");
   G__memvar_setup((void*)((long)(&p->fTestDyna)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fTestDyna=",0,"dynamical amplitude test");
   G__memvar_setup((void*)((long)(&p->fTestRati)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fTestRati=",0,"ratio of fired pads in and outside a ring test");
   G__memvar_setup((void*)((long)(&p->fTestAsym)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fTestAsym=",0,"asymmetry test, only for rings inside the frame");
   G__memvar_setup((void*)((long)(&p->fTestCharge)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fTestCharge=",0,"ring charge test.");
   G__memvar_setup((void*)((long)(&p->fRejFake)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fRejFake=",0,"test of the ring quality of those candidates that are near a candidate with very high quality. Those candidates could be fakes, the flag is 0 if the ring is rejected.");
   G__memvar_setup((void*)((long)(&p->fTests)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fTests=",0,"fTestDens+10*fTestBord+100*fTestDyna+1000*fTestRati+10000*fTestAsym + fTestCharge*100000 + fRejFake*1000000;");
   G__memvar_setup((void*)((long)(&p->fRingCentroid)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRingCentroid=",0,"ring centroid calculated during assymetry test");
   G__memvar_setup((void*)((long)(&p->fRingRadius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRingRadius=",0,"ring radius (harmonical mean)");
   G__memvar_setup((void*)((long)(&p->fBorderFactor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fBorderFactor=",0,"1 if ring inside, less than 1 if partially outside");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichLabel */
static void G__setup_memvarHRichLabel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichLabel));
   { HRichLabel *p; p=(HRichLabel*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iLeftX)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"iLeftX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRightX)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"iRightX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iLowerY)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"iLowerY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iUpperY)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"iUpperY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iSignature)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iSignature=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iFiredPadsNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iFiredPadsNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iLabeledPadsNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iLabeledPadsNr=",0,(char*)NULL);
   G__memvar_setup((void*)(&HRichLabel::iLabelNr),105,0,0,-1,G__defined_typename("Int_t"),-2,1,"iLabelNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPadSignal */
static void G__setup_memvarHRichPadSignal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal));
   { HRichPadSignal *p; p=(HRichPadSignal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fAmplitude=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fLabel=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"fLock=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isCleanedSingle=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isCleanedHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichAnalysisPar */
static void G__setup_memvarHRichAnalysisPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar));
   { HRichAnalysisPar *p; p=(HRichAnalysisPar*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iCutOffThresheold)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iCutOffThresheold=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingRadius)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingRadius=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingRadiusError)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingRadiusError=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingMatrixSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingMatrixSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingMatrix)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iRingMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingMaskSize)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingMaskSize=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingMask)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iRingMask=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveCleanAlonePad)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveCleanAlonePad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iCleanAlonePadBorder)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iCleanAlonePadBorder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iCleanAlonePadLowerThreshold)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iCleanAlonePadLowerThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveCleanHighPulse)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveCleanHighPulse=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iCleanHighPulseBorder)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iCleanHighPulseBorder=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iCleanHighPulseUpperThreshold)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iCleanHighPulseUpperThreshold=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveLabelPads)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveLabelPads=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iLabeledPadsDistance)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iLabeledPadsDistance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxFiredSectorPads)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxFiredSectorPads=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveBorderAmplitReduction)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveBorderAmplitReduction=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveTestDensity)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveTestDensity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fThresholdDensity)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fThresholdDensity=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fSurfaceArea)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fSurfaceArea=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveDynamicThrAmplitude)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveDynamicThrAmplitude=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fLowerAmplFactor)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fLowerAmplFactor=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFormulaParam1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFormulaParam1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFormulaParam2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFormulaParam2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFormulaParam3)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFormulaParam3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveFiredRingPadsRatio)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveFiredRingPadsRatio=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFiredRingPadsRatio)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFiredRingPadsRatio=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveTestAsymmetry)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveTestAsymmetry=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveTestCharge)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveTestCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRingMinCharge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRingMinCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRingMaxCharge)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fRingMaxCharge=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveFakesRejection)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveFakesRejection=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFakeQualityRatio)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFakeQualityRatio=",0,"minimal quality for a fake ring found in the nearhodd of a bright rone.");
   G__memvar_setup((void*)((long)(&p->fFakeCentroidCut)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFakeCentroidCut=",0,"minimal shift of the centroid of the fake ring respect to the centroid of the bright one.");
   G__memvar_setup((void*)((long)(&p->iSuperiorAlgorithmID)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iSuperiorAlgorithmID=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveRingFindFitMatrix)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveRingFindFitMatrix=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iMinimalFitMatrixRingQuality)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iMinimalFitMatrixRingQuality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iMinimalFitMatrixRingDistance)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iMinimalFitMatrixRingDistance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iHowManyFitMatrixRings)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iHowManyFitMatrixRings=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->isActiveRingHoughTransf)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"isActiveRingHoughTransf=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iMinimalHoughTransfRingQuality)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iMinimalHoughTransfRingQuality=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iMinimalHoughTransfRingDistance)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iMinimalHoughTransfRingDistance=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iHowManyHoughTransfRings)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iHowManyHoughTransfRings=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fAmpCorrFac)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,1,"fAmpCorrFac=",0,"amplitude correction factor for each sector");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"filename[40]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichGeometryPar */
static void G__setup_memvarHRichGeometryPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar));
   { HRichGeometryPar *p; p=(HRichGeometryPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSectorsNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,4,"fSectorActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fColumns=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDistanceWiresPads=",0,"Distance between the wire and the padplane");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"fSectorPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSectorShift=",0,"this number corresponds to the shift in Y (lab coordinates)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichFrame),-1,-1,4,"fFrame=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichPadTab),-1,-1,4,"fPads=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichWireTab),-1,-1,4,"fWires=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichHitHeader */
static void G__setup_memvarHRichHitHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader));
   { HRichHitHeader *p; p=(HRichHitHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iEventNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iEventNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iPadFiredNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iPadFiredNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iPadCleanedNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iPadCleanedNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iClusterCleanedNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iClusterCleanedNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iClustersCleaned)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iClustersCleaned=",0,"! get rid of this little bugger");
   G__memvar_setup((void*)((long)(&p->iRingNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iExecutedAnalysis)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iExecutedAnalysis=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iFakePad)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iFakePad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iFakeLocalMax4)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iFakeLocalMax4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iFakeLocalMax8)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iFakeLocalMax8=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->m_nSector)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"m_nSector=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->detCurrentSec)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"detCurrentSec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPadClean */
static void G__setup_memvarHRichPadClean(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadClean));
   { HRichPadClean *p; p=(HRichPadClean*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iCount=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,4,"iTempCluster=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"minX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxX)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxX=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->minY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"minY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxY)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxY=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->deltaPhi)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"deltaPhi=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->chargeTot)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"chargeTot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->padNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"padNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fRichClusCat)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,1,"fRichClusCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPadLabel */
static void G__setup_memvarHRichPadLabel(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel));
   { HRichPadLabel *p; p=(HRichPadLabel*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iGraphArray=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayS),-1,-1,4,"iLabelGraphConnection=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichRingFind */
static void G__setup_memvarHRichRingFind(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichRingFind));
   { HRichRingFind *p; p=(HRichRingFind*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar),-1,-1,2,"pAnalysisParams=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar),-1,-1,2,"pGeometryParams=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxRings=",0,"max number of rich hits in pRings array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iInnerCount=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iInnerPhot4=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iInnerPhot8=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fClusterSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fClusterLMax4=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fClusterLMax8=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iRingImageSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,2,"iRingTempImage=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xMeanMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yMeanMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xPadMeanMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"yPadMeanMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"thetaMeanMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phiMeanMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxClusterSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxClusterSum=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMaxThrClusterSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iCount=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iHitCount=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxCols=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iMatrixSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"iMatrixHalfSize=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ly_from=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"ly_to=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lx_from=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"lx_to=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"d_col_ij=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"d_row_ij=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"d_col_jk=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"d_row_jk=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"d2_colrow_jk=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"d2_colrow_ij=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,2,"iPadActive=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iPadPlane)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iPadPlane=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iPadPlaneCopy)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iPadPlaneCopy=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iPadCol)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iPadCol=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iPadRow)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iPadRow=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pRings)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichHit),-1,-1,1,"pRings=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fHitList1)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TList),-1,-1,1,"fHitList1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fHitList2)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TList),-1,-1,1,"fHitList2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fHitCandidate)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TList),-1,-1,1,"fHitCandidate=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichAnalysis */
static void G__setup_memvarHRichAnalysis(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis));
   { HRichAnalysis *p; p=(HRichAnalysis*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iActiveSector)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iActiveSector=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pLeftBorder)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"pLeftBorder=",0,"left border of active pad area");
   G__memvar_setup((void*)((long)(&p->pRightBorder)-(long)(p)),83,0,0,-1,G__defined_typename("Short_t"),-1,1,"pRightBorder=",0,"dito right side (largest active col in row)");
   G__memvar_setup((void*)((long)(&p->pPads)-(long)(p)),85,2,0,G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal),-1,-1,1,"pPads=",0,"!");
   G__memvar_setup((void*)((long)(&p->pLabelArea)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichLabel),-1,-1,1,"pLabelArea=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pRings)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichHit),-1,-1,1,"pRings=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fIter)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RichDictLN_HIterator),-1,-1,1,"fIter=",0,"!");
   G__memvar_setup((void*)((long)(&p->fIterHitHeader)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RichDictLN_HIterator),-1,-1,1,"fIterHitHeader=",0,"!");
   G__memvar_setup((void*)((long)(&p->iPadFiredNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iPadFiredNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPadFired)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fPadFired[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iPadCleanedNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iPadCleanedNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iClusterCleanedNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iClusterCleanedNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iClustersCleaned)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,1,"iClustersCleaned=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iLabelNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iLabelNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iRingNrTot)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iRingNrTot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->sectorPairNrTot)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"sectorPairNrTot=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->allPairNrTot)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"allPairNrTot=",0,"2 rings in different sectors");
   G__memvar_setup((void*)((long)(&p->iFakePad)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iFakePad=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iFakeLocalMax4)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iFakeLocalMax4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iFakeLocalMax8)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iFakeLocalMax8=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->maxFiredTotalPads)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"maxFiredTotalPads=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichPadClean),-1,-1,2,"pPadClean=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel),-1,-1,2,"pPadLabel=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichRingFind),-1,-1,2,"pRingFind=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal),-1,-1,2,"pSectorPads=",0,"points to pads of active sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxCols=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxPads=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"secWithCurrent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,2,"m_pCalCat=",0,"Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,2,"m_pHitCat=",0,"Pointer to the hit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,2,"m_pHitHdrCat=",0,"Pointer to the hit header data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar),-1,-1,2,"fpAnalysisPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar),-1,-1,2,"fpGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayI),-1,-1,2,"iPadActive=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader),-1,-1,2,"hithdrLoop=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"kSkipEvtIfNoRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichCalSim */
static void G__setup_memvarHRichCalSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalSim));
   { HRichCalSim *p; p=(HRichCalSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackIds[10]=",0,"array trackids");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofTracks=",0,"number  stored track ids");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEnergy=",0,"energy of the photon coupling to the pad, in case of direct hits is -1");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCt=",0,"! tmp counter for HRichDigitizer");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichHitSim */
static void G__setup_memvarHRichHitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitSim));
   { HRichHitSim *p; p=(HRichHitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->iRingPadNTrack1)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"iRingPadNTrack1[256]=",0,"!");
   G__memvar_setup((void*)((long)(&p->iRingPadNTrack2)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"iRingPadNTrack2[256]=",0,"!");
   G__memvar_setup((void*)((long)(&p->iRingTrack)-(long)(p)),115,0,0,-1,G__defined_typename("Short_t"),-1,1,"iRingTrack[256]=",0,"!");
   G__memvar_setup((void*)((long)(&p->iRingFlag)-(long)(p)),99,0,0,-1,G__defined_typename("Char_t"),-1,1,"iRingFlag[256]=",0,"!");
   G__memvar_setup((void*)((long)(&p->track1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"track1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->track2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"track2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->track3)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"track3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->weigTrack1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"weigTrack1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->weigTrack2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"weigTrack2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->weigTrack3)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"weigTrack3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flag1)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flag1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flag2)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flag2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->flag3)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"flag3=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichRingFindSim */
static void G__setup_memvarHRichRingFindSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim));
   { HRichRingFindSim *p; p=(HRichRingFindSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichHitSim),-1,-1,4,"pRings=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichAnalysisSim */
static void G__setup_memvarHRichAnalysisSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim));
   { HRichAnalysisSim *p; p=(HRichAnalysisSim*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->pRings)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichHitSim),-1,-1,1,"pRings=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"kSkipEvtIfNoRing=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim),-1,-1,4,"pRingFindSim=",0,"Pointer to ringfinder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"m_pTrackCat=",0,"Pointer to the track container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichCalSim),-1,-1,4,"pRichCalSim=",0,"Pointer to cal container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichCal */
static void G__setup_memvarHRichCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCal));
   { HRichCal *p; p=(HRichCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isCleanedSingle=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isCleanedHigh=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isCleanedSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichCalParCell */
static void G__setup_memvarHRichCalParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell));
   { HRichCalParCell *p; p=(HRichCalParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,4,"fCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigma=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichCalPar */
static void G__setup_memvarHRichCalPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalPar));
   { HRichCalPar *p; p=(HRichCalPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HObjTable),-1,-1,4,"fParamsTable=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HLocation),-1,-1,4,"fLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichContFact */
static void G__setup_memvarHRichContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichContFact));
   { HRichContFact *p; p=(HRichContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichDetector */
static void G__setup_memvarHRichDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDetector));
   { HRichDetector *p; p=(HRichDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichDigitisationPar */
static void G__setup_memvarHRichDigitisationPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar));
   { HRichDigitisationPar *p; p=(HRichDigitisationPar*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fElectronsNr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fElectronsNr=",0,"number of electron ionized in c4f10 for keV");
   G__memvar_setup((void*)((long)(&p->fSigmaValue)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fSigmaValue=",0,"sigma value for electronic noise");
   G__memvar_setup((void*)((long)(&p->fIncreaseNoise)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fIncreaseNoise=",0,"factor the noise has to be increased of");
   G__memvar_setup((void*)((long)(&p->fChargePerChannel)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fChargePerChannel=",0,"number of electron for ADC channel");
   G__memvar_setup((void*)((long)(&p->fQupper)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fQupper=",0,"upper limit for Polya function in ADC channel");
   G__memvar_setup((void*)((long)(&p->fParameter1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fParameter1=",0,"parameters that describe the coupling of the charge on the wire to the pad plane.");
   G__memvar_setup((void*)((long)(&p->fParameter2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fParameter2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFactor1)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFactor1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFactor2)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFactor2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFactor1Sig)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFactor1Sig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fFactor2Sig)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fFactor2Sig=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fExpSlope)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,1,"fExpSlope=",0,"slope of the exponential functions used to describe the photon charge distribution, 1 slope for each sector");
   G__memvar_setup((void*)((long)(&p->fBinsNr)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fBinsNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPhotonLen)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,1,"fPhotonLen=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fPhotonEff)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,1,"fPhotonEff=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->corrSec)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,1,"corrSec[6]=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fChargeScaling)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fChargeScaling=",0,"parameter introduced to compensate for the electronics rebuild in early 2004");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"filename[40]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPad */
static void G__setup_memvarHRichPad(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPad));
   { HRichPad *p; p=(HRichPad*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCornersNr=",0,"Number of corners");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TObjArray),-1,-1,4,"fPadCornersArray=",0,"Array of pad corners");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX=",0,"X of a pad in mm");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY=",0,"Y of a pad in mm");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPadX=",0,"X of a pad in pads units");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPadY=",0,"Y of a pad in pads units");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPadNr=",0,"Pad number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPadFlag=",0,"0-total outside, 1-inside, 2-partial inside");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fAmplitFraction=",0,"fraction amplitude");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXlab[6]=",0,"X of a pad in LAB in sector 0..5");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYlab[6]=",0,"Y of a pad in LAB in sector 0..5");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fZlab[6]=",0,"Z of a pad in LAB in sector 0..5");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTheta=",0,"Theta of a pad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhi[6]=",0,"Phi of a pad in sector 0..5");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXmin=",0,"Left border of a pad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYmin=",0,"Lower border of a pad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXmax=",0,"Right border of a pad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYmax=",0,"Upper border of a pad");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fPadActive=",0,"Flag active pads: 0-not actove, 1-active");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichTrack */
static void G__setup_memvarHRichTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTrack));
   { HRichTrack *p; p=(HRichTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrackNr=",0,"Track number of RICH hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNr=",0,"Event number taken from CAL<-RAW<-Unpacker");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFlag=",0,"Flag to distinguish photons (0) and direct hits (1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAddress=",0,"pad address, cf. HRichCal::calcAddress()");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichDigitizer */
static void G__setup_memvarHRichDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer));
   { HRichDigitizer *p; p=(HRichDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"catRichPhoton=",0,"! Pointer to the geant rich photon category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"catRichDirect=",0,"! Pointer to the geant rich direct hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"catTrack=",0,"! Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"catCal=",0,"! Pointer to the richtrack category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"catKine=",0,"! Pointer to the kine category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HIterator),-1,-1,4,"iterRichPhoton=",0,"! Iterator over the geant rich photon category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HIterator),-1,-1,4,"iterRichDirect=",0,"! Iterator over the geant rich direct hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HIterator),-1,-1,4,"iterRichTrack=",0,"! Iterator over the carRichTrack category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HIterator),-1,-1,4,"iterRichCal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar),-1,-1,4,"pDigitisationPar=",0,"! Pointer to digitisation parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar),-1,-1,4,"pGeometryPar=",0,"! Pointer to geometry parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichCalPar),-1,-1,4,"pCalPar=",0,"! Pointer to calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TF1),-1,-1,4,"ga=",0,"! Gauss function");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TList),-1,-1,4,"fChargeOnWireList=",0,"! holds charge on a wire");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TList),-1,-1,4,"fTrackNumberList=",0,"! holds track number and flag for a hit");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HLocation),-1,-1,4,"loc=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HLocation),-1,-1,4,"loc1=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HLocation),-1,-1,4,"locat=",0,"!");
   G__memvar_setup((void*)0,102,0,1,-1,G__defined_typename("Float_t"),-2,4,"noiseCharge[1000]=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isActiveNoise=",0,"! flag to switch on/off the electronic noise");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isOEM=",0,"! flag to select oem analysis.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"countFBphot=",0,"! counter for feedback photons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"countNoisePad=",0,"! number of pads with a noise cont. above threshold.");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWiresNr=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWiresDist=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"distWirePads=",0,"! distance between wires and pad plane. in cm");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYShift=",0,"! shift on the y pad plane coordinate necessary to");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"binsQE=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargePerChannel=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeScaling=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fElectronsNr=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFactor1=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFactor1Sig=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFactor2=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fFactor2Sig=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fIncreaseNoise=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fParam1=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fParam2=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fQupper=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaValue=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSlopeCorrection=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"fExpSlope=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"correction[6]=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"photeffic=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"photlength=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"noiseProb=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDigitPadMatrix[9]=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useDeltaElectrons=",0,"! switch for use/not use delta electron time smearing");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"useDeltaMomSelection=",0,"! switch for use/not use momentum below momMaxDeltaElecCut for primary electrons to identify delta electrons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ionID=",0,"! beam ion (au ==109)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"momMaxDeltaElecCut=",0,"! delta electron smearing : primary electrons below this mom are considdered to be delta electrons  [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"momMinDeltaCut[6]=",0,"! min mom cut per sector (account for different mirror materials) [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"probDeltaAccepted=",0,"! 0 - 1 probability to accept a delta electron (yield adjustment)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),G__defined_typename("map<HGeantKine*,Float_t>"),-1,4,"mDeltaTrackProb=",0,"! map delta electron candidates to prob");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator),-1,-1,4,"itDelta=",0,"! map delta electron candidates to prob");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,vector<HRichTrack*> >"),-1,4,"mapTracks=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer),-1,-2,4,"fDigitizer=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichDirClus */
static void G__setup_memvarHRichDirClus(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDirClus));
   { HRichDirClus *p; p=(HRichDirClus*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNrPads=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDimX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDimY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTotalCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhiDiff=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMeanY=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichFrameCorner */
static void G__setup_memvarHRichFrameCorner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner));
   { HRichFrameCorner *p; p=(HRichFrameCorner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXcor=",0,"X-coordinate of a frame corner");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYcor=",0,"Y-coordinate of a frame corner");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCornerNr=",0,"Frame corner number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fFlagArea=",0,"Flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichFrame */
static void G__setup_memvarHRichFrame(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrame));
   { HRichFrame *p; p=(HRichFrame*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCornerNr=",0,"Frame corner number counter");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TObjArray),-1,-1,4,"fFrameArr=",0,"Array of frame corners");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"fFrameCorners=",0,"Array of frame corners coordinates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichFrameTab */
static void G__setup_memvarHRichFrameTab(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab));
   { HRichFrameTab *p; p=(HRichFrameTab*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNrFrames=",0,"Number of frames");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichFrame),-1,-1,4,"fpFrame=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPadCorner */
static void G__setup_memvarHRichPadCorner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner));
   { HRichPadCorner *p; p=(HRichPadCorner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXcor=",0,"X-coordinate in cm");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYcor=",0,"Y-coordinate in cm");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCornerNr=",0,"Corner number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAreaFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPadTab */
static void G__setup_memvarHRichPadTab(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadTab));
   { HRichPadTab *p; p=(HRichPadTab*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClonesArray),-1,-1,4,"fPadsArray=",0,"Pad array");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fActivePadsNr=",0,"Number of active pads");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fPadsLongestRow=",0,"Number of the row with the most active pads");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fMiddlePad=",0,"Pad number of the middle pad in the longest row");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPadsLongestRowMiddle=",0,"X-position of the middle pad in the longest row");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"fPadParams=",0,"Array of pad parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichWire */
static void G__setup_memvarHRichWire(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWire));
   { HRichWire *p; p=(HRichWire*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWireNr=",0,"Wire number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fWireX=",0,"X-position of the wire");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichWireTab */
static void G__setup_memvarHRichWireTab(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWireTab));
   { HRichWireTab *p; p=(HRichWireTab*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNrWires=",0,"Total number of wires");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDistWire=",0,"Distance between wires");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TObjArray),-1,-1,4,"fWiresArr=",0,"Array of wires");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayF),-1,-1,4,"fWirePosX=",0,"X-position of the wire filled from HParCond");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichHitCandidate */
static void G__setup_memvarHRichHitCandidate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate));
   { HRichHitCandidate *p; p=(HRichHitCandidate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fX=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPadLabel=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMaxLabel=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"xMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"yMean=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nEqualNeighbors=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichMappingPar */
static void G__setup_memvarHRichMappingPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar));
   { HRichMappingPar *p; p=(HRichMappingPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAddrArrHW[16384]=",0,"Array of HW addresses");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fAddrArrSW[9696]=",0,"Array of SW addresses");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPadFilter */
static void G__setup_memvarHRichPadFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter));
   { HRichPadFilter *p; p=(HRichPadFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichPadGraph */
static void G__setup_memvarHRichPadGraph(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph));
   { HRichPadGraph *p; p=(HRichPadGraph*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iNodeListLen=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iNodeNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"iLinkNodeNr=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->iLabel)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"iLabel=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->pNodeList)-(long)(p)),85,2,0,G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph),-1,-1,1,"pNodeList=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichParAsciiFileIo */
static void G__setup_memvarHRichParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo));
   { HRichParAsciiFileIo *p; p=(HRichParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichParRootFileIo */
static void G__setup_memvarHRichParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo));
   { HRichParRootFileIo *p; p=(HRichParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichTaskSet */
static void G__setup_memvarHRichTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet));
   { HRichTaskSet *p; p=(HRichTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSkipEvent=",0,"Switch to control skipping event w/o found ring in HRichAnalysis task.");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNoiseOn=",0,"Switch to control the noise simulation in HRichDigitizer task.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichThresholdPar */
static void G__setup_memvarHRichThresholdPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar));
   { HRichThresholdPar *p; p=(HRichThresholdPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fCalParVers=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fSigmaMultiplier[6]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichUnpacker */
static void G__setup_memvarHRichUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker));
   { HRichUnpacker *p; p=(HRichUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,2,"kHubDebugId=0ULL",0,"! Identification of debug \"subsubevent\"");
   G__memvar_setup((void*)G__PVOID,104,0,1,-1,G__defined_typename("UInt_t"),-2,2,"kADCZero=0ULL",0,"! ADC module ZERO offset");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fRichId=",0,"! current event #");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fEventNr=",0,"! current event #");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fStartEvt=",0,"! start unpacking with event #");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"fSecMisMatchCntr=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichUnpackercLcLDataWord),-1,-1,2,"fDataWord=",0,"! structure for channel address");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,2,"fpCalCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar),-1,-1,2,"fpMapPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichWireSignal */
static void G__setup_memvarHRichWireSignal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal));
   { HRichWireSignal *p; p=(HRichWireSignal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fWireNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYpos=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fEnergy=",0,"photon energy, necessary for the OEM simulations");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700TaskSet */
static void G__setup_memvarHRich700TaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet));
   { HRich700TaskSet *p; p=(HRich700TaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fNoRingFinder=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700DigiMapPar */
static void G__setup_memvarHRich700DigiMapPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar));
   { HRich700DigiMapPar *p; p=(HRich700DigiMapPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEintcOHRich700PmtDatacOlesslEintgRcOallocatorlEpairlEconstsPintcOHRich700PmtDatagRsPgRsPgR),G__defined_typename("map<Int_t,HRich700PmtData>"),-1,4,"fPmtDataMapPmtId=",0,"pmtid       -> (x,y,z,indx,indy,pmtid)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEpairlEintcOintgRcOHRich700PmtDatacOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOHRich700PmtDatagRsPgRsPgR),G__defined_typename("map<pair<Int_t,Int_t>,HRich700PmtData>"),-1,4,"fPmtDataMapXY=",0,"(xind,yind) -> (x,y,z,indx,indy,pmtid)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofPixelsInRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPmtSize=",0,"in mm");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fPmtGap=",0,"in mm");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayD),-1,-1,4,"fArrayPmt=",0,"linearized pmt info    fArrayPmt[pmyindex*(x,y,z,indx,indy,pmtid)]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayD),-1,-1,4,"fArrayPhiMean=",0,"xy->phi  hist");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_TArrayD),-1,-1,4,"fArrayThetaMean=",0,"xy->theta hist");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TH2F),-1,-1,4,"fhxyPhiMean=",0,"! hist for mapping xy -> Phi   [deg]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TH2F),-1,-1,4,"fhxyThetaMean=",0,"! hist for mapping xy -> Theta [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fmaxX=",0,"!  remember dimensions to calculate indX+indY from x+y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fmaxY=",0,"!  remember dimensions to calculate indX+indY from x+y");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700EventDisplay */
static void G__setup_memvarHRich700EventDisplay(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay));
   { HRich700EventDisplay *p; p=(HRich700EventDisplay*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichPhoton=",0,"! Pointer to the geant rich photon category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichDirect=",0,"! Pointer to the geant rich direct hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatTrack=",0,"! Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatCal=",0,"! Pointer to the richtrack category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichCal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatKine=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),-1,-1,4,"fDigiMap=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNum=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDrawRichPhotons=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDrawRichDirects=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDrawRichCals=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fDrawRichHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofEventsToDraw=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofDrawnEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR),G__defined_typename("vector<TCanvas*>"),-1,4,"fCanvas=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_string),-1,-1,4,"fOutputDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRichDrawHist */
static void G__setup_memvarHRichDrawHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist));
   { HRichDrawHist *p; p=(HRichDrawHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700HistManager */
static void G__setup_memvarHRich700HistManager(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager));
   { HRich700HistManager *p; p=(HRich700HistManager*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEstringcOTNamedmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTNamedmUgRsPgRsPgR),G__defined_typename("map<string,TNamed*>"),-1,4,"fMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700GeoTestQa */
static void G__setup_memvarHRich700GeoTestQa(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa));
   { HRich700GeoTestQa *p; p=(HRich700GeoTestQa*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatKine=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichPhoton=",0,"! Pointer to the geant rich photon category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichDirect=",0,"! Pointer to the geant rich direct hits category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichMirror=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatTrack=",0,"! Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatCal=",0,"! Pointer to the richtrack category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),-1,-1,4,"fDigiMap=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNum=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager),-1,-1,4,"fHM=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR),G__defined_typename("vector<TCanvas*>"),-1,4,"fCanvas=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_string),-1,-1,4,"fOutputDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700Pmt */
static void G__setup_memvarHRich700Pmt(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Pmt));
   { HRich700Pmt *p; p=(HRich700Pmt*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCollectionEfficiency=",0,"collection efficiency. Final QE = QE * fCollectionEfficiency");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fDetectorType=",0,"pmt type");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaMin=",0,"minimum wavelength in QE table");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaMax=",0,"maximum wavelength in QE table");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fLambdaStep=",0,"wavelaength in QE table");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fEfficiency[200]=",0,"Array of QE");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"c=",0,"speed of light");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"h=",0,"Planck constant");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"e=",0,"elementary charge");
   G__memvar_setup((void*)0,100,0,1,-1,G__defined_typename("Double_t"),-2,4,"NRefrac=",0,"refractive index of the gas");
   G__memvar_setup((void*)0,108,0,0,-1,-1,-1,4,"G__virtualinfo=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700DigiPar */
static void G__setup_memvarHRich700DigiPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar));
   { HRich700DigiPar *p; p=(HRich700DigiPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCrossTalkProbability=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofNoiseHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700Digitizer */
static void G__setup_memvarHRich700Digitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer));
   { HRich700Digitizer *p; p=(HRich700Digitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatKine=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichPhoton=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichDirect=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichCal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar),-1,-1,4,"fDigiPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),-1,-1,4,"fDigiMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer),-1,-2,4,"fDigitizer=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fStoreOnlyConvertedPhotonTrackIds=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseDeltaElectrons=",0,"! switch for use/not use delta electron time smearing");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUseDeltaMomSelection=",0,"! switch for use/not use momentum below momMaxDeltaElecCut for primary electrons to identify delta electrons");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fIonID=",0,"! beam ion (au ==109)");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMomMaxDeltaElecCut=",0,"! delta electron smearing : primary electrons below this mom are considdered to be delta electrons  [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMomMinDeltaCut[6]=",0,"! min mom cut per sector (account for different mirror materials) [MeV/c]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fProbDeltaAccepted=",0,"! 0 - 1 probability to accept a delta electron (yield adjustment)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR),G__defined_typename("map<HGeantKine*,Float_t>"),-1,4,"fmDeltaTrackProb=",0,"! map delta electron candidates to prob");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator),-1,-1,4,"fitDelta=",0,"! map delta electron candidates to prob");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700Pmt),-1,-1,4,"fPmt=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fCrossTalkProbability=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofNoiseHits=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700RingFinderPar */
static void G__setup_memvarHRich700RingFinderPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar));
   { HRich700RingFinderPar *p; p=(HRich700RingFinderPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofParts=",0,"number of groups of hits for HT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxDistance=",0,"maximum distance between two hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMinDistance=",0,"minimum distance between two hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMinRadius=",0,"minimum radius of the ring");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxRadius=",0,"maximum radius of the ring");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofBinsX=",0,"number of bins in X direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofBinsY=",0,"number of bins in Y direction");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fHTCut=",0,"cut number of entries in maximum bin of XY histogram");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fNofBinsR=",0,"number of bins in radius histogram");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fHTCutR=",0,"cut number of entries in maximum bin of Radius histogram");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMinNofHitsInArea=",0,"minimum number of hits in the local area");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUsedHitsAllCut=",0,"percent of used hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fRmsCoeffCOP=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMaxCutCOP=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700RingFinderIdeal */
static void G__setup_memvarHRich700RingFinderIdeal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal));
   { HRich700RingFinderIdeal *p; p=(HRich700RingFinderIdeal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatKine=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichCal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),-1,-1,4,"fDigiMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700RingFinderHough */
static void G__setup_memvarHRich700RingFinderHough(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough));
   { HRich700RingFinderHough *p; p=(HRich700RingFinderHough*)0x1000; if (p) { }
   G__memvar_setup((void*)G__PVOID,114,0,1,-1,G__defined_typename("UShort_t"),-2,2,"MAX_NOF_HITS=65000ULL",0,"maximum number of hits in RICH detector");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNofParts=",0,"number of groups of hits for HT");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxDistance=",0,"maximum distance between two hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinDistance=",0,"minimum distance between two hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinDistanceSq=",0,"= fMinDistance*fMinDistance");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxDistanceSq=",0,"= fMaxDistance*fMaxDistance");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMinRadius=",0,"minimum radius of the ring");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxRadius=",0,"maximum radius of the ring");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDx=",0,"x bin width of the ring center histogram");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDy=",0,"y bin width of the ring center histogram");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fDr=",0,"width of the ring radius histogram");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNofBinsX=",0,"number of bins in X direction");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNofBinsY=",0,"number of bins in Y direction");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNofBinsXY=",0,"fNofBinsX*fNofBinsY");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fHTCut=",0,"cut number of entries in maximum bin of XY histogram");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fNofBinsR=",0,"number of bins in radius histogram");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fHTCutR=",0,"cut number of entries in maximum bin of Radius histogram");
   G__memvar_setup((void*)0,114,0,0,-1,G__defined_typename("UShort_t"),-1,2,"fMinNofHitsInArea=",0,"minimum number of hits in the local area");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fUsedHitsAllCut=",0,"percent of used hits");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRmsCoeffCOP=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fMaxCutCOP=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCurMinX=",0,"current minimum X position of the local area");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCurMinY=",0,"current minimum Y position of the local area");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgR),G__defined_typename("vector<HRich700HoughHit>"),-1,2,"fData=",0,"Rich Hough hits");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),G__defined_typename("vector<UShort_t>"),-1,2,"fHist=",0,"XY histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR),G__defined_typename("vector<UShort_t>"),-1,2,"fHistR=",0,"Radius histogram");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR),G__defined_typename("vector<vector<UShort_t> >"),-1,2,"fHitInd=",0,"store hit indexes for different group of hits");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlEHRich700RingcOallocatorlEHRich700RinggRsPgR),G__defined_typename("vector<HRich700Ring>"),-1,2,"fFoundRings=",0,"store found rings");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,2,"fCatRichCal=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,2,"fCatRichHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar),-1,-1,2,"fDigiMap=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar),-1,-1,2,"fRingPar=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fEventNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fIsSimulation=",0,"runnig sim or exp ?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HRich700RecoQa */
static void G__setup_memvarHRich700RecoQa(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa));
   { HRich700RecoQa *p; p=(HRich700RecoQa*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatKine=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichHit=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HCategory),-1,-1,4,"fCatRichCal=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventNum=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager),-1,-1,4,"fHM=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR),G__defined_typename("map<Int_t,Int_t>"),-1,4,"fHitMap=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fMinNofRichCalsAcc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fTrueQuota=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR),G__defined_typename("vector<TCanvas*>"),-1,4,"fCanvas=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__RichDictLN_string),-1,-1,4,"fOutputDir=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RichDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRichDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHRichHit(void) {
   /* HRichHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHit));
   G__memfunc_setup("HRichHit",755,G__RichDict_203_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichHit",755,G__RichDict_203_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichHit), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - q i - 'Int_t' 0 - fp "
"i - 'Int_t' 0 - lab", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichHit",755,G__RichDict_203_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichHit), -1, 0, 1, 1, 1, 0, "u 'HRichHit' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_203_0_4, 117, G__get_linked_tagnum(&G__RichDictLN_HRichHit), -1, 1, 1, 1, 1, 0, "u 'HRichHit' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__RichDict_203_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAddress",1113,G__RichDict_203_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RichDict_203_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RichDict_203_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNr",1026,G__RichDict_203_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__RichDict_203_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - px F - 'Float_t' 0 - py", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabXYZ",858,G__RichDict_203_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - px F - 'Float_t' 0 - py "
"F - 'Float_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__RichDict_203_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__RichDict_203_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingCenterX",1417,G__RichDict_203_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "RICH700 : PMT index x", (void*) NULL, 0);
   G__memfunc_setup("getRingCenterY",1418,G__RichDict_203_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "RICH700 : PMT index y", (void*) NULL, 0);
   G__memfunc_setup("getRich700CircleCenterX",2152,G__RichDict_203_0_16, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRich700CircleCenterY",2153,G__RichDict_203_0_17, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRich700CircleRadius",2071,G__RichDict_203_0_18, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRich700CircleChi2",1781,G__RichDict_203_0_19, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRich700NofRichCals",1929,G__RichDict_203_0_20, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dumpToStdout",1276,G__RichDict_203_0_21, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadY",686,G__RichDict_203_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadX",685,G__RichDict_203_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTestRati",1136,G__RichDict_203_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTestAsym",1146,G__RichDict_203_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTestCharge",1322,G__RichDict_203_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanTheta",1207,G__RichDict_203_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMeanPhi",994,G__RichDict_203_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTestDens",1130,G__RichDict_203_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTestBord",1127,G__RichDict_203_0_30, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTestDyna",1132,G__RichDict_203_0_31, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRejFake",984,G__RichDict_203_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingQuality",1465,G__RichDict_203_0_33, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingPatMat",1303,G__RichDict_203_0_34, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingHouTra",1315,G__RichDict_203_0_35, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingAmplitude",1653,G__RichDict_203_0_36, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingPadNr",1189,G__RichDict_203_0_37, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingLocalMax4",1557,G__RichDict_203_0_38, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingLocalMax8",1561,G__RichDict_203_0_39, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingClusterNr",1650,G__RichDict_203_0_40, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingAlgorithmIndex",2159,G__RichDict_203_0_41, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingClusterSize",1869,G__RichDict_203_0_42, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingClusterLMax4",1880,G__RichDict_203_0_43, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingClusterLMax8",1884,G__RichDict_203_0_44, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingMaxClusterSize",2163,G__RichDict_203_0_45, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingMaxClusterSum",2061,G__RichDict_203_0_46, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRingMaxThrClusterSize",2465,G__RichDict_203_0_47, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCentroid",1144,G__RichDict_203_0_48, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRadius",936,G__RichDict_203_0_49, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__RichDict_203_0_50, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventNr",1038,G__RichDict_203_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - lNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__RichDict_203_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__RichDict_203_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__RichDict_203_0_54, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLabXYZ",870,G__RichDict_203_0_55, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py "
"f - 'Float_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingCenterX",1429,G__RichDict_203_0_56, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingCenterY",1430,G__RichDict_203_0_57, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRich700CircleCenterX",2164,G__RichDict_203_0_58, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRich700CircleCenterY",2165,G__RichDict_203_0_59, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRich700CircleRadius",2083,G__RichDict_203_0_60, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRich700CircleChi2",1793,G__RichDict_203_0_61, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRich700NofRichCals",1941,G__RichDict_203_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadY",698,G__RichDict_203_0_63, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - pady", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadX",697,G__RichDict_203_0_64, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - padx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanTheta",1219,G__RichDict_203_0_65, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMeanPhi",1006,G__RichDict_203_0_66, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestDens",1142,G__RichDict_203_0_67, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestBord",1139,G__RichDict_203_0_68, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestDyna",1144,G__RichDict_203_0_69, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestRati",1148,G__RichDict_203_0_70, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestAsym",1158,G__RichDict_203_0_71, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTestCharge",1334,G__RichDict_203_0_72, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRejFake",996,G__RichDict_203_0_73, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingQuality",1477,G__RichDict_203_0_74, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - qual", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingPatMat",1315,G__RichDict_203_0_75, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - patmat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingHouTra",1327,G__RichDict_203_0_76, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - houtra", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingAmplitude",1665,G__RichDict_203_0_77, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - ampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingPadNr",1201,G__RichDict_203_0_78, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - padnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingLocalMax4",1569,G__RichDict_203_0_79, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - locmax4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingLocalMax8",1573,G__RichDict_203_0_80, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - locmax8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingClusterNr",1662,G__RichDict_203_0_81, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - clusternr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingAlgorithmIndex",2171,G__RichDict_203_0_82, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - algoindex", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingClusterSize",1881,G__RichDict_203_0_83, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - clustersize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingClusterLMax4",1892,G__RichDict_203_0_84, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - clusterLMax4", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingClusterLMax8",1896,G__RichDict_203_0_85, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - clusterLMax8", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingMaxClusterSize",2175,G__RichDict_203_0_86, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fmaxclussize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingMaxClusterSum",2073,G__RichDict_203_0_87, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fmaxclussum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRingMaxThrClusterSize",2477,G__RichDict_203_0_88, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fmaxthrclussize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCentroid",1156,G__RichDict_203_0_89, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - centro", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRadius",948,G__RichDict_203_0_90, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - rad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNewRich",908,G__RichDict_203_0_91, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_203_0_92, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_203_0_93, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_203_0_94, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_203_0_95, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_203_0_99, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_203_0_100, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_203_0_101, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_203_0_102, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_203_0_103, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichHit", 881, G__RichDict_203_0_104, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichLabel(void) {
   /* HRichLabel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichLabel));
   G__memfunc_setup("HRichLabel",942,G__RichDict_204_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichLabel), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichLabel",942,G__RichDict_204_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichLabel), -1, 0, 1, 1, 1, 0, "u 'HRichLabel' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_204_0_3, 117, G__get_linked_tagnum(&G__RichDictLN_HRichLabel), -1, 1, 1, 1, 1, 0, "u 'HRichLabel' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__RichDict_204_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_204_0_5, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichLabel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_204_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichLabel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_204_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichLabel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_204_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichLabel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_204_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_204_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichLabel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_204_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichLabel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_204_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichLabel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_204_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichLabel::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichLabel", 1068, G__RichDict_204_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPadSignal(void) {
   /* HRichPadSignal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal));
   G__memfunc_setup("HRichPadSignal",1345,G__RichDict_205_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadSignal",1345,G__RichDict_205_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RichDict_205_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAmplitude",1253,G__RichDict_205_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addAmplitude",1230,G__RichDict_205_0_5, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabel",800,G__RichDict_205_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLock",713,G__RichDict_205_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsCleanedSingle",1802,G__RichDict_205_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsCleanedHigh",1576,G__RichDict_205_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAmplitude",1265,G__RichDict_205_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLabel",812,G__RichDict_205_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - label", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLock",725,G__RichDict_205_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - lock", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsCleanedSingle",1814,G__RichDict_205_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsCleanedHigh",1588,G__RichDict_205_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_205_0_15, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPadSignal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_205_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadSignal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_205_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPadSignal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_205_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPadSignal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_205_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_205_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadSignal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_205_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadSignal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_205_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadSignal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_205_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadSignal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichPadSignal", 1345, G__RichDict_205_0_27, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal), -1, 0, 1, 1, 1, 0, "u 'HRichPadSignal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichPadSignal", 1471, G__RichDict_205_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_205_0_29, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal), -1, 1, 1, 1, 1, 0, "u 'HRichPadSignal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichAnalysisPar(void) {
   /* HRichAnalysisPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar));
   G__memfunc_setup("HRichAnalysisPar",1589,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar), -1, 0, 1, 1, 4, 0, "u 'HRichAnalysisPar' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar), -1, 1, 1, 1, 4, 0, "u 'HRichAnalysisPar' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichAnalysisPar",1589,G__RichDict_209_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichAnalysisParameters\"' name C - 'Char_t' 10 '\"Rich Analysis Parameters\"' title "
"C - 'Char_t' 10 '\"RichAnaNormalBias\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("defaultInit",1145,G__RichDict_209_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setFileName",1101,G__RichDict_209_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_209_0_10, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichAnalysisPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_209_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysisPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_209_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichAnalysisPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_209_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichAnalysisPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_209_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_209_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysisPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_209_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichAnalysisPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_209_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysisPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_209_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichAnalysisPar::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichAnalysisPar", 1715, G__RichDict_209_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichGeometryPar(void) {
   /* HRichGeometryPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar));
   G__memfunc_setup("HRichGeometryPar",1597,G__RichDict_210_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichGeometryParameters\"' name C - 'Char_t' 10 '\"Rich Geometry Parameters\"' title "
"C - 'Char_t' 10 '\"RichGeometryParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incrementSectorNr",1781,G__RichDict_210_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCol",689,G__RichDict_210_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRow",715,G__RichDict_210_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParameters",1480,G__RichDict_210_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSectorsNr",1251,G__RichDict_210_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumns",1057,G__RichDict_210_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRows",747,G__RichDict_210_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsNr",904,G__RichDict_210_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorActive",1548,G__RichDict_210_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadStatus",1241,G__RichDict_210_0_15, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorShift",1454,G__RichDict_210_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistanceWiresPads",2045,G__RichDict_210_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorPhi",1233,G__RichDict_210_0_18, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFramePar",1102,G__RichDict_210_0_19, 85, G__get_linked_tagnum(&G__RichDictLN_HRichFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWiresPar",1133,G__RichDict_210_0_20, 85, G__get_linked_tagnum(&G__RichDictLN_HRichWireTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsPar",1003,G__RichDict_210_0_21, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPadTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSectorActive",1560,G__RichDict_210_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setColumns",1069,G__RichDict_210_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRows",759,G__RichDict_210_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSectorPhi",1245,G__RichDict_210_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - s f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSectorShift",1466,G__RichDict_210_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - shift", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistanceWiresPads",2057,G__RichDict_210_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_210_0_28, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichGeometryPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_210_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichGeometryPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_210_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichGeometryPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_210_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichGeometryPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_210_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_210_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichGeometryPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_210_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichGeometryPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_210_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichGeometryPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_210_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichGeometryPar::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichGeometryPar", 1723, G__RichDict_210_0_40, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichHitHeader(void) {
   /* HRichHitHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader));
   G__memfunc_setup("HRichHitHeader",1340,G__RichDict_211_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCurrentSec",1342,G__RichDict_211_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNr",1026,G__RichDict_211_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExecutedAnalysis",1979,G__RichDict_211_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RichDict_211_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentSec",1354,G__RichDict_211_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventNr",1038,G__RichDict_211_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setExecutedAnalysis",1991,G__RichDict_211_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__RichDict_211_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_211_0_10, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichHitHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_211_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_211_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichHitHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_211_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichHitHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_211_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_211_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_211_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHitHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_211_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_211_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHitHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichHitHeader", 1340, G__RichDict_211_0_22, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader), -1, 0, 1, 1, 1, 0, "u 'HRichHitHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichHitHeader", 1466, G__RichDict_211_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_211_0_24, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichHitHeader), -1, 1, 1, 1, 1, 0, "u 'HRichHitHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPadClean(void) {
   /* HRichPadClean */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadClean));
   G__memfunc_setup("DeletePulse",1116,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"U 'HRichAnalysis' - 0 - showYou i - 'Int_t' 0 - border "
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadClean",1222,G__RichDict_212_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadClean), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadClean",1222,G__RichDict_212_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadClean), -1, 0, 1, 1, 1, 0, "u 'HRichPadClean' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_212_0_4, 117, G__get_linked_tagnum(&G__RichDictLN_HRichPadClean), -1, 1, 1, 1, 1, 0, "u 'HRichPadClean' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanAlonePad",1255,G__RichDict_212_0_5, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe i - 'Int_t' 0 '3' border "
"i - 'Int_t' 0 '1' lowerThr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanHighPulse",1388,G__RichDict_212_0_6, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe i - 'Int_t' 0 '2' border "
"i - 'Int_t' 0 '200' upperThr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Execute",723,G__RichDict_212_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysis' - 0 - giveMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__RichDict_212_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateDPhi",1299,G__RichDict_212_0_9, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe i - 'Int_t' 0 - xmin "
"i - 'Int_t' 0 - ymin i - 'Int_t' 0 - xmax "
"i - 'Int_t' 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_212_0_10, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPadClean::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_212_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadClean::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_212_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPadClean::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_212_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPadClean::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_212_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_212_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadClean::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_212_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadClean::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_212_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadClean::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_212_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadClean::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichPadClean", 1348, G__RichDict_212_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPadLabel(void) {
   /* HRichPadLabel */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel));
   G__memfunc_setup("HRichPadLabel",1219,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel), -1, 0, 1, 1, 4, 0, "u 'HRichPadLabel' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadLabel",1219,G__RichDict_213_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadLabel",1219,G__RichDict_213_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - padsx i - 'Int_t' 0 - padsy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_213_0_4, 117, G__get_linked_tagnum(&G__RichDictLN_HRichPadLabel), -1, 1, 1, 1, 1, 0, "u 'HRichPadLabel' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LabelPads",872,G__RichDict_213_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe i - 'Int_t' 0 - padDistance", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Execute",723,G__RichDict_213_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysis' - 0 - giveMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__RichDict_213_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_213_0_8, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPadLabel::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_213_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadLabel::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_213_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPadLabel::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_213_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPadLabel::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_213_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_213_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadLabel::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_213_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadLabel::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_213_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadLabel::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_213_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadLabel::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichPadLabel", 1345, G__RichDict_213_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichRingFind(void) {
   /* HRichRingFind */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichRingFind));
   G__memfunc_setup("HRichRingFind",1247,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RichDictLN_HRichRingFind), -1, 0, 1, 1, 4, 0, "u 'HRichRingFind' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RichDictLN_HRichRingFind), -1, 1, 1, 1, 4, 0, "u 'HRichRingFind' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HomogenDistr",1235,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 1, 2, 0, 
"d - 'Double_t' 0 - left d - 'Double_t' 0 - right", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichRingFind",1247,G__RichDict_214_0_4, 105, G__get_linked_tagnum(&G__RichDictLN_HRichRingFind), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__RichDict_214_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysis' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetAlgorithmNr",1415,G__RichDict_214_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysis' - 0 - showMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDistance",1182,G__RichDict_214_0_7, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"u 'HRichHit' - 11 - ring1 u 'HRichHit' - 11 - ring2", "uses integer pad as ring-center", (void*) NULL, 0);
   G__memfunc_setup("CalcDistanceMean",1567,G__RichDict_214_0_8, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"u 'HRichHit' - 11 - ring1 u 'HRichHit' - 11 - ring2", "uses fraction of pad as ring-center", (void*) NULL, 0);
   G__memfunc_setup("CalcDistance",1182,G__RichDict_214_0_9, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"u 'HRichHit' - 11 - ring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcDistance",1182,G__RichDict_214_0_10, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - x1 i - 'Int_t' 0 - y1 "
"i - 'Int_t' 0 - x2 i - 'Int_t' 0 - y2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestDensity",1152,G__RichDict_214_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'HRichHit' - 0 - pHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestBorder",1022,G__RichDict_214_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'HRichHit' - 0 - pHit "
"i - 'Int_t' 0 - amplit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestDynamic",1125,G__RichDict_214_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'HRichHit' - 0 - pHit "
"i - 'Int_t' 0 - amplit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestRatio",927,G__RichDict_214_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'HRichHit' - 0 - pHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestAsymmetry",1387,G__RichDict_214_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'HRichHit' - 0 - pHit "
"i - 'Int_t' 0 - amplit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestRingCharge",1402,G__RichDict_214_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'HRichHit' - 0 - hit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("TestRing",816,G__RichDict_214_0_17, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'HRichHit' - 0 - hit "
"i - 'Int_t' 0 - amplit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CleanIdenticalPairs",1903,G__RichDict_214_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysis' - 0 - showMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxFinding",997,G__RichDict_214_0_19, 121, -1, -1, 0, 6, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'TList' - 0 - hitList "
"U 'TArrayI' - 0 - in U 'TArrayI' - 0 - out "
"i - 'Int_t' 0 - ringnr f - 'Float_t' 0 - distance", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxAnalysis",1130,G__RichDict_214_0_20, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe U 'TList' - 0 - hitList "
"U 'TArrayI' - 0 - in U 'TArrayI' - 0 - out "
"i - 'Int_t' 0 - minAmpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxCluster",1032,G__RichDict_214_0_21, 121, -1, -1, 0, 6, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'TArrayI' - 0 - in "
"U 'TArrayI' - 0 - out i - 'Int_t' 0 - nowPad "
"i - 'Int_t' 0 - maxCode i - 'Int_t' 0 - minAmpl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxLabAmpl",959,G__RichDict_214_0_22, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'TList' - 0 - hitList i - 'Int_t' 0 - maxCode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxSelector",1127,G__RichDict_214_0_23, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe U 'TList' - 0 - hitList "
"U 'TArrayI' - 0 - in U 'TArrayI' - 0 - out", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MaxMarker",904,G__RichDict_214_0_24, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou U 'TArrayI' - 0 - in "
"U 'TArrayI' - 0 - out i - 'Int_t' 0 - nowPad "
"i - 'Int_t' 0 - maxCode", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CloseMaxRejection",1727,G__RichDict_214_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - hitList", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcRingParameters",1815,G__RichDict_214_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe U 'HRichHit' - 0 - pHit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcFakeContribution",2026,G__RichDict_214_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRichAnalysis' - 0 - showMe", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("CalcRingClusters",1624,G__RichDict_214_0_28, 121, -1, -1, 0, 5, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showYou I - 'Int_t' 0 - dumpArr "
"U 'HRichHit' - 0 - pHit i - 'Int_t' 0 - nowX "
"i - 'Int_t' 0 - nowY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RingFindFitMatrix",1705,G__RichDict_214_0_29, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe i - 'Int_t' 0 - minampl "
"i - 'Int_t' 0 - distance i - 'Int_t' 0 '5' howmanyrings", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RingFindHoughTransf",1914,G__RichDict_214_0_30, 121, -1, -1, 0, 4, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe i - 'Int_t' 0 - minampl "
"i - 'Int_t' 0 - distance i - 'Int_t' 0 '5' howmanyrings", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MatchRings",1008,G__RichDict_214_0_31, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"U 'HRichAnalysis' - 0 - showMe U 'TList' - 0 - hitList1 "
"U 'TList' - 0 - hitList2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Execute",723,G__RichDict_214_0_32, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysis' - 0 - giveMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_214_0_33, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichRingFind::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_214_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichRingFind::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_214_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichRingFind::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_214_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichRingFind::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_214_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_214_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichRingFind::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_214_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichRingFind::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_214_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichRingFind::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_214_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichRingFind::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichRingFind", 1373, G__RichDict_214_0_45, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichAnalysis(void) {
   /* HRichAnalysis */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis));
   G__memfunc_setup("HRichAnalysis",1298,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis), -1, 0, 1, 1, 4, 0, "u 'HRichAnalysis' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis), -1, 1, 1, 1, 4, 0, "u 'HRichAnalysis' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichAnalysis",1298,G__RichDict_215_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichAnalysis",1298,G__RichDict_215_0_4, 105, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysis), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' kSkip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParameters",1480,G__RichDict_215_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__RichDict_215_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPadsXNr",960,G__RichDict_215_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPadsYNr",961,G__RichDict_215_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetActiveSector",1528,G__RichDict_215_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sectornr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetActiveSector",1516,G__RichDict_215_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetNextSector",1339,G__RichDict_215_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPadNr",757,G__RichDict_215_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPad",565,G__RichDict_215_0_17, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetPad",565,G__RichDict_215_0_18, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPadSignal), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - padx i - 'Int_t' 0 - pady", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabelNr",960,G__RichDict_215_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLabel",768,G__RichDict_215_0_20, 85, G__get_linked_tagnum(&G__RichDictLN_HRichLabel), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - labelnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRingNr",880,G__RichDict_215_0_21, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRing",688,G__RichDict_215_0_22, 85, G__get_linked_tagnum(&G__RichDictLN_HRichHit), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - ringnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOut",500,G__RichDict_215_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOut",500,G__RichDict_215_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nowPad i - 'Int_t' 0 - dx "
"i - 'Int_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsOut",500,G__RichDict_215_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - x i - 'Int_t' 0 - y "
"i - 'Int_t' 0 - dx i - 'Int_t' 0 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalCat",872,G__RichDict_215_0_26, 85, G__get_linked_tagnum(&G__RichDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitCat",893,G__RichDict_215_0_27, 85, G__get_linked_tagnum(&G__RichDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitHdrCat",1179,G__RichDict_215_0_28, 85, G__get_linked_tagnum(&G__RichDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalCat",884,G__RichDict_215_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pCalCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitCat",905,G__RichDict_215_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pHitCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitHdrCat",1191,G__RichDict_215_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pHitHdrCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAnalysisPar",1447,G__RichDict_215_0_32, 85, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeometryPar",1455,G__RichDict_215_0_33, 85, G__get_linked_tagnum(&G__RichDictLN_HRichGeometryPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAnalysisPar",1459,G__RichDict_215_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRichAnalysisPar' - 0 - pPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeometryPar",1467,G__RichDict_215_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRichGeometryPar' - 0 - pPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateHeaders",1343,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"i - 'Int_t' 10 - nSec i - 'Int_t' 0 - nEvNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateHits",1051,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "i - 'Int_t' 0 - nSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsIndex",1216,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 2, 0, 
"i - 'Int_t' 0 - nSec i - 'Int_t' 0 - nRow "
"i - 'Int_t' 0 - nCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsPointer",1449,(G__InterfaceMethod) NULL, 73, -1, G__defined_typename("Int_t"), 0, 2, 1, 2, 0, 
"I - 'Int_t' 0 - pPads i - 'Int_t' 0 - nSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_215_0_41, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichAnalysis::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_215_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysis::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_215_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichAnalysis::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_215_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichAnalysis::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_215_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_215_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysis::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_215_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichAnalysis::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_215_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysis::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_215_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichAnalysis::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichAnalysis", 1424, G__RichDict_215_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichCalSim(void) {
   /* HRichCalSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalSim));
   G__memfunc_setup("initTrackIds",1225,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichCalSim",1031,G__RichDict_220_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCalSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichCalSim",1031,G__RichDict_220_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCalSim), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichCalSim",1031,G__RichDict_220_0_4, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCalSim), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - r "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEnergy",950,G__RichDict_220_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ene", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addEnergy",915,G__RichDict_220_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addHit",590,G__RichDict_220_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkTrackId",1184,G__RichDict_220_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrackId",971,G__RichDict_220_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__RichDict_220_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNofTrackIds",1400,G__RichDict_220_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackId",994,G__RichDict_220_0_12, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnergy",938,G__RichDict_220_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isNewRich",908,G__RichDict_220_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_220_0_15, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichCalSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_220_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_220_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichCalSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_220_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichCalSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_220_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_220_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_220_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCalSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_220_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_220_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCalSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichCalSim", 1031, G__RichDict_220_0_27, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichCalSim), -1, 0, 1, 1, 1, 0, "u 'HRichCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichCalSim", 1157, G__RichDict_220_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_220_0_29, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichCalSim), -1, 1, 1, 1, 1, 0, "u 'HRichCalSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichHitSim(void) {
   /* HRichHitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitSim));
   G__memfunc_setup("HRichHitSim",1052,G__RichDict_221_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_221_0_2, 117, G__get_linked_tagnum(&G__RichDictLN_HRichHitSim), -1, 1, 1, 1, 1, 0, "u 'HRichHitSim' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_221_0_3, 117, G__get_linked_tagnum(&G__RichDictLN_HRichHitSim), -1, 1, 1, 1, 1, 0, "u 'HRichHit' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_221_0_4, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichHitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_221_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_221_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichHitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_221_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichHitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_221_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_221_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_221_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_221_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_221_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichHitSim", 1052, G__RichDict_221_0_16, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichHitSim), -1, 0, 1, 1, 1, 0, "u 'HRichHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichHitSim", 1178, G__RichDict_221_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichRingFindSim(void) {
   /* HRichRingFindSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim));
   G__memfunc_setup("HRichRingFindSim",1544,G__RichDict_222_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichRingFindSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__RichDict_222_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysisSim' - 0 - showMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Execute",723,G__RichDict_222_0_3, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichAnalysisSim' - 0 - giveMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("LookForTrack",1201,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HRichAnalysisSim' - 0 - showMe", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_222_0_5, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichRingFindSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_222_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichRingFindSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_222_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichRingFindSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_222_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichRingFindSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_222_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_222_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichRingFindSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_222_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichRingFindSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_222_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichRingFindSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_222_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichRingFindSim::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichRingFindSim", 1670, G__RichDict_222_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichAnalysisSim(void) {
   /* HRichAnalysisSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim));
   G__memfunc_setup("HRichAnalysisSim",1595,G__RichDict_223_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichAnalysisSim",1595,G__RichDict_223_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichAnalysisSim), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' kSkip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getPadsNTrack1",1340,G__RichDict_223_0_6, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - padx i - 'Int_t' 0 - pady "
"i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadsNTrack2",1341,G__RichDict_223_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__RichDict_223_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlag",698,G__RichDict_223_0_9, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - index", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sortTracks",1072,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HRichHitSim' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateHits",1051,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "i - 'Int_t' 0 - nSec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParameters",1480,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_223_0_13, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichAnalysisSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_223_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysisSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_223_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichAnalysisSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_223_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichAnalysisSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_223_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_223_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysisSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_223_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichAnalysisSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_223_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichAnalysisSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_223_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichAnalysisSim::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichAnalysisSim", 1721, G__RichDict_223_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichCal(void) {
   /* HRichCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCal));
   G__memfunc_setup("HRichCal",734,G__RichDict_225_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichCal",734,G__RichDict_225_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCal), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichCal",734,G__RichDict_225_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCal), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - s i - 'Int_t' 0 - r "
"i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__RichDict_225_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RichDict_225_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRow",632,G__RichDict_225_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__RichDict_225_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNr",1026,G__RichDict_225_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RichDict_225_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsCleanedSingle",1802,G__RichDict_225_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsCleanedHigh",1576,G__RichDict_225_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIsCleanedSector",1816,G__RichDict_225_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setCharge",918,G__RichDict_225_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__RichDict_225_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRow",644,G__RichDict_225_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCol",618,G__RichDict_225_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsCleanedSingle",1814,G__RichDict_225_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsCleanedHigh",1588,G__RichDict_225_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setIsCleanedSector",1828,G__RichDict_225_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventNr",1038,G__RichDict_225_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCharge",883,G__RichDict_225_0_22, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_225_0_23, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_225_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_225_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_225_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_225_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_225_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_225_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_225_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_225_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichCal", 734, G__RichDict_225_0_35, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichCal), -1, 0, 1, 1, 1, 0, "u 'HRichCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichCal", 860, G__RichDict_225_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_225_0_37, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichCal), -1, 1, 1, 1, 1, 0, "u 'HRichCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichCalParCell(void) {
   /* HRichCalParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell));
   G__memfunc_setup("HRichCalParCell",1409,G__RichDict_229_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichCalParCell",1409,G__RichDict_229_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - offset f - 'Float_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RichDict_229_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__RichDict_229_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma",817,G__RichDict_229_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RichDict_229_0_6, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRow",632,G__RichDict_229_0_7, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__RichDict_229_0_8, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RichDict_229_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocationIndex",1649,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setOffset",947,G__RichDict_229_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigma",829,G__RichDict_229_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParams",944,G__RichDict_229_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - offset f - 'Float_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__RichDict_229_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRow",644,G__RichDict_229_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCol",618,G__RichDict_229_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_229_0_18, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichCalParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_229_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_229_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichCalParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_229_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichCalParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_229_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_229_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_229_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCalParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_229_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_229_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCalParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichCalParCell", 1409, G__RichDict_229_0_30, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell), -1, 0, 1, 1, 1, 0, "u 'HRichCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichCalParCell", 1535, G__RichDict_229_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_229_0_32, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell), -1, 1, 1, 1, 1, 0, "u 'HRichCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichCalPar(void) {
   /* HRichCalPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichCalPar));
   G__memfunc_setup("HRichCalPar",1025,G__RichDict_230_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichCalPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichCalPar\"' name C - 'Char_t' 10 '\"Rich Calibration Parameters\"' title "
"C - 'Char_t' 10 '\"RichPrimaryCalibration\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__RichDict_230_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__RichDict_230_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__RichDict_230_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - fout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__RichDict_230_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlot",738,G__RichDict_230_0_9, 85, G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,G__RichDict_230_0_10, 85, G__get_linked_tagnum(&G__RichDictLN_HRichCalParCell), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__RichDict_230_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - row "
"i - 'Int_t' 0 - col f - 'Float_t' 0 - offset "
"f - 'Float_t' 0 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_230_0_12, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichCalPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_230_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_230_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichCalPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_230_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichCalPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_230_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_230_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_230_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCalPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_230_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichCalPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_230_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichCalPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichCalPar", 1025, G__RichDict_230_0_24, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichCalPar), -1, 0, 1, 1, 1, 0, "u 'HRichCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichCalPar", 1151, G__RichDict_230_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_230_0_26, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichCalPar), -1, 1, 1, 1, 1, 0, "u 'HRichCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichContFact(void) {
   /* HRichContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichContFact",1248,G__RichDict_236_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_236_0_4, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_236_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_236_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_236_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_236_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_236_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_236_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_236_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_236_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichContFact", 1248, G__RichDict_236_0_16, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichContFact), -1, 0, 1, 1, 1, 0, "u 'HRichContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichContFact", 1374, G__RichDict_236_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_236_0_18, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichContFact), -1, 1, 1, 1, 1, 0, "u 'HRichContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichDetector(void) {
   /* HRichDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDetector));
   G__memfunc_setup("HRichDetector",1288,G__RichDict_238_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildLinearCat",1411,G__RichDict_238_0_2, 85, G__get_linked_tagnum(&G__RichDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - classname i - 'Int_t' 10 '1000' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildMatrixCat",1437,G__RichDict_238_0_3, 85, G__get_linked_tagnum(&G__RichDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - classname f - 'Float_t' 10 - fillRate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildSimMatrixCat",1734,G__RichDict_238_0_4, 85, G__get_linked_tagnum(&G__RichDictLN_HCategory), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - classname f - 'Float_t' 10 - fillRate "
"i - 'Int_t' 10 '200' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildTask",931,G__RichDict_238_0_5, 85, G__get_linked_tagnum(&G__RichDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - cat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_238_0_10, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_238_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_238_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_238_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_238_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_238_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_238_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_238_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_238_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichDetector", 1288, G__RichDict_238_0_22, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichDetector), -1, 0, 1, 1, 1, 0, "u 'HRichDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichDetector", 1414, G__RichDict_238_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_238_0_24, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichDetector), -1, 1, 1, 1, 1, 0, "u 'HRichDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichDigitisationPar(void) {
   /* HRichDigitisationPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar));
   G__memfunc_setup("HRichDigitisationPar",2009,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar), -1, 0, 1, 1, 4, 0, "u 'HRichDigitisationPar' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar), -1, 1, 1, 1, 4, 0, "u 'HRichDigitisationPar' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichDigitisationPar",2009,G__RichDict_239_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichDigitisationPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichDigitisationParameters\"' name C - 'Char_t' 10 '\"Rich Digitisation Parameters\"' title "
"C - 'Char_t' 10 '\"RichDigiProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParams",1169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setFileName",1101,G__RichDict_239_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 0 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElectronsNr",1455,G__RichDict_239_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargePerChannel",1898,G__RichDict_239_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaValue",1326,G__RichDict_239_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIncreaseNoise",1640,G__RichDict_239_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQEBinsNr",1058,G__RichDict_239_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhotonLenArray",1750,G__RichDict_239_0_14, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhotonEffArray",1736,G__RichDict_239_0_15, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorrectionParams",1980,G__RichDict_239_0_16, 70, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQupper",957,G__RichDict_239_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFactor1",976,G__RichDict_239_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFactor2",977,G__RichDict_239_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFactor1Sig",1267,G__RichDict_239_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFactor2Sig",1268,G__RichDict_239_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParameter1",1298,G__RichDict_239_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParameter2",1299,G__RichDict_239_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeScaling",1611,G__RichDict_239_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getExpSlope",1136,G__RichDict_239_0_25, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_239_0_26, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichDigitisationPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_239_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDigitisationPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_239_0_28, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichDigitisationPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_239_0_29, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichDigitisationPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_239_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_239_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDigitisationPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_239_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDigitisationPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_239_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDigitisationPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_239_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDigitisationPar::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichDigitisationPar", 2135, G__RichDict_239_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPad(void) {
   /* HRichPad */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPad));
   G__memfunc_setup("HRichPad",739,G__RichDict_535_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPad), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPad",739,G__RichDict_535_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPad), -1, 0, 1, 1, 1, 0, "u 'HRichPad' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_535_0_3, 117, G__get_linked_tagnum(&G__RichDictLN_HRichPad), -1, 1, 1, 1, 1, 0, "u 'HRichPad' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__RichDict_535_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcPadCenter",1289,G__RichDict_535_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__RichDict_535_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOutX",620,G__RichDict_535_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCorner",914,G__RichDict_535_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichPadCorner' - 0 - corner", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorner",937,G__RichDict_535_0_9, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCornersNr",1244,G__RichDict_535_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXmin",732,G__RichDict_535_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYmin",733,G__RichDict_535_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXmax",734,G__RichDict_535_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYmax",735,G__RichDict_535_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__RichDict_535_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__RichDict_535_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadX",685,G__RichDict_535_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadY",686,G__RichDict_535_0_18, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadNr",789,G__RichDict_535_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__RichDict_535_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - pX F - 'Float_t' 0 - pY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadXY",774,G__RichDict_535_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - pX I - 'Int_t' 0 - pY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadFlag",975,G__RichDict_535_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadActive",1201,G__RichDict_535_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXlab",711,G__RichDict_535_0_24, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYlab",712,G__RichDict_535_0_25, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZlab",713,G__RichDict_535_0_26, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__RichDict_535_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__RichDict_535_0_28, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYZlab",890,G__RichDict_535_0_29, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - sec F - 'Float_t' 0 - pX "
"F - 'Float_t' 0 - pY F - 'Float_t' 0 - pZ", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAngles",922,G__RichDict_535_0_30, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - sec F - 'Float_t' 0 - pTheta "
"F - 'Float_t' 0 - pPhi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAmplitFraction",1757,G__RichDict_535_0_31, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorner",949,G__RichDict_535_0_32, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HRichPadCorner' - 0 - corner i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXmin",744,G__RichDict_535_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - xmin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYmin",745,G__RichDict_535_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ymin", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXmax",746,G__RichDict_535_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - xmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYmax",747,G__RichDict_535_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ymax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__RichDict_535_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__RichDict_535_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadX",697,G__RichDict_535_0_39, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadY",698,G__RichDict_535_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pady", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadNr",801,G__RichDict_535_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__RichDict_535_0_42, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadXY",786,G__RichDict_535_0_43, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - padx i - 'Int_t' 0 - pady", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadFlag",987,G__RichDict_535_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadActive",1213,G__RichDict_535_0_45, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - active", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAmplitFraction",1769,G__RichDict_535_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXlab",723,G__RichDict_535_0_47, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - sec f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYlab",724,G__RichDict_535_0_48, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - sec f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZlab",725,G__RichDict_535_0_49, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - sec f - 'Float_t' 10 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZlab",902,G__RichDict_535_0_50, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 10 - sec f - 'Float_t' 10 - x "
"f - 'Float_t' 10 - y f - 'Float_t' 10 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__RichDict_535_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - thetha", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__RichDict_535_0_52, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - sec f - 'Float_t' 10 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcNrtoXY",967,G__RichDict_535_0_53, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padsx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalcXYtoNr",967,G__RichDict_535_0_54, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padsx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_535_0_55, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPad::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_535_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPad::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_535_0_57, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPad::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_535_0_58, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPad::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_535_0_62, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_535_0_63, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPad::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_535_0_64, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPad::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_535_0_65, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPad::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_535_0_66, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPad::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichPad", 865, G__RichDict_535_0_67, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichTrack(void) {
   /* HRichTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTrack));
   G__memfunc_setup("HRichTrack",963,G__RichDict_536_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__RichDict_536_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNr",1026,G__RichDict_536_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlag",698,G__RichDict_536_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__RichDict_536_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__RichDict_536_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventNr",1038,G__RichDict_536_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlag",710,G__RichDict_536_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RichDict_536_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_536_0_12, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_536_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_536_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_536_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_536_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_536_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_536_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_536_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_536_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichTrack", 963, G__RichDict_536_0_24, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichTrack), -1, 0, 1, 1, 1, 0, "u 'HRichTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichTrack", 1089, G__RichDict_536_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_536_0_26, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichTrack), -1, 1, 1, 1, 1, 0, "u 'HRichTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichDigitizer(void) {
   /* HRichDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer));
   G__memfunc_setup("HRichDigitizer",1401,G__RichDict_538_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichDigitizer",1401,G__RichDict_538_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer), -1, 0, 5, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' kNoise f - 'Float_t' 0 '1.0' slope "
"g - 'Bool_t' 0 'kFALSE' oem", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getDigitizer",1259,G__RichDict_538_0_7, 85, G__get_linked_tagnum(&G__RichDictLN_HRichDigitizer), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HRichDigitizer* (*)())(&HRichDigitizer::getDigitizer) ), 0);
   G__memfunc_setup("setDeltaElectronUse",1951,G__RichDict_538_0_8, 121, -1, -1, 0, 5, 1, 1, 0, 
"g - 'Bool_t' 0 - use g - 'Bool_t' 0 'kFALSE' useDeltaMomSel "
"i - 'Int_t' 0 '109' ionId f - 'Float_t' 0 '20.' momCut "
"f - 'Float_t' 0 '2.' probDelta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaElectronUse",1939,G__RichDict_538_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeltaElectronMinMomCut",2539,G__RichDict_538_0_10, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 '2.' s0 f - 'Float_t' 0 '2.' s1 "
"f - 'Float_t' 0 '4.' s2 f - 'Float_t' 0 '2.' s3 "
"f - 'Float_t' 0 '2.' s4 f - 'Float_t' 0 '4.' s5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcQE",553,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"f - 'Float_t' 10 - photlen i - 'Int_t' 10 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcFeedBack",1144,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 7, 1, 4, 0, 
"i - 'Int_t' 10 - sec f - 'Float_t' 10 - xhit "
"f - 'Float_t' 10 - yhit f - 'Float_t' 1 - ene "
"f - 'Float_t' 1 - xhittFB f - 'Float_t' 1 - yhittFB "
"f - 'Float_t' 10 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GaussFun",812,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"f - 'Float_t' 10 - mean f - 'Float_t' 10 - sigma", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcIndCharge",1272,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 6, 1, 4, 0, 
"f - 'Float_t' 10 - yCharge f - 'Float_t' 10 - q4 "
"i - 'Int_t' 10 - iPdaIndex i - 'Int_t' 10 - iWireNr "
"f - 'Float_t' 10 - param11 f - 'Float_t' 10 - param21", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("qX",201,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 10 - pos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("q4Calc",536,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 4, 0, 
"f - 'Float_t' 10 - charge f - 'Float_t' 10 - pos "
"f - 'Float_t' 10 - par1 f - 'Float_t' 10 - par2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcChargeOnWire",1585,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 6, 1, 4, 0, 
"i - 'Int_t' 10 - sector f - 'Float_t' 10 - xhit "
"f - 'Float_t' 10 - yhit f - 'Float_t' 10 - nTrack "
"f - 'Float_t' 10 - nFlag f - 'Float_t' 0 - ene", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcNoiseOnPad",1379,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 4, 0, 
"f - 'Float_t' 10 - fSigmaPad f - 'Float_t' 10 - fFloatMean", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireNr",919,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "f - 'Float_t' 10 - xhit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkPad",787,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "U 'HRichCalSim' - 0 - calSim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDefaults",1156,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeNoiseOnPads",1505,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNoiseToCharge",1588,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HRichCalSim' - 0 - calSim", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("digitisePads",1242,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("digitiseCherenkovHits",2191,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HGeantRichPhoton' - 0 - pCerHit i - 'Int_t' 10 - count", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("digitiseDirectHits",1861,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HGeantRichDirect' - 0 - pDirHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("processPhoton",1399,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"f - 'Float_t' 10 - ene f - 'Float_t' 10 - xPos "
"f - 'Float_t' 10 - yPos i - 'Int_t' 10 - track "
"i - 'Int_t' 10 - sector", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateCharge",1229,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"i - 'Int_t' 10 - sector U 'HRichPad' - 0 - pPad "
"f - 'Float_t' 10 - charge U 'TVectorT<float>' 'TVector' 0 - rTrack "
"f - 'Float_t' 10 - ene", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateTrack",1144,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HRichCalSim' - 0 - pCalSim u 'HLocation' - 1 - loc "
"U 'TVectorT<float>' 'TVector' 0 - rTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("translateCorners",1706,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPad), -1, 0, 3, 1, 4, 0, 
"U 'HRichPad' - 0 - pPad f - 'Float_t' 10 - dx "
"f - 'Float_t' 10 - dy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_538_0_31, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_538_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_538_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_538_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_538_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_538_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_538_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_538_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_538_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDigitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichDigitizer", 1527, G__RichDict_538_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichDirClus(void) {
   /* HRichDirClus */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDirClus));
   G__memfunc_setup("HRichDirClus",1156,G__RichDict_559_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichDirClus), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RichDict_559_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNrPad",789,G__RichDict_559_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXDim",690,G__RichDict_559_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYDim",691,G__RichDict_559_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTotalCharge",1422,G__RichDict_559_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiDiff",986,G__RichDict_559_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__RichDict_559_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__RichDict_559_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__RichDict_559_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYDim",791,G__RichDict_559_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__RichDict_559_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTotalCharge",1434,G__RichDict_559_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNrPad",801,G__RichDict_559_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - padnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiDiff",998,G__RichDict_559_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__RichDict_559_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__RichDict_559_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__RichDict_559_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_559_0_19, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichDirClus::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_559_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDirClus::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_559_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichDirClus::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_559_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichDirClus::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_559_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_559_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDirClus::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_559_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDirClus::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_559_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDirClus::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_559_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDirClus::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichDirClus", 1156, G__RichDict_559_0_31, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichDirClus), -1, 0, 1, 1, 1, 0, "u 'HRichDirClus' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichDirClus", 1282, G__RichDict_559_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_559_0_33, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichDirClus), -1, 1, 1, 1, 1, 0, "u 'HRichDirClus' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichFrameCorner(void) {
   /* HRichFrameCorner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner));
   G__memfunc_setup("HRichFrameCorner",1570,G__RichDict_560_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__RichDict_560_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__RichDict_560_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__RichDict_560_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - fX F - 'Float_t' 0 - fY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCornerNr",1129,G__RichDict_560_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlagArea",1075,G__RichDict_560_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__RichDict_560_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fX", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__RichDict_560_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__RichDict_560_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fX f - 'Float_t' 0 - fY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCornerNr",1141,G__RichDict_560_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - corner", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagArea",1087,G__RichDict_560_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_560_0_12, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichFrameCorner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_560_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrameCorner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_560_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichFrameCorner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_560_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichFrameCorner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_560_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_560_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrameCorner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_560_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichFrameCorner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_560_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrameCorner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_560_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichFrameCorner::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichFrameCorner", 1570, G__RichDict_560_0_24, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner), -1, 0, 1, 1, 1, 0, "u 'HRichFrameCorner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichFrameCorner", 1696, G__RichDict_560_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_560_0_26, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner), -1, 1, 1, 1, 1, 0, "u 'HRichFrameCorner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichFrame(void) {
   /* HRichFrame */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrame));
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichFrame",953,G__RichDict_561_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__RichDict_561_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__RichDict_561_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__RichDict_561_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateFlagArea",1697,G__RichDict_561_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__RichDict_561_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCorner",914,G__RichDict_561_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HRichFrameCorner' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorner",937,G__RichDict_561_0_9, 85, G__get_linked_tagnum(&G__RichDictLN_HRichFrameCorner), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCornerNr",1129,G__RichDict_561_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorner",949,G__RichDict_561_0_11, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HRichFrameCorner' - 0 - pCorner i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_561_0_12, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichFrame::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_561_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrame::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_561_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichFrame::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_561_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichFrame::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_561_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_561_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrame::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_561_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichFrame::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_561_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrame::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_561_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichFrame::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichFrame", 1079, G__RichDict_561_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichFrameTab(void) {
   /* HRichFrameTab */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab));
   G__memfunc_setup("HRichFrameTab",1232,G__RichDict_563_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__RichDict_563_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createFrames",1234,G__RichDict_563_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteFrames",1233,G__RichDict_563_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__RichDict_563_0_5, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nFrame f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNFrames",1004,G__RichDict_563_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFrame",811,G__RichDict_563_0_7, 85, G__get_linked_tagnum(&G__RichDictLN_HRichFrame), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_563_0_8, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichFrameTab::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_563_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrameTab::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_563_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichFrameTab::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_563_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichFrameTab::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_563_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_563_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrameTab::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_563_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichFrameTab::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_563_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichFrameTab::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_563_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichFrameTab::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichFrameTab", 1232, G__RichDict_563_0_20, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab), -1, 0, 1, 1, 1, 0, "u 'HRichFrameTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichFrameTab", 1358, G__RichDict_563_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_563_0_22, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichFrameTab), -1, 1, 1, 1, 1, 0, "u 'HRichFrameTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPadCorner(void) {
   /* HRichPadCorner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner));
   G__memfunc_setup("HRichPadCorner",1356,G__RichDict_564_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadCorner",1356,G__RichDict_564_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nrcor f - 'Float_t' 0 - xcor "
"f - 'Float_t' 0 - ycor i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadCorner",1356,G__RichDict_564_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner), -1, 0, 1, 1, 1, 0, "u 'HRichPadCorner' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_564_0_4, 117, G__get_linked_tagnum(&G__RichDictLN_HRichPadCorner), -1, 1, 1, 1, 1, 0, "u 'HRichPadCorner' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__RichDict_564_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__RichDict_564_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCornerNr",1129,G__RichDict_564_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAreaFlag",1075,G__RichDict_564_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__RichDict_564_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - X F - 'Float_t' 0 - Y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__RichDict_564_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - X", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__RichDict_564_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__RichDict_564_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - X f - 'Float_t' 0 - Y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCornerNr",1141,G__RichDict_564_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - corner", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAreaFlag",1087,G__RichDict_564_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - flag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_564_0_15, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPadCorner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_564_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadCorner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_564_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPadCorner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_564_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPadCorner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_564_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_564_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadCorner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_564_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadCorner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_564_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadCorner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_564_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadCorner::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichPadCorner", 1482, G__RichDict_564_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPadTab(void) {
   /* HRichPadTab */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadTab));
   G__memfunc_setup("getSlot",738,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RichDictLN_TObject), -1, 1, 1, 1, 4, 0, "i - 'Int_t' 0 - nIndx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deletePads",1019,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAddr",782,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"h - 'UInt_t' 0 - col h - 'UInt_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculatePadParameters",2263,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dummyInitialisation",2029,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initialisePads",1459,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadTab",1018,G__RichDict_565_0_7, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RichDict_565_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incActivePadsNr",1502,G__RichDict_565_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__RichDict_565_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParamsFull",1572,G__RichDict_565_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__RichDict_565_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__RichDict_565_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__RichDict_565_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - X h - 'UInt_t' 0 - Y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createPads",1020,G__RichDict_565_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__RichDict_565_0_16, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPad), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - padNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__RichDict_565_0_17, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPad), -1, 0, 2, 1, 1, 0, 
"h - 'UInt_t' 0 - col h - 'UInt_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__RichDict_565_0_18, 85, G__get_linked_tagnum(&G__RichDictLN_HRichPad), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - Xpos f - 'Float_t' 0 - Ypos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getActivePadsNr",1508,G__RichDict_565_0_19, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPad",609,G__RichDict_565_0_20, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HRichPad' - 0 - pPad h - 'UInt_t' 0 - col "
"h - 'UInt_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPad",609,G__RichDict_565_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HRichPad' - 0 - pPad h - 'UInt_t' 0 - padNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_565_0_22, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPadTab::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_565_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadTab::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_565_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPadTab::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_565_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPadTab::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_565_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_565_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadTab::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_565_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadTab::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_565_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadTab::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_565_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadTab::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichPadTab", 1018, G__RichDict_565_0_34, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichPadTab), -1, 0, 1, 1, 1, 0, "u 'HRichPadTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichPadTab", 1144, G__RichDict_565_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_565_0_36, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichPadTab), -1, 1, 1, 1, 1, 0, "u 'HRichPadTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichWire(void) {
   /* HRichWire */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWire));
   G__memfunc_setup("HRichWire",869,G__RichDict_566_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichWire), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireX",815,G__RichDict_566_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireNr",919,G__RichDict_566_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireX",827,G__RichDict_566_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - X", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireNr",931,G__RichDict_566_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_566_0_6, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichWire::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_566_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWire::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_566_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichWire::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_566_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichWire::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_566_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_566_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWire::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_566_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichWire::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_566_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWire::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_566_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichWire::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichWire", 869, G__RichDict_566_0_18, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichWire), -1, 0, 1, 1, 1, 0, "u 'HRichWire' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichWire", 995, G__RichDict_566_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_566_0_20, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichWire), -1, 1, 1, 1, 1, 0, "u 'HRichWire' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichWireTab(void) {
   /* HRichWireTab */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWireTab));
   G__memfunc_setup("HRichWireTab",1148,G__RichDict_567_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichWireTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RichDict_567_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__RichDict_567_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__RichDict_567_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__RichDict_567_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addWire",704,G__RichDict_567_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRichWire' - 0 - pWire", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNrWires",1034,G__RichDict_567_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistWire",1131,G__RichDict_567_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWire",727,G__RichDict_567_0_9, 85, G__get_linked_tagnum(&G__RichDictLN_HRichWire), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWire",739,G__RichDict_567_0_10, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HRichWire' - 0 - pWire i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNrWires",1046,G__RichDict_567_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistWire",1143,G__RichDict_567_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - dist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_567_0_13, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichWireTab::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_567_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWireTab::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_567_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichWireTab::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_567_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichWireTab::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_567_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_567_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWireTab::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_567_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichWireTab::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_567_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWireTab::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_567_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichWireTab::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichWireTab", 1274, G__RichDict_567_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichHitCandidate(void) {
   /* HRichHitCandidate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate));
   G__memfunc_setup("HRichHitCandidate",1648,G__RichDict_568_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichHitCandidate",1648,G__RichDict_568_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate), -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 10 - x i - 'Int_t' 10 - y "
"i - 'Int_t' 10 - a i - 'Int_t' 10 - p "
"i - 'Int_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Reset",515,G__RichDict_568_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__RichDict_568_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__RichDict_568_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getA",385,G__RichDict_568_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXMean",793,G__RichDict_568_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYMean",794,G__RichDict_568_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadLabel",1077,G__RichDict_568_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxLabel",1094,G__RichDict_568_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoEqualNeighbors",1942,G__RichDict_568_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__RichDict_568_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__RichDict_568_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setA",397,G__RichDict_568_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXMean",805,G__RichDict_568_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYMean",806,G__RichDict_568_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadLabel",1089,G__RichDict_568_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxLabel",1106,G__RichDict_568_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNoEqualNeighbors",1954,G__RichDict_568_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_568_0_22, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichHitCandidate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_568_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitCandidate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_568_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichHitCandidate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_568_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichHitCandidate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_568_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_568_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitCandidate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_568_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHitCandidate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_568_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichHitCandidate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_568_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichHitCandidate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichHitCandidate", 1648, G__RichDict_568_0_34, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate), -1, 0, 1, 1, 1, 0, "u 'HRichHitCandidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichHitCandidate", 1774, G__RichDict_568_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_568_0_36, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichHitCandidate), -1, 1, 1, 1, 1, 0, "u 'HRichHitCandidate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichMappingPar(void) {
   /* HRichMappingPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar));
   G__memfunc_setup("HRichMappingPar",1469,G__RichDict_569_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichMappingParameters\"' name C - 'Char_t' 10 '\"Rich Mapping Parameters\"' title "
"C - 'Char_t' 10 '\"RichMappingParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__RichDict_569_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"h - 'UInt_t' 0 - row h - 'UInt_t' 0 - col "
"h - 'UInt_t' 0 - adc h - 'UInt_t' 0 - apv "
"h - 'UInt_t' 0 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__RichDict_569_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__RichDict_569_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__RichDict_569_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - fout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__RichDict_569_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isValidSWAddress",1596,G__RichDict_569_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col", "is x,y of a pad (SW_address) connected with a valid channel", (void*) NULL, 0);
   G__memfunc_setup("isValidHWAddress",1585,G__RichDict_569_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - addrHW", "is a valid HW_address?", (void*) NULL, 0);
   G__memfunc_setup("getHWAddress",1189,G__RichDict_569_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col "
"h - 'UInt_t' 1 - adc h - 'UInt_t' 1 - apv "
"h - 'UInt_t' 1 - ch", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSWAddress",1200,G__RichDict_569_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - address i - 'Int_t' 1 - row "
"i - 'Int_t' 1 - col", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_569_0_14, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichMappingPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_569_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichMappingPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_569_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichMappingPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_569_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichMappingPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_569_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_569_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichMappingPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_569_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichMappingPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_569_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichMappingPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_569_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichMappingPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichMappingPar", 1469, G__RichDict_569_0_26, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar), -1, 0, 1, 1, 1, 0, "u 'HRichMappingPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichMappingPar", 1595, G__RichDict_569_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_569_0_28, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichMappingPar), -1, 1, 1, 1, 1, 0, "u 'HRichMappingPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPadFilter(void) {
   /* HRichPadFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter));
   G__memfunc_setup("HRichPadFilter",1353,G__RichDict_587_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - padCal", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_587_0_3, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPadFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_587_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_587_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPadFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_587_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPadFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_587_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_587_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_587_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_587_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_587_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichPadFilter", 1353, G__RichDict_587_0_15, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter), -1, 0, 1, 1, 1, 0, "u 'HRichPadFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichPadFilter", 1479, G__RichDict_587_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_587_0_17, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichPadFilter), -1, 1, 1, 1, 1, 0, "u 'HRichPadFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichPadGraph(void) {
   /* HRichPadGraph */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph));
   G__memfunc_setup("HRichPadGraph",1237,G__RichDict_588_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichPadGraph",1237,G__RichDict_588_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph), -1, 0, 1, 1, 1, 0, "u 'HRichPadGraph' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__RichDict_588_0_3, 117, G__get_linked_tagnum(&G__RichDictLN_HRichPadGraph), -1, 1, 1, 1, 1, 0, "u 'HRichPadGraph' - 11 - source", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitGraph",902,G__RichDict_588_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nodenr i - 'Int_t' 0 - listlen", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddNode",655,G__RichDict_588_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRichPadGraph' - 0 - nodeptr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MarkNodes",900,G__RichDict_588_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - labelnr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_588_0_7, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichPadGraph::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_588_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadGraph::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_588_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichPadGraph::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_588_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichPadGraph::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_588_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_588_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadGraph::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_588_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadGraph::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_588_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichPadGraph::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_588_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichPadGraph::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichPadGraph", 1363, G__RichDict_588_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichParAsciiFileIo(void) {
   /* HRichParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo));
   G__memfunc_setup("HRichParAsciiFileIo",1810,G__RichDict_601_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_601_0_4, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_601_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_601_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_601_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_601_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_601_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_601_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_601_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_601_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichParAsciiFileIo", 1810, G__RichDict_601_0_16, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HRichParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichParAsciiFileIo", 1936, G__RichDict_601_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_601_0_18, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HRichParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichParRootFileIo(void) {
   /* HRichParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo));
   G__memfunc_setup("HRichParRootFileIo",1741,G__RichDict_636_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_636_0_3, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_636_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_636_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_636_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_636_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_636_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_636_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_636_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_636_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichParRootFileIo", 1741, G__RichDict_636_0_15, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HRichParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichParRootFileIo", 1867, G__RichDict_636_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_636_0_17, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HRichParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichTaskSet(void) {
   /* HRichTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet));
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - s1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichTaskSet",1165,G__RichDict_641_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichTaskSet",1165,G__RichDict_641_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__RichDict_641_0_4, 85, G__get_linked_tagnum(&G__RichDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_641_0_5, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_641_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_641_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_641_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_641_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_641_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_641_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_641_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_641_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRichTaskSet", 1291, G__RichDict_641_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichThresholdPar(void) {
   /* HRichThresholdPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar));
   G__memfunc_setup("HRichThresholdPar",1694,G__RichDict_642_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichThresholdParameters\"' name C - 'Char_t' 10 '\"Rich Threshold Parameters\"' title "
"C - 'Char_t' 10 '\"\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__RichDict_642_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__RichDict_642_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__RichDict_642_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - fout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__RichDict_642_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalParVers",1299,G__RichDict_642_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaMultiplier",1880,G__RichDict_642_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalParVers",1311,G__RichDict_642_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaMultiplier",1892,G__RichDict_642_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec f - 'Float_t' 0 - multiply", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_642_0_13, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichThresholdPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_642_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichThresholdPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_642_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichThresholdPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_642_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichThresholdPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_642_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_642_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichThresholdPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_642_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichThresholdPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_642_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichThresholdPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_642_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichThresholdPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichThresholdPar", 1694, G__RichDict_642_0_25, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar), -1, 0, 1, 1, 1, 0, "u 'HRichThresholdPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichThresholdPar", 1820, G__RichDict_642_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_642_0_27, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichThresholdPar), -1, 1, 1, 1, 1, 0, "u 'HRichThresholdPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichUnpacker(void) {
   /* HRichUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker));
   G__memfunc_setup("printDataWord",1347,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'HRichUnpacker::DataWord' - 11 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printMapping",1273,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'HRichUnpacker::DataWord' - 11 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 8, "u 'HRichUnpacker::DataWord' - 11 - addr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichUnpacker",1287,G__RichDict_646_0_4, 105, G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - richId i - 'Int_t' 0 '0' strtEvt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_646_0_9, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_646_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_646_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_646_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_646_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_646_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_646_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_646_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_646_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichUnpacker", 1287, G__RichDict_646_0_21, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker), -1, 0, 1, 1, 1, 0, "u 'HRichUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichUnpacker", 1413, G__RichDict_646_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_646_0_23, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichUnpacker), -1, 1, 1, 1, 1, 0, "u 'HRichUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichWireSignal(void) {
   /* HRichWireSignal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal));
   G__memfunc_setup("HRichWireSignal",1475,G__RichDict_649_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichWireSignal",1475,G__RichDict_649_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - charge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRichWireSignal",1475,G__RichDict_649_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal), -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 10 - sector i - 'Int_t' 10 - wirenr "
"f - 'Float_t' 10 - charge f - 'Float_t' 10 - xpos "
"f - 'Float_t' 10 - ypos f - 'Float_t' 10 - ene", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__RichDict_649_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__RichDict_649_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__RichDict_649_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__RichDict_649_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEnergy",938,G__RichDict_649_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__RichDict_649_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - pX F - 'Float_t' 0 - pY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__RichDict_649_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ampl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__RichDict_649_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - xpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__RichDict_649_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ypos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__RichDict_649_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - xpos f - 'Float_t' 0 - ypos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEne",612,G__RichDict_649_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ene", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RichDict_649_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireNr",919,G__RichDict_649_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__RichDict_649_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireNr",931,G__RichDict_649_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_649_0_19, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichWireSignal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_649_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWireSignal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_649_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichWireSignal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_649_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichWireSignal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_649_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_649_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWireSignal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_649_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichWireSignal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_649_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichWireSignal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_649_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichWireSignal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRichWireSignal", 1475, G__RichDict_649_0_31, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal), -1, 0, 1, 1, 1, 0, "u 'HRichWireSignal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichWireSignal", 1601, G__RichDict_649_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_649_0_33, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichWireSignal), -1, 1, 1, 1, 1, 0, "u 'HRichWireSignal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700TaskSet(void) {
   /* HRich700TaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet));
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - s1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700TaskSet",1316,G__RichDict_650_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700TaskSet",1316,G__RichDict_650_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700TaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__RichDict_650_0_4, 85, G__get_linked_tagnum(&G__RichDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_650_0_5, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700TaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_650_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700TaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_650_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700TaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_650_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700TaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_650_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_650_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700TaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_650_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700TaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_650_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700TaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_650_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700TaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700TaskSet", 1442, G__RichDict_650_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700DigiMapPar(void) {
   /* HRich700DigiMapPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar));
   G__memfunc_setup("fillMaps",824,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700DigiMapPar",1571,G__RichDict_714_0_2, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"Rich700DigiMapPar\"' name C - 'Char_t' 10 '\"PMT Mapping parameters for RICH\"' title "
"C - 'Char_t' 10 '\"Rich700DigiMapParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLocation",1145,G__RichDict_714_0_3, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - pmtId f - 'Float_t' 0 - x "
"f - 'Float_t' 0 - y I - 'Int_t' 0 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__RichDict_714_0_4, 117, G__get_linked_tagnum(&G__RichDictLN_pairlEdoublecOdoublegR), G__defined_typename("pair<Double_t,Double_t>"), 0, 1, 1, 1, 0, "I - 'Int_t' 0 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPmtCenter",1234,G__RichDict_714_0_5, 117, G__get_linked_tagnum(&G__RichDictLN_pairlEdoublecOdoublegR), G__defined_typename("pair<Double_t,Double_t>"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pmtId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPmtCenters",1349,G__RichDict_714_0_6, 117, G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR), G__defined_typename("vector<pair<Double_t,Double_t> >"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPmtSize",1036,G__RichDict_714_0_7, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPmtGap",905,G__RichDict_714_0_8, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPmts",818,G__RichDict_714_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPixelInRow",1407,G__RichDict_714_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirectNeighbourPixels",2483,G__RichDict_714_0_11, 117, G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR), G__defined_typename("vector<pair<Int_t,Int_t> >"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDiagonalNeighbourPixels",2679,G__RichDict_714_0_12, 117, G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR), G__defined_typename("vector<pair<Int_t,Int_t> >"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNoisePixels",1459,G__RichDict_714_0_13, 117, G__get_linked_tagnum(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR), G__defined_typename("vector<pair<Int_t,Int_t> >"), 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - nofNoisePixels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPMTId",734,G__RichDict_714_0_14, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPMTId",734,G__RichDict_714_0_15, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPMTData",939,G__RichDict_714_0_16, 85, G__get_linked_tagnum(&G__RichDictLN_HRich700PmtData), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pmtid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInterpolatedSectorThetaPhi",2994,G__RichDict_714_0_17, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 1 - theta f - 'Float_t' 1 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInterpolatedThetaPhiPMT",2611,G__RichDict_714_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 1 - theta f - 'Float_t' 1 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__RichDict_714_0_19, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorPixels",1573,G__RichDict_714_0_20, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorPMTInd",1468,G__RichDict_714_0_21, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - xind i - 'Int_t' 0 - yInd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorPMTId",1358,G__RichDict_714_0_22, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - pmtid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorPhiThetaDegPixels",2636,G__RichDict_714_0_23, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - col i - 'Int_t' 0 - row "
"f - 'Float_t' 1 - phiDeg f - 'Float_t' 1 - thetaDeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorPhiThetaDegPMTInd",2531,G__RichDict_714_0_24, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - xind i - 'Int_t' 0 - yInd "
"f - 'Float_t' 1 - phiDeg f - 'Float_t' 1 - thetaDeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectorPhiThetaDegPMTId",2421,G__RichDict_714_0_25, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - pmtid f - 'Float_t' 1 - phiDeg "
"f - 'Float_t' 1 - thetaDeg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - inp I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__RichDict_714_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_714_0_31, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700DigiMapPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_714_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700DigiMapPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_714_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700DigiMapPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_714_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700DigiMapPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_714_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_714_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700DigiMapPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_714_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700DigiMapPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_714_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700DigiMapPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_714_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700DigiMapPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRich700DigiMapPar", 1571, G__RichDict_714_0_43, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar), -1, 0, 1, 1, 1, 0, "u 'HRich700DigiMapPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRich700DigiMapPar", 1697, G__RichDict_714_0_44, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_714_0_45, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRich700DigiMapPar), -1, 1, 1, 1, 1, 0, "u 'HRich700DigiMapPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700EventDisplay(void) {
   /* HRich700EventDisplay */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay));
   G__memfunc_setup("drawOneEvent",1234,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawOneRing",1120,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawPmts",850,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"d - 'Double_t' 0 - offsetX d - 'Double_t' 0 - offsetY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createCanvas",1232,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RichDictLN_TCanvas), -1, 0, 4, 1, 4, 0, 
"u 'string' - 11 - name u 'string' - 11 - title "
"i - 'Int_t' 0 - width i - 'Int_t' 0 - height", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvasToImage",1713,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700EventDisplay",1853,G__RichDict_715_0_6, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700EventDisplay), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setOutputDir",1276,G__RichDict_715_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNofEventsToDraw",1845,G__RichDict_715_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nofEvents", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_715_0_13, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700EventDisplay::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_715_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700EventDisplay::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_715_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700EventDisplay::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_715_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700EventDisplay::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_715_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_715_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700EventDisplay::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_715_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700EventDisplay::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_715_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700EventDisplay::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_715_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700EventDisplay::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700EventDisplay", 1979, G__RichDict_715_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRichDrawHist(void) {
   /* HRichDrawHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist));
   G__memfunc_setup("SetDefaultDrawStyle",1936,G__RichDict_753_0_1, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichDrawHist::SetDefaultDrawStyle) ), 0);
   G__memfunc_setup("DrawH1",519,G__RichDict_753_0_2, 121, -1, -1, 0, 9, 3, 1, 0, 
"U 'TH1' - 0 - hist i 'HistScale' - 0 'kLinear' logx "
"i 'HistScale' - 0 'kLinear' logy u 'string' - 11 '\"\"' drawOpt "
"i - 'Int_t' 0 'RichDrawingOptions::Color(0)' color i - 'Int_t' 0 'RichDrawingOptions::LineWidth()' lineWidth "
"i - 'Int_t' 0 'RichDrawingOptions::LineStyle(0)' lineStyle i - 'Int_t' 0 'RichDrawingOptions::MarkerSize()' markerSize "
"i - 'Int_t' 0 'RichDrawingOptions::MarkerStyle(0)' markerStyle", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, HistScale, HistScale, const string&, Int_t, Int_t, Int_t, Int_t, Int_t))(&HRichDrawHist::DrawH1) ), 0);
   G__memfunc_setup("DrawH2",520,G__RichDict_753_0_3, 121, -1, -1, 0, 5, 3, 1, 0, 
"U 'TH2' - 0 - hist i 'HistScale' - 0 'kLinear' logx "
"i 'HistScale' - 0 'kLinear' logy i 'HistScale' - 0 'kLinear' logz "
"u 'string' - 11 '\"COLZ\"' drawOpt", (char*)NULL, (void*) G__func2void( (void (*)(TH2*, HistScale, HistScale, HistScale, const string&))(&HRichDrawHist::DrawH2) ), 0);
   G__memfunc_setup("DrawH1",519,G__RichDict_753_0_4, 121, -1, -1, 0, 10, 3, 1, 0, 
"u 'vector<TH1*,allocator<TH1*> >' 'vector<TH1*>' 11 - histos u 'vector<string,allocator<string> >' 'vector<string>' 11 - histLabels "
"i 'HistScale' - 0 'kLinear' logx i 'HistScale' - 0 'kLinear' logy "
"g - 'Bool_t' 0 'kTRUE' drawLegend d - 'Double_t' 0 '0.6' x1 "
"d - 'Double_t' 0 '0.99' y1 d - 'Double_t' 0 '0.99' x2 "
"d - 'Double_t' 0 '0.83' y2 u 'string' - 11 '\"\"' drawOpt", (char*)NULL, (void*) G__func2void( (void (*)(const vector<TH1*>&, const vector<string>&, HistScale, HistScale, Bool_t, Double_t, Double_t, Double_t, Double_t, const string&))(&HRichDrawHist::DrawH1) ), 0);
   G__memfunc_setup("DrawGraph",896,G__RichDict_753_0_5, 121, -1, -1, 0, 9, 3, 1, 0, 
"U 'TGraph' - 0 - graph i 'HistScale' - 0 'kLinear' logx "
"i 'HistScale' - 0 'kLinear' logy u 'string' - 11 '\"AC\"' drawOpt "
"i - 'Int_t' 0 'RichDrawingOptions::Color(0)' color i - 'Int_t' 0 'RichDrawingOptions::LineWidth()' lineWidth "
"i - 'Int_t' 0 'RichDrawingOptions::LineStyle(0)' lineStyle i - 'Int_t' 0 'RichDrawingOptions::MarkerSize()' markerSize "
"i - 'Int_t' 0 'RichDrawingOptions::MarkerStyle(0)' markerStyle", (char*)NULL, (void*) G__func2void( (void (*)(TGraph*, HistScale, HistScale, const string&, Int_t, Int_t, Int_t, Int_t, Int_t))(&HRichDrawHist::DrawGraph) ), 0);
   G__memfunc_setup("DrawGraph",896,G__RichDict_753_0_6, 121, -1, -1, 0, 9, 3, 1, 0, 
"u 'vector<TGraph*,allocator<TGraph*> >' 'vector<TGraph*>' 11 - graphs u 'vector<string,allocator<string> >' 'vector<string>' 11 - graphLabels "
"i 'HistScale' - 0 'kLinear' logx i 'HistScale' - 0 'kLinear' logy "
"g - 'Bool_t' 0 'kTRUE' drawLegend d - 'Double_t' 0 '0.50' x1 "
"d - 'Double_t' 0 '0.78' y1 d - 'Double_t' 0 '0.99' x2 "
"d - 'Double_t' 0 '0.99' y2", (char*)NULL, (void*) G__func2void( (void (*)(const vector<TGraph*>&, const vector<string>&, HistScale, HistScale, Bool_t, Double_t, Double_t, Double_t, Double_t))(&HRichDrawHist::DrawGraph) ), 0);
   G__memfunc_setup("DrawGraph2D",1014,G__RichDict_753_0_7, 121, -1, -1, 0, 5, 3, 1, 0, 
"U 'TGraph2D' - 0 - graph i 'HistScale' - 0 'kLinear' logx "
"i 'HistScale' - 0 'kLinear' logy i 'HistScale' - 0 'kLinear' logz "
"u 'string' - 11 '\"colz\"' drawOpt", (char*)NULL, (void*) G__func2void( (void (*)(TGraph2D*, HistScale, HistScale, HistScale, const string&))(&HRichDrawHist::DrawGraph2D) ), 0);
   G__memfunc_setup("DrawTextOnPad",1285,G__RichDict_753_0_8, 121, -1, -1, 0, 5, 3, 1, 0, 
"u 'string' - 11 - text d - 'Double_t' 0 - x1 "
"d - 'Double_t' 0 - y1 d - 'Double_t' 0 - x2 "
"d - 'Double_t' 0 - y2", (char*)NULL, (void*) G__func2void( (void (*)(const string&, Double_t, Double_t, Double_t, Double_t))(&HRichDrawHist::DrawTextOnPad) ), 0);
   G__memfunc_setup("DrawH1andFitGauss",1632,G__RichDict_753_0_9, 121, -1, -1, 0, 5, 3, 1, 0, 
"U 'TH1' - 0 - hist g - 'Bool_t' 0 'kTRUE' drawResults "
"g - 'Bool_t' 0 'kTRUE' doScale d - 'Double_t' 0 '0.' userRangeMin "
"d - 'Double_t' 0 '0.' userRangeMax", (char*)NULL, (void*) G__func2void( (void (*)(TH1*, Bool_t, Bool_t, Double_t, Double_t))(&HRichDrawHist::DrawH1andFitGauss) ), 0);
   G__memfunc_setup("Class",502,G__RichDict_753_0_10, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRichDrawHist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_753_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDrawHist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_753_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRichDrawHist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_753_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRichDrawHist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_753_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_753_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDrawHist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_753_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDrawHist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_753_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRichDrawHist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_753_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRichDrawHist::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HRichDrawHist", 1268, G__RichDict_753_0_22, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HRichDrawHist", 1268, G__RichDict_753_0_23, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist), -1, 0, 1, 1, 1, 0, "u 'HRichDrawHist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRichDrawHist", 1394, G__RichDict_753_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_753_0_25, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRichDrawHist), -1, 1, 1, 1, 1, 0, "u 'HRichDrawHist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700HistManager(void) {
   /* HRich700HistManager */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager));
   G__memfunc_setup("HRich700HistManager",1720,G__RichDict_777_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add",265,G__RichDict_777_0_2, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - name U 'TNamed' - 0 - object", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H1",121,G__RichDict_777_0_3, 85, G__get_linked_tagnum(&G__RichDictLN_TH1), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H2",122,G__RichDict_777_0_4, 85, G__get_linked_tagnum(&G__RichDictLN_TH2), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("H3",123,G__RichDict_777_0_5, 85, G__get_linked_tagnum(&G__RichDictLN_TH3), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("G1",120,G__RichDict_777_0_6, 85, G__get_linked_tagnum(&G__RichDictLN_TGraph), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("G2",121,G__RichDict_777_0_7, 85, G__get_linked_tagnum(&G__RichDictLN_TGraph2D), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("P1",129,G__RichDict_777_0_8, 85, G__get_linked_tagnum(&G__RichDictLN_TProfile), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("P2",130,G__RichDict_777_0_9, 85, G__get_linked_tagnum(&G__RichDictLN_TProfile2D), -1, 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Exists",640,G__RichDict_777_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 8, "u 'string' - 11 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("WriteToFile",1102,G__RichDict_777_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ReadFromFile",1168,G__RichDict_777_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TFile' - 0 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShrinkEmptyBinsH1",1667,G__RichDict_777_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - histName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ShrinkEmptyBinsH2",1668,G__RichDict_777_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - histName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Scale",488,G__RichDict_777_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - histName d - 'Double_t' 0 - scale", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("NormalizeToIntegral",1962,G__RichDict_777_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - histName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Rebin",496,G__RichDict_777_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'string' - 11 - histName i - 'Int_t' 0 - ngroup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ToString",826,G__RichDict_777_0_19, 117, G__get_linked_tagnum(&G__RichDictLN_string), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_777_0_20, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700HistManager::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_777_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700HistManager::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_777_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700HistManager::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_777_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700HistManager::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_777_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_777_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700HistManager::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_777_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700HistManager::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_777_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700HistManager::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_777_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700HistManager::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRich700HistManager", 1720, G__RichDict_777_0_32, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager), -1, 0, 1, 1, 1, 0, "u 'HRich700HistManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRich700HistManager", 1846, G__RichDict_777_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_777_0_34, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRich700HistManager), -1, 1, 1, 1, 1, 0, "u 'HRich700HistManager' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700GeoTestQa(void) {
   /* HRich700GeoTestQa */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa));
   G__memfunc_setup("initHist",844,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillMcHist",1007,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHist",838,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPrimaryElectron",1788,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HGeantKine' - 0 - kine", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createH2MeanRms",1441,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'TH2D' - 0 - hist U 'TH1D' - 2 - meanHist "
"U 'TH1D' - 2 - rmsHist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawH2MeanRms",1243,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'TH2' - 0 - hist u 'string' - 11 - canvasName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createCanvas",1232,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RichDictLN_TCanvas), -1, 0, 4, 1, 4, 0, 
"u 'string' - 11 - name u 'string' - 11 - title "
"i - 'Int_t' 0 - width i - 'Int_t' 0 - height", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvasToImage",1713,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700GeoTestQa",1490,G__RichDict_919_0_9, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700GeoTestQa), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setOutputDir",1276,G__RichDict_919_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_919_0_15, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700GeoTestQa::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_919_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700GeoTestQa::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_919_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700GeoTestQa::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_919_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700GeoTestQa::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_919_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_919_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700GeoTestQa::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_919_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700GeoTestQa::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_919_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700GeoTestQa::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_919_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700GeoTestQa::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700GeoTestQa", 1616, G__RichDict_919_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700Pmt(void) {
   /* HRich700Pmt */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Pmt));
   G__memfunc_setup("InitQE",554,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700Pmt",918,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700Pmt), -1, 0, 1, 1, 4, 0, "u 'HRich700Pmt' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RichDictLN_HRich700Pmt), -1, 1, 1, 1, 4, 0, "u 'HRich700Pmt' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700Pmt",918,G__RichDict_920_0_4, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700Pmt), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPhotonDetected",1654,G__RichDict_920_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "d - 'Double_t' 0 - momentum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetDetectorType",1544,G__RichDict_920_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - detType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCollectionEfficiency",2349,G__RichDict_920_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - collEff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWavelength",1365,G__RichDict_920_0_8, 100, -1, G__defined_typename("Double_t"), 0, 1, 3, 1, 0, "d - 'Double_t' 0 - energy", "eV -> nm", (void*) G__func2void( (Double_t (*)(Double_t))(&HRich700Pmt::getWavelength) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700Pmt", 1044, G__RichDict_920_0_9, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700DigiPar(void) {
   /* HRich700DigiPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar));
   G__memfunc_setup("HRich700DigiPar",1285,G__RichDict_921_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichDigiPar\"' name C - 'Char_t' 10 '\"Digi parameters for RICH\"' title "
"C - 'Char_t' 10 '\"RichDigiParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCrossTalkProbability",2391,G__RichDict_921_0_2, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNofNoiseHits",1529,G__RichDict_921_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCrossTalkProbability",2403,G__RichDict_921_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNofNoiseHits",1541,G__RichDict_921_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__RichDict_921_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_921_0_10, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700DigiPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_921_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700DigiPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_921_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700DigiPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_921_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700DigiPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_921_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_921_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700DigiPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_921_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700DigiPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_921_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700DigiPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_921_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700DigiPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRich700DigiPar", 1285, G__RichDict_921_0_22, (int) ('i'), G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar), -1, 0, 1, 1, 1, 0, "u 'HRich700DigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRich700DigiPar", 1411, G__RichDict_921_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_921_0_24, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRich700DigiPar), -1, 1, 1, 1, 1, 0, "u 'HRich700DigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700Digitizer(void) {
   /* HRich700Digitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer));
   G__memfunc_setup("processEvent",1281,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("processRichPhoton",1789,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HGeantRichPhoton' - 0 - photon", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("processRichDirect",1760,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HGeantRichDirect' - 0 - direct", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRichCal",959,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addAllTrackIds",1367,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addTrackId",971,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCrossTalkHit",1508,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - col "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addNoiseHits",1215,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700Digitizer",1552,G__RichDict_922_0_9, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"Rich700Digitizer\"' name C - 'Text_t' 10 '\"Rich700Digitizer\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getDigitizer",1259,G__RichDict_922_0_14, 85, G__get_linked_tagnum(&G__RichDictLN_HRich700Digitizer), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (HRich700Digitizer* (*)())(&HRich700Digitizer::getDigitizer) ), 0);
   G__memfunc_setup("setStoreOnlyConvertedPhotonTrackIds",3634,G__RichDict_922_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCrossTalkProbability",2403,G__RichDict_922_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNofNoiseHits",1541,G__RichDict_922_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nofHits", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeltaElectronUse",1951,G__RichDict_922_0_18, 121, -1, -1, 0, 5, 1, 1, 0, 
"g - 'Bool_t' 0 - use g - 'Bool_t' 0 'kFALSE' useDeltaMomSel "
"i - 'Int_t' 0 '109' ionId f - 'Float_t' 0 '20.' momCut "
"f - 'Float_t' 0 '2.' probDelta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDeltaElectronUse",1939,G__RichDict_922_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDeltaElectronMinMomCut",2539,G__RichDict_922_0_20, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 '2.' s0 f - 'Float_t' 0 '2.' s1 "
"f - 'Float_t' 0 '4.' s2 f - 'Float_t' 0 '2.' s3 "
"f - 'Float_t' 0 '2.' s4 f - 'Float_t' 0 '4.' s5", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_922_0_21, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700Digitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_922_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700Digitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_922_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700Digitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_922_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700Digitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_922_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_922_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700Digitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_922_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700Digitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_922_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700Digitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_922_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700Digitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700Digitizer", 1678, G__RichDict_922_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700RingFinderPar(void) {
   /* HRich700RingFinderPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar));
   G__memfunc_setup("HRich700RingFinderPar",1904,G__RichDict_954_0_1, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"RichRingFinderPar\"' name C - 'Char_t' 10 '\"RingFinder parameters for RICH\"' title "
"C - 'Char_t' 10 '\"RichRingFinderParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNofParts",1133,G__RichDict_954_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxDistance",1425,G__RichDict_954_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDistance",1423,G__RichDict_954_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxRadius",1230,G__RichDict_954_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinRadius",1228,G__RichDict_954_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNofBinsX",1095,G__RichDict_954_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNofBinsY",1096,G__RichDict_954_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNofBinsR",1089,G__RichDict_954_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHTCut",776,G__RichDict_954_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHTCutR",858,G__RichDict_954_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinNofHitsInArea",1871,G__RichDict_954_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUsedHitsAllCut",1710,G__RichDict_954_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRmsCoeffCOP",1335,G__RichDict_954_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxCutCOP",1140,G__RichDict_954_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNofParts",1133,G__RichDict_954_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxDistance",1425,G__RichDict_954_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinDistance",1423,G__RichDict_954_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxRadius",1230,G__RichDict_954_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMinRadius",1228,G__RichDict_954_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNofBinsX",1107,G__RichDict_954_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNofBinsY",1108,G__RichDict_954_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNofBinsR",1101,G__RichDict_954_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHTCut",788,G__RichDict_954_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHTCutR",870,G__RichDict_954_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMinNofHitsInArea",1883,G__RichDict_954_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUsedHitsAllCut",1722,G__RichDict_954_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRmsCoeffCOP",1347,G__RichDict_954_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMaxCutCOP",1152,G__RichDict_954_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__RichDict_954_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_954_0_34, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700RingFinderPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_954_0_35, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_954_0_36, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700RingFinderPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_954_0_37, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700RingFinderPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_954_0_41, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_954_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_954_0_43, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RingFinderPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_954_0_44, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_954_0_45, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RingFinderPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HRich700RingFinderPar", 1904, G__RichDict_954_0_46, (int) ('i'), 
G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar), -1, 0, 1, 1, 1, 0, "u 'HRich700RingFinderPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HRich700RingFinderPar", 2030, G__RichDict_954_0_47, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RichDict_954_0_48, (int) ('u'), G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderPar), -1, 1, 1, 1, 1, 0, "u 'HRich700RingFinderPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700RingFinderIdeal(void) {
   /* HRich700RingFinderIdeal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal));
   G__memfunc_setup("processEvent",1281,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRichHit",980,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - sector i - 'Int_t' 0 - trackId "
"u 'vector<HRichCalSim*,allocator<HRichCalSim*> >' 'vector<HRichCalSim*>' 11 - cals", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700RingFinderIdeal",2092,G__RichDict_955_0_3, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderIdeal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__RichDict_955_0_8, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700RingFinderIdeal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_955_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderIdeal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_955_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700RingFinderIdeal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_955_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700RingFinderIdeal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_955_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_955_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderIdeal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_955_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RingFinderIdeal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_955_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderIdeal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_955_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RingFinderIdeal::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700RingFinderIdeal", 2218, G__RichDict_955_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700RingFinderHough(void) {
   /* HRich700RingFinderHough */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough));
   G__memfunc_setup("processEvent",1281,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HRich700RingFinderHough",2120,G__RichDict_966_0_6, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"Rich700RingFinderHough\"' name C - 'Text_t' 10 '\"Rich700RingFinderHough\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParameters",1376,G__RichDict_966_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HoughTransformReconstruction",2969,G__RichDict_966_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("DefineLocalAreaAndHits",2138,G__RichDict_966_0_9, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - x0 f - 'Float_t' 0 - y0 "
"I - 'Int_t' 0 - indmin I - 'Int_t' 0 - indmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HoughTransform",1463,G__RichDict_966_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"r - 'UShort_t' 0 - indmin r - 'UShort_t' 0 - indmax", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("HoughTransformGroup",1988,G__RichDict_966_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"r - 'UShort_t' 0 - indmin r - 'UShort_t' 0 - indmax "
"i - 'Int_t' 0 - iPart", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("FindPeak",770,G__RichDict_966_0_12, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - indmin i - 'Int_t' 0 - indmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RemoveHitsOfFoundRing",2119,G__RichDict_966_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - indmin i - 'Int_t' 0 - indmax "
"U 'HRich700Ring' - 0 - ring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RingSelection",1334,G__RichDict_966_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("AddRing",665,G__RichDict_966_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HRich700Ring' - 0 - ring", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("RecoToMc",764,G__RichDict_966_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HRich700Ring' - 10 - ring I - 'Int_t' 0 - trackIds "
"I - 'Int_t' 0 - weights", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700RingFinderHough",2120,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough), -1, 0, 1, 1, 4, 0, "u 'HRich700RingFinderHough' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__RichDictLN_HRich700RingFinderHough), -1, 1, 1, 1, 4, 0, "u 'HRich700RingFinderHough' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_966_0_19, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700RingFinderHough::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_966_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderHough::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_966_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700RingFinderHough::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_966_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700RingFinderHough::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_966_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_966_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderHough::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_966_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RingFinderHough::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_966_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RingFinderHough::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_966_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RingFinderHough::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700RingFinderHough", 2246, G__RichDict_966_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHRich700RecoQa(void) {
   /* HRich700RecoQa */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa));
   G__memfunc_setup("processEvent",1281,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initHist",844,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawHist",838,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillAccRecHist",1376,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("drawAccRecEff",1248,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"u 'string' - 11 - canvasNameAccRec u 'string' - 11 - canvasNameEff "
"u 'string' - 11 - histNameAcc u 'string' - 11 - histNameRec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initRichHitMap",1405,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isPrimaryElectron",1788,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HGeantKine' - 0 - kine", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRichAcc",873,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - trackId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createCanvas",1232,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__RichDictLN_TCanvas), -1, 0, 4, 1, 4, 0, 
"u 'string' - 11 - name u 'string' - 11 - title "
"i - 'Int_t' 0 - width i - 'Int_t' 0 - height", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("saveCanvasToImage",1713,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HRich700RecoQa",1184,G__RichDict_979_0_11, 105, G__get_linked_tagnum(&G__RichDictLN_HRich700RecoQa), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setOutputDir",1276,G__RichDict_979_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'string' - 11 - dir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RichDict_979_0_17, 85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HRich700RecoQa::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RichDict_979_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RecoQa::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RichDict_979_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HRich700RecoQa::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RichDict_979_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HRich700RecoQa::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RichDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RichDict_979_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RichDict_979_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RecoQa::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RichDict_979_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RecoQa::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RichDict_979_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HRich700RecoQa::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RichDict_979_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HRich700RecoQa::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HRich700RecoQa", 1310, G__RichDict_979_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRichDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&catRichRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRichRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRichCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRichCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRichHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRichHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRichHitHdr),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRichHitHdr=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRichDirClus),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRichDirClus=",0,(char*)NULL);
   G__memvar_setup((void*)(&catRichTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catRichTrack=",0,(char*)NULL);
}

static void G__cpp_setup_global3() {
}

static void G__cpp_setup_global4() {
}

static void G__cpp_setup_global5() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRichDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
  G__cpp_setup_global4();
  G__cpp_setup_global5();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {
}

static void G__cpp_setup_func30() {
}

static void G__cpp_setup_func31() {
}

static void G__cpp_setup_func32() {
}

static void G__cpp_setup_func33() {
}

static void G__cpp_setup_func34() {
}

static void G__cpp_setup_func35() {
}

static void G__cpp_setup_func36() {
}

static void G__cpp_setup_func37() {
}

static void G__cpp_setup_func38() {
}

static void G__cpp_setup_func39() {
}

static void G__cpp_setup_func40() {
}

static void G__cpp_setup_func41() {
}

static void G__cpp_setup_func42() {
}

static void G__cpp_setup_func43() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRichDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
  G__cpp_setup_func30();
  G__cpp_setup_func31();
  G__cpp_setup_func32();
  G__cpp_setup_func33();
  G__cpp_setup_func34();
  G__cpp_setup_func35();
  G__cpp_setup_func36();
  G__cpp_setup_func37();
  G__cpp_setup_func38();
  G__cpp_setup_func39();
  G__cpp_setup_func40();
  G__cpp_setup_func41();
  G__cpp_setup_func42();
  G__cpp_setup_func43();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RichDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR = { "vector<unsigned short,allocator<unsigned short> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_string = { "string" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TClonesArray = { "TClonesArray" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__RichDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichHit = { "HRichHit" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichLabel = { "HRichLabel" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPadSignal = { "HRichPadSignal" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichAnalysisPar = { "HRichAnalysisPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichGeometryPar = { "HRichGeometryPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichHitHeader = { "HRichHitHeader" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPadClean = { "HRichPadClean" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPadLabel = { "HRichPadLabel" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichRingFind = { "HRichRingFind" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichAnalysis = { "HRichAnalysis" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichCalSim = { "HRichCalSim" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichHitSim = { "HRichHitSim" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichRingFindSim = { "HRichRingFindSim" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichAnalysisSim = { "HRichAnalysisSim" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HLocatedDataObject = { "HLocatedDataObject" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichCal = { "HRichCal" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HObjTable = { "HObjTable" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichCalParCell = { "HRichCalParCell" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichCalPar = { "HRichCalPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichContFact = { "HRichContFact" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichDetector = { "HRichDetector" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichDigitisationPar = { "HRichDigitisationPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR = { "map<int,int,less<int>,allocator<pair<const int,int> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_pairlEintcOintgR = { "pair<int,int>" , 115 , -1 };
G__linked_taginfo G__RichDictLN_pairlEdoublecOdoublegR = { "pair<double,double>" , 115 , -1 };
G__linked_taginfo G__RichDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HGeantRichDirect = { "HGeantRichDirect" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HGeantRichPhoton = { "HGeantRichPhoton" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPad = { "HRichPad" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichTrack = { "HRichTrack" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HGeantKine = { "HGeantKine" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichDigitizer = { "HRichDigitizer" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR = { "map<HGeantKine*,float,less<HGeantKine*>,allocator<pair<HGeantKine* const,float> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator = { "map<HGeantKine*,float,less<HGeantKine*>,allocator<pair<HGeantKine* const,float> > >::iterator" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgR = { "vector<HRichTrack*,allocator<HRichTrack*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRichTrack*,allocator<HRichTrack*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRsPgRsPgRsPgR = { "map<int,vector<HRichTrack*,allocator<HRichTrack*> >,less<int>,allocator<pair<const int,vector<HRichTrack*,allocator<HRichTrack*> > > > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichDirClus = { "HRichDirClus" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichFrameCorner = { "HRichFrameCorner" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichFrame = { "HRichFrame" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichFrameTab = { "HRichFrameTab" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPadCorner = { "HRichPadCorner" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPadTab = { "HRichPadTab" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichWire = { "HRichWire" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichWireTab = { "HRichWireTab" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichHitCandidate = { "HRichHitCandidate" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichMappingPar = { "HRichMappingPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TFile = { "TFile" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HFilter = { "HFilter" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPadFilter = { "HRichPadFilter" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichPadGraph = { "HRichPadGraph" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TArrayS = { "TArrayS" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichParAsciiFileIo = { "HRichParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichParRootFileIo = { "HRichParRootFileIo" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichTaskSet = { "HRichTaskSet" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichThresholdPar = { "HRichThresholdPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichUnpacker = { "HRichUnpacker" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRichUnpackercLcLDataWord = { "HRichUnpacker::DataWord" , 115 , -1 };
G__linked_taginfo G__RichDictLN_HRichWireSignal = { "HRichWireSignal" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700TaskSet = { "HRich700TaskSet" , 99 , -1 };
G__linked_taginfo G__RichDictLN_pairlEunsignedsPintcOintgR = { "pair<unsigned int,int>" , 115 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR = { "vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<unsigned int,int>,allocator<pair<unsigned int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TCanvas = { "TCanvas" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700DigiMapPar = { "HRich700DigiMapPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700EventDisplay = { "HRich700EventDisplay" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR = { "vector<TCanvas*,allocator<TCanvas*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TCanvas*,allocator<TCanvas*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TH1 = { "TH1" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TProfile = { "TProfile" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TH2 = { "TH2" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TGraph = { "TGraph" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TGraph2D = { "TGraph2D" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HistScale = { "HistScale" , 101 , -1 };
G__linked_taginfo G__RichDictLN_HRichDrawHist = { "HRichDrawHist" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR = { "vector<TH1*,allocator<TH1*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TH1*,allocator<TH1*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEstringcOallocatorlEstringgRsPgR = { "vector<string,allocator<string> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<string,allocator<string> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR = { "vector<TGraph*,allocator<TGraph*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TGraph*,allocator<TGraph*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TProfile2D = { "TProfile2D" , 99 , -1 };
G__linked_taginfo G__RichDictLN_TH3 = { "TH3" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700HistManager = { "HRich700HistManager" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEstringcOTNamedmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTNamedmUgRsPgRsPgR = { "map<string,TNamed*,less<string>,allocator<pair<const string,TNamed*> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR = { "map<int,particleproperties,less<int>,allocator<pair<const int,particleproperties> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR = { "map<TString,particleproperties,less<TString>,allocator<pair<const TString,particleproperties> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR = { "map<int,TString,less<int>,allocator<pair<const int,TString> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR = { "vector<HGeantKine*,allocator<HGeantKine*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantKine*,allocator<HGeantKine*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR = { "vector<HGeantRichPhoton*,allocator<HGeantRichPhoton*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantRichPhoton*,allocator<HGeantRichPhoton*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR = { "vector<HGeantMdc*,allocator<HGeantMdc*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantMdc*,allocator<HGeantMdc*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR = { "vector<HGeantTof*,allocator<HGeantTof*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantTof*,allocator<HGeantTof*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR = { "vector<HGeantRpc*,allocator<HGeantRpc*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantRpc*,allocator<HGeantRpc*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR = { "vector<HGeantWall*,allocator<HGeantWall*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantWall*,allocator<HGeantWall*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR = { "vector<HGeantEmc*,allocator<HGeantEmc*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantEmc*,allocator<HGeantEmc*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR = { "vector<HGeantStart*,allocator<HGeantStart*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantStart*,allocator<HGeantStart*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR = { "vector<HGeantFwDet*,allocator<HGeantFwDet*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeantFwDet*,allocator<HGeantFwDet*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700GeoTestQa = { "HRich700GeoTestQa" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700Pmt = { "HRich700Pmt" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700DigiPar = { "HRich700DigiPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700Digitizer = { "HRich700Digitizer" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700Ring = { "HRich700Ring" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHRich700HitcOallocatorlEHRich700HitgRsPgR = { "vector<HRich700Hit,allocator<HRich700Hit> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHRich700HitcOallocatorlEHRich700HitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRich700Hit,allocator<HRich700Hit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700PmtData = { "HRich700PmtData" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEintcOHRich700PmtDatacOlesslEintgRcOallocatorlEpairlEconstsPintcOHRich700PmtDatagRsPgRsPgR = { "map<int,HRich700PmtData,less<int>,allocator<pair<const int,HRich700PmtData> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_maplEpairlEintcOintgRcOHRich700PmtDatacOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOHRich700PmtDatagRsPgRsPgR = { "map<pair<int,int>,HRich700PmtData,less<pair<int,int> >,allocator<pair<const pair<int,int>,HRich700PmtData> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR = { "vector<pair<double,double>,allocator<pair<double,double> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<double,double>,allocator<pair<double,double> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR = { "vector<pair<int,int>,allocator<pair<int,int> > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<pair<int,int>,allocator<pair<int,int> > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700RingFinderPar = { "HRich700RingFinderPar" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700RingFinderIdeal = { "HRich700RingFinderIdeal" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgR = { "vector<HRichCalSim*,allocator<HRichCalSim*> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRichCalSim*,allocator<HRichCalSim*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700RingFinderHough = { "HRich700RingFinderHough" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgR = { "vector<HRich700HoughHit,allocator<HRich700HoughHit> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRich700HoughHit,allocator<HRich700HoughHit> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR = { "vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<vector<unsigned short,allocator<unsigned short> >,allocator<vector<unsigned short,allocator<unsigned short> > > >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_vectorlEHRich700RingcOallocatorlEHRich700RinggRsPgR = { "vector<HRich700Ring,allocator<HRich700Ring> >" , 99 , -1 };
G__linked_taginfo G__RichDictLN_reverse_iteratorlEvectorlEHRich700RingcOallocatorlEHRich700RinggRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HRich700Ring,allocator<HRich700Ring> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RichDictLN_HRich700RecoQa = { "HRich700RecoQa" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRichDict() {
  G__RichDictLN_TClass.tagnum = -1 ;
  G__RichDictLN_TBuffer.tagnum = -1 ;
  G__RichDictLN_TMemberInspector.tagnum = -1 ;
  G__RichDictLN_TObject.tagnum = -1 ;
  G__RichDictLN_TNamed.tagnum = -1 ;
  G__RichDictLN_TString.tagnum = -1 ;
  G__RichDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR.tagnum = -1 ;
  G__RichDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__RichDictLN_string.tagnum = -1 ;
  G__RichDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_TList.tagnum = -1 ;
  G__RichDictLN_TObjArray.tagnum = -1 ;
  G__RichDictLN_TClonesArray.tagnum = -1 ;
  G__RichDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_TArrayI.tagnum = -1 ;
  G__RichDictLN_HTask.tagnum = -1 ;
  G__RichDictLN_HLocation.tagnum = -1 ;
  G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__RichDictLN_HReconstructor.tagnum = -1 ;
  G__RichDictLN_HRichHit.tagnum = -1 ;
  G__RichDictLN_HRichLabel.tagnum = -1 ;
  G__RichDictLN_HRichPadSignal.tagnum = -1 ;
  G__RichDictLN_HCategory.tagnum = -1 ;
  G__RichDictLN_HIterator.tagnum = -1 ;
  G__RichDictLN_HParSet.tagnum = -1 ;
  G__RichDictLN_HRichAnalysisPar.tagnum = -1 ;
  G__RichDictLN_HRichGeometryPar.tagnum = -1 ;
  G__RichDictLN_HRichHitHeader.tagnum = -1 ;
  G__RichDictLN_HRichPadClean.tagnum = -1 ;
  G__RichDictLN_HRichPadLabel.tagnum = -1 ;
  G__RichDictLN_HRichRingFind.tagnum = -1 ;
  G__RichDictLN_HRichAnalysis.tagnum = -1 ;
  G__RichDictLN_TArrayF.tagnum = -1 ;
  G__RichDictLN_HParIo.tagnum = -1 ;
  G__RichDictLN_HParamList.tagnum = -1 ;
  G__RichDictLN_HParCond.tagnum = -1 ;
  G__RichDictLN_HRichCalSim.tagnum = -1 ;
  G__RichDictLN_HRichHitSim.tagnum = -1 ;
  G__RichDictLN_HRichRingFindSim.tagnum = -1 ;
  G__RichDictLN_HRichAnalysisSim.tagnum = -1 ;
  G__RichDictLN_HLocatedDataObject.tagnum = -1 ;
  G__RichDictLN_HRichCal.tagnum = -1 ;
  G__RichDictLN_HObjTable.tagnum = -1 ;
  G__RichDictLN_HRichCalParCell.tagnum = -1 ;
  G__RichDictLN_HRichCalPar.tagnum = -1 ;
  G__RichDictLN_HContainer.tagnum = -1 ;
  G__RichDictLN_HContFact.tagnum = -1 ;
  G__RichDictLN_HRichContFact.tagnum = -1 ;
  G__RichDictLN_HDetector.tagnum = -1 ;
  G__RichDictLN_HRichDetector.tagnum = -1 ;
  G__RichDictLN_HRichDigitisationPar.tagnum = -1 ;
  G__RichDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__RichDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__RichDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__RichDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__RichDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_pairlEintcOintgR.tagnum = -1 ;
  G__RichDictLN_pairlEdoublecOdoublegR.tagnum = -1 ;
  G__RichDictLN_TF1.tagnum = -1 ;
  G__RichDictLN_HGeantRichDirect.tagnum = -1 ;
  G__RichDictLN_HGeantRichPhoton.tagnum = -1 ;
  G__RichDictLN_HRichPad.tagnum = -1 ;
  G__RichDictLN_HRichTrack.tagnum = -1 ;
  G__RichDictLN_HGeantKine.tagnum = -1 ;
  G__RichDictLN_HRichDigitizer.tagnum = -1 ;
  G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__RichDictLN_vectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_maplEintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_HRichDirClus.tagnum = -1 ;
  G__RichDictLN_HRichFrameCorner.tagnum = -1 ;
  G__RichDictLN_HRichFrame.tagnum = -1 ;
  G__RichDictLN_HRichFrameTab.tagnum = -1 ;
  G__RichDictLN_HRichPadCorner.tagnum = -1 ;
  G__RichDictLN_HRichPadTab.tagnum = -1 ;
  G__RichDictLN_HRichWire.tagnum = -1 ;
  G__RichDictLN_HRichWireTab.tagnum = -1 ;
  G__RichDictLN_HRichHitCandidate.tagnum = -1 ;
  G__RichDictLN_HRichMappingPar.tagnum = -1 ;
  G__RichDictLN_TFile.tagnum = -1 ;
  G__RichDictLN_HFilter.tagnum = -1 ;
  G__RichDictLN_HRichPadFilter.tagnum = -1 ;
  G__RichDictLN_HRichPadGraph.tagnum = -1 ;
  G__RichDictLN_TArrayS.tagnum = -1 ;
  G__RichDictLN_HDetParIo.tagnum = -1 ;
  G__RichDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__RichDictLN_HRichParAsciiFileIo.tagnum = -1 ;
  G__RichDictLN_HParRootFile.tagnum = -1 ;
  G__RichDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__RichDictLN_HRichParRootFileIo.tagnum = -1 ;
  G__RichDictLN_HTaskSet.tagnum = -1 ;
  G__RichDictLN_HRichTaskSet.tagnum = -1 ;
  G__RichDictLN_HRichThresholdPar.tagnum = -1 ;
  G__RichDictLN_HldUnpack.tagnum = -1 ;
  G__RichDictLN_HRichUnpacker.tagnum = -1 ;
  G__RichDictLN_HRichUnpackercLcLDataWord.tagnum = -1 ;
  G__RichDictLN_HRichWireSignal.tagnum = -1 ;
  G__RichDictLN_HRich700TaskSet.tagnum = -1 ;
  G__RichDictLN_pairlEunsignedsPintcOintgR.tagnum = -1 ;
  G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_TCanvas.tagnum = -1 ;
  G__RichDictLN_HRich700DigiMapPar.tagnum = -1 ;
  G__RichDictLN_HRich700EventDisplay.tagnum = -1 ;
  G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_TArrayD.tagnum = -1 ;
  G__RichDictLN_TH1D.tagnum = -1 ;
  G__RichDictLN_TH1.tagnum = -1 ;
  G__RichDictLN_TProfile.tagnum = -1 ;
  G__RichDictLN_TH2.tagnum = -1 ;
  G__RichDictLN_TH2F.tagnum = -1 ;
  G__RichDictLN_TH2D.tagnum = -1 ;
  G__RichDictLN_TGraph.tagnum = -1 ;
  G__RichDictLN_TGraph2D.tagnum = -1 ;
  G__RichDictLN_HistScale.tagnum = -1 ;
  G__RichDictLN_HRichDrawHist.tagnum = -1 ;
  G__RichDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEstringcOallocatorlEstringgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_TProfile2D.tagnum = -1 ;
  G__RichDictLN_TH3.tagnum = -1 ;
  G__RichDictLN_HRich700HistManager.tagnum = -1 ;
  G__RichDictLN_maplEstringcOTNamedmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTNamedmUgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_HRich700GeoTestQa.tagnum = -1 ;
  G__RichDictLN_HRich700Pmt.tagnum = -1 ;
  G__RichDictLN_HRich700DigiPar.tagnum = -1 ;
  G__RichDictLN_HRich700Digitizer.tagnum = -1 ;
  G__RichDictLN_HRich700Ring.tagnum = -1 ;
  G__RichDictLN_vectorlEHRich700HitcOallocatorlEHRich700HitgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHRich700HitcOallocatorlEHRich700HitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_HRich700PmtData.tagnum = -1 ;
  G__RichDictLN_maplEintcOHRich700PmtDatacOlesslEintgRcOallocatorlEpairlEconstsPintcOHRich700PmtDatagRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_maplEpairlEintcOintgRcOHRich700PmtDatacOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOHRich700PmtDatagRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_HRich700RingFinderPar.tagnum = -1 ;
  G__RichDictLN_HRich700RingFinderIdeal.tagnum = -1 ;
  G__RichDictLN_vectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_HRich700RingFinderHough.tagnum = -1 ;
  G__RichDictLN_vectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_vectorlEHRich700RingcOallocatorlEHRich700RinggRsPgR.tagnum = -1 ;
  G__RichDictLN_reverse_iteratorlEvectorlEHRich700RingcOallocatorlEHRich700RinggRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RichDictLN_HRich700RecoQa.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRichDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RichDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TString);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_string);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TList);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TClonesArray);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__RichDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HReconstructor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichHit),sizeof(HRichHit),-1,130816,(char*)NULL,G__setup_memvarHRichHit,G__setup_memfuncHRichHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichLabel),sizeof(HRichLabel),-1,32512,(char*)NULL,G__setup_memvarHRichLabel,G__setup_memfuncHRichLabel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPadSignal),sizeof(HRichPadSignal),-1,62720,"Rich auxiliary class",G__setup_memvarHRichPadSignal,G__setup_memfuncHRichPadSignal);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HIterator);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HParSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichAnalysisPar),sizeof(HRichAnalysisPar),-1,130816,(char*)NULL,G__setup_memvarHRichAnalysisPar,G__setup_memfuncHRichAnalysisPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichGeometryPar),sizeof(HRichGeometryPar),-1,62720,"Geometry parameters",G__setup_memvarHRichGeometryPar,G__setup_memfuncHRichGeometryPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichHitHeader),sizeof(HRichHitHeader),-1,29952,(char*)NULL,G__setup_memvarHRichHitHeader,G__setup_memfuncHRichHitHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPadClean),sizeof(HRichPadClean),-1,32512,(char*)NULL,G__setup_memvarHRichPadClean,G__setup_memfuncHRichPadClean);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPadLabel),sizeof(HRichPadLabel),-1,65280,(char*)NULL,G__setup_memvarHRichPadLabel,G__setup_memfuncHRichPadLabel);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichRingFind),sizeof(HRichRingFind),-1,32512,(char*)NULL,G__setup_memvarHRichRingFind,G__setup_memfuncHRichRingFind);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichAnalysis),sizeof(HRichAnalysis),-1,130816,(char*)NULL,G__setup_memvarHRichAnalysis,G__setup_memfuncHRichAnalysis);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HParCond);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichCalSim),sizeof(HRichCalSim),-1,128256,"RICH simulated cal data",G__setup_memvarHRichCalSim,G__setup_memfuncHRichCalSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichHitSim),sizeof(HRichHitSim),-1,64768,(char*)NULL,G__setup_memvarHRichHitSim,G__setup_memfuncHRichHitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichRingFindSim),sizeof(HRichRingFindSim),-1,29952,(char*)NULL,G__setup_memvarHRichRingFindSim,G__setup_memfuncHRichRingFindSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichAnalysisSim),sizeof(HRichAnalysisSim),-1,62720,(char*)NULL,G__setup_memvarHRichAnalysisSim,G__setup_memfuncHRichAnalysisSim);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HLocatedDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichCal),sizeof(HRichCal),-1,62720,"Rich cal data",G__setup_memvarHRichCal,G__setup_memfuncHRichCal);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HObjTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichCalParCell),sizeof(HRichCalParCell),-1,62720,"Calibration data of a single cell",G__setup_memvarHRichCalParCell,G__setup_memfuncHRichCalParCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichCalPar),sizeof(HRichCalPar),-1,62720,"RICH calibration parameters class",G__setup_memvarHRichCalPar,G__setup_memfuncHRichCalPar);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichContFact),sizeof(HRichContFact),-1,62720,"Factory for parameter containers in libRich",G__setup_memvarHRichContFact,G__setup_memfuncHRichContFact);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichDetector),sizeof(HRichDetector),-1,62720,"RICH detector class",G__setup_memvarHRichDetector,G__setup_memfuncHRichDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichDigitisationPar),sizeof(HRichDigitisationPar),-1,130816,(char*)NULL,G__setup_memvarHRichDigitisationPar,G__setup_memfuncHRichDigitisationPar);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEintcOintcOlesslEintgRcOallocatorlEpairlEconstsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_pairlEintcOintgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_pairlEdoublecOdoublegR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TF1);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HGeantRichDirect);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HGeantRichPhoton);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPad),sizeof(HRichPad),-1,32512,(char*)NULL,G__setup_memvarHRichPad,G__setup_memfuncHRichPad);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichTrack),sizeof(HRichTrack),-1,29952,"RICH HGeant track class",G__setup_memvarHRichTrack,G__setup_memfuncHRichTrack);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HGeantKine);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichDigitizer),sizeof(HRichDigitizer),-1,62720,"Rich digitizer",G__setup_memvarHRichDigitizer,G__setup_memfuncHRichDigitizer);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEHGeantKinemUcOfloatcOlesslEHGeantKinemUgRcOallocatorlEpairlEHGeantKinemUsPconstcOfloatgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEHRichTrackmUcOallocatorlEHRichTrackmUgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichDirClus),sizeof(HRichDirClus),-1,29952,"RICH direct clusters",G__setup_memvarHRichDirClus,G__setup_memfuncHRichDirClus);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichFrameCorner),sizeof(HRichFrameCorner),-1,29952,(char*)NULL,G__setup_memvarHRichFrameCorner,G__setup_memfuncHRichFrameCorner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichFrame),sizeof(HRichFrame),-1,29952,(char*)NULL,G__setup_memvarHRichFrame,G__setup_memfuncHRichFrame);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichFrameTab),sizeof(HRichFrameTab),-1,29952,(char*)NULL,G__setup_memvarHRichFrameTab,G__setup_memfuncHRichFrameTab);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPadCorner),sizeof(HRichPadCorner),-1,65280,(char*)NULL,G__setup_memvarHRichPadCorner,G__setup_memfuncHRichPadCorner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPadTab),sizeof(HRichPadTab),-1,29952,(char*)NULL,G__setup_memvarHRichPadTab,G__setup_memfuncHRichPadTab);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichWire),sizeof(HRichWire),-1,29952,(char*)NULL,G__setup_memvarHRichWire,G__setup_memfuncHRichWire);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichWireTab),sizeof(HRichWireTab),-1,29952,(char*)NULL,G__setup_memvarHRichWireTab,G__setup_memfuncHRichWireTab);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichHitCandidate),sizeof(HRichHitCandidate),-1,62720,(char*)NULL,G__setup_memvarHRichHitCandidate,G__setup_memfuncHRichHitCandidate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichMappingPar),sizeof(HRichMappingPar),-1,62720,"Mapping parameters between the HW and SW address of a pad",G__setup_memvarHRichMappingPar,G__setup_memfuncHRichMappingPar);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TFile);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPadFilter),sizeof(HRichPadFilter),-1,29952,(char*)NULL,G__setup_memvarHRichPadFilter,G__setup_memfuncHRichPadFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichPadGraph),sizeof(HRichPadGraph),-1,98048,(char*)NULL,G__setup_memvarHRichPadGraph,G__setup_memfuncHRichPadGraph);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TArrayS);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichParAsciiFileIo),sizeof(HRichParAsciiFileIo),-1,62464,"Class for Rich parameter I/O from ASCII file",G__setup_memvarHRichParAsciiFileIo,G__setup_memfuncHRichParAsciiFileIo);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichParRootFileIo),sizeof(HRichParRootFileIo),-1,62464,"Class for Rich parameter I/O from ROOT file",G__setup_memvarHRichParRootFileIo,G__setup_memfuncHRichParRootFileIo);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichTaskSet),sizeof(HRichTaskSet),-1,62720,"Set of RICH tasks",G__setup_memvarHRichTaskSet,G__setup_memfuncHRichTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichThresholdPar),sizeof(HRichThresholdPar),-1,62720,"Threshold parameters",G__setup_memvarHRichThresholdPar,G__setup_memfuncHRichThresholdPar);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HldUnpack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichUnpacker),sizeof(HRichUnpacker),-1,62464,"Unpack RICH data",G__setup_memvarHRichUnpacker,G__setup_memfuncHRichUnpacker);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HRichUnpackercLcLDataWord);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichWireSignal),sizeof(HRichWireSignal),-1,62720,"Rich auxiliary class",G__setup_memvarHRichWireSignal,G__setup_memfuncHRichWireSignal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700TaskSet),sizeof(HRich700TaskSet),-1,62720,"Set of RICH tasks",G__setup_memvarHRich700TaskSet,G__setup_memfuncHRich700TaskSet);
   G__get_linked_tagnum_fwd(&G__RichDictLN_pairlEunsignedsPintcOintgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEunsignedsPintcOintgRcOallocatorlEpairlEunsignedsPintcOintgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TCanvas);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700DigiMapPar),sizeof(HRich700DigiMapPar),-1,62720,(char*)NULL,G__setup_memvarHRich700DigiMapPar,G__setup_memfuncHRich700DigiMapPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700EventDisplay),sizeof(HRich700EventDisplay),-1,62720,(char*)NULL,G__setup_memvarHRich700EventDisplay,G__setup_memfuncHRich700EventDisplay);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlETCanvasmUcOallocatorlETCanvasmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlETCanvasmUcOallocatorlETCanvasmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TH1);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TProfile);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TH2);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TH2D);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TGraph);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TGraph2D);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HistScale);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRichDrawHist),sizeof(HRichDrawHist),-1,28672,(char*)NULL,G__setup_memvarHRichDrawHist,G__setup_memfuncHRichDrawHist);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlETH1mUcOallocatorlETH1mUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlETH1mUcOallocatorlETH1mUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEstringcOallocatorlEstringgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEstringcOallocatorlEstringgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlETGraphmUcOallocatorlETGraphmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlETGraphmUcOallocatorlETGraphmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TProfile2D);
   G__get_linked_tagnum_fwd(&G__RichDictLN_TH3);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700HistManager),sizeof(HRich700HistManager),-1,29952,(char*)NULL,G__setup_memvarHRich700HistManager,G__setup_memfuncHRich700HistManager);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEstringcOTNamedmUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTNamedmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEintcOparticlepropertiescOlesslEintgRcOallocatorlEpairlEconstsPintcOparticlepropertiesgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplETStringcOparticlepropertiescOlesslETStringgRcOallocatorlEpairlEconstsPTStringcOparticlepropertiesgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEintcOTStringcOlesslEintgRcOallocatorlEpairlEconstsPintcOTStringgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantKinemUcOallocatorlEHGeantKinemUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantRichPhotonmUcOallocatorlEHGeantRichPhotonmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantMdcmUcOallocatorlEHGeantMdcmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantTofmUcOallocatorlEHGeantTofmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantRpcmUcOallocatorlEHGeantRpcmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantWallmUcOallocatorlEHGeantWallmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantEmcmUcOallocatorlEHGeantEmcmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantStartmUcOallocatorlEHGeantStartmUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHGeantFwDetmUcOallocatorlEHGeantFwDetmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700GeoTestQa),sizeof(HRich700GeoTestQa),-1,62720,(char*)NULL,G__setup_memvarHRich700GeoTestQa,G__setup_memfuncHRich700GeoTestQa);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700Pmt),sizeof(HRich700Pmt),-1,3840,(char*)NULL,G__setup_memvarHRich700Pmt,G__setup_memfuncHRich700Pmt);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700DigiPar),sizeof(HRich700DigiPar),-1,62720,(char*)NULL,G__setup_memvarHRich700DigiPar,G__setup_memfuncHRich700DigiPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700Digitizer),sizeof(HRich700Digitizer),-1,62720,(char*)NULL,G__setup_memvarHRich700Digitizer,G__setup_memfuncHRich700Digitizer);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700Ring);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHRich700HitcOallocatorlEHRich700HitgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700HitcOallocatorlEHRich700HitgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700PmtData);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEintcOHRich700PmtDatacOlesslEintgRcOallocatorlEpairlEconstsPintcOHRich700PmtDatagRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_maplEpairlEintcOintgRcOHRich700PmtDatacOlesslEpairlEintcOintgRsPgRcOallocatorlEpairlEconstsPpairlEintcOintgRcOHRich700PmtDatagRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEdoublecOdoublegRcOallocatorlEpairlEdoublecOdoublegRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEpairlEintcOintgRcOallocatorlEpairlEintcOintgRsPgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700RingFinderPar),sizeof(HRich700RingFinderPar),-1,62720,(char*)NULL,G__setup_memvarHRich700RingFinderPar,G__setup_memfuncHRich700RingFinderPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700RingFinderIdeal),sizeof(HRich700RingFinderIdeal),-1,62720,(char*)NULL,G__setup_memvarHRich700RingFinderIdeal,G__setup_memfuncHRich700RingFinderIdeal);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHRichCalSimmUcOallocatorlEHRichCalSimmUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700RingFinderHough),sizeof(HRich700RingFinderHough),-1,65280,(char*)NULL,G__setup_memvarHRich700RingFinderHough,G__setup_memfuncHRich700RingFinderHough);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700HoughHitcOallocatorlEHRich700HoughHitgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRcOallocatorlEvectorlEunsignedsPshortcOallocatorlEunsignedsPshortgRsPgRsPgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_vectorlEHRich700RingcOallocatorlEHRich700RinggRsPgR);
   G__get_linked_tagnum_fwd(&G__RichDictLN_reverse_iteratorlEvectorlEHRich700RingcOallocatorlEHRich700RinggRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RichDictLN_HRich700RecoQa),sizeof(HRich700RecoQa),-1,62720,(char*)NULL,G__setup_memvarHRich700RecoQa,G__setup_memfuncHRich700RecoQa);
}
extern "C" void G__cpp_setupRichDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupRichDict()");
  G__set_cpp_environmentRichDict();
  G__cpp_setup_tagtableRichDict();

  G__cpp_setup_inheritanceRichDict();

  G__cpp_setup_typetableRichDict();

  G__cpp_setup_memvarRichDict();

  G__cpp_setup_memfuncRichDict();
  G__cpp_setup_globalRichDict();
  G__cpp_setup_funcRichDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRichDict();
  return;
}
class G__cpp_setup_initRichDict {
  public:
    G__cpp_setup_initRichDict() { G__add_setup_func("RichDict",(G__incsetup)(&G__cpp_setupRichDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRichDict() { G__remove_setup_func("RichDict"); }
};
G__cpp_setup_initRichDict G__cpp_setup_initializerRichDict;


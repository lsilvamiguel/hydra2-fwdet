//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:53:53 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIWallDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "WallDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HWallDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallDetector(void *p = 0);
   static void *newArray_HWallDetector(Long_t size, void *p);
   static void delete_HWallDetector(void *p);
   static void deleteArray_HWallDetector(void *p);
   static void destruct_HWallDetector(void *p);
   static void streamer_HWallDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallDetector*)
   {
      ::HWallDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallDetector", ::HWallDetector::Class_Version(), "././hwalldetector.h", 6,
                  typeid(::HWallDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HWallDetector) );
      instance.SetNew(&new_HWallDetector);
      instance.SetNewArray(&newArray_HWallDetector);
      instance.SetDelete(&delete_HWallDetector);
      instance.SetDeleteArray(&deleteArray_HWallDetector);
      instance.SetDestructor(&destruct_HWallDetector);
      instance.SetStreamerFunc(&streamer_HWallDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallDetector*)
   {
      return GenerateInitInstanceLocal((::HWallDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallTaskSet(void *p = 0);
   static void *newArray_HWallTaskSet(Long_t size, void *p);
   static void delete_HWallTaskSet(void *p);
   static void deleteArray_HWallTaskSet(void *p);
   static void destruct_HWallTaskSet(void *p);
   static void streamer_HWallTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallTaskSet*)
   {
      ::HWallTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallTaskSet", ::HWallTaskSet::Class_Version(), "././hwalltaskset.h", 7,
                  typeid(::HWallTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HWallTaskSet) );
      instance.SetNew(&new_HWallTaskSet);
      instance.SetNewArray(&newArray_HWallTaskSet);
      instance.SetDelete(&delete_HWallTaskSet);
      instance.SetDeleteArray(&deleteArray_HWallTaskSet);
      instance.SetDestructor(&destruct_HWallTaskSet);
      instance.SetStreamerFunc(&streamer_HWallTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallTaskSet*)
   {
      return GenerateInitInstanceLocal((::HWallTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallLookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallLookup(void *p = 0);
   static void *newArray_HWallLookup(Long_t size, void *p);
   static void delete_HWallLookup(void *p);
   static void deleteArray_HWallLookup(void *p);
   static void destruct_HWallLookup(void *p);
   static void streamer_HWallLookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallLookup*)
   {
      ::HWallLookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallLookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallLookup", ::HWallLookup::Class_Version(), "././hwalllookup.h", 66,
                  typeid(::HWallLookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallLookup::Dictionary, isa_proxy, 0,
                  sizeof(::HWallLookup) );
      instance.SetNew(&new_HWallLookup);
      instance.SetNewArray(&newArray_HWallLookup);
      instance.SetDelete(&delete_HWallLookup);
      instance.SetDeleteArray(&deleteArray_HWallLookup);
      instance.SetDestructor(&destruct_HWallLookup);
      instance.SetStreamerFunc(&streamer_HWallLookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallLookup*)
   {
      return GenerateInitInstanceLocal((::HWallLookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallLookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallUnpacker(void *p = 0);
   static void *newArray_HWallUnpacker(Long_t size, void *p);
   static void delete_HWallUnpacker(void *p);
   static void deleteArray_HWallUnpacker(void *p);
   static void destruct_HWallUnpacker(void *p);
   static void streamer_HWallUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallUnpacker*)
   {
      ::HWallUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallUnpacker", ::HWallUnpacker::Class_Version(), "././hwallunpacker.h", 9,
                  typeid(::HWallUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HWallUnpacker) );
      instance.SetNew(&new_HWallUnpacker);
      instance.SetNewArray(&newArray_HWallUnpacker);
      instance.SetDelete(&delete_HWallUnpacker);
      instance.SetDeleteArray(&deleteArray_HWallUnpacker);
      instance.SetDestructor(&destruct_HWallUnpacker);
      instance.SetStreamerFunc(&streamer_HWallUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallUnpacker*)
   {
      return GenerateInitInstanceLocal((::HWallUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallRaw(void *p = 0);
   static void *newArray_HWallRaw(Long_t size, void *p);
   static void delete_HWallRaw(void *p);
   static void deleteArray_HWallRaw(void *p);
   static void destruct_HWallRaw(void *p);
   static void streamer_HWallRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallRaw*)
   {
      ::HWallRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallRaw", ::HWallRaw::Class_Version(), "././hwallraw.h", 6,
                  typeid(::HWallRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HWallRaw) );
      instance.SetNew(&new_HWallRaw);
      instance.SetNewArray(&newArray_HWallRaw);
      instance.SetDelete(&delete_HWallRaw);
      instance.SetDeleteArray(&deleteArray_HWallRaw);
      instance.SetDestructor(&destruct_HWallRaw);
      instance.SetStreamerFunc(&streamer_HWallRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallRaw*)
   {
      return GenerateInitInstanceLocal((::HWallRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallContFact(void *p = 0);
   static void *newArray_HWallContFact(Long_t size, void *p);
   static void delete_HWallContFact(void *p);
   static void deleteArray_HWallContFact(void *p);
   static void destruct_HWallContFact(void *p);
   static void streamer_HWallContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallContFact*)
   {
      ::HWallContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallContFact", ::HWallContFact::Class_Version(), "././hwallcontfact.h", 9,
                  typeid(::HWallContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HWallContFact) );
      instance.SetNew(&new_HWallContFact);
      instance.SetNewArray(&newArray_HWallContFact);
      instance.SetDelete(&delete_HWallContFact);
      instance.SetDeleteArray(&deleteArray_HWallContFact);
      instance.SetDestructor(&destruct_HWallContFact);
      instance.SetStreamerFunc(&streamer_HWallContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallContFact*)
   {
      return GenerateInitInstanceLocal((::HWallContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallCalPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallCalPar(void *p = 0);
   static void *newArray_HWallCalPar(Long_t size, void *p);
   static void delete_HWallCalPar(void *p);
   static void deleteArray_HWallCalPar(void *p);
   static void destruct_HWallCalPar(void *p);
   static void streamer_HWallCalPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallCalPar*)
   {
      ::HWallCalPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallCalPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallCalPar", ::HWallCalPar::Class_Version(), "././hwallcalpar.h", 63,
                  typeid(::HWallCalPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallCalPar::Dictionary, isa_proxy, 0,
                  sizeof(::HWallCalPar) );
      instance.SetNew(&new_HWallCalPar);
      instance.SetNewArray(&newArray_HWallCalPar);
      instance.SetDelete(&delete_HWallCalPar);
      instance.SetDeleteArray(&deleteArray_HWallCalPar);
      instance.SetDestructor(&destruct_HWallCalPar);
      instance.SetStreamerFunc(&streamer_HWallCalPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallCalPar*)
   {
      return GenerateInitInstanceLocal((::HWallCalPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallCalPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HWallParRootFileIo(void *p);
   static void deleteArray_HWallParRootFileIo(void *p);
   static void destruct_HWallParRootFileIo(void *p);
   static void streamer_HWallParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallParRootFileIo*)
   {
      ::HWallParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallParRootFileIo", ::HWallParRootFileIo::Class_Version(), "././hwallparrootfileio.h", 13,
                  typeid(::HWallParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HWallParRootFileIo) );
      instance.SetDelete(&delete_HWallParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HWallParRootFileIo);
      instance.SetDestructor(&destruct_HWallParRootFileIo);
      instance.SetStreamerFunc(&streamer_HWallParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HWallParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HWallParAsciiFileIo(void *p);
   static void deleteArray_HWallParAsciiFileIo(void *p);
   static void destruct_HWallParAsciiFileIo(void *p);
   static void streamer_HWallParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallParAsciiFileIo*)
   {
      ::HWallParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallParAsciiFileIo", ::HWallParAsciiFileIo::Class_Version(), "././hwallparasciifileio.h", 12,
                  typeid(::HWallParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HWallParAsciiFileIo) );
      instance.SetDelete(&delete_HWallParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HWallParAsciiFileIo);
      instance.SetDestructor(&destruct_HWallParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HWallParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HWallParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallLookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallLookupChan(void *p = 0);
   static void *newArray_HWallLookupChan(Long_t size, void *p);
   static void delete_HWallLookupChan(void *p);
   static void deleteArray_HWallLookupChan(void *p);
   static void destruct_HWallLookupChan(void *p);
   static void streamer_HWallLookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallLookupChan*)
   {
      ::HWallLookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallLookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallLookupChan", ::HWallLookupChan::Class_Version(), "././hwalllookup.h", 8,
                  typeid(::HWallLookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallLookupChan::Dictionary, isa_proxy, 0,
                  sizeof(::HWallLookupChan) );
      instance.SetNew(&new_HWallLookupChan);
      instance.SetNewArray(&newArray_HWallLookupChan);
      instance.SetDelete(&delete_HWallLookupChan);
      instance.SetDeleteArray(&deleteArray_HWallLookupChan);
      instance.SetDestructor(&destruct_HWallLookupChan);
      instance.SetStreamerFunc(&streamer_HWallLookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallLookupChan*)
   {
      return GenerateInitInstanceLocal((::HWallLookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallLookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallLookupSlot_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallLookupSlot(void *p = 0);
   static void *newArray_HWallLookupSlot(Long_t size, void *p);
   static void delete_HWallLookupSlot(void *p);
   static void deleteArray_HWallLookupSlot(void *p);
   static void destruct_HWallLookupSlot(void *p);
   static void streamer_HWallLookupSlot(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallLookupSlot*)
   {
      ::HWallLookupSlot *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallLookupSlot >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallLookupSlot", ::HWallLookupSlot::Class_Version(), "././hwalllookup.h", 21,
                  typeid(::HWallLookupSlot), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallLookupSlot::Dictionary, isa_proxy, 0,
                  sizeof(::HWallLookupSlot) );
      instance.SetNew(&new_HWallLookupSlot);
      instance.SetNewArray(&newArray_HWallLookupSlot);
      instance.SetDelete(&delete_HWallLookupSlot);
      instance.SetDeleteArray(&deleteArray_HWallLookupSlot);
      instance.SetDestructor(&destruct_HWallLookupSlot);
      instance.SetStreamerFunc(&streamer_HWallLookupSlot);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallLookupSlot*)
   {
      return GenerateInitInstanceLocal((::HWallLookupSlot*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallLookupSlot*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallLookupCrate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallLookupCrate(void *p = 0);
   static void *newArray_HWallLookupCrate(Long_t size, void *p);
   static void delete_HWallLookupCrate(void *p);
   static void deleteArray_HWallLookupCrate(void *p);
   static void destruct_HWallLookupCrate(void *p);
   static void streamer_HWallLookupCrate(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallLookupCrate*)
   {
      ::HWallLookupCrate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallLookupCrate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallLookupCrate", ::HWallLookupCrate::Class_Version(), "././hwalllookup.h", 45,
                  typeid(::HWallLookupCrate), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallLookupCrate::Dictionary, isa_proxy, 0,
                  sizeof(::HWallLookupCrate) );
      instance.SetNew(&new_HWallLookupCrate);
      instance.SetNewArray(&newArray_HWallLookupCrate);
      instance.SetDelete(&delete_HWallLookupCrate);
      instance.SetDeleteArray(&deleteArray_HWallLookupCrate);
      instance.SetDestructor(&destruct_HWallLookupCrate);
      instance.SetStreamerFunc(&streamer_HWallLookupCrate);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallLookupCrate*)
   {
      return GenerateInitInstanceLocal((::HWallLookupCrate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallLookupCrate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallCal(void *p = 0);
   static void *newArray_HWallCal(Long_t size, void *p);
   static void delete_HWallCal(void *p);
   static void deleteArray_HWallCal(void *p);
   static void destruct_HWallCal(void *p);
   static void streamer_HWallCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallCal*)
   {
      ::HWallCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallCal", ::HWallCal::Class_Version(), "././hwallcal.h", 10,
                  typeid(::HWallCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallCal::Dictionary, isa_proxy, 0,
                  sizeof(::HWallCal) );
      instance.SetNew(&new_HWallCal);
      instance.SetNewArray(&newArray_HWallCal);
      instance.SetDelete(&delete_HWallCal);
      instance.SetDeleteArray(&deleteArray_HWallCal);
      instance.SetDestructor(&destruct_HWallCal);
      instance.SetStreamerFunc(&streamer_HWallCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallCal*)
   {
      return GenerateInitInstanceLocal((::HWallCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallCalParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallCalParCell(void *p = 0);
   static void *newArray_HWallCalParCell(Long_t size, void *p);
   static void delete_HWallCalParCell(void *p);
   static void deleteArray_HWallCalParCell(void *p);
   static void destruct_HWallCalParCell(void *p);
   static void streamer_HWallCalParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallCalParCell*)
   {
      ::HWallCalParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallCalParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallCalParCell", ::HWallCalParCell::Class_Version(), "././hwallcalpar.h", 11,
                  typeid(::HWallCalParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallCalParCell::Dictionary, isa_proxy, 0,
                  sizeof(::HWallCalParCell) );
      instance.SetNew(&new_HWallCalParCell);
      instance.SetNewArray(&newArray_HWallCalParCell);
      instance.SetDelete(&delete_HWallCalParCell);
      instance.SetDeleteArray(&deleteArray_HWallCalParCell);
      instance.SetDestructor(&destruct_HWallCalParCell);
      instance.SetStreamerFunc(&streamer_HWallCalParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallCalParCell*)
   {
      return GenerateInitInstanceLocal((::HWallCalParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallCalParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallCalibrater_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallCalibrater(void *p = 0);
   static void *newArray_HWallCalibrater(Long_t size, void *p);
   static void delete_HWallCalibrater(void *p);
   static void deleteArray_HWallCalibrater(void *p);
   static void destruct_HWallCalibrater(void *p);
   static void streamer_HWallCalibrater(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallCalibrater*)
   {
      ::HWallCalibrater *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallCalibrater >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallCalibrater", ::HWallCalibrater::Class_Version(), "././hwallcalibrater.h", 15,
                  typeid(::HWallCalibrater), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallCalibrater::Dictionary, isa_proxy, 0,
                  sizeof(::HWallCalibrater) );
      instance.SetNew(&new_HWallCalibrater);
      instance.SetNewArray(&newArray_HWallCalibrater);
      instance.SetDelete(&delete_HWallCalibrater);
      instance.SetDeleteArray(&deleteArray_HWallCalibrater);
      instance.SetDestructor(&destruct_HWallCalibrater);
      instance.SetStreamerFunc(&streamer_HWallCalibrater);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallCalibrater*)
   {
      return GenerateInitInstanceLocal((::HWallCalibrater*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallCalibrater*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallDigiPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallDigiPar(void *p = 0);
   static void *newArray_HWallDigiPar(Long_t size, void *p);
   static void delete_HWallDigiPar(void *p);
   static void deleteArray_HWallDigiPar(void *p);
   static void destruct_HWallDigiPar(void *p);
   static void streamer_HWallDigiPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallDigiPar*)
   {
      ::HWallDigiPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallDigiPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallDigiPar", ::HWallDigiPar::Class_Version(), "././hwalldigipar.h", 8,
                  typeid(::HWallDigiPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallDigiPar::Dictionary, isa_proxy, 0,
                  sizeof(::HWallDigiPar) );
      instance.SetNew(&new_HWallDigiPar);
      instance.SetNewArray(&newArray_HWallDigiPar);
      instance.SetDelete(&delete_HWallDigiPar);
      instance.SetDeleteArray(&deleteArray_HWallDigiPar);
      instance.SetDestructor(&destruct_HWallDigiPar);
      instance.SetStreamerFunc(&streamer_HWallDigiPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallDigiPar*)
   {
      return GenerateInitInstanceLocal((::HWallDigiPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallDigiPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallGeomPar(void *p = 0);
   static void *newArray_HWallGeomPar(Long_t size, void *p);
   static void delete_HWallGeomPar(void *p);
   static void deleteArray_HWallGeomPar(void *p);
   static void destruct_HWallGeomPar(void *p);
   static void streamer_HWallGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallGeomPar*)
   {
      ::HWallGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallGeomPar", ::HWallGeomPar::Class_Version(), "././hwallgeompar.h", 8,
                  typeid(::HWallGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HWallGeomPar) );
      instance.SetNew(&new_HWallGeomPar);
      instance.SetNewArray(&newArray_HWallGeomPar);
      instance.SetDelete(&delete_HWallGeomPar);
      instance.SetDeleteArray(&deleteArray_HWallGeomPar);
      instance.SetDestructor(&destruct_HWallGeomPar);
      instance.SetStreamerFunc(&streamer_HWallGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallGeomPar*)
   {
      return GenerateInitInstanceLocal((::HWallGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallDigitizer(void *p = 0);
   static void *newArray_HWallDigitizer(Long_t size, void *p);
   static void delete_HWallDigitizer(void *p);
   static void deleteArray_HWallDigitizer(void *p);
   static void destruct_HWallDigitizer(void *p);
   static void streamer_HWallDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallDigitizer*)
   {
      ::HWallDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallDigitizer", ::HWallDigitizer::Class_Version(), "././hwalldigitizer.h", 18,
                  typeid(::HWallDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HWallDigitizer) );
      instance.SetNew(&new_HWallDigitizer);
      instance.SetNewArray(&newArray_HWallDigitizer);
      instance.SetDelete(&delete_HWallDigitizer);
      instance.SetDeleteArray(&deleteArray_HWallDigitizer);
      instance.SetDestructor(&destruct_HWallDigitizer);
      instance.SetStreamerFunc(&streamer_HWallDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallDigitizer*)
   {
      return GenerateInitInstanceLocal((::HWallDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallRawSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallRawSim(void *p = 0);
   static void *newArray_HWallRawSim(Long_t size, void *p);
   static void delete_HWallRawSim(void *p);
   static void deleteArray_HWallRawSim(void *p);
   static void destruct_HWallRawSim(void *p);
   static void streamer_HWallRawSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallRawSim*)
   {
      ::HWallRawSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallRawSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallRawSim", ::HWallRawSim::Class_Version(), "././hwallrawsim.h", 6,
                  typeid(::HWallRawSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallRawSim::Dictionary, isa_proxy, 0,
                  sizeof(::HWallRawSim) );
      instance.SetNew(&new_HWallRawSim);
      instance.SetNewArray(&newArray_HWallRawSim);
      instance.SetDelete(&delete_HWallRawSim);
      instance.SetDeleteArray(&deleteArray_HWallRawSim);
      instance.SetDestructor(&destruct_HWallRawSim);
      instance.SetStreamerFunc(&streamer_HWallRawSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallRawSim*)
   {
      return GenerateInitInstanceLocal((::HWallRawSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallRawSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallRawSimFilter_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallRawSimFilter(void *p = 0);
   static void *newArray_HWallRawSimFilter(Long_t size, void *p);
   static void delete_HWallRawSimFilter(void *p);
   static void deleteArray_HWallRawSimFilter(void *p);
   static void destruct_HWallRawSimFilter(void *p);
   static void streamer_HWallRawSimFilter(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallRawSimFilter*)
   {
      ::HWallRawSimFilter *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallRawSimFilter >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallRawSimFilter", ::HWallRawSimFilter::Class_Version(), "././hwallrawsimfilter.h", 7,
                  typeid(::HWallRawSimFilter), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallRawSimFilter::Dictionary, isa_proxy, 0,
                  sizeof(::HWallRawSimFilter) );
      instance.SetNew(&new_HWallRawSimFilter);
      instance.SetNewArray(&newArray_HWallRawSimFilter);
      instance.SetDelete(&delete_HWallRawSimFilter);
      instance.SetDeleteArray(&deleteArray_HWallRawSimFilter);
      instance.SetDestructor(&destruct_HWallRawSimFilter);
      instance.SetStreamerFunc(&streamer_HWallRawSimFilter);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallRawSimFilter*)
   {
      return GenerateInitInstanceLocal((::HWallRawSimFilter*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallRawSimFilter*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallOneHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallOneHit(void *p = 0);
   static void *newArray_HWallOneHit(Long_t size, void *p);
   static void delete_HWallOneHit(void *p);
   static void deleteArray_HWallOneHit(void *p);
   static void destruct_HWallOneHit(void *p);
   static void streamer_HWallOneHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallOneHit*)
   {
      ::HWallOneHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallOneHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallOneHit", ::HWallOneHit::Class_Version(), "././hwallonehit.h", 6,
                  typeid(::HWallOneHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallOneHit::Dictionary, isa_proxy, 0,
                  sizeof(::HWallOneHit) );
      instance.SetNew(&new_HWallOneHit);
      instance.SetNewArray(&newArray_HWallOneHit);
      instance.SetDelete(&delete_HWallOneHit);
      instance.SetDeleteArray(&deleteArray_HWallOneHit);
      instance.SetDestructor(&destruct_HWallOneHit);
      instance.SetStreamerFunc(&streamer_HWallOneHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallOneHit*)
   {
      return GenerateInitInstanceLocal((::HWallOneHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallOneHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallHit(void *p = 0);
   static void *newArray_HWallHit(Long_t size, void *p);
   static void delete_HWallHit(void *p);
   static void deleteArray_HWallHit(void *p);
   static void destruct_HWallHit(void *p);
   static void streamer_HWallHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallHit*)
   {
      ::HWallHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallHit", ::HWallHit::Class_Version(), "././hwallhit.h", 8,
                  typeid(::HWallHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallHit::Dictionary, isa_proxy, 0,
                  sizeof(::HWallHit) );
      instance.SetNew(&new_HWallHit);
      instance.SetNewArray(&newArray_HWallHit);
      instance.SetDelete(&delete_HWallHit);
      instance.SetDeleteArray(&deleteArray_HWallHit);
      instance.SetDestructor(&destruct_HWallHit);
      instance.SetStreamerFunc(&streamer_HWallHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallHit*)
   {
      return GenerateInitInstanceLocal((::HWallHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallEventPlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallEventPlane(void *p = 0);
   static void *newArray_HWallEventPlane(Long_t size, void *p);
   static void delete_HWallEventPlane(void *p);
   static void deleteArray_HWallEventPlane(void *p);
   static void destruct_HWallEventPlane(void *p);
   static void streamer_HWallEventPlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallEventPlane*)
   {
      ::HWallEventPlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallEventPlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallEventPlane", ::HWallEventPlane::Class_Version(), "././hwalleventplane.h", 7,
                  typeid(::HWallEventPlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallEventPlane::Dictionary, isa_proxy, 0,
                  sizeof(::HWallEventPlane) );
      instance.SetNew(&new_HWallEventPlane);
      instance.SetNewArray(&newArray_HWallEventPlane);
      instance.SetDelete(&delete_HWallEventPlane);
      instance.SetDeleteArray(&deleteArray_HWallEventPlane);
      instance.SetDestructor(&destruct_HWallEventPlane);
      instance.SetStreamerFunc(&streamer_HWallEventPlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallEventPlane*)
   {
      return GenerateInitInstanceLocal((::HWallEventPlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallEventPlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallHitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallHitSim(void *p = 0);
   static void *newArray_HWallHitSim(Long_t size, void *p);
   static void delete_HWallHitSim(void *p);
   static void deleteArray_HWallHitSim(void *p);
   static void destruct_HWallHitSim(void *p);
   static void streamer_HWallHitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallHitSim*)
   {
      ::HWallHitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallHitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallHitSim", ::HWallHitSim::Class_Version(), "././hwallhitsim.h", 9,
                  typeid(::HWallHitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallHitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HWallHitSim) );
      instance.SetNew(&new_HWallHitSim);
      instance.SetNewArray(&newArray_HWallHitSim);
      instance.SetDelete(&delete_HWallHitSim);
      instance.SetDeleteArray(&deleteArray_HWallHitSim);
      instance.SetDestructor(&destruct_HWallHitSim);
      instance.SetStreamerFunc(&streamer_HWallHitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallHitSim*)
   {
      return GenerateInitInstanceLocal((::HWallHitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallHitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallRefWinPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallRefWinPar(void *p = 0);
   static void *newArray_HWallRefWinPar(Long_t size, void *p);
   static void delete_HWallRefWinPar(void *p);
   static void deleteArray_HWallRefWinPar(void *p);
   static void destruct_HWallRefWinPar(void *p);
   static void streamer_HWallRefWinPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallRefWinPar*)
   {
      ::HWallRefWinPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallRefWinPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallRefWinPar", ::HWallRefWinPar::Class_Version(), "././hwallrefwinpar.h", 13,
                  typeid(::HWallRefWinPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallRefWinPar::Dictionary, isa_proxy, 0,
                  sizeof(::HWallRefWinPar) );
      instance.SetNew(&new_HWallRefWinPar);
      instance.SetNewArray(&newArray_HWallRefWinPar);
      instance.SetDelete(&delete_HWallRefWinPar);
      instance.SetDeleteArray(&deleteArray_HWallRefWinPar);
      instance.SetDestructor(&destruct_HWallRefWinPar);
      instance.SetStreamerFunc(&streamer_HWallRefWinPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallRefWinPar*)
   {
      return GenerateInitInstanceLocal((::HWallRefWinPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallRefWinPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallHitF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallHitF(void *p = 0);
   static void *newArray_HWallHitF(Long_t size, void *p);
   static void delete_HWallHitF(void *p);
   static void deleteArray_HWallHitF(void *p);
   static void destruct_HWallHitF(void *p);
   static void streamer_HWallHitF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallHitF*)
   {
      ::HWallHitF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallHitF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallHitF", ::HWallHitF::Class_Version(), "././hwallhitf.h", 21,
                  typeid(::HWallHitF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallHitF::Dictionary, isa_proxy, 0,
                  sizeof(::HWallHitF) );
      instance.SetNew(&new_HWallHitF);
      instance.SetNewArray(&newArray_HWallHitF);
      instance.SetDelete(&delete_HWallHitF);
      instance.SetDeleteArray(&deleteArray_HWallHitF);
      instance.SetDestructor(&destruct_HWallHitF);
      instance.SetStreamerFunc(&streamer_HWallHitF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallHitF*)
   {
      return GenerateInitInstanceLocal((::HWallHitF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallHitF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallEventPlanePar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallEventPlanePar(void *p = 0);
   static void *newArray_HWallEventPlanePar(Long_t size, void *p);
   static void delete_HWallEventPlanePar(void *p);
   static void deleteArray_HWallEventPlanePar(void *p);
   static void destruct_HWallEventPlanePar(void *p);
   static void streamer_HWallEventPlanePar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallEventPlanePar*)
   {
      ::HWallEventPlanePar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallEventPlanePar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallEventPlanePar", ::HWallEventPlanePar::Class_Version(), "././hwalleventplanepar.h", 8,
                  typeid(::HWallEventPlanePar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallEventPlanePar::Dictionary, isa_proxy, 0,
                  sizeof(::HWallEventPlanePar) );
      instance.SetNew(&new_HWallEventPlanePar);
      instance.SetNewArray(&newArray_HWallEventPlanePar);
      instance.SetDelete(&delete_HWallEventPlanePar);
      instance.SetDeleteArray(&deleteArray_HWallEventPlanePar);
      instance.SetDestructor(&destruct_HWallEventPlanePar);
      instance.SetStreamerFunc(&streamer_HWallEventPlanePar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallEventPlanePar*)
   {
      return GenerateInitInstanceLocal((::HWallEventPlanePar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallEventPlanePar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallEventPlaneF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallEventPlaneF(void *p = 0);
   static void *newArray_HWallEventPlaneF(Long_t size, void *p);
   static void delete_HWallEventPlaneF(void *p);
   static void deleteArray_HWallEventPlaneF(void *p);
   static void destruct_HWallEventPlaneF(void *p);
   static void streamer_HWallEventPlaneF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallEventPlaneF*)
   {
      ::HWallEventPlaneF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallEventPlaneF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallEventPlaneF", ::HWallEventPlaneF::Class_Version(), "././hwalleventplanef.h", 74,
                  typeid(::HWallEventPlaneF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallEventPlaneF::Dictionary, isa_proxy, 0,
                  sizeof(::HWallEventPlaneF) );
      instance.SetNew(&new_HWallEventPlaneF);
      instance.SetNewArray(&newArray_HWallEventPlaneF);
      instance.SetDelete(&delete_HWallEventPlaneF);
      instance.SetDeleteArray(&deleteArray_HWallEventPlaneF);
      instance.SetDestructor(&destruct_HWallEventPlaneF);
      instance.SetStreamerFunc(&streamer_HWallEventPlaneF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallEventPlaneF*)
   {
      return GenerateInitInstanceLocal((::HWallEventPlaneF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallEventPlaneF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallOneHitF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallOneHitF(void *p = 0);
   static void *newArray_HWallOneHitF(Long_t size, void *p);
   static void delete_HWallOneHitF(void *p);
   static void deleteArray_HWallOneHitF(void *p);
   static void destruct_HWallOneHitF(void *p);
   static void streamer_HWallOneHitF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallOneHitF*)
   {
      ::HWallOneHitF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallOneHitF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallOneHitF", ::HWallOneHitF::Class_Version(), "././hwallonehitf.h", 23,
                  typeid(::HWallOneHitF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallOneHitF::Dictionary, isa_proxy, 0,
                  sizeof(::HWallOneHitF) );
      instance.SetNew(&new_HWallOneHitF);
      instance.SetNewArray(&newArray_HWallOneHitF);
      instance.SetDelete(&delete_HWallOneHitF);
      instance.SetDeleteArray(&deleteArray_HWallOneHitF);
      instance.SetDestructor(&destruct_HWallOneHitF);
      instance.SetStreamerFunc(&streamer_HWallOneHitF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallOneHitF*)
   {
      return GenerateInitInstanceLocal((::HWallOneHitF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallOneHitF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallHitFSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallHitFSim(void *p = 0);
   static void *newArray_HWallHitFSim(Long_t size, void *p);
   static void delete_HWallHitFSim(void *p);
   static void deleteArray_HWallHitFSim(void *p);
   static void destruct_HWallHitFSim(void *p);
   static void streamer_HWallHitFSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallHitFSim*)
   {
      ::HWallHitFSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallHitFSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallHitFSim", ::HWallHitFSim::Class_Version(), "././hwallhitfsim.h", 26,
                  typeid(::HWallHitFSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallHitFSim::Dictionary, isa_proxy, 0,
                  sizeof(::HWallHitFSim) );
      instance.SetNew(&new_HWallHitFSim);
      instance.SetNewArray(&newArray_HWallHitFSim);
      instance.SetDelete(&delete_HWallHitFSim);
      instance.SetDeleteArray(&deleteArray_HWallHitFSim);
      instance.SetDestructor(&destruct_HWallHitFSim);
      instance.SetStreamerFunc(&streamer_HWallHitFSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallHitFSim*)
   {
      return GenerateInitInstanceLocal((::HWallHitFSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallHitFSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallTrbUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallTrbUnpacker(void *p = 0);
   static void *newArray_HWallTrbUnpacker(Long_t size, void *p);
   static void delete_HWallTrbUnpacker(void *p);
   static void deleteArray_HWallTrbUnpacker(void *p);
   static void destruct_HWallTrbUnpacker(void *p);
   static void streamer_HWallTrbUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallTrbUnpacker*)
   {
      ::HWallTrbUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallTrbUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallTrbUnpacker", ::HWallTrbUnpacker::Class_Version(), "././hwalltrbunpacker.h", 10,
                  typeid(::HWallTrbUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallTrbUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HWallTrbUnpacker) );
      instance.SetNew(&new_HWallTrbUnpacker);
      instance.SetNewArray(&newArray_HWallTrbUnpacker);
      instance.SetDelete(&delete_HWallTrbUnpacker);
      instance.SetDeleteArray(&deleteArray_HWallTrbUnpacker);
      instance.SetDestructor(&destruct_HWallTrbUnpacker);
      instance.SetStreamerFunc(&streamer_HWallTrbUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallTrbUnpacker*)
   {
      return GenerateInitInstanceLocal((::HWallTrbUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallTrbUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallTrb2Lookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallTrb2Lookup(void *p = 0);
   static void *newArray_HWallTrb2Lookup(Long_t size, void *p);
   static void delete_HWallTrb2Lookup(void *p);
   static void deleteArray_HWallTrb2Lookup(void *p);
   static void destruct_HWallTrb2Lookup(void *p);
   static void streamer_HWallTrb2Lookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallTrb2Lookup*)
   {
      ::HWallTrb2Lookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallTrb2Lookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallTrb2Lookup", ::HWallTrb2Lookup::Class_Version(), "././hwalltrb2lookup.h", 51,
                  typeid(::HWallTrb2Lookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallTrb2Lookup::Dictionary, isa_proxy, 0,
                  sizeof(::HWallTrb2Lookup) );
      instance.SetNew(&new_HWallTrb2Lookup);
      instance.SetNewArray(&newArray_HWallTrb2Lookup);
      instance.SetDelete(&delete_HWallTrb2Lookup);
      instance.SetDeleteArray(&deleteArray_HWallTrb2Lookup);
      instance.SetDestructor(&destruct_HWallTrb2Lookup);
      instance.SetStreamerFunc(&streamer_HWallTrb2Lookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallTrb2Lookup*)
   {
      return GenerateInitInstanceLocal((::HWallTrb2Lookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallTrb2Lookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallTrb2Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallTrb2Unpacker(void *p = 0);
   static void *newArray_HWallTrb2Unpacker(Long_t size, void *p);
   static void delete_HWallTrb2Unpacker(void *p);
   static void deleteArray_HWallTrb2Unpacker(void *p);
   static void destruct_HWallTrb2Unpacker(void *p);
   static void streamer_HWallTrb2Unpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallTrb2Unpacker*)
   {
      ::HWallTrb2Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallTrb2Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallTrb2Unpacker", ::HWallTrb2Unpacker::Class_Version(), "././hwalltrb2unpacker.h", 10,
                  typeid(::HWallTrb2Unpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallTrb2Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HWallTrb2Unpacker) );
      instance.SetNew(&new_HWallTrb2Unpacker);
      instance.SetNewArray(&newArray_HWallTrb2Unpacker);
      instance.SetDelete(&delete_HWallTrb2Unpacker);
      instance.SetDeleteArray(&deleteArray_HWallTrb2Unpacker);
      instance.SetDestructor(&destruct_HWallTrb2Unpacker);
      instance.SetStreamerFunc(&streamer_HWallTrb2Unpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallTrb2Unpacker*)
   {
      return GenerateInitInstanceLocal((::HWallTrb2Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallTrb2Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallTrb2LookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallTrb2LookupChan(void *p = 0);
   static void *newArray_HWallTrb2LookupChan(Long_t size, void *p);
   static void delete_HWallTrb2LookupChan(void *p);
   static void deleteArray_HWallTrb2LookupChan(void *p);
   static void destruct_HWallTrb2LookupChan(void *p);
   static void streamer_HWallTrb2LookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallTrb2LookupChan*)
   {
      ::HWallTrb2LookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallTrb2LookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallTrb2LookupChan", ::HWallTrb2LookupChan::Class_Version(), "././hwalltrb2lookup.h", 13,
                  typeid(::HWallTrb2LookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallTrb2LookupChan::Dictionary, isa_proxy, 0,
                  sizeof(::HWallTrb2LookupChan) );
      instance.SetNew(&new_HWallTrb2LookupChan);
      instance.SetNewArray(&newArray_HWallTrb2LookupChan);
      instance.SetDelete(&delete_HWallTrb2LookupChan);
      instance.SetDeleteArray(&deleteArray_HWallTrb2LookupChan);
      instance.SetDestructor(&destruct_HWallTrb2LookupChan);
      instance.SetStreamerFunc(&streamer_HWallTrb2LookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallTrb2LookupChan*)
   {
      return GenerateInitInstanceLocal((::HWallTrb2LookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallTrb2LookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HWallTrb2LookupBoard_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HWallTrb2LookupBoard(void *p = 0);
   static void *newArray_HWallTrb2LookupBoard(Long_t size, void *p);
   static void delete_HWallTrb2LookupBoard(void *p);
   static void deleteArray_HWallTrb2LookupBoard(void *p);
   static void destruct_HWallTrb2LookupBoard(void *p);
   static void streamer_HWallTrb2LookupBoard(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HWallTrb2LookupBoard*)
   {
      ::HWallTrb2LookupBoard *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HWallTrb2LookupBoard >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HWallTrb2LookupBoard", ::HWallTrb2LookupBoard::Class_Version(), "././hwalltrb2lookup.h", 31,
                  typeid(::HWallTrb2LookupBoard), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HWallTrb2LookupBoard::Dictionary, isa_proxy, 0,
                  sizeof(::HWallTrb2LookupBoard) );
      instance.SetNew(&new_HWallTrb2LookupBoard);
      instance.SetNewArray(&newArray_HWallTrb2LookupBoard);
      instance.SetDelete(&delete_HWallTrb2LookupBoard);
      instance.SetDeleteArray(&deleteArray_HWallTrb2LookupBoard);
      instance.SetDestructor(&destruct_HWallTrb2LookupBoard);
      instance.SetStreamerFunc(&streamer_HWallTrb2LookupBoard);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HWallTrb2LookupBoard*)
   {
      return GenerateInitInstanceLocal((::HWallTrb2LookupBoard*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HWallTrb2LookupBoard*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HWallDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallDetector::Class_Name()
{
   return "HWallDetector";
}

//______________________________________________________________________________
const char *HWallDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallTaskSet::Class_Name()
{
   return "HWallTaskSet";
}

//______________________________________________________________________________
const char *HWallTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallLookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallLookup::Class_Name()
{
   return "HWallLookup";
}

//______________________________________________________________________________
const char *HWallLookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallLookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallLookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallLookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallUnpacker::Class_Name()
{
   return "HWallUnpacker";
}

//______________________________________________________________________________
const char *HWallUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallRaw::Class_Name()
{
   return "HWallRaw";
}

//______________________________________________________________________________
const char *HWallRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallContFact::Class_Name()
{
   return "HWallContFact";
}

//______________________________________________________________________________
const char *HWallContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallCalPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallCalPar::Class_Name()
{
   return "HWallCalPar";
}

//______________________________________________________________________________
const char *HWallCalPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallCalPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallCalPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallCalPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallParRootFileIo::Class_Name()
{
   return "HWallParRootFileIo";
}

//______________________________________________________________________________
const char *HWallParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallParAsciiFileIo::Class_Name()
{
   return "HWallParAsciiFileIo";
}

//______________________________________________________________________________
const char *HWallParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallLookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallLookupChan::Class_Name()
{
   return "HWallLookupChan";
}

//______________________________________________________________________________
const char *HWallLookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallLookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallLookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallLookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallLookupSlot::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallLookupSlot::Class_Name()
{
   return "HWallLookupSlot";
}

//______________________________________________________________________________
const char *HWallLookupSlot::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupSlot*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallLookupSlot::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupSlot*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallLookupSlot::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupSlot*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallLookupSlot::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupSlot*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallLookupCrate::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallLookupCrate::Class_Name()
{
   return "HWallLookupCrate";
}

//______________________________________________________________________________
const char *HWallLookupCrate::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupCrate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallLookupCrate::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupCrate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallLookupCrate::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupCrate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallLookupCrate::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallLookupCrate*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallCal::Class_Name()
{
   return "HWallCal";
}

//______________________________________________________________________________
const char *HWallCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallCalParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallCalParCell::Class_Name()
{
   return "HWallCalParCell";
}

//______________________________________________________________________________
const char *HWallCalParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallCalParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallCalParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallCalParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallCalibrater::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallCalibrater::Class_Name()
{
   return "HWallCalibrater";
}

//______________________________________________________________________________
const char *HWallCalibrater::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalibrater*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallCalibrater::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalibrater*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallCalibrater::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalibrater*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallCalibrater::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallCalibrater*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallDigiPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallDigiPar::Class_Name()
{
   return "HWallDigiPar";
}

//______________________________________________________________________________
const char *HWallDigiPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigiPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallDigiPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigiPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallDigiPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigiPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallDigiPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigiPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallGeomPar::Class_Name()
{
   return "HWallGeomPar";
}

//______________________________________________________________________________
const char *HWallGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallDigitizer::Class_Name()
{
   return "HWallDigitizer";
}

//______________________________________________________________________________
const char *HWallDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallRawSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallRawSim::Class_Name()
{
   return "HWallRawSim";
}

//______________________________________________________________________________
const char *HWallRawSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallRawSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallRawSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallRawSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallRawSimFilter::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallRawSimFilter::Class_Name()
{
   return "HWallRawSimFilter";
}

//______________________________________________________________________________
const char *HWallRawSimFilter::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSimFilter*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallRawSimFilter::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSimFilter*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallRawSimFilter::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSimFilter*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallRawSimFilter::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRawSimFilter*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallOneHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallOneHit::Class_Name()
{
   return "HWallOneHit";
}

//______________________________________________________________________________
const char *HWallOneHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallOneHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallOneHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallOneHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallHit::Class_Name()
{
   return "HWallHit";
}

//______________________________________________________________________________
const char *HWallHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallEventPlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallEventPlane::Class_Name()
{
   return "HWallEventPlane";
}

//______________________________________________________________________________
const char *HWallEventPlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallEventPlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallEventPlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallEventPlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallHitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallHitSim::Class_Name()
{
   return "HWallHitSim";
}

//______________________________________________________________________________
const char *HWallHitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallHitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallHitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallHitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallRefWinPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallRefWinPar::Class_Name()
{
   return "HWallRefWinPar";
}

//______________________________________________________________________________
const char *HWallRefWinPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRefWinPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallRefWinPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRefWinPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallRefWinPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRefWinPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallRefWinPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallRefWinPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallHitF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallHitF::Class_Name()
{
   return "HWallHitF";
}

//______________________________________________________________________________
const char *HWallHitF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallHitF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallHitF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallHitF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallEventPlanePar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallEventPlanePar::Class_Name()
{
   return "HWallEventPlanePar";
}

//______________________________________________________________________________
const char *HWallEventPlanePar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlanePar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallEventPlanePar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlanePar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallEventPlanePar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlanePar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallEventPlanePar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlanePar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallEventPlaneF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallEventPlaneF::Class_Name()
{
   return "HWallEventPlaneF";
}

//______________________________________________________________________________
const char *HWallEventPlaneF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlaneF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallEventPlaneF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlaneF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallEventPlaneF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlaneF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallEventPlaneF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallEventPlaneF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallOneHitF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallOneHitF::Class_Name()
{
   return "HWallOneHitF";
}

//______________________________________________________________________________
const char *HWallOneHitF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHitF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallOneHitF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHitF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallOneHitF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHitF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallOneHitF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallOneHitF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallHitFSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallHitFSim::Class_Name()
{
   return "HWallHitFSim";
}

//______________________________________________________________________________
const char *HWallHitFSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitFSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallHitFSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitFSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallHitFSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitFSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallHitFSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallHitFSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallTrbUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallTrbUnpacker::Class_Name()
{
   return "HWallTrbUnpacker";
}

//______________________________________________________________________________
const char *HWallTrbUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrbUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallTrbUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrbUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallTrbUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrbUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallTrbUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrbUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallTrb2Lookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallTrb2Lookup::Class_Name()
{
   return "HWallTrb2Lookup";
}

//______________________________________________________________________________
const char *HWallTrb2Lookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Lookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallTrb2Lookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Lookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallTrb2Lookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Lookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallTrb2Lookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Lookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallTrb2Unpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallTrb2Unpacker::Class_Name()
{
   return "HWallTrb2Unpacker";
}

//______________________________________________________________________________
const char *HWallTrb2Unpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallTrb2Unpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallTrb2Unpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallTrb2Unpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2Unpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallTrb2LookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallTrb2LookupChan::Class_Name()
{
   return "HWallTrb2LookupChan";
}

//______________________________________________________________________________
const char *HWallTrb2LookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallTrb2LookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallTrb2LookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallTrb2LookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HWallTrb2LookupBoard::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HWallTrb2LookupBoard::Class_Name()
{
   return "HWallTrb2LookupBoard";
}

//______________________________________________________________________________
const char *HWallTrb2LookupBoard::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupBoard*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HWallTrb2LookupBoard::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupBoard*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HWallTrb2LookupBoard::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupBoard*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HWallTrb2LookupBoard::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HWallTrb2LookupBoard*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HWallDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetector::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HWallDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallDetector::IsA(), kTRUE);
      HDetector::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallDetector.
      TClass *R__cl = ::HWallDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallDetector(void *p) {
      return  p ? new(p) ::HWallDetector : new ::HWallDetector;
   }
   static void *newArray_HWallDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HWallDetector[nElements] : new ::HWallDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallDetector(void *p) {
      delete ((::HWallDetector*)p);
   }
   static void deleteArray_HWallDetector(void *p) {
      delete [] ((::HWallDetector*)p);
   }
   static void destruct_HWallDetector(void *p) {
      typedef ::HWallDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallDetector(TBuffer &buf, void *obj) {
      ((::HWallDetector*)obj)->::HWallDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallDetector

//______________________________________________________________________________
void HWallContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HWallContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallContFact.
      TClass *R__cl = ::HWallContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallContFact(void *p) {
      return  p ? new(p) ::HWallContFact : new ::HWallContFact;
   }
   static void *newArray_HWallContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HWallContFact[nElements] : new ::HWallContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallContFact(void *p) {
      delete ((::HWallContFact*)p);
   }
   static void deleteArray_HWallContFact(void *p) {
      delete [] ((::HWallContFact*)p);
   }
   static void destruct_HWallContFact(void *p) {
      typedef ::HWallContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallContFact(TBuffer &buf, void *obj) {
      ((::HWallContFact*)obj)->::HWallContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallContFact

//______________________________________________________________________________
void HWallTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b >> fdoEventPlane;
      R__b.CheckByteCount(R__s, R__c, HWallTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b << fdoEventPlane;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallTaskSet.
      TClass *R__cl = ::HWallTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdoEventPlane", &fdoEventPlane);
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallTaskSet(void *p) {
      return  p ? new(p) ::HWallTaskSet : new ::HWallTaskSet;
   }
   static void *newArray_HWallTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HWallTaskSet[nElements] : new ::HWallTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallTaskSet(void *p) {
      delete ((::HWallTaskSet*)p);
   }
   static void deleteArray_HWallTaskSet(void *p) {
      delete [] ((::HWallTaskSet*)p);
   }
   static void destruct_HWallTaskSet(void *p) {
      typedef ::HWallTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallTaskSet(TBuffer &buf, void *obj) {
      ((::HWallTaskSet*)obj)->::HWallTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallTaskSet

//______________________________________________________________________________
void HWallParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallParRootFileIo.

   HDetParRootFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HWallParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallParRootFileIo.
      TClass *R__cl = ::HWallParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HWallParRootFileIo(void *p) {
      delete ((::HWallParRootFileIo*)p);
   }
   static void deleteArray_HWallParRootFileIo(void *p) {
      delete [] ((::HWallParRootFileIo*)p);
   }
   static void destruct_HWallParRootFileIo(void *p) {
      typedef ::HWallParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallParRootFileIo(TBuffer &buf, void *obj) {
      ((::HWallParRootFileIo*)obj)->::HWallParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallParRootFileIo

//______________________________________________________________________________
void HWallParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HWallParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallParAsciiFileIo.
      TClass *R__cl = ::HWallParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HWallParAsciiFileIo(void *p) {
      delete ((::HWallParAsciiFileIo*)p);
   }
   static void deleteArray_HWallParAsciiFileIo(void *p) {
      delete [] ((::HWallParAsciiFileIo*)p);
   }
   static void destruct_HWallParAsciiFileIo(void *p) {
      typedef ::HWallParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HWallParAsciiFileIo*)obj)->::HWallParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallParAsciiFileIo

//______________________________________________________________________________
void HWallRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> time;
      R__b >> charge;
      R__b >> nHits;
      R__b >> cell;
      R__b >> time1;
      R__b >> width1;
      R__b >> time2;
      R__b >> width2;
      R__b >> time3;
      R__b >> width3;
      R__b >> time4;
      R__b >> width4;
      R__b.CheckByteCount(R__s, R__c, HWallRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallRaw::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << time;
      R__b << charge;
      R__b << nHits;
      R__b << cell;
      R__b << time1;
      R__b << width1;
      R__b << time2;
      R__b << width2;
      R__b << time3;
      R__b << width3;
      R__b << time4;
      R__b << width4;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallRaw.
      TClass *R__cl = ::HWallRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time", &time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge", &charge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width1", &width1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width2", &width2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time3", &time3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width3", &width3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time4", &time4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "width4", &width4);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallRaw(void *p) {
      return  p ? new(p) ::HWallRaw : new ::HWallRaw;
   }
   static void *newArray_HWallRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HWallRaw[nElements] : new ::HWallRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallRaw(void *p) {
      delete ((::HWallRaw*)p);
   }
   static void deleteArray_HWallRaw(void *p) {
      delete [] ((::HWallRaw*)p);
   }
   static void destruct_HWallRaw(void *p) {
      typedef ::HWallRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallRaw(TBuffer &buf, void *obj) {
      ((::HWallRaw*)obj)->::HWallRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallRaw

//______________________________________________________________________________
void HWallRawSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallRawSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HWallRaw::Streamer(R__b);
      R__b >> nTrack1;
      R__b >> nTrack2;
      R__b >> nHit;
      R__b.CheckByteCount(R__s, R__c, HWallRawSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallRawSim::IsA(), kTRUE);
      HWallRaw::Streamer(R__b);
      R__b << nTrack1;
      R__b << nTrack2;
      R__b << nHit;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallRawSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallRawSim.
      TClass *R__cl = ::HWallRawSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1", &nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2", &nTrack2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHit", &nHit);
      HWallRaw::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallRawSim(void *p) {
      return  p ? new(p) ::HWallRawSim : new ::HWallRawSim;
   }
   static void *newArray_HWallRawSim(Long_t nElements, void *p) {
      return p ? new(p) ::HWallRawSim[nElements] : new ::HWallRawSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallRawSim(void *p) {
      delete ((::HWallRawSim*)p);
   }
   static void deleteArray_HWallRawSim(void *p) {
      delete [] ((::HWallRawSim*)p);
   }
   static void destruct_HWallRawSim(void *p) {
      typedef ::HWallRawSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallRawSim(TBuffer &buf, void *obj) {
      ((::HWallRawSim*)obj)->::HWallRawSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallRawSim

//______________________________________________________________________________
void HWallHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallHit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> timeCal;
      R__b >> chargeCal;
      R__b >> cell;
      R__b >> theta;
      R__b >> phi;
      R__b >> d;
      R__b >> xlab;
      R__b >> ylab;
      R__b >> zlab;
      R__b.CheckByteCount(R__s, R__c, HWallHit::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallHit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << timeCal;
      R__b << chargeCal;
      R__b << cell;
      R__b << theta;
      R__b << phi;
      R__b << d;
      R__b << xlab;
      R__b << ylab;
      R__b << zlab;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallHit.
      TClass *R__cl = ::HWallHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeCal", &timeCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeCal", &chargeCal);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "theta", &theta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "phi", &phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "d", &d);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "xlab", &xlab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ylab", &ylab);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "zlab", &zlab);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallHit(void *p) {
      return  p ? new(p) ::HWallHit : new ::HWallHit;
   }
   static void *newArray_HWallHit(Long_t nElements, void *p) {
      return p ? new(p) ::HWallHit[nElements] : new ::HWallHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallHit(void *p) {
      delete ((::HWallHit*)p);
   }
   static void deleteArray_HWallHit(void *p) {
      delete [] ((::HWallHit*)p);
   }
   static void destruct_HWallHit(void *p) {
      typedef ::HWallHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallHit(TBuffer &buf, void *obj) {
      ((::HWallHit*)obj)->::HWallHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallHit

//______________________________________________________________________________
void HWallHitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallHitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HWallHit::Streamer(R__b);
      R__b >> nTrack1;
      R__b >> nTrack2;
      R__b.CheckByteCount(R__s, R__c, HWallHitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallHitSim::IsA(), kTRUE);
      HWallHit::Streamer(R__b);
      R__b << nTrack1;
      R__b << nTrack2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallHitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallHitSim.
      TClass *R__cl = ::HWallHitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack1", &nTrack1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack2", &nTrack2);
      HWallHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallHitSim(void *p) {
      return  p ? new(p) ::HWallHitSim : new ::HWallHitSim;
   }
   static void *newArray_HWallHitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HWallHitSim[nElements] : new ::HWallHitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallHitSim(void *p) {
      delete ((::HWallHitSim*)p);
   }
   static void deleteArray_HWallHitSim(void *p) {
      delete [] ((::HWallHitSim*)p);
   }
   static void destruct_HWallHitSim(void *p) {
      typedef ::HWallHitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallHitSim(TBuffer &buf, void *obj) {
      ((::HWallHitSim*)obj)->::HWallHitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallHitSim

//______________________________________________________________________________
void HWallEventPlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallEventPlane.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fPhi;
      R__b >> fPhiA;
      R__b >> fPhiB;
      R__b >> fPhiAB;
      R__b >> NA;
      R__b >> NB;
      R__b.CheckByteCount(R__s, R__c, HWallEventPlane::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallEventPlane::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fPhi;
      R__b << fPhiA;
      R__b << fPhiB;
      R__b << fPhiAB;
      R__b << NA;
      R__b << NB;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallEventPlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallEventPlane.
      TClass *R__cl = ::HWallEventPlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiA", &fPhiA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiB", &fPhiB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhiAB", &fPhiAB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NA", &NA);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "NB", &NB);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallEventPlane(void *p) {
      return  p ? new(p) ::HWallEventPlane : new ::HWallEventPlane;
   }
   static void *newArray_HWallEventPlane(Long_t nElements, void *p) {
      return p ? new(p) ::HWallEventPlane[nElements] : new ::HWallEventPlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallEventPlane(void *p) {
      delete ((::HWallEventPlane*)p);
   }
   static void deleteArray_HWallEventPlane(void *p) {
      delete [] ((::HWallEventPlane*)p);
   }
   static void destruct_HWallEventPlane(void *p) {
      typedef ::HWallEventPlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallEventPlane(TBuffer &buf, void *obj) {
      ((::HWallEventPlane*)obj)->::HWallEventPlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallEventPlane

//______________________________________________________________________________
void HWallUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallUnpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HWallUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallUnpacker.
      TClass *R__cl = ::HWallUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallUnpacker(void *p) {
      return  p ? new(p) ::HWallUnpacker : new ::HWallUnpacker;
   }
   static void *newArray_HWallUnpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HWallUnpacker[nElements] : new ::HWallUnpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallUnpacker(void *p) {
      delete ((::HWallUnpacker*)p);
   }
   static void deleteArray_HWallUnpacker(void *p) {
      delete [] ((::HWallUnpacker*)p);
   }
   static void destruct_HWallUnpacker(void *p) {
      typedef ::HWallUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallUnpacker(TBuffer &buf, void *obj) {
      ((::HWallUnpacker*)obj)->::HWallUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallUnpacker

//______________________________________________________________________________
void HWallTrbUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallTrbUnpacker.

   HTrbBaseUnpacker::Streamer(R__b);
}

//______________________________________________________________________________
void HWallTrbUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallTrbUnpacker.
      TClass *R__cl = ::HWallTrbUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugWallFlag", &debugWallFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "doRefTimeCorr", &doRefTimeCorr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "noTimeRefCorr", &noTimeRefCorr);
      HTrbBaseUnpacker::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallTrbUnpacker(void *p) {
      return  p ? new(p) ::HWallTrbUnpacker : new ::HWallTrbUnpacker;
   }
   static void *newArray_HWallTrbUnpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HWallTrbUnpacker[nElements] : new ::HWallTrbUnpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallTrbUnpacker(void *p) {
      delete ((::HWallTrbUnpacker*)p);
   }
   static void deleteArray_HWallTrbUnpacker(void *p) {
      delete [] ((::HWallTrbUnpacker*)p);
   }
   static void destruct_HWallTrbUnpacker(void *p) {
      typedef ::HWallTrbUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallTrbUnpacker(TBuffer &buf, void *obj) {
      ((::HWallTrbUnpacker*)obj)->::HWallTrbUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallTrbUnpacker

//______________________________________________________________________________
void HWallTrb2Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallTrb2Unpacker.

   HTrb2Unpacker::Streamer(R__b);
}

//______________________________________________________________________________
void HWallTrb2Unpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallTrb2Unpacker.
      TClass *R__cl = ::HWallTrb2Unpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*lookup", &lookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeRef", &timeRef);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeRefRemove", &timeRefRemove);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeShift", &timeShift);
      HTrb2Unpacker::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallTrb2Unpacker(void *p) {
      return  p ? new(p) ::HWallTrb2Unpacker : new ::HWallTrb2Unpacker;
   }
   static void *newArray_HWallTrb2Unpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HWallTrb2Unpacker[nElements] : new ::HWallTrb2Unpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallTrb2Unpacker(void *p) {
      delete ((::HWallTrb2Unpacker*)p);
   }
   static void deleteArray_HWallTrb2Unpacker(void *p) {
      delete [] ((::HWallTrb2Unpacker*)p);
   }
   static void destruct_HWallTrb2Unpacker(void *p) {
      typedef ::HWallTrb2Unpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallTrb2Unpacker(TBuffer &buf, void *obj) {
      ((::HWallTrb2Unpacker*)obj)->::HWallTrb2Unpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallTrb2Unpacker

//______________________________________________________________________________
void HWallDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallDigitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HWallDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallDigitizer.
      TClass *R__cl = ::HWallDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantCat", &fGeantCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCat", &fRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallDigiPar", &pWallDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallGeomPar", &pWallGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterGeant", &iterGeant);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iterWallRaw", &iterWallRaw);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallDigitizer(void *p) {
      return  p ? new(p) ::HWallDigitizer : new ::HWallDigitizer;
   }
   static void *newArray_HWallDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HWallDigitizer[nElements] : new ::HWallDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallDigitizer(void *p) {
      delete ((::HWallDigitizer*)p);
   }
   static void deleteArray_HWallDigitizer(void *p) {
      delete [] ((::HWallDigitizer*)p);
   }
   static void destruct_HWallDigitizer(void *p) {
      typedef ::HWallDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallDigitizer(TBuffer &buf, void *obj) {
      ((::HWallDigitizer*)obj)->::HWallDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallDigitizer

//______________________________________________________________________________
void HWallRawSimFilter::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallRawSimFilter.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HFilter::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HWallRawSimFilter::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallRawSimFilter::IsA(), kTRUE);
      HFilter::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallRawSimFilter::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallRawSimFilter.
      TClass *R__cl = ::HWallRawSimFilter::IsA();
      if (R__cl || R__insp.IsA()) { }
      HFilter::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallRawSimFilter(void *p) {
      return  p ? new(p) ::HWallRawSimFilter : new ::HWallRawSimFilter;
   }
   static void *newArray_HWallRawSimFilter(Long_t nElements, void *p) {
      return p ? new(p) ::HWallRawSimFilter[nElements] : new ::HWallRawSimFilter[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallRawSimFilter(void *p) {
      delete ((::HWallRawSimFilter*)p);
   }
   static void deleteArray_HWallRawSimFilter(void *p) {
      delete [] ((::HWallRawSimFilter*)p);
   }
   static void destruct_HWallRawSimFilter(void *p) {
      typedef ::HWallRawSimFilter current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallRawSimFilter(TBuffer &buf, void *obj) {
      ((::HWallRawSimFilter*)obj)->::HWallRawSimFilter::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallRawSimFilter

//______________________________________________________________________________
void HWallOneHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallOneHit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> timeHit;
      R__b >> chargeHit;
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HWallOneHit::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallOneHit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << timeHit;
      R__b << chargeHit;
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallOneHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallOneHit.
      TClass *R__cl = ::HWallOneHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "timeHit", &timeHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeHit", &chargeHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallOneHit(void *p) {
      return  p ? new(p) ::HWallOneHit : new ::HWallOneHit;
   }
   static void *newArray_HWallOneHit(Long_t nElements, void *p) {
      return p ? new(p) ::HWallOneHit[nElements] : new ::HWallOneHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallOneHit(void *p) {
      delete ((::HWallOneHit*)p);
   }
   static void deleteArray_HWallOneHit(void *p) {
      delete [] ((::HWallOneHit*)p);
   }
   static void destruct_HWallOneHit(void *p) {
      typedef ::HWallOneHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallOneHit(TBuffer &buf, void *obj) {
      ((::HWallOneHit*)obj)->::HWallOneHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallOneHit

//______________________________________________________________________________
void HWallOneHitF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallOneHitF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HWallOneHitF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallOneHitF.
      TClass *R__cl = ::HWallOneHitF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalCat", &fCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOneHitCat", &fOneHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallRefWinPar", &pWallRefWinPar);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallOneHitF(void *p) {
      return  p ? new(p) ::HWallOneHitF : new ::HWallOneHitF;
   }
   static void *newArray_HWallOneHitF(Long_t nElements, void *p) {
      return p ? new(p) ::HWallOneHitF[nElements] : new ::HWallOneHitF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallOneHitF(void *p) {
      delete ((::HWallOneHitF*)p);
   }
   static void deleteArray_HWallOneHitF(void *p) {
      delete [] ((::HWallOneHitF*)p);
   }
   static void destruct_HWallOneHitF(void *p) {
      typedef ::HWallOneHitF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallOneHitF(TBuffer &buf, void *obj) {
      ((::HWallOneHitF*)obj)->::HWallOneHitF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallOneHitF

//______________________________________________________________________________
void HWallHitF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallHitF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HWallHitF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallHitF.
      TClass *R__cl = ::HWallHitF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCat", &fRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fOneHitCat", &fOneHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallGeometry", &pWallGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSpecGeometry", &pSpecGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fStartHitCat", &fStartHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallSimulation", &fWallSimulation);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallHitF(void *p) {
      return  p ? new(p) ::HWallHitF : new ::HWallHitF;
   }
   static void *newArray_HWallHitF(Long_t nElements, void *p) {
      return p ? new(p) ::HWallHitF[nElements] : new ::HWallHitF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallHitF(void *p) {
      delete ((::HWallHitF*)p);
   }
   static void deleteArray_HWallHitF(void *p) {
      delete [] ((::HWallHitF*)p);
   }
   static void destruct_HWallHitF(void *p) {
      typedef ::HWallHitF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallHitF(TBuffer &buf, void *obj) {
      ((::HWallHitF*)obj)->::HWallHitF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallHitF

//______________________________________________________________________________
void HWallHitFSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallHitFSim.

   HWallHitF::Streamer(R__b);
}

//______________________________________________________________________________
void HWallHitFSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallHitFSim.
      TClass *R__cl = ::HWallHitFSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLoc", &fLoc);
      R__insp.InspectMember(fLoc, "fLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fRawCat", &fRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitCat", &fHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallDigiPar", &pWallDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallGeometry", &pWallGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSpecGeometry", &pSpecGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fWallSimulation", &fWallSimulation);
      HWallHitF::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallHitFSim(void *p) {
      return  p ? new(p) ::HWallHitFSim : new ::HWallHitFSim;
   }
   static void *newArray_HWallHitFSim(Long_t nElements, void *p) {
      return p ? new(p) ::HWallHitFSim[nElements] : new ::HWallHitFSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallHitFSim(void *p) {
      delete ((::HWallHitFSim*)p);
   }
   static void deleteArray_HWallHitFSim(void *p) {
      delete [] ((::HWallHitFSim*)p);
   }
   static void destruct_HWallHitFSim(void *p) {
      typedef ::HWallHitFSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallHitFSim(TBuffer &buf, void *obj) {
      ((::HWallHitFSim*)obj)->::HWallHitFSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallHitFSim

//______________________________________________________________________________
void HWallEventPlaneF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallEventPlaneF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HWallEventPlaneF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallEventPlaneF.
      TClass *R__cl = ::HWallEventPlaneF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWallHitCat", &fWallHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWallEventPlaneCat", &fWallEventPlaneCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fWallEventPlanePar", &fWallEventPlanePar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fcellsVect", (void*)&fcellsVect);
      R__insp.InspectMember("HWallFiredCellsVA", (void*)&fcellsVect, "fcellsVect.", true);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallEventPlaneF(void *p) {
      return  p ? new(p) ::HWallEventPlaneF : new ::HWallEventPlaneF;
   }
   static void *newArray_HWallEventPlaneF(Long_t nElements, void *p) {
      return p ? new(p) ::HWallEventPlaneF[nElements] : new ::HWallEventPlaneF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallEventPlaneF(void *p) {
      delete ((::HWallEventPlaneF*)p);
   }
   static void deleteArray_HWallEventPlaneF(void *p) {
      delete [] ((::HWallEventPlaneF*)p);
   }
   static void destruct_HWallEventPlaneF(void *p) {
      typedef ::HWallEventPlaneF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallEventPlaneF(TBuffer &buf, void *obj) {
      ((::HWallEventPlaneF*)obj)->::HWallEventPlaneF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallEventPlaneF

//______________________________________________________________________________
void HWallLookupChan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallLookupChan.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HWallLookupChan::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallLookupChan::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallLookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallLookupChan.
      TClass *R__cl = ::HWallLookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallLookupChan(void *p) {
      return  p ? new(p) ::HWallLookupChan : new ::HWallLookupChan;
   }
   static void *newArray_HWallLookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HWallLookupChan[nElements] : new ::HWallLookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallLookupChan(void *p) {
      delete ((::HWallLookupChan*)p);
   }
   static void deleteArray_HWallLookupChan(void *p) {
      delete [] ((::HWallLookupChan*)p);
   }
   static void destruct_HWallLookupChan(void *p) {
      typedef ::HWallLookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallLookupChan(TBuffer &buf, void *obj) {
      ((::HWallLookupChan*)obj)->::HWallLookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallLookupChan

//______________________________________________________________________________
void HWallLookupSlot::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallLookupSlot.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> modType;
      R__b >> maxChannel;
      R__b >> nChannels;
      R__b.CheckByteCount(R__s, R__c, HWallLookupSlot::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallLookupSlot::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << modType;
      R__b << maxChannel;
      R__b << nChannels;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallLookupSlot::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallLookupSlot.
      TClass *R__cl = ::HWallLookupSlot::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modType", &modType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxChannel", &maxChannel);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nChannels", &nChannels);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallLookupSlot(void *p) {
      return  p ? new(p) ::HWallLookupSlot : new ::HWallLookupSlot;
   }
   static void *newArray_HWallLookupSlot(Long_t nElements, void *p) {
      return p ? new(p) ::HWallLookupSlot[nElements] : new ::HWallLookupSlot[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallLookupSlot(void *p) {
      delete ((::HWallLookupSlot*)p);
   }
   static void deleteArray_HWallLookupSlot(void *p) {
      delete [] ((::HWallLookupSlot*)p);
   }
   static void destruct_HWallLookupSlot(void *p) {
      typedef ::HWallLookupSlot current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallLookupSlot(TBuffer &buf, void *obj) {
      ((::HWallLookupSlot*)obj)->::HWallLookupSlot::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallLookupSlot

//______________________________________________________________________________
void HWallLookupCrate::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallLookupCrate.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b >> maxSlot;
      R__b >> nSlots;
      R__b.CheckByteCount(R__s, R__c, HWallLookupCrate::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallLookupCrate::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b << maxSlot;
      R__b << nSlots;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallLookupCrate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallLookupCrate.
      TClass *R__cl = ::HWallLookupCrate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxSlot", &maxSlot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSlots", &nSlots);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallLookupCrate(void *p) {
      return  p ? new(p) ::HWallLookupCrate : new ::HWallLookupCrate;
   }
   static void *newArray_HWallLookupCrate(Long_t nElements, void *p) {
      return p ? new(p) ::HWallLookupCrate[nElements] : new ::HWallLookupCrate[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallLookupCrate(void *p) {
      delete ((::HWallLookupCrate*)p);
   }
   static void deleteArray_HWallLookupCrate(void *p) {
      delete [] ((::HWallLookupCrate*)p);
   }
   static void destruct_HWallLookupCrate(void *p) {
      typedef ::HWallLookupCrate current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallLookupCrate(TBuffer &buf, void *obj) {
      ((::HWallLookupCrate*)obj)->::HWallLookupCrate::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallLookupCrate

//______________________________________________________________________________
void HWallLookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallLookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> maxCrate;
      R__b.CheckByteCount(R__s, R__c, HWallLookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallLookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << maxCrate;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallLookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallLookup.
      TClass *R__cl = ::HWallLookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxCrate", &maxCrate);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallLookup(void *p) {
      return  p ? new(p) ::HWallLookup : new ::HWallLookup;
   }
   static void *newArray_HWallLookup(Long_t nElements, void *p) {
      return p ? new(p) ::HWallLookup[nElements] : new ::HWallLookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallLookup(void *p) {
      delete ((::HWallLookup*)p);
   }
   static void deleteArray_HWallLookup(void *p) {
      delete [] ((::HWallLookup*)p);
   }
   static void destruct_HWallLookup(void *p) {
      typedef ::HWallLookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallLookup(TBuffer &buf, void *obj) {
      ((::HWallLookup*)obj)->::HWallLookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallLookup

//______________________________________________________________________________
void HWallTrb2Lookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallTrb2Lookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HWallTrb2Lookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallTrb2Lookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallTrb2Lookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallTrb2Lookup.
      TClass *R__cl = ::HWallTrb2Lookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallTrb2Lookup(void *p) {
      return  p ? new(p) ::HWallTrb2Lookup : new ::HWallTrb2Lookup;
   }
   static void *newArray_HWallTrb2Lookup(Long_t nElements, void *p) {
      return p ? new(p) ::HWallTrb2Lookup[nElements] : new ::HWallTrb2Lookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallTrb2Lookup(void *p) {
      delete ((::HWallTrb2Lookup*)p);
   }
   static void deleteArray_HWallTrb2Lookup(void *p) {
      delete [] ((::HWallTrb2Lookup*)p);
   }
   static void destruct_HWallTrb2Lookup(void *p) {
      typedef ::HWallTrb2Lookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallTrb2Lookup(TBuffer &buf, void *obj) {
      ((::HWallTrb2Lookup*)obj)->::HWallTrb2Lookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallTrb2Lookup

//______________________________________________________________________________
void HWallTrb2LookupBoard::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallTrb2LookupBoard.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HWallTrb2LookupBoard::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallTrb2LookupBoard::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallTrb2LookupBoard::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallTrb2LookupBoard.
      TClass *R__cl = ::HWallTrb2LookupBoard::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallTrb2LookupBoard(void *p) {
      return  p ? new(p) ::HWallTrb2LookupBoard : new ::HWallTrb2LookupBoard;
   }
   static void *newArray_HWallTrb2LookupBoard(Long_t nElements, void *p) {
      return p ? new(p) ::HWallTrb2LookupBoard[nElements] : new ::HWallTrb2LookupBoard[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallTrb2LookupBoard(void *p) {
      delete ((::HWallTrb2LookupBoard*)p);
   }
   static void deleteArray_HWallTrb2LookupBoard(void *p) {
      delete [] ((::HWallTrb2LookupBoard*)p);
   }
   static void destruct_HWallTrb2LookupBoard(void *p) {
      typedef ::HWallTrb2LookupBoard current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallTrb2LookupBoard(TBuffer &buf, void *obj) {
      ((::HWallTrb2LookupBoard*)obj)->::HWallTrb2LookupBoard::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallTrb2LookupBoard

//______________________________________________________________________________
void HWallTrb2LookupChan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallTrb2LookupChan.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HWallTrb2LookupChan::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallTrb2LookupChan::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallTrb2LookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallTrb2LookupChan.
      TClass *R__cl = ::HWallTrb2LookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallTrb2LookupChan(void *p) {
      return  p ? new(p) ::HWallTrb2LookupChan : new ::HWallTrb2LookupChan;
   }
   static void *newArray_HWallTrb2LookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HWallTrb2LookupChan[nElements] : new ::HWallTrb2LookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallTrb2LookupChan(void *p) {
      delete ((::HWallTrb2LookupChan*)p);
   }
   static void deleteArray_HWallTrb2LookupChan(void *p) {
      delete [] ((::HWallTrb2LookupChan*)p);
   }
   static void destruct_HWallTrb2LookupChan(void *p) {
      typedef ::HWallTrb2LookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallTrb2LookupChan(TBuffer &buf, void *obj) {
      ((::HWallTrb2LookupChan*)obj)->::HWallTrb2LookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallTrb2LookupChan

//______________________________________________________________________________
void HWallCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nHits;
      R__b >> cell;
      R__b >> time1;
      R__b >> adc1;
      R__b >> time2;
      R__b >> adc2;
      R__b >> time3;
      R__b >> adc3;
      R__b >> time4;
      R__b >> adc4;
      R__b.CheckByteCount(R__s, R__c, HWallCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallCal::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nHits;
      R__b << cell;
      R__b << time1;
      R__b << adc1;
      R__b << time2;
      R__b << adc2;
      R__b << time3;
      R__b << adc3;
      R__b << time4;
      R__b << adc4;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallCal.
      TClass *R__cl = ::HWallCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nHits", &nHits);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time1", &time1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc1", &adc1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time2", &time2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc2", &adc2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time3", &time3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc3", &adc3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time4", &time4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adc4", &adc4);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallCal(void *p) {
      return  p ? new(p) ::HWallCal : new ::HWallCal;
   }
   static void *newArray_HWallCal(Long_t nElements, void *p) {
      return p ? new(p) ::HWallCal[nElements] : new ::HWallCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallCal(void *p) {
      delete ((::HWallCal*)p);
   }
   static void deleteArray_HWallCal(void *p) {
      delete [] ((::HWallCal*)p);
   }
   static void destruct_HWallCal(void *p) {
      typedef ::HWallCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallCal(TBuffer &buf, void *obj) {
      ((::HWallCal*)obj)->::HWallCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallCal

//______________________________________________________________________________
void HWallCalPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallCalPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HWallCalPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallCalPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallCalPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallCalPar.
      TClass *R__cl = ::HWallCalPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallCalPar(void *p) {
      return  p ? new(p) ::HWallCalPar : new ::HWallCalPar;
   }
   static void *newArray_HWallCalPar(Long_t nElements, void *p) {
      return p ? new(p) ::HWallCalPar[nElements] : new ::HWallCalPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallCalPar(void *p) {
      delete ((::HWallCalPar*)p);
   }
   static void deleteArray_HWallCalPar(void *p) {
      delete [] ((::HWallCalPar*)p);
   }
   static void destruct_HWallCalPar(void *p) {
      typedef ::HWallCalPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallCalPar(TBuffer &buf, void *obj) {
      ((::HWallCalPar*)obj)->::HWallCalPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallCalPar

//______________________________________________________________________________
void HWallCalParCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallCalParCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> TDC_slope;
      R__b >> TDC_offset;
      R__b >> TDC_WalkCorr1;
      R__b >> TDC_WalkCorr2;
      R__b >> ADC_slope;
      R__b >> ADC_offset;
      R__b.CheckByteCount(R__s, R__c, HWallCalParCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallCalParCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << TDC_slope;
      R__b << TDC_offset;
      R__b << TDC_WalkCorr1;
      R__b << TDC_WalkCorr2;
      R__b << ADC_slope;
      R__b << ADC_offset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallCalParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallCalParCell.
      TClass *R__cl = ::HWallCalParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDC_slope", &TDC_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDC_offset", &TDC_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDC_WalkCorr1", &TDC_WalkCorr1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDC_WalkCorr2", &TDC_WalkCorr2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ADC_slope", &ADC_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ADC_offset", &ADC_offset);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallCalParCell(void *p) {
      return  p ? new(p) ::HWallCalParCell : new ::HWallCalParCell;
   }
   static void *newArray_HWallCalParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HWallCalParCell[nElements] : new ::HWallCalParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallCalParCell(void *p) {
      delete ((::HWallCalParCell*)p);
   }
   static void deleteArray_HWallCalParCell(void *p) {
      delete [] ((::HWallCalParCell*)p);
   }
   static void destruct_HWallCalParCell(void *p) {
      typedef ::HWallCalParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallCalParCell(TBuffer &buf, void *obj) {
      ((::HWallCalParCell*)obj)->::HWallCalParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallCalParCell

//______________________________________________________________________________
void HWallCalibrater::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallCalibrater.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HWallCalibrater::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallCalibrater.
      TClass *R__cl = ::HWallCalibrater::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rawCat", &rawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calCat", &calCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pWallCalPar", &pWallCalPar);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallCalibrater(void *p) {
      return  p ? new(p) ::HWallCalibrater : new ::HWallCalibrater;
   }
   static void *newArray_HWallCalibrater(Long_t nElements, void *p) {
      return p ? new(p) ::HWallCalibrater[nElements] : new ::HWallCalibrater[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallCalibrater(void *p) {
      delete ((::HWallCalibrater*)p);
   }
   static void deleteArray_HWallCalibrater(void *p) {
      delete [] ((::HWallCalibrater*)p);
   }
   static void destruct_HWallCalibrater(void *p) {
      typedef ::HWallCalibrater current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallCalibrater(TBuffer &buf, void *obj) {
      ((::HWallCalibrater*)obj)->::HWallCalibrater::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallCalibrater

//______________________________________________________________________________
void HWallRefWinPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallRefWinPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> time_ref_win_low;
      R__b >> time_ref_win_high;
      R__b.CheckByteCount(R__s, R__c, HWallRefWinPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallRefWinPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << time_ref_win_low;
      R__b << time_ref_win_high;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallRefWinPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallRefWinPar.
      TClass *R__cl = ::HWallRefWinPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_ref_win_low", &time_ref_win_low);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "time_ref_win_high", &time_ref_win_high);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallRefWinPar(void *p) {
      return  p ? new(p) ::HWallRefWinPar : new ::HWallRefWinPar;
   }
   static void *newArray_HWallRefWinPar(Long_t nElements, void *p) {
      return p ? new(p) ::HWallRefWinPar[nElements] : new ::HWallRefWinPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallRefWinPar(void *p) {
      delete ((::HWallRefWinPar*)p);
   }
   static void deleteArray_HWallRefWinPar(void *p) {
      delete [] ((::HWallRefWinPar*)p);
   }
   static void destruct_HWallRefWinPar(void *p) {
      typedef ::HWallRefWinPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallRefWinPar(TBuffer &buf, void *obj) {
      ((::HWallRefWinPar*)obj)->::HWallRefWinPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallRefWinPar

//______________________________________________________________________________
void HWallDigiPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallDigiPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b.ReadStaticArray((float*)TDC_slope);
      R__b.ReadStaticArray((float*)TDC_offset);
      R__b.ReadStaticArray((float*)ADC_slope);
      R__b.ReadStaticArray((float*)ADC_offset);
      R__b.ReadStaticArray((float*)CFD_threshold);
      R__b.ReadStaticArray((float*)ADC_threshold);
      R__b.CheckByteCount(R__s, R__c, HWallDigiPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallDigiPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b.WriteArray(TDC_slope, 302);
      R__b.WriteArray(TDC_offset, 302);
      R__b.WriteArray(ADC_slope, 302);
      R__b.WriteArray(ADC_offset, 302);
      R__b.WriteArray(CFD_threshold, 302);
      R__b.WriteArray(ADC_threshold, 302);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallDigiPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallDigiPar.
      TClass *R__cl = ::HWallDigiPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDC_slope[302]", TDC_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "TDC_offset[302]", TDC_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ADC_slope[302]", ADC_slope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ADC_offset[302]", ADC_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "CFD_threshold[302]", CFD_threshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ADC_threshold[302]", ADC_threshold);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallDigiPar(void *p) {
      return  p ? new(p) ::HWallDigiPar : new ::HWallDigiPar;
   }
   static void *newArray_HWallDigiPar(Long_t nElements, void *p) {
      return p ? new(p) ::HWallDigiPar[nElements] : new ::HWallDigiPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallDigiPar(void *p) {
      delete ((::HWallDigiPar*)p);
   }
   static void deleteArray_HWallDigiPar(void *p) {
      delete [] ((::HWallDigiPar*)p);
   }
   static void destruct_HWallDigiPar(void *p) {
      typedef ::HWallDigiPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallDigiPar(TBuffer &buf, void *obj) {
      ((::HWallDigiPar*)obj)->::HWallDigiPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallDigiPar

//______________________________________________________________________________
void HWallGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetGeomPar::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HWallGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallGeomPar::IsA(), kTRUE);
      HDetGeomPar::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallGeomPar.
      TClass *R__cl = ::HWallGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetGeomPar::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallGeomPar(void *p) {
      return  p ? new(p) ::HWallGeomPar : new ::HWallGeomPar;
   }
   static void *newArray_HWallGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HWallGeomPar[nElements] : new ::HWallGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallGeomPar(void *p) {
      delete ((::HWallGeomPar*)p);
   }
   static void deleteArray_HWallGeomPar(void *p) {
      delete [] ((::HWallGeomPar*)p);
   }
   static void destruct_HWallGeomPar(void *p) {
      typedef ::HWallGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallGeomPar(TBuffer &buf, void *obj) {
      ((::HWallGeomPar*)obj)->::HWallGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallGeomPar

//______________________________________________________________________________
void HWallEventPlanePar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HWallEventPlanePar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fT1_cut;
      R__b >> fT2_cut;
      R__b >> fX_shift;
      R__b >> fY_shift;
      R__b >> fR0_cut;
      R__b >> fZ1_cut_s;
      R__b >> fZ1_cut_m;
      R__b >> fZ1_cut_l;
      R__b.CheckByteCount(R__s, R__c, HWallEventPlanePar::IsA());
   } else {
      R__c = R__b.WriteVersion(HWallEventPlanePar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fT1_cut;
      R__b << fT2_cut;
      R__b << fX_shift;
      R__b << fY_shift;
      R__b << fR0_cut;
      R__b << fZ1_cut_s;
      R__b << fZ1_cut_m;
      R__b << fZ1_cut_l;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HWallEventPlanePar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HWallEventPlanePar.
      TClass *R__cl = ::HWallEventPlanePar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT1_cut", &fT1_cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fT2_cut", &fT2_cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX_shift", &fX_shift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY_shift", &fY_shift);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fR0_cut", &fR0_cut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ1_cut_s", &fZ1_cut_s);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ1_cut_m", &fZ1_cut_m);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fZ1_cut_l", &fZ1_cut_l);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HWallEventPlanePar(void *p) {
      return  p ? new(p) ::HWallEventPlanePar : new ::HWallEventPlanePar;
   }
   static void *newArray_HWallEventPlanePar(Long_t nElements, void *p) {
      return p ? new(p) ::HWallEventPlanePar[nElements] : new ::HWallEventPlanePar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HWallEventPlanePar(void *p) {
      delete ((::HWallEventPlanePar*)p);
   }
   static void deleteArray_HWallEventPlanePar(void *p) {
      delete [] ((::HWallEventPlanePar*)p);
   }
   static void destruct_HWallEventPlanePar(void *p) {
      typedef ::HWallEventPlanePar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HWallEventPlanePar(TBuffer &buf, void *obj) {
      ((::HWallEventPlanePar*)obj)->::HWallEventPlanePar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HWallEventPlanePar

/********************************************************
* ../build/pc/WallDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableWallDict();

extern "C" void G__set_cpp_environmentWallDict() {
  G__cpp_reset_tagtableWallDict();
}
#include <new>
extern "C" int G__cpp_dllrevWallDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HWallDetector */
static int G__WallDict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallDetector[n];
     } else {
       p = new((void*) gvp) HWallDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallDetector;
     } else {
       p = new((void*) gvp) HWallDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallDetector*) G__getstructoffset())->buildLinearCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallDetector*) G__getstructoffset())->buildMatrixCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallDetector*) G__getstructoffset())->getMaxModInSetup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallDetector(*(HWallDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallDetector G__THWallDetector;
static int G__WallDict_190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallDetector*) (soff+(sizeof(HWallDetector)*i)))->~G__THWallDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallDetector*) (soff))->~G__THWallDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallDetector* dest = (HWallDetector*) G__getstructoffset();
   *dest = *(HWallDetector*) libp->para[0].ref;
   const HWallDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallTaskSet */
static int G__WallDict_207_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTaskSet((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallTaskSet((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTaskSet[n];
       } else {
         p = new((void*) gvp) HWallTaskSet[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTaskSet;
       } else {
         p = new((void*) gvp) HWallTaskSet;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HWallTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HWallTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HWallTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_207_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallTaskSet G__THWallTaskSet;
static int G__WallDict_207_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallTaskSet*) (soff+(sizeof(HWallTaskSet)*i)))->~G__THWallTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallTaskSet*) (soff))->~G__THWallTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallLookup */
static int G__WallDict_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HWallLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HWallLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HWallLookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallLookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallLookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallLookup[n];
       } else {
         p = new((void*) gvp) HWallLookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallLookup;
       } else {
         p = new((void*) gvp) HWallLookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HWallLookupCrate& obj = ((HWallLookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallLookup*) G__getstructoffset())->getSlot((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallLookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookup*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Char_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallLookup*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallLookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallLookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallLookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_212_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_212_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallLookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallLookup(*(HWallLookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallLookup G__THWallLookup;
static int G__WallDict_212_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallLookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallLookup*) (soff+(sizeof(HWallLookup)*i)))->~G__THWallLookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallLookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallLookup*) (soff))->~G__THWallLookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_212_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookup* dest = (HWallLookup*) G__getstructoffset();
   *dest = *(HWallLookup*) libp->para[0].ref;
   const HWallLookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallUnpacker */
static int G__WallDict_213_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallUnpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallUnpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallUnpacker[n];
       } else {
         p = new((void*) gvp) HWallUnpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallUnpacker;
       } else {
         p = new((void*) gvp) HWallUnpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallUnpacker(*(HWallUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallUnpacker G__THWallUnpacker;
static int G__WallDict_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallUnpacker*) (soff+(sizeof(HWallUnpacker)*i)))->~G__THWallUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallUnpacker*) (soff))->~G__THWallUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallUnpacker* dest = (HWallUnpacker*) G__getstructoffset();
   *dest = *(HWallUnpacker*) libp->para[0].ref;
   const HWallUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallRaw */
static int G__WallDict_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRaw[n];
     } else {
       p = new((void*) gvp) HWallRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRaw;
     } else {
       p = new((void*) gvp) HWallRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallRaw*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallRaw*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->setTime((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallRaw*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallRaw*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallRaw*) G__getstructoffset())->getTime((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallRaw*) G__getstructoffset())->getWidth((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallRaw*) G__getstructoffset())->getADC((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->getTimeAndWidth((const Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->getTimeAndADC((const Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallRaw*) G__getstructoffset())->getMaxMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->setCell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->setMult((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallRaw*) G__getstructoffset())->fill((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallRaw*) G__getstructoffset())->fill_lead((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallRaw*) G__getstructoffset())->fill_trail((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_215_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_215_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallRaw(*(HWallRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallRaw G__THWallRaw;
static int G__WallDict_215_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallRaw*) (soff+(sizeof(HWallRaw)*i)))->~G__THWallRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallRaw*) (soff))->~G__THWallRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_215_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRaw* dest = (HWallRaw*) G__getstructoffset();
   *dest = *(HWallRaw*) libp->para[0].ref;
   const HWallRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallContFact */
static int G__WallDict_219_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallContFact[n];
     } else {
       p = new((void*) gvp) HWallContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallContFact;
     } else {
       p = new((void*) gvp) HWallContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_219_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_219_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallContFact(*(HWallContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallContFact G__THWallContFact;
static int G__WallDict_219_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallContFact*) (soff+(sizeof(HWallContFact)*i)))->~G__THWallContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallContFact*) (soff))->~G__THWallContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_219_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallContFact* dest = (HWallContFact*) G__getstructoffset();
   *dest = *(HWallContFact*) libp->para[0].ref;
   const HWallContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallCalPar */
static int G__WallDict_255_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCalPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HWallCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCalPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallCalPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallCalPar[n];
       } else {
         p = new((void*) gvp) HWallCalPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallCalPar;
       } else {
         p = new((void*) gvp) HWallCalPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HWallCalParCell& obj = ((HWallCalPar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallCalPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallCalPar*) G__getstructoffset())->writeline((Char_t*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallCalPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallCalPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallCalPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCalPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_255_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCalPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_255_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallCalPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallCalPar(*(HWallCalPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallCalPar G__THWallCalPar;
static int G__WallDict_255_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallCalPar*) (soff+(sizeof(HWallCalPar)*i)))->~G__THWallCalPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallCalPar*) (soff))->~G__THWallCalPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_255_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCalPar* dest = (HWallCalPar*) G__getstructoffset();
   *dest = *(HWallCalPar*) libp->para[0].ref;
   const HWallCalPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallParRootFileIo */
static int G__WallDict_256_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HWallParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HWallParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallParRootFileIo*) G__getstructoffset())->read((HWallLookup*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallParRootFileIo*) G__getstructoffset())->read((HWallCalPar*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_256_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallParRootFileIo(*(HWallParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallParRootFileIo G__THWallParRootFileIo;
static int G__WallDict_256_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallParRootFileIo*) (soff+(sizeof(HWallParRootFileIo)*i)))->~G__THWallParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallParRootFileIo*) (soff))->~G__THWallParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_256_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallParRootFileIo* dest = (HWallParRootFileIo*) G__getstructoffset();
   *dest = *(HWallParRootFileIo*) libp->para[0].ref;
   const HWallParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallParAsciiFileIo */
static int G__WallDict_266_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HWallParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HWallParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_266_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_266_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallParAsciiFileIo(*(HWallParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallParAsciiFileIo G__THWallParAsciiFileIo;
static int G__WallDict_266_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallParAsciiFileIo*) (soff+(sizeof(HWallParAsciiFileIo)*i)))->~G__THWallParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallParAsciiFileIo*) (soff))->~G__THWallParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_266_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallParAsciiFileIo* dest = (HWallParAsciiFileIo*) G__getstructoffset();
   *dest = *(HWallParAsciiFileIo*) libp->para[0].ref;
   const HWallParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallLookupChan */
static int G__WallDict_268_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookupChan[n];
     } else {
       p = new((void*) gvp) HWallLookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookupChan;
     } else {
       p = new((void*) gvp) HWallLookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallLookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupChan*) G__getstructoffset())->fill(*(HWallLookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupChan*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallLookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallLookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallLookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_268_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_268_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallLookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallLookupChan(*(HWallLookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallLookupChan G__THWallLookupChan;
static int G__WallDict_268_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallLookupChan*) (soff+(sizeof(HWallLookupChan)*i)))->~G__THWallLookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallLookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallLookupChan*) (soff))->~G__THWallLookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_268_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookupChan* dest = (HWallLookupChan*) G__getstructoffset();
   *dest = *(HWallLookupChan*) libp->para[0].ref;
   const HWallLookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallLookupSlot */
static int G__WallDict_269_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookupSlot* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookupSlot((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallLookupSlot((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallLookupSlot[n];
       } else {
         p = new((void*) gvp) HWallLookupSlot[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallLookupSlot;
       } else {
         p = new((void*) gvp) HWallLookupSlot;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HWallLookupChan& obj = ((HWallLookupSlot*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallLookupSlot*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallLookupSlot*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallLookupSlot*) G__getstructoffset())->getMaxSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HWallLookupSlot*) G__getstructoffset())->getType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupSlot*) G__getstructoffset())->fill((Char_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupSlot*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallLookupSlot::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupSlot::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallLookupSlot::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallLookupSlot::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupSlot*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupSlot::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookupSlot::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupSlot::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_269_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookupSlot::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_269_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallLookupSlot* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallLookupSlot(*(HWallLookupSlot*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallLookupSlot G__THWallLookupSlot;
static int G__WallDict_269_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallLookupSlot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallLookupSlot*) (soff+(sizeof(HWallLookupSlot)*i)))->~G__THWallLookupSlot();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallLookupSlot*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallLookupSlot*) (soff))->~G__THWallLookupSlot();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_269_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookupSlot* dest = (HWallLookupSlot*) G__getstructoffset();
   *dest = *(HWallLookupSlot*) libp->para[0].ref;
   const HWallLookupSlot& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallLookupCrate */
static int G__WallDict_270_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookupCrate* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallLookupCrate((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallLookupCrate((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallLookupCrate[n];
       } else {
         p = new((void*) gvp) HWallLookupCrate[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallLookupCrate;
       } else {
         p = new((void*) gvp) HWallLookupCrate;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HWallLookupSlot& obj = ((HWallLookupCrate*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallLookupCrate*) G__getstructoffset())->getSlot((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallLookupCrate*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallLookupCrate*) G__getstructoffset())->getMaxSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupCrate*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Char_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallLookupCrate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupCrate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallLookupCrate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallLookupCrate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallLookupCrate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupCrate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookupCrate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallLookupCrate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_270_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallLookupCrate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_270_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallLookupCrate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallLookupCrate(*(HWallLookupCrate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallLookupCrate G__THWallLookupCrate;
static int G__WallDict_270_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallLookupCrate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallLookupCrate*) (soff+(sizeof(HWallLookupCrate)*i)))->~G__THWallLookupCrate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallLookupCrate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallLookupCrate*) (soff))->~G__THWallLookupCrate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_270_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallLookupCrate* dest = (HWallLookupCrate*) G__getstructoffset();
   *dest = *(HWallLookupCrate*) libp->para[0].ref;
   const HWallLookupCrate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallCal */
static int G__WallDict_271_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCal[n];
     } else {
       p = new((void*) gvp) HWallCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCal;
     } else {
       p = new((void*) gvp) HWallCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCal*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallCal*) G__getstructoffset())->getNHits());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallCal*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallCal*) G__getstructoffset())->getTime((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallCal*) G__getstructoffset())->getAdc((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCal*) G__getstructoffset())->getTimeAndAdc((const Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallCal*) G__getstructoffset())->getMaxMult());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCal*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallCal*) G__getstructoffset())->setTimeAdc((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_271_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_271_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallCal(*(HWallCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallCal G__THWallCal;
static int G__WallDict_271_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallCal*) (soff+(sizeof(HWallCal)*i)))->~G__THWallCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallCal*) (soff))->~G__THWallCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_271_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCal* dest = (HWallCal*) G__getstructoffset();
   *dest = *(HWallCal*) libp->para[0].ref;
   const HWallCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallCalParCell */
static int G__WallDict_272_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCalParCell[n];
     } else {
       p = new((void*) gvp) HWallCalParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCalParCell;
     } else {
       p = new((void*) gvp) HWallCalParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallCalParCell*) G__getstructoffset())->getTDC_Slope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallCalParCell*) G__getstructoffset())->getTDC_Offset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallCalParCell*) G__getstructoffset())->getTDC_WalkCorr1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallCalParCell*) G__getstructoffset())->getTDC_WalkCorr2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallCalParCell*) G__getstructoffset())->getADC_Slope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallCalParCell*) G__getstructoffset())->getADC_Offset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->fill(*(HWallCalParCell*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->setTDC_Slope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->setTDC_Offset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->setTDC_WalkCorr1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->setTDC_WalkCorr2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->setADC_Slope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->setADC_Offset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallCalParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallCalParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallCalParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCalParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_272_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCalParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_272_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallCalParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallCalParCell(*(HWallCalParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallCalParCell G__THWallCalParCell;
static int G__WallDict_272_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallCalParCell*) (soff+(sizeof(HWallCalParCell)*i)))->~G__THWallCalParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallCalParCell*) (soff))->~G__THWallCalParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_272_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCalParCell* dest = (HWallCalParCell*) G__getstructoffset();
   *dest = *(HWallCalParCell*) libp->para[0].ref;
   const HWallCalParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallCalibrater */
static int G__WallDict_281_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCalibrater[n];
     } else {
       p = new((void*) gvp) HWallCalibrater[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallCalibrater;
     } else {
       p = new((void*) gvp) HWallCalibrater;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HWallCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HWallCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallCalibrater::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalibrater::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallCalibrater::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallCalibrater::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallCalibrater*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalibrater::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCalibrater::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallCalibrater::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_281_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallCalibrater::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallCalibrater G__THWallCalibrater;
static int G__WallDict_281_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallCalibrater*) (soff+(sizeof(HWallCalibrater)*i)))->~G__THWallCalibrater();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallCalibrater*) (soff))->~G__THWallCalibrater();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallDigiPar */
static int G__WallDict_282_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallDigiPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallDigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HWallDigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallDigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallDigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallDigiPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallDigiPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallDigiPar[n];
       } else {
         p = new((void*) gvp) HWallDigiPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallDigiPar;
       } else {
         p = new((void*) gvp) HWallDigiPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallDigiPar*) G__getstructoffset())->getTDC_Slope((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallDigiPar*) G__getstructoffset())->getTDC_Offset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallDigiPar*) G__getstructoffset())->getADC_Slope((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallDigiPar*) G__getstructoffset())->getADC_Offset((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallDigiPar*) G__getstructoffset())->getCFD_Threshold((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallDigiPar*) G__getstructoffset())->getADC_Threshold((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallDigiPar*) G__getstructoffset())->fill(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])
, (Float_t) G__double(libp->para[6]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallDigiPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallDigiPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDigiPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallDigiPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallDigiPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallDigiPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDigiPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallDigiPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDigiPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_282_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallDigiPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_282_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallDigiPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallDigiPar(*(HWallDigiPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallDigiPar G__THWallDigiPar;
static int G__WallDict_282_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallDigiPar*) (soff+(sizeof(HWallDigiPar)*i)))->~G__THWallDigiPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallDigiPar*) (soff))->~G__THWallDigiPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_282_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallDigiPar* dest = (HWallDigiPar*) G__getstructoffset();
   *dest = *(HWallDigiPar*) libp->para[0].ref;
   const HWallDigiPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallGeomPar */
static int G__WallDict_283_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HWallGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallGeomPar[n];
       } else {
         p = new((void*) gvp) HWallGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallGeomPar;
       } else {
         p = new((void*) gvp) HWallGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((HWallGeomPar*) G__getstructoffset())->getCellName((Int_t) G__int(libp->para[0]));
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_283_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_283_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallGeomPar(*(HWallGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallGeomPar G__THWallGeomPar;
static int G__WallDict_283_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallGeomPar*) (soff+(sizeof(HWallGeomPar)*i)))->~G__THWallGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallGeomPar*) (soff))->~G__THWallGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_283_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallGeomPar* dest = (HWallGeomPar*) G__getstructoffset();
   *dest = *(HWallGeomPar*) libp->para[0].ref;
   const HWallGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallDigitizer */
static int G__WallDict_284_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallDigitizer[n];
     } else {
       p = new((void*) gvp) HWallDigitizer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallDigitizer;
     } else {
       p = new((void*) gvp) HWallDigitizer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HWallDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HWallDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallDigitizer*) G__getstructoffset())->initParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_284_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallDigitizer G__THWallDigitizer;
static int G__WallDict_284_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallDigitizer*) (soff+(sizeof(HWallDigitizer)*i)))->~G__THWallDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallDigitizer*) (soff))->~G__THWallDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallRawSim */
static int G__WallDict_286_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRawSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRawSim[n];
     } else {
       p = new((void*) gvp) HWallRawSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRawSim;
     } else {
       p = new((void*) gvp) HWallRawSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRawSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSim*) G__getstructoffset())->setNTrack1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSim*) G__getstructoffset())->setNTrack2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSim*) G__getstructoffset())->setNTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallRawSim*) G__getstructoffset())->getNTrack1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallRawSim*) G__getstructoffset())->getNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) ((HWallRawSim*) G__getstructoffset())->getNHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSim*) G__getstructoffset())->setNHit((Short_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSim*) G__getstructoffset())->incNHit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallRawSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRawSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallRawSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallRawSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRawSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRawSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRawSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_286_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRawSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_286_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallRawSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallRawSim(*(HWallRawSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRawSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallRawSim G__THWallRawSim;
static int G__WallDict_286_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallRawSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallRawSim*) (soff+(sizeof(HWallRawSim)*i)))->~G__THWallRawSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallRawSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallRawSim*) (soff))->~G__THWallRawSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_286_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRawSim* dest = (HWallRawSim*) G__getstructoffset();
   *dest = *(HWallRawSim*) libp->para[0].ref;
   const HWallRawSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallRawSimFilter */
static int G__WallDict_287_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRawSimFilter* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRawSimFilter[n];
     } else {
       p = new((void*) gvp) HWallRawSimFilter[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRawSimFilter;
     } else {
       p = new((void*) gvp) HWallRawSimFilter;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallRawSimFilter::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRawSimFilter::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallRawSimFilter::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallRawSimFilter::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRawSimFilter*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRawSimFilter::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRawSimFilter::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRawSimFilter::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_287_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRawSimFilter::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_287_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallRawSimFilter* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallRawSimFilter(*(HWallRawSimFilter*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallRawSimFilter G__THWallRawSimFilter;
static int G__WallDict_287_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallRawSimFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallRawSimFilter*) (soff+(sizeof(HWallRawSimFilter)*i)))->~G__THWallRawSimFilter();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallRawSimFilter*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallRawSimFilter*) (soff))->~G__THWallRawSimFilter();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_287_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRawSimFilter* dest = (HWallRawSimFilter*) G__getstructoffset();
   *dest = *(HWallRawSimFilter*) libp->para[0].ref;
   const HWallRawSimFilter& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallOneHit */
static int G__WallDict_288_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallOneHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallOneHit[n];
     } else {
       p = new((void*) gvp) HWallOneHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallOneHit;
     } else {
       p = new((void*) gvp) HWallOneHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallOneHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->setTime((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->setCharge((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->fill((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallOneHit*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallOneHit*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallOneHit*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallOneHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallOneHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallOneHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallOneHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallOneHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallOneHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallOneHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_288_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallOneHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_288_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallOneHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallOneHit(*(HWallOneHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallOneHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallOneHit G__THWallOneHit;
static int G__WallDict_288_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallOneHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallOneHit*) (soff+(sizeof(HWallOneHit)*i)))->~G__THWallOneHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallOneHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallOneHit*) (soff))->~G__THWallOneHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_288_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallOneHit* dest = (HWallOneHit*) G__getstructoffset();
   *dest = *(HWallOneHit*) libp->para[0].ref;
   const HWallOneHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallHit */
static int G__WallDict_289_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHit[n];
     } else {
       p = new((void*) gvp) HWallHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHit;
     } else {
       p = new((void*) gvp) HWallHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setTime((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setCharge((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setTheta((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setPhi((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setDistance((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->setXYZLab((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->fill((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallHit*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallHit*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallHit*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallHit*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallHit*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallHit*) G__getstructoffset())->getDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->getXYZLab(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_289_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_289_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallHit(*(HWallHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallHit G__THWallHit;
static int G__WallDict_289_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallHit*) (soff+(sizeof(HWallHit)*i)))->~G__THWallHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallHit*) (soff))->~G__THWallHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_289_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHit* dest = (HWallHit*) G__getstructoffset();
   *dest = *(HWallHit*) libp->para[0].ref;
   const HWallHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallEventPlane */
static int G__WallDict_290_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallEventPlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallEventPlane[n];
     } else {
       p = new((void*) gvp) HWallEventPlane[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallEventPlane;
     } else {
       p = new((void*) gvp) HWallEventPlane;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlane*) G__getstructoffset())->setPhi((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlane*) G__getstructoffset())->setPhiA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlane*) G__getstructoffset())->setPhiB((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlane*) G__getstructoffset())->setPhiAB((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlane*) G__getstructoffset())->setNA((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlane*) G__getstructoffset())->setNB((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallEventPlane*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallEventPlane*) G__getstructoffset())->getPhiA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallEventPlane*) G__getstructoffset())->getPhiB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallEventPlane*) G__getstructoffset())->getPhiAB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallEventPlane*) G__getstructoffset())->getNA());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HWallEventPlane*) G__getstructoffset())->getNB());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallEventPlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallEventPlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallEventPlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallEventPlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_290_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallEventPlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_290_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallEventPlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallEventPlane(*(HWallEventPlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallEventPlane G__THWallEventPlane;
static int G__WallDict_290_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallEventPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallEventPlane*) (soff+(sizeof(HWallEventPlane)*i)))->~G__THWallEventPlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallEventPlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallEventPlane*) (soff))->~G__THWallEventPlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_290_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallEventPlane* dest = (HWallEventPlane*) G__getstructoffset();
   *dest = *(HWallEventPlane*) libp->para[0].ref;
   const HWallEventPlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallHitSim */
static int G__WallDict_291_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHitSim[n];
     } else {
       p = new((void*) gvp) HWallHitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHitSim;
     } else {
       p = new((void*) gvp) HWallHitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHitSim*) G__getstructoffset())->setNTrack1((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHitSim*) G__getstructoffset())->setNTrack2((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallHitSim*) G__getstructoffset())->getNTrack1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HWallHitSim*) G__getstructoffset())->getNTrack2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallHitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallHitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallHitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_291_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_291_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallHitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallHitSim(*(HWallHitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallHitSim G__THWallHitSim;
static int G__WallDict_291_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallHitSim*) (soff+(sizeof(HWallHitSim)*i)))->~G__THWallHitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallHitSim*) (soff))->~G__THWallHitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_291_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHitSim* dest = (HWallHitSim*) G__getstructoffset();
   *dest = *(HWallHitSim*) libp->para[0].ref;
   const HWallHitSim& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallRefWinPar */
static int G__WallDict_294_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRefWinPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRefWinPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HWallRefWinPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRefWinPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallRefWinPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallRefWinPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallRefWinPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallRefWinPar[n];
       } else {
         p = new((void*) gvp) HWallRefWinPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallRefWinPar;
       } else {
         p = new((void*) gvp) HWallRefWinPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallRefWinPar*) G__getstructoffset())->getRefWinLow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallRefWinPar*) G__getstructoffset())->getRefWinHigh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRefWinPar*) G__getstructoffset())->setRefWinLow((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRefWinPar*) G__getstructoffset())->setRefWinHigh((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRefWinPar*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRefWinPar*) G__getstructoffset())->fill((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallRefWinPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallRefWinPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRefWinPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallRefWinPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallRefWinPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallRefWinPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRefWinPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRefWinPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallRefWinPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_294_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallRefWinPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_294_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallRefWinPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallRefWinPar(*(HWallRefWinPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallRefWinPar G__THWallRefWinPar;
static int G__WallDict_294_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallRefWinPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallRefWinPar*) (soff+(sizeof(HWallRefWinPar)*i)))->~G__THWallRefWinPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallRefWinPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallRefWinPar*) (soff))->~G__THWallRefWinPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_294_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallRefWinPar* dest = (HWallRefWinPar*) G__getstructoffset();
   *dest = *(HWallRefWinPar*) libp->para[0].ref;
   const HWallRefWinPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallHitF */
static int G__WallDict_299_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHitF[n];
     } else {
       p = new((void*) gvp) HWallHitF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHitF;
     } else {
       p = new((void*) gvp) HWallHitF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HWallHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HWallHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHitF*) G__getstructoffset())->initParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallHitF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallHitF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallHitF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHitF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHitF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_299_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHitF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallHitF G__THWallHitF;
static int G__WallDict_299_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallHitF*) (soff+(sizeof(HWallHitF)*i)))->~G__THWallHitF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallHitF*) (soff))->~G__THWallHitF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallEventPlanePar */
static int G__WallDict_330_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallEventPlanePar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallEventPlanePar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HWallEventPlanePar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallEventPlanePar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallEventPlanePar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallEventPlanePar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallEventPlanePar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallEventPlanePar[n];
       } else {
         p = new((void*) gvp) HWallEventPlanePar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallEventPlanePar;
       } else {
         p = new((void*) gvp) HWallEventPlanePar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getT1Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getT2Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getXShift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getYShift());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getR0Cut());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getZ1_cut_s());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getZ1_cut_m());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HWallEventPlanePar*) G__getstructoffset())->getZ1_cut_l());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setT1Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setT2Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setXShift((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setYShift((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setR0Cut((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setZ1_cut_s((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setZ1_cut_m((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->setZ1_cut_l((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallEventPlanePar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlanePar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallEventPlanePar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallEventPlanePar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlanePar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlanePar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallEventPlanePar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlanePar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_330_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallEventPlanePar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_330_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallEventPlanePar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallEventPlanePar(*(HWallEventPlanePar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallEventPlanePar G__THWallEventPlanePar;
static int G__WallDict_330_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallEventPlanePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallEventPlanePar*) (soff+(sizeof(HWallEventPlanePar)*i)))->~G__THWallEventPlanePar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallEventPlanePar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallEventPlanePar*) (soff))->~G__THWallEventPlanePar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_330_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallEventPlanePar* dest = (HWallEventPlanePar*) G__getstructoffset();
   *dest = *(HWallEventPlanePar*) libp->para[0].ref;
   const HWallEventPlanePar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallEventPlaneF */
static int G__WallDict_332_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallEventPlaneF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallEventPlaneF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallEventPlaneF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallEventPlaneF((const Text_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallEventPlaneF((const Text_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallEventPlaneF[n];
       } else {
         p = new((void*) gvp) HWallEventPlaneF[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallEventPlaneF;
       } else {
         p = new((void*) gvp) HWallEventPlaneF;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallEventPlaneF::setUseCorrection((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallEventPlaneF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlaneF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallEventPlaneF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallEventPlaneF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallEventPlaneF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlaneF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallEventPlaneF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallEventPlaneF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_332_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallEventPlaneF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallEventPlaneF G__THWallEventPlaneF;
static int G__WallDict_332_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallEventPlaneF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallEventPlaneF*) (soff+(sizeof(HWallEventPlaneF)*i)))->~G__THWallEventPlaneF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallEventPlaneF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallEventPlaneF*) (soff))->~G__THWallEventPlaneF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallOneHitF */
static int G__WallDict_334_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallOneHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallOneHitF[n];
     } else {
       p = new((void*) gvp) HWallOneHitF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallOneHitF;
     } else {
       p = new((void*) gvp) HWallOneHitF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallOneHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HWallOneHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HWallOneHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHitF*) G__getstructoffset())->initParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallOneHitF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallOneHitF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallOneHitF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallOneHitF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallOneHitF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallOneHitF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallOneHitF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallOneHitF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_334_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallOneHitF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallOneHitF G__THWallOneHitF;
static int G__WallDict_334_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallOneHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallOneHitF*) (soff+(sizeof(HWallOneHitF)*i)))->~G__THWallOneHitF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallOneHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallOneHitF*) (soff))->~G__THWallOneHitF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallHitFSim */
static int G__WallDict_335_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHitFSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHitFSim[n];
     } else {
       p = new((void*) gvp) HWallHitFSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallHitFSim;
     } else {
       p = new((void*) gvp) HWallHitFSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallHitFSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HWallHitFSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HWallHitFSim((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHitFSim*) G__getstructoffset())->initParContainer();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallHitFSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitFSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallHitFSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallHitFSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallHitFSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitFSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHitFSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallHitFSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_335_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallHitFSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallHitFSim G__THWallHitFSim;
static int G__WallDict_335_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallHitFSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallHitFSim*) (soff+(sizeof(HWallHitFSim)*i)))->~G__THWallHitFSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallHitFSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallHitFSim*) (soff))->~G__THWallHitFSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallTrbUnpacker */
static int G__WallDict_339_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrbUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrbUnpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallTrbUnpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTrbUnpacker[n];
       } else {
         p = new((void*) gvp) HWallTrbUnpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTrbUnpacker;
       } else {
         p = new((void*) gvp) HWallTrbUnpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrbUnpacker*) G__getstructoffset())->setDebugWallFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrbUnpacker*) G__getstructoffset())->setRefTimeCorrFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrbUnpacker*) G__getstructoffset())->DisableTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallTrbUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrbUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallTrbUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallTrbUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrbUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrbUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrbUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrbUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_339_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrbUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_339_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallTrbUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallTrbUnpacker(*(HWallTrbUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallTrbUnpacker G__THWallTrbUnpacker;
static int G__WallDict_339_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallTrbUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallTrbUnpacker*) (soff+(sizeof(HWallTrbUnpacker)*i)))->~G__THWallTrbUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallTrbUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallTrbUnpacker*) (soff))->~G__THWallTrbUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_339_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrbUnpacker* dest = (HWallTrbUnpacker*) G__getstructoffset();
   *dest = *(HWallTrbUnpacker*) libp->para[0].ref;
   const HWallTrbUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallTrb2Lookup */
static int G__WallDict_352_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2Lookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HWallTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HWallTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HWallTrb2Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HWallTrb2Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2Lookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallTrb2Lookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTrb2Lookup[n];
       } else {
         p = new((void*) gvp) HWallTrb2Lookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTrb2Lookup;
       } else {
         p = new((void*) gvp) HWallTrb2Lookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallTrb2Lookup*) G__getstructoffset())->getBoard((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallTrb2Lookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallTrb2Lookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallTrb2Lookup*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Lookup*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallTrb2Lookup*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HWallTrb2Lookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Lookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Lookup*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallTrb2Lookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2Lookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallTrb2Lookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallTrb2Lookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Lookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2Lookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2Lookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2Lookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_352_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2Lookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_352_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallTrb2Lookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallTrb2Lookup(*(HWallTrb2Lookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallTrb2Lookup G__THWallTrb2Lookup;
static int G__WallDict_352_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallTrb2Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallTrb2Lookup*) (soff+(sizeof(HWallTrb2Lookup)*i)))->~G__THWallTrb2Lookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallTrb2Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallTrb2Lookup*) (soff))->~G__THWallTrb2Lookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_352_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2Lookup* dest = (HWallTrb2Lookup*) G__getstructoffset();
   *dest = *(HWallTrb2Lookup*) libp->para[0].ref;
   const HWallTrb2Lookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallTrb2Unpacker */
static int G__WallDict_353_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2Unpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2Unpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HWallTrb2Unpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTrb2Unpacker[n];
       } else {
         p = new((void*) gvp) HWallTrb2Unpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HWallTrb2Unpacker;
       } else {
         p = new((void*) gvp) HWallTrb2Unpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Unpacker*) G__getstructoffset())->disableTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Unpacker*) G__getstructoffset())->removeTimeRef();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Unpacker*) G__getstructoffset())->shiftTimes((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallTrb2Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallTrb2Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallTrb2Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_353_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_353_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallTrb2Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallTrb2Unpacker(*(HWallTrb2Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallTrb2Unpacker G__THWallTrb2Unpacker;
static int G__WallDict_353_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallTrb2Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallTrb2Unpacker*) (soff+(sizeof(HWallTrb2Unpacker)*i)))->~G__THWallTrb2Unpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallTrb2Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallTrb2Unpacker*) (soff))->~G__THWallTrb2Unpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_353_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2Unpacker* dest = (HWallTrb2Unpacker*) G__getstructoffset();
   *dest = *(HWallTrb2Unpacker*) libp->para[0].ref;
   const HWallTrb2Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallTrb2LookupChan */
static int G__WallDict_356_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2LookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2LookupChan[n];
     } else {
       p = new((void*) gvp) HWallTrb2LookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2LookupChan;
     } else {
       p = new((void*) gvp) HWallTrb2LookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallTrb2LookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2LookupChan*) G__getstructoffset())->setCell((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2LookupChan*) G__getstructoffset())->fill(*(HWallTrb2LookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2LookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallTrb2LookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2LookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallTrb2LookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallTrb2LookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2LookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2LookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2LookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2LookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_356_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2LookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_356_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallTrb2LookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallTrb2LookupChan(*(HWallTrb2LookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallTrb2LookupChan G__THWallTrb2LookupChan;
static int G__WallDict_356_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallTrb2LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallTrb2LookupChan*) (soff+(sizeof(HWallTrb2LookupChan)*i)))->~G__THWallTrb2LookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallTrb2LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallTrb2LookupChan*) (soff))->~G__THWallTrb2LookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_356_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2LookupChan* dest = (HWallTrb2LookupChan*) G__getstructoffset();
   *dest = *(HWallTrb2LookupChan*) libp->para[0].ref;
   const HWallTrb2LookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HWallTrb2LookupBoard */
static int G__WallDict_357_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2LookupBoard* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2LookupBoard[n];
     } else {
       p = new((void*) gvp) HWallTrb2LookupBoard[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HWallTrb2LookupBoard;
     } else {
       p = new((void*) gvp) HWallTrb2LookupBoard;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HWallTrb2LookupBoard*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HWallTrb2LookupChan& obj = ((HWallTrb2LookupBoard*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HWallTrb2LookupBoard*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2LookupBoard*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HWallTrb2LookupBoard::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2LookupBoard::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HWallTrb2LookupBoard::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HWallTrb2LookupBoard::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HWallTrb2LookupBoard*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2LookupBoard::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2LookupBoard::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HWallTrb2LookupBoard::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__WallDict_357_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HWallTrb2LookupBoard::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__WallDict_357_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HWallTrb2LookupBoard* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HWallTrb2LookupBoard(*(HWallTrb2LookupBoard*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HWallTrb2LookupBoard G__THWallTrb2LookupBoard;
static int G__WallDict_357_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HWallTrb2LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HWallTrb2LookupBoard*) (soff+(sizeof(HWallTrb2LookupBoard)*i)))->~G__THWallTrb2LookupBoard();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HWallTrb2LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HWallTrb2LookupBoard*) (soff))->~G__THWallTrb2LookupBoard();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__WallDict_357_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HWallTrb2LookupBoard* dest = (HWallTrb2LookupBoard*) G__getstructoffset();
   *dest = *(HWallTrb2LookupBoard*) libp->para[0].ref;
   const HWallTrb2LookupBoard& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HWallDetector */

/* HWallTaskSet */

/* HWallLookup */

/* HWallUnpacker */

/* HWallRaw */

/* HWallContFact */

/* HWallCalPar */

/* HWallParRootFileIo */

/* HWallParAsciiFileIo */

/* HWallLookupChan */

/* HWallLookupSlot */

/* HWallLookupCrate */

/* HWallCal */

/* HWallCalParCell */

/* HWallCalibrater */

/* HWallDigiPar */

/* HWallGeomPar */

/* HWallDigitizer */

/* HWallRawSim */

/* HWallRawSimFilter */

/* HWallOneHit */

/* HWallHit */

/* HWallEventPlane */

/* HWallHitSim */

/* HWallRefWinPar */

/* HWallHitF */

/* HWallEventPlanePar */

/* HWallEventPlaneF */

/* HWallOneHitF */

/* HWallHitFSim */

/* HWallTrbUnpacker */

/* HWallTrb2Lookup */

/* HWallTrb2Unpacker */

/* HWallTrb2LookupChan */

/* HWallTrb2LookupBoard */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncWallDict {
 public:
  G__Sizep2memfuncWallDict(): p(&G__Sizep2memfuncWallDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncWallDict::*p)();
};

size_t G__get_sizep2memfuncWallDict()
{
  G__Sizep2memfuncWallDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceWallDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallDetector))) {
     HWallDetector *G__Lderived;
     G__Lderived=(HWallDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDetector),G__get_linked_tagnum(&G__WallDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDetector),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDetector),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet))) {
     HWallTaskSet *G__Lderived;
     G__Lderived=(HWallTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet),G__get_linked_tagnum(&G__WallDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet),G__get_linked_tagnum(&G__WallDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallLookup))) {
     HWallLookup *G__Lderived;
     G__Lderived=(HWallLookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookup),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookup),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookup),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker))) {
     HWallUnpacker *G__Lderived;
     G__Lderived=(HWallUnpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker),G__get_linked_tagnum(&G__WallDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallRaw))) {
     HWallRaw *G__Lderived;
     G__Lderived=(HWallRaw*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRaw),G__get_linked_tagnum(&G__WallDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRaw),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HParSet))) {
     HParSet *G__Lderived;
     G__Lderived=(HParSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HParSet),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HParSet),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallContFact))) {
     HWallContFact *G__Lderived;
     G__Lderived=(HWallContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallContFact),G__get_linked_tagnum(&G__WallDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallContFact),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallContFact),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallCalPar))) {
     HWallCalPar *G__Lderived;
     G__Lderived=(HWallCalPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalPar),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalPar),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalPar),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo))) {
     HWallParRootFileIo *G__Lderived;
     G__Lderived=(HWallParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo),G__get_linked_tagnum(&G__WallDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo),G__get_linked_tagnum(&G__WallDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo))) {
     HWallParAsciiFileIo *G__Lderived;
     G__Lderived=(HWallParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo),G__get_linked_tagnum(&G__WallDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo),G__get_linked_tagnum(&G__WallDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan))) {
     HWallLookupChan *G__Lderived;
     G__Lderived=(HWallLookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot))) {
     HWallLookupSlot *G__Lderived;
     G__Lderived=(HWallLookupSlot*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate))) {
     HWallLookupCrate *G__Lderived;
     G__Lderived=(HWallLookupCrate*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallCal))) {
     HWallCal *G__Lderived;
     G__Lderived=(HWallCal*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCal),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell))) {
     HWallCalParCell *G__Lderived;
     G__Lderived=(HWallCalParCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater))) {
     HWallCalibrater *G__Lderived;
     G__Lderived=(HWallCalibrater*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater),G__get_linked_tagnum(&G__WallDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater),G__get_linked_tagnum(&G__WallDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar))) {
     HWallDigiPar *G__Lderived;
     G__Lderived=(HWallDigiPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar),G__get_linked_tagnum(&G__WallDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar))) {
     HWallGeomPar *G__Lderived;
     G__Lderived=(HWallGeomPar*)0x1000;
     {
       HDetGeomPar *G__Lpbase=(HDetGeomPar*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar),G__get_linked_tagnum(&G__WallDictLN_HDetGeomPar),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer))) {
     HWallDigitizer *G__Lderived;
     G__Lderived=(HWallDigitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer),G__get_linked_tagnum(&G__WallDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer),G__get_linked_tagnum(&G__WallDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallRawSim))) {
     HWallRawSim *G__Lderived;
     G__Lderived=(HWallRawSim*)0x1000;
     {
       HWallRaw *G__Lpbase=(HWallRaw*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSim),G__get_linked_tagnum(&G__WallDictLN_HWallRaw),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSim),G__get_linked_tagnum(&G__WallDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSim),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter))) {
     HWallRawSimFilter *G__Lderived;
     G__Lderived=(HWallRawSimFilter*)0x1000;
     {
       HFilter *G__Lpbase=(HFilter*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter),G__get_linked_tagnum(&G__WallDictLN_HFilter),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallOneHit))) {
     HWallOneHit *G__Lderived;
     G__Lderived=(HWallOneHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHit),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallHit))) {
     HWallHit *G__Lderived;
     G__Lderived=(HWallHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHit),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane))) {
     HWallEventPlane *G__Lderived;
     G__Lderived=(HWallEventPlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallHitSim))) {
     HWallHitSim *G__Lderived;
     G__Lderived=(HWallHitSim*)0x1000;
     {
       HWallHit *G__Lpbase=(HWallHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitSim),G__get_linked_tagnum(&G__WallDictLN_HWallHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitSim),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HParCond))) {
     HParCond *G__Lderived;
     G__Lderived=(HParCond*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HParCond),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HParCond),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HParCond),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar))) {
     HWallRefWinPar *G__Lderived;
     G__Lderived=(HWallRefWinPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar),G__get_linked_tagnum(&G__WallDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallHitF))) {
     HWallHitF *G__Lderived;
     G__Lderived=(HWallHitF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitF),G__get_linked_tagnum(&G__WallDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitF),G__get_linked_tagnum(&G__WallDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitF),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitF),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar))) {
     HWallEventPlanePar *G__Lderived;
     G__Lderived=(HWallEventPlanePar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar),G__get_linked_tagnum(&G__WallDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF))) {
     HWallEventPlaneF *G__Lderived;
     G__Lderived=(HWallEventPlaneF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF),G__get_linked_tagnum(&G__WallDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF),G__get_linked_tagnum(&G__WallDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF))) {
     HWallOneHitF *G__Lderived;
     G__Lderived=(HWallOneHitF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF),G__get_linked_tagnum(&G__WallDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF),G__get_linked_tagnum(&G__WallDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim))) {
     HWallHitFSim *G__Lderived;
     G__Lderived=(HWallHitFSim*)0x1000;
     {
       HWallHitF *G__Lpbase=(HWallHitF*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim),G__get_linked_tagnum(&G__WallDictLN_HWallHitF),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim),G__get_linked_tagnum(&G__WallDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim),G__get_linked_tagnum(&G__WallDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker))) {
     HWallTrbUnpacker *G__Lderived;
     G__Lderived=(HWallTrbUnpacker*)0x1000;
     {
       HTrbBaseUnpacker *G__Lpbase=(HTrbBaseUnpacker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker),G__get_linked_tagnum(&G__WallDictLN_HTrbBaseUnpacker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker),G__get_linked_tagnum(&G__WallDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup))) {
     HWallTrb2Lookup *G__Lderived;
     G__Lderived=(HWallTrb2Lookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup),G__get_linked_tagnum(&G__WallDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup),G__get_linked_tagnum(&G__WallDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker))) {
     HWallTrb2Unpacker *G__Lderived;
     G__Lderived=(HWallTrb2Unpacker*)0x1000;
     {
       HTrb2Unpacker *G__Lpbase=(HTrb2Unpacker*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker),G__get_linked_tagnum(&G__WallDictLN_HTrb2Unpacker),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker),G__get_linked_tagnum(&G__WallDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan))) {
     HWallTrb2LookupChan *G__Lderived;
     G__Lderived=(HWallTrb2LookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard))) {
     HWallTrb2LookupBoard *G__Lderived;
     G__Lderived=(HWallTrb2LookupBoard*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard),G__get_linked_tagnum(&G__WallDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableWallDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Short_t",115,-1,0,-1);
   G__setnewtype(-1,"Signed Short integer 2 bytes (short)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__WallDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__WallDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WallDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__WallDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WallDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__WallDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__WallDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WallDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__WallDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__WallDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__WallDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__WallDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__WallDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__WallDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HWallDetector */
static void G__setup_memvarHWallDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDetector));
   { HWallDetector *p; p=(HWallDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallTaskSet */
static void G__setup_memvarHWallTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet));
   { HWallTaskSet *p; p=(HWallTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fdoEventPlane=",0,"run eventplane reconstructor");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallLookup */
static void G__setup_memvarHWallLookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookup));
   { HWallLookup *p; p=(HWallLookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HWallLookupCrate");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxCrate=",0,"actual maximum index of crates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallUnpacker */
static void G__setup_memvarHWallUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker));
   { HWallUnpacker *p; p=(HWallUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"subEvtId=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,2,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallLookup),-1,-1,2,"lookup=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallRaw */
static void G__setup_memvarHWallRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRaw));
   { HWallRaw *p; p=(HWallRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time=",0,"tdc time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"charge=",0,"adc charge");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nHits=",0,"number of hits");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"location");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time1=",0,"tdc time of 1st hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"width1=",0,"width of 1st hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time2=",0,"tdc time of 2nd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"width2=",0,"width of 2nd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time3=",0,"tdc time of 3rd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"width3=",0,"width of 3rd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time4=",0,"tdc time of 4th hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"width4=",0,"width of 4th hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallContFact */
static void G__setup_memvarHWallContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallContFact));
   { HWallContFact *p; p=(HWallContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallCalPar */
static void G__setup_memvarHWallCalPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalPar));
   { HWallCalPar *p; p=(HWallCalPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HWallCalParCell");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallParRootFileIo */
static void G__setup_memvarHWallParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo));
   { HWallParRootFileIo *p; p=(HWallParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallParAsciiFileIo */
static void G__setup_memvarHWallParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo));
   { HWallParAsciiFileIo *p; p=(HWallParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallLookupChan */
static void G__setup_memvarHWallLookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan));
   { HWallLookupChan *p; p=(HWallLookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number (0..383)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallLookupSlot */
static void G__setup_memvarHWallLookupSlot(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot));
   { HWallLookupSlot *p; p=(HWallLookupSlot*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HWallLookupChan objects");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modType=",0,"type of digital converter (A=ADC, T=TDC, U=undefined)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxChannel=",0,"actual maximum index of channel");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nChannels=",0,"maximum number of channels in a slot");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallLookupCrate */
static void G__setup_memvarHWallLookupCrate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate));
   { HWallLookupCrate *p; p=(HWallLookupCrate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HWallLookupSlot objects");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxSlot=",0,"actual maximum index of slots");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSlots=",0,"maximum number of slots in a crate");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallCal */
static void G__setup_memvarHWallCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCal));
   { HWallCal *p; p=(HWallCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nHits=",0,"number of hits");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"fiber number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time1=",0,"tdc time of 1st hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adc1=",0,"adc of 1st hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time2=",0,"tdc time of 2nd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adc2=",0,"adc of 2nd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time3=",0,"tdc time of 3rd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adc3=",0,"adc of 3rd hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time4=",0,"tdc time of 4th hit");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adc4=",0,"adc of 4th hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallCalParCell */
static void G__setup_memvarHWallCalParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell));
   { HWallCalParCell *p; p=(HWallCalParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"TDC_slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"TDC_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"TDC_WalkCorr1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"TDC_WalkCorr2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ADC_slope=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ADC_offset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallCalibrater */
static void G__setup_memvarHWallCalibrater(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater));
   { HWallCalibrater *p; p=(HWallCalibrater*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"rawCat=",0,"! pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"calCat=",0,"! pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HIterator),-1,-1,2,"iter=",0,"! iterator on raw data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,2,"loc=",0,"! location for new cal object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallCalPar),-1,-1,2,"pWallCalPar=",0,"! calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallDigiPar */
static void G__setup_memvarHWallDigiPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar));
   { HWallDigiPar *p; p=(HWallDigiPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"TDC_slope[302]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"TDC_offset[302]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ADC_slope[302]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ADC_offset[302]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"CFD_threshold[302]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ADC_threshold[302]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallGeomPar */
static void G__setup_memvarHWallGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar));
   { HWallGeomPar *p; p=(HWallGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallDigitizer */
static void G__setup_memvarHWallDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer));
   { HWallDigitizer *p; p=(HWallDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,4,"fLoc=",0,"! Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,4,"fGeantCat=",0,"! Pointer to Geant data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,4,"fRawCat=",0,"! Pointer to raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar),-1,-1,4,"pWallDigiPar=",0,"! Digitization parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar),-1,-1,4,"pWallGeomPar=",0,"!Container for WALL geometry ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HIterator),-1,-1,4,"iterGeant=",0,"! Iterator over GeantCell category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HIterator),-1,-1,4,"iterWallRaw=",0,"Iterator over HWallRawSim category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallRawSim */
static void G__setup_memvarHWallRawSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSim));
   { HWallRawSim *p; p=(HWallRawSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1=",0,"number of Track for first hit in cell");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2=",0,"number of Track for second hit in cell");
   G__memvar_setup((void*)0,115,0,0,-1,G__defined_typename("Short_t"),-1,2,"nHit=",0,"number of hit //FK//");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallRawSimFilter */
static void G__setup_memvarHWallRawSimFilter(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter));
   { HWallRawSimFilter *p; p=(HWallRawSimFilter*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallOneHit */
static void G__setup_memvarHWallOneHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHit));
   { HWallOneHit *p; p=(HWallOneHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeHit=",0,"tdc time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"chargeHit=",0,"adc charge  ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"paddle number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallHit */
static void G__setup_memvarHWallHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHit));
   { HWallHit *p; p=(HWallHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeCal=",0,"tdc time");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"chargeCal=",0,"adc charge");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"paddle number");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"theta=",0,"theta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"phi=",0,"phi");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"d=",0,"d is distance");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"xlab=",0,"x coordinate in lab system");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"ylab=",0,"y coordinate in lab system");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"zlab=",0,"z coordinate in lab system");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallEventPlane */
static void G__setup_memvarHWallEventPlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane));
   { HWallEventPlane *p; p=(HWallEventPlane*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhi=",0,"eventplane       angle [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiA=",0,"subevent-A-plane angle [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiB=",0,"subevent-B-plane angle [deg]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fPhiAB=",0,"angle between two (1/2)-subevent estimates A and B [deg]");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"NA=",0,"Number of cells randomly selected for subevent A");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"NB=",0,"Number of cells randomly selected for subevent B");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallHitSim */
static void G__setup_memvarHWallHitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitSim));
   { HWallHitSim *p; p=(HWallHitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack1=",0,"number of Track for first hit");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack2=",0,"number of Track for second hit");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallRefWinPar */
static void G__setup_memvarHWallRefWinPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar));
   { HWallRefWinPar *p; p=(HWallRefWinPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time_ref_win_low=",0,"Lower bound of time ref window");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"time_ref_win_high=",0,"Upper bound of time ref window");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallHitF */
static void G__setup_memvarHWallHitF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitF));
   { HWallHitF *p; p=(HWallHitF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,2,"fLoc=",0,"! Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fRawCat=",0,"! Pointer to raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fOneHitCat=",0,"! Pointer to one hit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fHitCat=",0,"FK//???????????????????????????");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HIterator),-1,-1,2,"iter=",0,"! Iterator over Raw category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar),-1,-1,2,"pWallGeometry=",0,"Geom parameters ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HSpecGeomPar),-1,-1,2,"pSpecGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fStartHitCat=",0,"! Category with start hits");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fWallSimulation=",0,"FK//");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallEventPlanePar */
static void G__setup_memvarHWallEventPlanePar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar));
   { HWallEventPlanePar *p; p=(HWallEventPlanePar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fT1_cut=",0,"time1 cut to select spectators");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fT2_cut=",0,"time2 cut to select spectators");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fX_shift=",0,"shift from center in x direction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fY_shift=",0,"shift from center in y direction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fR0_cut=",0,"cuts out internal zone, which might be affected by the beam spot");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ1_cut_s=",0,"common cut for small  cells: cuts out noise below Z=1 particles on calibrated dE/dx spectrum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ1_cut_m=",0,"common cut for middle cells: cuts out noise below Z=1 particles on calibrated dE/dx spectrum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fZ1_cut_l=",0,"common cut for large  cells: cuts out noise below Z=1 particles on calibrated dE/dx spectrum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallEventPlaneF */
static void G__setup_memvarHWallEventPlaneF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF));
   { HWallEventPlaneF *p; p=(HWallEventPlaneF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fWallHitCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fWallEventPlaneCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar),-1,-1,2,"fWallEventPlanePar=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,2,"fUseCorrection=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallFiredCellsVA),-1,-1,2,"fcellsVect=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallOneHitF */
static void G__setup_memvarHWallOneHitF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF));
   { HWallOneHitF *p; p=(HWallOneHitF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fCalCat=",0,"! pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fOneHitCat=",0,"! pointer to the hitone data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HIterator),-1,-1,2,"iter=",0,"! iterator on raw data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,2,"fLoc=",0,"! location for new cal object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar),-1,-1,2,"pWallRefWinPar=",0,"! tdc Window params");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallHitFSim */
static void G__setup_memvarHWallHitFSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim));
   { HWallHitFSim *p; p=(HWallHitFSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,2,"fLoc=",0,"! Location for new object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fRawCat=",0,"! Pointer to raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HCategory),-1,-1,2,"fHitCat=",0,"FK//???????????????????????????");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HIterator),-1,-1,2,"iter=",0,"! Iterator over Raw category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar),-1,-1,2,"pWallDigiPar=",0,"! Calibration parameters ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar),-1,-1,2,"pWallGeometry=",0,"Geom parameters ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HSpecGeomPar),-1,-1,2,"pSpecGeometry=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"fWallSimulation=",0,"FK//");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallTrbUnpacker */
static void G__setup_memvarHWallTrbUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker));
   { HWallTrbUnpacker *p; p=(HWallTrbUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,2,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"debugWallFlag=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"doRefTimeCorr=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"noTimeRefCorr=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallTrb2Lookup */
static void G__setup_memvarHWallTrb2Lookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup));
   { HWallTrb2Lookup *p; p=(HWallTrb2Lookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HWallTrb2LookupBoard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallTrb2Unpacker */
static void G__setup_memvarHWallTrb2Unpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker));
   { HWallTrb2Unpacker *p; p=(HWallTrb2Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__WallDictLN_HLocation),-1,-1,2,"loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup),-1,-1,2,"lookup=",0,"TRB lookup table");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"timeRef=",0,"use reference time ?");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"timeRefRemove=",0,"remove reference times from data?");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"timeShift=",0,"shift all times by a constant (to positive)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallTrb2LookupChan */
static void G__setup_memvarHWallTrb2LookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan));
   { HWallTrb2LookupChan *p; p=(HWallTrb2LookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HWallTrb2LookupBoard */
static void G__setup_memvarHWallTrb2LookupBoard(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard));
   { HWallTrb2LookupBoard *p; p=(HWallTrb2LookupBoard*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HWallTrb2LookupChan objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__WallDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarWallDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHWallDetector(void) {
   /* HWallDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDetector));
   G__memfunc_setup("HWallDetector",1298,G__WallDict_190_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildLinearCategory",1961,G__WallDict_190_0_3, 85, G__get_linked_tagnum(&G__WallDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildMatrixCategory",1987,G__WallDict_190_0_4, 85, G__get_linked_tagnum(&G__WallDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxModInSetup",1614,G__WallDict_190_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_190_0_9, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_190_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_190_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_190_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_190_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_190_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_190_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_190_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_190_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallDetector", 1298, G__WallDict_190_0_21, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallDetector), -1, 0, 1, 1, 1, 0, "u 'HWallDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallDetector", 1424, G__WallDict_190_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_190_0_23, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallDetector), -1, 1, 1, 1, 1, 0, "u 'HWallDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallTaskSet(void) {
   /* HWallTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet));
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - s1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallTaskSet",1175,G__WallDict_207_0_2, 105, G__get_linked_tagnum(&G__WallDictLN_HWallTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"walltaskset\"' name C - 'Text_t' 10 '\"walltaskset\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__WallDict_207_0_3, 85, G__get_linked_tagnum(&G__WallDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_207_0_4, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_207_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_207_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_207_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_207_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_207_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_207_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_207_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_207_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HWallTaskSet", 1301, G__WallDict_207_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallLookup(void) {
   /* HWallLookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookup));
   G__memfunc_setup("HWallLookup",1106,G__WallDict_212_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallLookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"WallLookup\"' name C - 'Char_t' 10 '\"Lookup table for Forward Wall unpacker\"' title "
"C - 'Char_t' 10 '\"WallLookupProduction\"' context i - 'Int_t' 0 '1' nCrates "
"i - 'Int_t' 0 '1' nSlots", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__WallDict_212_0_2, 117, G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlot",738,G__WallDict_212_0_3, 85, G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - c i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_212_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__WallDict_212_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_212_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__WallDict_212_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__WallDict_212_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__WallDict_212_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_212_0_13, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallLookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_212_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_212_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallLookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_212_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallLookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_212_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_212_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_212_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_212_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_212_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallLookup", 1106, G__WallDict_212_0_25, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallLookup), -1, 0, 1, 1, 1, 0, "u 'HWallLookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallLookup", 1232, G__WallDict_212_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_212_0_27, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallLookup), -1, 1, 1, 1, 1, 0, "u 'HWallLookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallUnpacker(void) {
   /* HWallUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker));
   G__memfunc_setup("HWallUnpacker",1297,G__WallDict_213_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '416' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_213_0_5, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_213_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_213_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_213_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_213_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_213_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_213_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_213_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_213_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallUnpacker", 1297, G__WallDict_213_0_17, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker), -1, 0, 1, 1, 1, 0, "u 'HWallUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallUnpacker", 1423, G__WallDict_213_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_213_0_19, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallUnpacker), -1, 1, 1, 1, 1, 0, "u 'HWallUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallRaw(void) {
   /* HWallRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRaw));
   G__memfunc_setup("HWallRaw",770,G__WallDict_215_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_215_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__WallDict_215_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__WallDict_215_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__WallDict_215_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__WallDict_215_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__WallDict_215_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__WallDict_215_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__WallDict_215_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWidth",832,G__WallDict_215_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getADC",520,G__WallDict_215_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "Alias for getWidth", (void*) NULL, 0);
   G__memfunc_setup("getTimeAndWidth",1506,G__WallDict_215_0_12, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndADC",1194,G__WallDict_215_0_13, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - n f - 'Float_t' 1 - t "
"f - 'Float_t' 1 - a", "Alias for getTimeAndWidth", (void*) NULL, 0);
   G__memfunc_setup("getMaxMult",1032,G__WallDict_215_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "return number of multiplicity supported (constant)", (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__WallDict_215_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMult",750,G__WallDict_215_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - mu", "use fill and fill_l/t and multiplicity will always be correct", (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_215_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_lead",924,G__WallDict_215_0_18, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill_trail",1058,G__WallDict_215_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - time", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_215_0_20, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_215_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_215_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_215_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_215_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_215_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_215_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_215_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_215_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallRaw", 770, G__WallDict_215_0_32, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallRaw), -1, 0, 1, 1, 1, 0, "u 'HWallRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallRaw", 896, G__WallDict_215_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_215_0_34, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallRaw), -1, 1, 1, 1, 1, 0, "u 'HWallRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallContFact(void) {
   /* HWallContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallContFact",1258,G__WallDict_219_0_2, 105, G__get_linked_tagnum(&G__WallDictLN_HWallContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_219_0_4, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_219_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_219_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_219_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_219_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_219_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_219_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_219_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_219_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallContFact", 1258, G__WallDict_219_0_16, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallContFact), -1, 0, 1, 1, 1, 0, "u 'HWallContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallContFact", 1384, G__WallDict_219_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_219_0_18, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallContFact), -1, 1, 1, 1, 1, 0, "u 'HWallContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallCalPar(void) {
   /* HWallCalPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalPar));
   G__memfunc_setup("HWallCalPar",1035,G__WallDict_255_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallCalPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"WallCalPar\"' name C - 'Char_t' 10 '\"Calibration parameters for Forward Wall\"' title "
"C - 'Char_t' 10 '\"WallCalProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__WallDict_255_0_2, 117, G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_255_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__WallDict_255_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__WallDict_255_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__WallDict_255_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeline",979,G__WallDict_255_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_255_0_11, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallCalPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_255_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_255_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallCalPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_255_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallCalPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_255_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_255_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_255_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCalPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_255_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_255_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCalPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallCalPar", 1035, G__WallDict_255_0_23, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallCalPar), -1, 0, 1, 1, 1, 0, "u 'HWallCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallCalPar", 1161, G__WallDict_255_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_255_0_25, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallCalPar), -1, 1, 1, 1, 1, 0, "u 'HWallCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallParRootFileIo(void) {
   /* HWallParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo));
   G__memfunc_setup("HWallParRootFileIo",1751,G__WallDict_256_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__WallDict_256_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HWallLookup' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__WallDict_256_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HWallCalPar' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_256_0_5, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_256_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_256_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_256_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_256_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_256_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_256_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_256_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_256_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallParRootFileIo", 1751, G__WallDict_256_0_17, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HWallParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallParRootFileIo", 1877, G__WallDict_256_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_256_0_19, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HWallParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallParAsciiFileIo(void) {
   /* HWallParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo));
   G__memfunc_setup("HWallParAsciiFileIo",1820,G__WallDict_266_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_266_0_4, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_266_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_266_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_266_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_266_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_266_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_266_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_266_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_266_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallParAsciiFileIo", 1820, G__WallDict_266_0_16, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HWallParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallParAsciiFileIo", 1946, G__WallDict_266_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_266_0_18, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HWallParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallLookupChan(void) {
   /* HWallLookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan));
   G__memfunc_setup("HWallLookupChan",1484,G__WallDict_268_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__WallDict_268_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_268_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HWallLookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__WallDict_268_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_268_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_268_0_6, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallLookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_268_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_268_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallLookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_268_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallLookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_268_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_268_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_268_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_268_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_268_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallLookupChan", 1484, G__WallDict_268_0_18, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan), -1, 0, 1, 1, 1, 0, "u 'HWallLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallLookupChan", 1610, G__WallDict_268_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_268_0_20, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan), -1, 1, 1, 1, 1, 0, "u 'HWallLookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallLookupSlot(void) {
   /* HWallLookupSlot */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot));
   G__memfunc_setup("HWallLookupSlot",1524,G__WallDict_269_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' numChannels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__WallDict_269_0_2, 117, G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__WallDict_269_0_3, 85, G__get_linked_tagnum(&G__WallDictLN_HWallLookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_269_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSize",1025,G__WallDict_269_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getType",738,G__WallDict_269_0_6, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_269_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"c - 'Char_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_269_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_269_0_9, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallLookupSlot::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_269_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupSlot::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_269_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallLookupSlot::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_269_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallLookupSlot::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_269_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_269_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupSlot::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_269_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookupSlot::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_269_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupSlot::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_269_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookupSlot::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallLookupSlot", 1524, G__WallDict_269_0_21, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot), -1, 0, 1, 1, 1, 0, "u 'HWallLookupSlot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallLookupSlot", 1650, G__WallDict_269_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_269_0_23, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot), -1, 1, 1, 1, 1, 0, "u 'HWallLookupSlot' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallLookupCrate(void) {
   /* HWallLookupCrate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate));
   G__memfunc_setup("HWallLookupCrate",1601,G__WallDict_270_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' numSlots", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__WallDict_270_0_2, 117, G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlot",738,G__WallDict_270_0_3, 85, G__get_linked_tagnum(&G__WallDictLN_HWallLookupSlot), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_270_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSize",1025,G__WallDict_270_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_270_0_6, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - c - 'Char_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_270_0_7, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallLookupCrate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_270_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupCrate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_270_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallLookupCrate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_270_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallLookupCrate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_270_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_270_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupCrate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_270_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookupCrate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_270_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallLookupCrate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_270_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallLookupCrate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallLookupCrate", 1601, G__WallDict_270_0_19, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate), -1, 0, 1, 1, 1, 0, "u 'HWallLookupCrate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallLookupCrate", 1727, G__WallDict_270_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_270_0_21, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallLookupCrate), -1, 1, 1, 1, 1, 0, "u 'HWallLookupCrate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallCal(void) {
   /* HWallCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCal));
   G__memfunc_setup("HWallCal",744,G__WallDict_271_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_271_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHits",806,G__WallDict_271_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__WallDict_271_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__WallDict_271_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAdc",584,G__WallDict_271_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndAdc",1258,G__WallDict_271_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - n f - 'Float_t' 1 - time "
"f - 'Float_t' 1 - adc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxMult",1032,G__WallDict_271_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", "return number of multiplicity supported (constant)", (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__WallDict_271_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeAdc",995,G__WallDict_271_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - t f - 'Float_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_271_0_11, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_271_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_271_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_271_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_271_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_271_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_271_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_271_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_271_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCal::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallCal", 744, G__WallDict_271_0_23, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallCal), -1, 0, 1, 1, 1, 0, "u 'HWallCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallCal", 870, G__WallDict_271_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_271_0_25, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallCal), -1, 1, 1, 1, 1, 0, "u 'HWallCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallCalParCell(void) {
   /* HWallCalParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell));
   G__memfunc_setup("HWallCalParCell",1419,G__WallDict_272_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC_Slope",1149,G__WallDict_272_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC_Offset",1249,G__WallDict_272_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC_WalkCorr1",1488,G__WallDict_272_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC_WalkCorr2",1489,G__WallDict_272_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getADC_Slope",1130,G__WallDict_272_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getADC_Offset",1230,G__WallDict_272_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_272_0_8, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - Ts f - 'Float_t' 0 - To "
"f - 'Float_t' 0 - Twc1 f - 'Float_t' 0 - Twc2 "
"f - 'Float_t' 0 - As f - 'Float_t' 0 - Ao", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_272_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HWallCalParCell' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDC_Slope",1161,G__WallDict_272_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDC_Offset",1261,G__WallDict_272_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - To", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDC_WalkCorr1",1500,G__WallDict_272_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Twc1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTDC_WalkCorr2",1501,G__WallDict_272_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Twc2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setADC_Slope",1142,G__WallDict_272_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - As", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setADC_Offset",1242,G__WallDict_272_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - Ao", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_272_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_272_0_17, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallCalParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_272_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_272_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallCalParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_272_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallCalParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_272_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_272_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_272_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCalParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_272_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_272_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCalParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallCalParCell", 1419, G__WallDict_272_0_29, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell), -1, 0, 1, 1, 1, 0, "u 'HWallCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallCalParCell", 1545, G__WallDict_272_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_272_0_31, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallCalParCell), -1, 1, 1, 1, 1, 0, "u 'HWallCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallCalibrater(void) {
   /* HWallCalibrater */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater));
   G__memfunc_setup("HWallCalibrater",1489,G__WallDict_281_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallCalibrater",1489,G__WallDict_281_0_2, 105, G__get_linked_tagnum(&G__WallDictLN_HWallCalibrater), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_281_0_6, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallCalibrater::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_281_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalibrater::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_281_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallCalibrater::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_281_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallCalibrater::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_281_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_281_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalibrater::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_281_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCalibrater::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_281_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallCalibrater::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_281_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallCalibrater::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HWallCalibrater", 1615, G__WallDict_281_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallDigiPar(void) {
   /* HWallDigiPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar));
   G__memfunc_setup("HWallDigiPar",1144,G__WallDict_282_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"WallDigiPar\"' name C - 'Char_t' 10 '\"Digitization parameters for Forward Wall\"' title "
"C - 'Char_t' 10 '\"WallDigiProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC_Slope",1149,G__WallDict_282_0_2, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTDC_Offset",1249,G__WallDict_282_0_3, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getADC_Slope",1130,G__WallDict_282_0_4, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getADC_Offset",1230,G__WallDict_282_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCFD_Threshold",1561,G__WallDict_282_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getADC_Threshold",1556,G__WallDict_282_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_282_0_8, 121, -1, -1, 0, 7, 1, 1, 0, 
"i - 'Int_t' 0 - cell f - 'Float_t' 0 - Ts "
"f - 'Float_t' 0 - To f - 'Float_t' 0 - As "
"f - 'Float_t' 0 - Ao f - 'Float_t' 0 - Ct "
"f - 'Float_t' 0 - At", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_282_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_282_0_13, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallDigiPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_282_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDigiPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_282_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallDigiPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_282_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallDigiPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_282_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_282_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDigiPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_282_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallDigiPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_282_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDigiPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_282_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallDigiPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallDigiPar", 1144, G__WallDict_282_0_25, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar), -1, 0, 1, 1, 1, 0, "u 'HWallDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallDigiPar", 1270, G__WallDict_282_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_282_0_27, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallDigiPar), -1, 1, 1, 1, 1, 0, "u 'HWallDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallGeomPar(void) {
   /* HWallGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar));
   G__memfunc_setup("HWallGeomPar",1155,G__WallDict_283_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"WallGeomPar\"' name C - 'Char_t' 10 '\"Wall geometry parameters\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInComp",1494,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompNum",1023,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCellName",1089,G__WallDict_283_0_7, 117, G__get_linked_tagnum(&G__WallDictLN_TString), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_283_0_8, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_283_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_283_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_283_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_283_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_283_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_283_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_283_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_283_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallGeomPar", 1155, G__WallDict_283_0_20, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar), -1, 0, 1, 1, 1, 0, "u 'HWallGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallGeomPar", 1281, G__WallDict_283_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_283_0_22, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallGeomPar), -1, 1, 1, 1, 1, 0, "u 'HWallGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallDigitizer(void) {
   /* HWallDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer));
   G__memfunc_setup("HWallDigitizer",1411,G__WallDict_284_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallDigitizer",1411,G__WallDict_284_0_2, 105, G__get_linked_tagnum(&G__WallDictLN_HWallDigitizer), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,G__WallDict_284_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_284_0_7, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_284_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_284_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_284_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_284_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_284_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_284_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_284_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_284_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallDigitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HWallDigitizer", 1537, G__WallDict_284_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallRawSim(void) {
   /* HWallRawSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSim));
   G__memfunc_setup("HWallRawSim",1067,G__WallDict_286_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallRawSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_286_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack1",960,G__WallDict_286_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__WallDict_286_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack",911,G__WallDict_286_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__WallDict_286_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__WallDict_286_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNHit",691,G__WallDict_286_0_8, 115, -1, G__defined_typename("Short_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNHit",703,G__WallDict_286_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "s - 'Short_t' 0 - anHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incNHit",685,G__WallDict_286_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_286_0_11, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallRawSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_286_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRawSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_286_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallRawSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_286_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallRawSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_286_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_286_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRawSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_286_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRawSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_286_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRawSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_286_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRawSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallRawSim", 1067, G__WallDict_286_0_23, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallRawSim), -1, 0, 1, 1, 1, 0, "u 'HWallRawSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallRawSim", 1193, G__WallDict_286_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_286_0_25, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallRawSim), -1, 1, 1, 1, 1, 0, "u 'HWallRawSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallRawSimFilter(void) {
   /* HWallRawSimFilter */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter));
   G__memfunc_setup("HWallRawSimFilter",1681,G__WallDict_287_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - raw", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_287_0_3, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallRawSimFilter::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_287_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRawSimFilter::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_287_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallRawSimFilter::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_287_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallRawSimFilter::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_287_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_287_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRawSimFilter::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_287_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRawSimFilter::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_287_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRawSimFilter::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_287_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRawSimFilter::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallRawSimFilter", 1681, G__WallDict_287_0_15, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter), -1, 0, 1, 1, 1, 0, "u 'HWallRawSimFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallRawSimFilter", 1807, G__WallDict_287_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_287_0_17, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallRawSimFilter), -1, 1, 1, 1, 1, 0, "u 'HWallRawSimFilter' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallOneHit(void) {
   /* HWallOneHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHit));
   G__memfunc_setup("HWallOneHit",1055,G__WallDict_288_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallOneHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__WallDict_288_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__WallDict_288_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__WallDict_288_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__WallDict_288_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_288_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_288_0_7, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - t f - 'Float_t' 10 - a "
"i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__WallDict_288_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__WallDict_288_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__WallDict_288_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__WallDict_288_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_288_0_12, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallOneHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_288_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallOneHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_288_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallOneHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_288_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallOneHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_288_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_288_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallOneHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_288_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallOneHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_288_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallOneHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_288_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallOneHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallOneHit", 1055, G__WallDict_288_0_24, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallOneHit), -1, 0, 1, 1, 1, 0, "u 'HWallOneHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallOneHit", 1181, G__WallDict_288_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_288_0_26, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallOneHit), -1, 1, 1, 1, 1, 0, "u 'HWallOneHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallHit(void) {
   /* HWallHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHit));
   G__memfunc_setup("HWallHit",765,G__WallDict_289_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTime",731,G__WallDict_289_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__WallDict_289_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__WallDict_289_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__WallDict_289_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__WallDict_289_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__WallDict_289_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistance",1143,G__WallDict_289_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - dis", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZLab",870,G__WallDict_289_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_289_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fill",423,G__WallDict_289_0_11, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - t f - 'Float_t' 10 - a "
"i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__WallDict_289_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__WallDict_289_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__WallDict_289_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__WallDict_289_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__WallDict_289_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__WallDict_289_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistance",1131,G__WallDict_289_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYZLab",858,G__WallDict_289_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - x f - 'Float_t' 1 - y "
"f - 'Float_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_289_0_20, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_289_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_289_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_289_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_289_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_289_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_289_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_289_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_289_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallHit", 765, G__WallDict_289_0_32, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallHit), -1, 0, 1, 1, 1, 0, "u 'HWallHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallHit", 891, G__WallDict_289_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_289_0_34, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallHit), -1, 1, 1, 1, 1, 0, "u 'HWallHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallEventPlane(void) {
   /* HWallEventPlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane));
   G__memfunc_setup("HWallEventPlane",1482,G__WallDict_290_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__WallDict_290_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiA",686,G__WallDict_290_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiB",687,G__WallDict_290_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhiAB",752,G__WallDict_290_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNA",475,G__WallDict_290_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNB",476,G__WallDict_290_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__WallDict_290_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiA",674,G__WallDict_290_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiB",675,G__WallDict_290_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhiAB",740,G__WallDict_290_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNA",463,G__WallDict_290_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNB",464,G__WallDict_290_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_290_0_14, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallEventPlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_290_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_290_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallEventPlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_290_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallEventPlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_290_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_290_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_290_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallEventPlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_290_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_290_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallEventPlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallEventPlane", 1482, G__WallDict_290_0_26, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane), -1, 0, 1, 1, 1, 0, "u 'HWallEventPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallEventPlane", 1608, G__WallDict_290_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_290_0_28, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallEventPlane), -1, 1, 1, 1, 1, 0, "u 'HWallEventPlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallHitSim(void) {
   /* HWallHitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitSim));
   G__memfunc_setup("HWallHitSim",1062,G__WallDict_291_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTrack1",960,G__WallDict_291_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("setNTrack2",961,G__WallDict_291_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", "set trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("getNTrack1",948,G__WallDict_291_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 1", (void*) NULL, 0);
   G__memfunc_setup("getNTrack2",949,G__WallDict_291_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get trk nb of hit 2", (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_291_0_7, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallHitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_291_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_291_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallHitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_291_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallHitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_291_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_291_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_291_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_291_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_291_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallHitSim", 1062, G__WallDict_291_0_19, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallHitSim), -1, 0, 1, 1, 1, 0, "u 'HWallHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallHitSim", 1188, G__WallDict_291_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_291_0_21, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallHitSim), -1, 1, 1, 1, 1, 0, "u 'HWallHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallRefWinPar(void) {
   /* HWallRefWinPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar));
   G__memfunc_setup("HWallRefWinPar",1350,G__WallDict_294_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"WallRefWinPar\"' name C - 'Char_t' 10 '\"Reference time windows parameters for Forward Wall\"' title "
"C - 'Char_t' 10 '\"WallOneHitProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefWinLow",1213,G__WallDict_294_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefWinHigh",1291,G__WallDict_294_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefWinLow",1225,G__WallDict_294_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefWinHigh",1303,G__WallDict_294_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_294_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - tl f - 'Float_t' 0 - th", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_294_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_294_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_294_0_12, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallRefWinPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_294_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRefWinPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_294_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallRefWinPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_294_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallRefWinPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_294_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_294_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRefWinPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_294_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRefWinPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_294_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallRefWinPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_294_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallRefWinPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallRefWinPar", 1350, G__WallDict_294_0_24, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar), -1, 0, 1, 1, 1, 0, "u 'HWallRefWinPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallRefWinPar", 1476, G__WallDict_294_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_294_0_26, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallRefWinPar), -1, 1, 1, 1, 1, 0, "u 'HWallRefWinPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallHitF(void) {
   /* HWallHitF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitF));
   G__memfunc_setup("fillHit",716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'HWallHit' - 0 - - U 'HWallOneHit' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillGeometry",1267,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HWallHit' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallHitF",835,G__WallDict_299_0_3, 105, G__get_linked_tagnum(&G__WallDictLN_HWallHitF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallHitF",835,G__WallDict_299_0_4, 105, G__get_linked_tagnum(&G__WallDictLN_HWallHitF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,G__WallDict_299_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_299_0_9, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallHitF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_299_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_299_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallHitF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_299_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallHitF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_299_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_299_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_299_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHitF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_299_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_299_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHitF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HWallHitF", 961, G__WallDict_299_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallEventPlanePar(void) {
   /* HWallEventPlanePar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar));
   G__memfunc_setup("HWallEventPlanePar",1773,G__WallDict_330_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"WallEventPlanePar\"' name C - 'Char_t' 10 '\"EventPlane parameters for Forward Wall\"' title "
"C - 'Char_t' 10 '\"WallEventPlaneProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT1Cut",753,G__WallDict_330_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getT2Cut",754,G__WallDict_330_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXShift",918,G__WallDict_330_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYShift",919,G__WallDict_330_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getR0Cut",750,G__WallDict_330_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ1_cut_s",1096,G__WallDict_330_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ1_cut_m",1090,G__WallDict_330_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ1_cut_l",1089,G__WallDict_330_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setT1Cut",765,G__WallDict_330_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setT2Cut",766,G__WallDict_330_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - t2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXShift",930,G__WallDict_330_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - x", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYShift",931,G__WallDict_330_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setR0Cut",762,G__WallDict_330_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ1_cut_s",1108,G__WallDict_330_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ1_cut_m",1102,G__WallDict_330_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setZ1_cut_l",1101,G__WallDict_330_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - cl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_330_0_21, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallEventPlanePar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_330_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlanePar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_330_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallEventPlanePar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_330_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallEventPlanePar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_330_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_330_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlanePar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_330_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallEventPlanePar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_330_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlanePar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_330_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallEventPlanePar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallEventPlanePar", 1773, G__WallDict_330_0_33, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar), -1, 0, 1, 1, 1, 0, "u 'HWallEventPlanePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallEventPlanePar", 1899, G__WallDict_330_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_330_0_35, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallEventPlanePar), -1, 1, 1, 1, 1, 0, "u 'HWallEventPlanePar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallEventPlaneF(void) {
   /* HWallEventPlaneF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF));
   G__memfunc_setup("HWallEventPlaneF",1552,G__WallDict_332_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallEventPlaneF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 '\"WallEventPlaneF\"' name C - 'Text_t' 10 '\"WallEventPlaneF\"' title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setUseCorrection",1681,G__WallDict_332_0_5, 121, -1, -1, 0, 1, 3, 1, 0, "g - 'Bool_t' 0 - use", (char*)NULL, (void*) G__func2void( (void (*)(Bool_t))(&HWallEventPlaneF::setUseCorrection) ), 0);
   G__memfunc_setup("Class",502,G__WallDict_332_0_6, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallEventPlaneF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_332_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlaneF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_332_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallEventPlaneF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_332_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallEventPlaneF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_332_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_332_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlaneF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_332_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallEventPlaneF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_332_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallEventPlaneF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_332_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallEventPlaneF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HWallEventPlaneF", 1678, G__WallDict_332_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallOneHitF(void) {
   /* HWallOneHitF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF));
   G__memfunc_setup("fillHit",716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'HWallOneHit' - 0 - - U 'HWallCal' - 0 - -", "should be changed to HWallCal ", (void*) NULL, 1);
   G__memfunc_setup("HWallOneHitF",1125,G__WallDict_334_0_2, 105, G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallOneHitF",1125,G__WallDict_334_0_3, 105, G__get_linked_tagnum(&G__WallDictLN_HWallOneHitF), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,G__WallDict_334_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_334_0_8, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallOneHitF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_334_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallOneHitF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_334_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallOneHitF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_334_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallOneHitF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_334_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_334_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallOneHitF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_334_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallOneHitF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_334_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallOneHitF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_334_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallOneHitF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HWallOneHitF", 1251, G__WallDict_334_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallHitFSim(void) {
   /* HWallHitFSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim));
   G__memfunc_setup("fillHitTrack",1217,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'HWallHitSim' - 0 - - U 'HWallRawSim' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHit",716,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"U 'HWallHitSim' - 0 - - U 'HWallRawSim' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillGeometry",1267,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "U 'HWallHitSim' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallHitFSim",1132,G__WallDict_335_0_4, 105, G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HWallHitFSim",1132,G__WallDict_335_0_5, 105, G__get_linked_tagnum(&G__WallDictLN_HWallHitFSim), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initParContainer",1658,G__WallDict_335_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__WallDict_335_0_10, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallHitFSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_335_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitFSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_335_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallHitFSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_335_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallHitFSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_335_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_335_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitFSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_335_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHitFSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_335_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallHitFSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_335_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallHitFSim::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HWallHitFSim", 1258, G__WallDict_335_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallTrbUnpacker(void) {
   /* HWallTrbUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker));
   G__memfunc_setup("HWallTrbUnpacker",1593,G__WallDict_339_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '416' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDebugWallFlag",1597,G__WallDict_339_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefTimeCorrFlag",1800,G__WallDict_339_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - fl", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DisableTimeRef",1376,G__WallDict_339_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_339_0_7, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallTrbUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_339_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrbUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_339_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallTrbUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_339_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallTrbUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_339_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_339_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrbUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_339_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrbUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_339_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrbUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_339_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrbUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallTrbUnpacker", 1593, G__WallDict_339_0_19, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker), -1, 0, 1, 1, 1, 0, "u 'HWallTrbUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallTrbUnpacker", 1719, G__WallDict_339_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_339_0_21, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallTrbUnpacker), -1, 1, 1, 1, 1, 0, "u 'HWallTrbUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallTrb2Lookup(void) {
   /* HWallTrb2Lookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup));
   G__memfunc_setup("HWallTrb2Lookup",1452,G__WallDict_352_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"WallTrb2Lookup\"' name C - 'Char_t' 10 '\"Lookup table for the TRB2 unpacker of the Forward Wall\"' title "
"C - 'Char_t' 10 '\"WallTrb2LookupProduction\"' context i - 'Int_t' 0 'Trbnet::kWallMinTrbnetAddress' minTrbnetAddress "
"i - 'Int_t' 0 'Trbnet::kWallMaxTrbnetAddress' maxTrbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__WallDict_352_0_2, 85, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__WallDict_352_0_3, 85, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_352_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__WallDict_352_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__WallDict_352_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_352_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__WallDict_352_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__WallDict_352_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__WallDict_352_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_352_0_14, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallTrb2Lookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_352_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2Lookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_352_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallTrb2Lookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_352_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallTrb2Lookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_352_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_352_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2Lookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_352_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2Lookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_352_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2Lookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_352_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2Lookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallTrb2Lookup", 1452, G__WallDict_352_0_26, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup), -1, 0, 1, 1, 1, 0, "u 'HWallTrb2Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallTrb2Lookup", 1578, G__WallDict_352_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_352_0_28, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Lookup), -1, 1, 1, 1, 1, 0, "u 'HWallTrb2Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallTrb2Unpacker(void) {
   /* HWallTrb2Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker));
   G__memfunc_setup("HWallTrb2Unpacker",1643,G__WallDict_353_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("disableTimeRef",1408,G__WallDict_353_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeTimeRef",1338,G__WallDict_353_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("shiftTimes",1056,G__WallDict_353_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - ts", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_353_0_8, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallTrb2Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_353_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_353_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallTrb2Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_353_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallTrb2Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_353_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_353_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_353_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_353_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_353_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallTrb2Unpacker", 1643, G__WallDict_353_0_20, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker), -1, 0, 1, 1, 1, 0, "u 'HWallTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallTrb2Unpacker", 1769, G__WallDict_353_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_353_0_22, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2Unpacker), -1, 1, 1, 1, 1, 0, "u 'HWallTrb2Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallTrb2LookupChan(void) {
   /* HWallTrb2LookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan));
   G__memfunc_setup("HWallTrb2LookupChan",1830,G__WallDict_356_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__WallDict_356_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__WallDict_356_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__WallDict_356_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HWallTrb2LookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_356_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_356_0_6, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallTrb2LookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_356_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2LookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_356_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallTrb2LookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_356_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallTrb2LookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_356_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_356_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2LookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_356_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2LookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_356_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2LookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_356_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2LookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallTrb2LookupChan", 1830, G__WallDict_356_0_18, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan), -1, 0, 1, 1, 1, 0, "u 'HWallTrb2LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallTrb2LookupChan", 1956, G__WallDict_356_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_356_0_20, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan), -1, 1, 1, 1, 1, 0, "u 'HWallTrb2LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHWallTrb2LookupBoard(void) {
   /* HWallTrb2LookupBoard */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard));
   G__memfunc_setup("HWallTrb2LookupBoard",1940,G__WallDict_357_0_1, 105, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__WallDict_357_0_2, 85, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__WallDict_357_0_3, 117, G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__WallDict_357_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__WallDict_357_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__WallDict_357_0_6, 85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HWallTrb2LookupBoard::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__WallDict_357_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2LookupBoard::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__WallDict_357_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HWallTrb2LookupBoard::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__WallDict_357_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HWallTrb2LookupBoard::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__WallDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__WallDict_357_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__WallDict_357_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2LookupBoard::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__WallDict_357_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2LookupBoard::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__WallDict_357_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HWallTrb2LookupBoard::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__WallDict_357_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HWallTrb2LookupBoard::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HWallTrb2LookupBoard", 1940, G__WallDict_357_0_18, (int) ('i'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard), -1, 0, 1, 1, 1, 0, "u 'HWallTrb2LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HWallTrb2LookupBoard", 2066, G__WallDict_357_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__WallDict_357_0_20, (int) ('u'), G__get_linked_tagnum(&G__WallDictLN_HWallTrb2LookupBoard), -1, 1, 1, 1, 1, 0, "u 'HWallTrb2LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncWallDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&catWallRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catWallRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catWallCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catWallCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catWallOneHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catWallOneHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catWallHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catWallHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catWallEventPlane),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catWallEventPlane=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalWallDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcWallDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__WallDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__WallDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__WallDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__WallDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__WallDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__WallDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallDetector = { "HWallDetector" , 99 , -1 };
G__linked_taginfo G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__WallDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallTaskSet = { "HWallTaskSet" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallLookup = { "HWallLookup" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallUnpacker = { "HWallUnpacker" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HLocatedDataObject = { "HLocatedDataObject" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallRaw = { "HWallRaw" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallContFact = { "HWallContFact" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallCalPar = { "HWallCalPar" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallParRootFileIo = { "HWallParRootFileIo" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallParAsciiFileIo = { "HWallParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallLookupChan = { "HWallLookupChan" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallLookupSlot = { "HWallLookupSlot" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallLookupCrate = { "HWallLookupCrate" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallCal = { "HWallCal" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallCalParCell = { "HWallCalParCell" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallCalibrater = { "HWallCalibrater" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallDigiPar = { "HWallDigiPar" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallGeomPar = { "HWallGeomPar" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallDigitizer = { "HWallDigitizer" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HFilter = { "HFilter" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallRawSim = { "HWallRawSim" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallRawSimFilter = { "HWallRawSimFilter" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallOneHit = { "HWallOneHit" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallHit = { "HWallHit" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallEventPlane = { "HWallEventPlane" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallHitSim = { "HWallHitSim" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallRefWinPar = { "HWallRefWinPar" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallHitF = { "HWallHitF" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallEventPlanePar = { "HWallEventPlanePar" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallFiredCellsVA = { "HWallFiredCellsVA" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallEventPlaneF = { "HWallEventPlaneF" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallOneHitF = { "HWallOneHitF" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallHitFSim = { "HWallHitFSim" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HTrbBaseUnpacker = { "HTrbBaseUnpacker" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallTrbUnpacker = { "HWallTrbUnpacker" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HTrb2Unpacker = { "HTrb2Unpacker" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__WallDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallTrb2Lookup = { "HWallTrb2Lookup" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallTrb2Unpacker = { "HWallTrb2Unpacker" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallTrb2LookupChan = { "HWallTrb2LookupChan" , 99 , -1 };
G__linked_taginfo G__WallDictLN_HWallTrb2LookupBoard = { "HWallTrb2LookupBoard" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableWallDict() {
  G__WallDictLN_TClass.tagnum = -1 ;
  G__WallDictLN_TBuffer.tagnum = -1 ;
  G__WallDictLN_TMemberInspector.tagnum = -1 ;
  G__WallDictLN_TObject.tagnum = -1 ;
  G__WallDictLN_TNamed.tagnum = -1 ;
  G__WallDictLN_TString.tagnum = -1 ;
  G__WallDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__WallDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__WallDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__WallDictLN_TObjArray.tagnum = -1 ;
  G__WallDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__WallDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__WallDictLN_HTask.tagnum = -1 ;
  G__WallDictLN_HCategory.tagnum = -1 ;
  G__WallDictLN_HParIo.tagnum = -1 ;
  G__WallDictLN_HDetector.tagnum = -1 ;
  G__WallDictLN_HWallDetector.tagnum = -1 ;
  G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__WallDictLN_HTaskSet.tagnum = -1 ;
  G__WallDictLN_HWallTaskSet.tagnum = -1 ;
  G__WallDictLN_HldUnpack.tagnum = -1 ;
  G__WallDictLN_HLocation.tagnum = -1 ;
  G__WallDictLN_HWallLookup.tagnum = -1 ;
  G__WallDictLN_HWallUnpacker.tagnum = -1 ;
  G__WallDictLN_HLocatedDataObject.tagnum = -1 ;
  G__WallDictLN_HWallRaw.tagnum = -1 ;
  G__WallDictLN_HParSet.tagnum = -1 ;
  G__WallDictLN_HContainer.tagnum = -1 ;
  G__WallDictLN_HContFact.tagnum = -1 ;
  G__WallDictLN_HWallContFact.tagnum = -1 ;
  G__WallDictLN_HDetParIo.tagnum = -1 ;
  G__WallDictLN_HParRootFile.tagnum = -1 ;
  G__WallDictLN_HDetGeomPar.tagnum = -1 ;
  G__WallDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__WallDictLN_HWallCalPar.tagnum = -1 ;
  G__WallDictLN_HWallParRootFileIo.tagnum = -1 ;
  G__WallDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__WallDictLN_HWallParAsciiFileIo.tagnum = -1 ;
  G__WallDictLN_HWallLookupChan.tagnum = -1 ;
  G__WallDictLN_HWallLookupSlot.tagnum = -1 ;
  G__WallDictLN_HWallLookupCrate.tagnum = -1 ;
  G__WallDictLN_HWallCal.tagnum = -1 ;
  G__WallDictLN_HWallCalParCell.tagnum = -1 ;
  G__WallDictLN_HReconstructor.tagnum = -1 ;
  G__WallDictLN_HIterator.tagnum = -1 ;
  G__WallDictLN_HWallCalibrater.tagnum = -1 ;
  G__WallDictLN_HWallDigiPar.tagnum = -1 ;
  G__WallDictLN_HWallGeomPar.tagnum = -1 ;
  G__WallDictLN_HWallDigitizer.tagnum = -1 ;
  G__WallDictLN_HFilter.tagnum = -1 ;
  G__WallDictLN_HWallRawSim.tagnum = -1 ;
  G__WallDictLN_HWallRawSimFilter.tagnum = -1 ;
  G__WallDictLN_HWallOneHit.tagnum = -1 ;
  G__WallDictLN_HWallHit.tagnum = -1 ;
  G__WallDictLN_HWallEventPlane.tagnum = -1 ;
  G__WallDictLN_HWallHitSim.tagnum = -1 ;
  G__WallDictLN_HParamList.tagnum = -1 ;
  G__WallDictLN_HParCond.tagnum = -1 ;
  G__WallDictLN_HWallRefWinPar.tagnum = -1 ;
  G__WallDictLN_HSpecGeomPar.tagnum = -1 ;
  G__WallDictLN_HWallHitF.tagnum = -1 ;
  G__WallDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__WallDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__WallDictLN_HWallEventPlanePar.tagnum = -1 ;
  G__WallDictLN_HWallFiredCellsVA.tagnum = -1 ;
  G__WallDictLN_HWallEventPlaneF.tagnum = -1 ;
  G__WallDictLN_HWallOneHitF.tagnum = -1 ;
  G__WallDictLN_HWallHitFSim.tagnum = -1 ;
  G__WallDictLN_HTrbBaseUnpacker.tagnum = -1 ;
  G__WallDictLN_HWallTrbUnpacker.tagnum = -1 ;
  G__WallDictLN_HTrb2Unpacker.tagnum = -1 ;
  G__WallDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__WallDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__WallDictLN_HWallTrb2Lookup.tagnum = -1 ;
  G__WallDictLN_HWallTrb2Unpacker.tagnum = -1 ;
  G__WallDictLN_HWallTrb2LookupChan.tagnum = -1 ;
  G__WallDictLN_HWallTrb2LookupBoard.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableWallDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__WallDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TString);
   G__get_linked_tagnum_fwd(&G__WallDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__WallDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallDetector),sizeof(HWallDetector),-1,62720,"Forward Wall detector class",G__setup_memvarHWallDetector,G__setup_memfuncHWallDetector);
   G__get_linked_tagnum_fwd(&G__WallDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallTaskSet),sizeof(HWallTaskSet),-1,62720,"Set of tasks for the Forward Wall",G__setup_memvarHWallTaskSet,G__setup_memfuncHWallTaskSet);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HldUnpack);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HLocation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallLookup),sizeof(HWallLookup),-1,62720,"Lookup table for the unpacker of the Forward Wall",G__setup_memvarHWallLookup,G__setup_memfuncHWallLookup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallUnpacker),sizeof(HWallUnpacker),-1,29952,"Unpacker for Foward Wall data",G__setup_memvarHWallUnpacker,G__setup_memfuncHWallUnpacker);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HLocatedDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallRaw),sizeof(HWallRaw),-1,29952,"Raw data class of Forward Wall",G__setup_memvarHWallRaw,G__setup_memfuncHWallRaw);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallContFact),sizeof(HWallContFact),-1,62720,"Factory for parameter containers in libWall",G__setup_memvarHWallContFact,G__setup_memfuncHWallContFact);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HDetGeomPar);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallCalPar),sizeof(HWallCalPar),-1,62720,"Container for the WALL calibration parameters",G__setup_memvarHWallCalPar,G__setup_memfuncHWallCalPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallParRootFileIo),sizeof(HWallParRootFileIo),-1,62464,"Class for Forward WALL parameter I/O from ROOT file",G__setup_memvarHWallParRootFileIo,G__setup_memfuncHWallParRootFileIo);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallParAsciiFileIo),sizeof(HWallParAsciiFileIo),-1,62464,"Class for Forward Wall parameter I/O from Ascii files",G__setup_memvarHWallParAsciiFileIo,G__setup_memfuncHWallParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallLookupChan),sizeof(HWallLookupChan),-1,29952,"Channel level of the lookup table for the Forward Wall unpacker ",G__setup_memvarHWallLookupChan,G__setup_memfuncHWallLookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallLookupSlot),sizeof(HWallLookupSlot),-1,29952,"ADC/TDC level of  the lookup table for the Forward Wall unpacker",G__setup_memvarHWallLookupSlot,G__setup_memfuncHWallLookupSlot);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallLookupCrate),sizeof(HWallLookupCrate),-1,29952,"Crate level of the lookup table for the Forward Wall unpacker",G__setup_memvarHWallLookupCrate,G__setup_memfuncHWallLookupCrate);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallCal),sizeof(HWallCal),-1,29952,"WALL detector cal data",G__setup_memvarHWallCal,G__setup_memfuncHWallCal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallCalParCell),sizeof(HWallCalParCell),-1,29952,"Chan level of the Forward Wall calibration parameters ",G__setup_memvarHWallCalParCell,G__setup_memfuncHWallCalParCell);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallCalibrater),sizeof(HWallCalibrater),-1,62720,"Calibrater raw->cal for WALL data",G__setup_memvarHWallCalibrater,G__setup_memfuncHWallCalibrater);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallDigiPar),sizeof(HWallDigiPar),-1,62720,"Container for the WALL digitisation parameters",G__setup_memvarHWallDigiPar,G__setup_memfuncHWallDigiPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallGeomPar),sizeof(HWallGeomPar),-1,62720,"Container for the Wall geometry parameters",G__setup_memvarHWallGeomPar,G__setup_memfuncHWallGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallDigitizer),sizeof(HWallDigitizer),-1,62720,"Digitizer of WALL data.",G__setup_memvarHWallDigitizer,G__setup_memfuncHWallDigitizer);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallRawSim),sizeof(HWallRawSim),-1,29952,"simulated raw data level of Wall",G__setup_memvarHWallRawSim,G__setup_memfuncHWallRawSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallRawSimFilter),sizeof(HWallRawSimFilter),-1,29952,"Filter class for Wall digitizer",G__setup_memvarHWallRawSimFilter,G__setup_memfuncHWallRawSimFilter);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallOneHit),sizeof(HWallOneHit),-1,29952,"WALL detector calibrated data",G__setup_memvarHWallOneHit,G__setup_memfuncHWallOneHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallHit),sizeof(HWallHit),-1,29952,"WALL detector calibrated data",G__setup_memvarHWallHit,G__setup_memfuncHWallHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallEventPlane),sizeof(HWallEventPlane),-1,29952,"WALL eventplane",G__setup_memvarHWallEventPlane,G__setup_memfuncHWallEventPlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallHitSim),sizeof(HWallHitSim),-1,29952,"WALL detector calibrated data",G__setup_memvarHWallHitSim,G__setup_memfuncHWallHitSim);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HParCond);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallRefWinPar),sizeof(HWallRefWinPar),-1,62720,"Container for the WALL RefWin parameters",G__setup_memvarHWallRefWinPar,G__setup_memfuncHWallRefWinPar);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HSpecGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallHitF),sizeof(HWallHitF),-1,62720,"Calibrater for Wall hit data",G__setup_memvarHWallHitF,G__setup_memfuncHWallHitF);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TVectorTlEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallEventPlanePar),sizeof(HWallEventPlanePar),-1,62720,"Container for the WALL EventPlane parameters",G__setup_memvarHWallEventPlanePar,G__setup_memfuncHWallEventPlanePar);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HWallFiredCellsVA);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallEventPlaneF),sizeof(HWallEventPlaneF),-1,62720,"Reconstructor for eventplane",G__setup_memvarHWallEventPlaneF,G__setup_memfuncHWallEventPlaneF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallOneHitF),sizeof(HWallOneHitF),-1,62720,"Select one hit of 4 with ref. windows",G__setup_memvarHWallOneHitF,G__setup_memfuncHWallOneHitF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallHitFSim),sizeof(HWallHitFSim),-1,62720,"Calibrater for Wall hit data",G__setup_memvarHWallHitFSim,G__setup_memfuncHWallHitFSim);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HTrbBaseUnpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallTrbUnpacker),sizeof(HWallTrbUnpacker),-1,29952,"Unpacker for Foward Wall data",G__setup_memvarHWallTrbUnpacker,G__setup_memfuncHWallTrbUnpacker);
   G__get_linked_tagnum_fwd(&G__WallDictLN_HTrb2Unpacker);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__WallDictLN_TMatrixTBaselEdoublegR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallTrb2Lookup),sizeof(HWallTrb2Lookup),-1,62720,"Lookup table for the TRB2 unpacker of the Forward Wall",G__setup_memvarHWallTrb2Lookup,G__setup_memfuncHWallTrb2Lookup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallTrb2Unpacker),sizeof(HWallTrb2Unpacker),-1,29952,"Unpacker for Wall data",G__setup_memvarHWallTrb2Unpacker,G__setup_memfuncHWallTrb2Unpacker);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallTrb2LookupChan),sizeof(HWallTrb2LookupChan),-1,29952,"Channel level of the lookup table for the TRB2 unpacker of the Forward Wall",G__setup_memvarHWallTrb2LookupChan,G__setup_memfuncHWallTrb2LookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__WallDictLN_HWallTrb2LookupBoard),sizeof(HWallTrb2LookupBoard),-1,29952,"Board level of  the lookup table for the TRB2 unpacker of the Forward Wall",G__setup_memvarHWallTrb2LookupBoard,G__setup_memfuncHWallTrb2LookupBoard);
}
extern "C" void G__cpp_setupWallDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupWallDict()");
  G__set_cpp_environmentWallDict();
  G__cpp_setup_tagtableWallDict();

  G__cpp_setup_inheritanceWallDict();

  G__cpp_setup_typetableWallDict();

  G__cpp_setup_memvarWallDict();

  G__cpp_setup_memfuncWallDict();
  G__cpp_setup_globalWallDict();
  G__cpp_setup_funcWallDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncWallDict();
  return;
}
class G__cpp_setup_initWallDict {
  public:
    G__cpp_setup_initWallDict() { G__add_setup_func("WallDict",(G__incsetup)(&G__cpp_setupWallDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initWallDict() { G__remove_setup_func("WallDict"); }
};
G__cpp_setup_initWallDict G__cpp_setup_initializerWallDict;


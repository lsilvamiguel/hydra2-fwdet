//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:54:11 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIPionTrackerDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "PionTrackerDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HPionTrackerDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerDetector(void *p = 0);
   static void *newArray_HPionTrackerDetector(Long_t size, void *p);
   static void delete_HPionTrackerDetector(void *p);
   static void deleteArray_HPionTrackerDetector(void *p);
   static void destruct_HPionTrackerDetector(void *p);
   static void streamer_HPionTrackerDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerDetector*)
   {
      ::HPionTrackerDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerDetector", ::HPionTrackerDetector::Class_Version(), "././hpiontrackerdetector.h", 7,
                  typeid(::HPionTrackerDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerDetector) );
      instance.SetNew(&new_HPionTrackerDetector);
      instance.SetNewArray(&newArray_HPionTrackerDetector);
      instance.SetDelete(&delete_HPionTrackerDetector);
      instance.SetDeleteArray(&deleteArray_HPionTrackerDetector);
      instance.SetDestructor(&destruct_HPionTrackerDetector);
      instance.SetStreamerFunc(&streamer_HPionTrackerDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerDetector*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerRaw(void *p = 0);
   static void *newArray_HPionTrackerRaw(Long_t size, void *p);
   static void delete_HPionTrackerRaw(void *p);
   static void deleteArray_HPionTrackerRaw(void *p);
   static void destruct_HPionTrackerRaw(void *p);
   static void streamer_HPionTrackerRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerRaw*)
   {
      ::HPionTrackerRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerRaw", ::HPionTrackerRaw::Class_Version(), "././hpiontrackerraw.h", 7,
                  typeid(::HPionTrackerRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerRaw) );
      instance.SetNew(&new_HPionTrackerRaw);
      instance.SetNewArray(&newArray_HPionTrackerRaw);
      instance.SetDelete(&delete_HPionTrackerRaw);
      instance.SetDeleteArray(&deleteArray_HPionTrackerRaw);
      instance.SetDestructor(&destruct_HPionTrackerRaw);
      instance.SetStreamerFunc(&streamer_HPionTrackerRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerRaw*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerCal(void *p = 0);
   static void *newArray_HPionTrackerCal(Long_t size, void *p);
   static void delete_HPionTrackerCal(void *p);
   static void deleteArray_HPionTrackerCal(void *p);
   static void destruct_HPionTrackerCal(void *p);
   static void streamer_HPionTrackerCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerCal*)
   {
      ::HPionTrackerCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerCal", ::HPionTrackerCal::Class_Version(), "././hpiontrackercal.h", 7,
                  typeid(::HPionTrackerCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerCal::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerCal) );
      instance.SetNew(&new_HPionTrackerCal);
      instance.SetNewArray(&newArray_HPionTrackerCal);
      instance.SetDelete(&delete_HPionTrackerCal);
      instance.SetDeleteArray(&deleteArray_HPionTrackerCal);
      instance.SetDestructor(&destruct_HPionTrackerCal);
      instance.SetStreamerFunc(&streamer_HPionTrackerCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerCal*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerHit(void *p = 0);
   static void *newArray_HPionTrackerHit(Long_t size, void *p);
   static void delete_HPionTrackerHit(void *p);
   static void deleteArray_HPionTrackerHit(void *p);
   static void destruct_HPionTrackerHit(void *p);
   static void streamer_HPionTrackerHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerHit*)
   {
      ::HPionTrackerHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerHit", ::HPionTrackerHit::Class_Version(), "././hpiontrackerhit.h", 7,
                  typeid(::HPionTrackerHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerHit::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerHit) );
      instance.SetNew(&new_HPionTrackerHit);
      instance.SetNewArray(&newArray_HPionTrackerHit);
      instance.SetDelete(&delete_HPionTrackerHit);
      instance.SetDeleteArray(&deleteArray_HPionTrackerHit);
      instance.SetDestructor(&destruct_HPionTrackerHit);
      instance.SetStreamerFunc(&streamer_HPionTrackerHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerHit*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTrack(void *p = 0);
   static void *newArray_HPionTrackerTrack(Long_t size, void *p);
   static void delete_HPionTrackerTrack(void *p);
   static void deleteArray_HPionTrackerTrack(void *p);
   static void destruct_HPionTrackerTrack(void *p);
   static void streamer_HPionTrackerTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTrack*)
   {
      ::HPionTrackerTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTrack", ::HPionTrackerTrack::Class_Version(), "././hpiontrackertrack.h", 7,
                  typeid(::HPionTrackerTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTrack::Dictionary, isa_proxy, 1,
                  sizeof(::HPionTrackerTrack) );
      instance.SetNew(&new_HPionTrackerTrack);
      instance.SetNewArray(&newArray_HPionTrackerTrack);
      instance.SetDelete(&delete_HPionTrackerTrack);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTrack);
      instance.SetDestructor(&destruct_HPionTrackerTrack);
      instance.SetStreamerFunc(&streamer_HPionTrackerTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTrack*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTaskSet(void *p = 0);
   static void *newArray_HPionTrackerTaskSet(Long_t size, void *p);
   static void delete_HPionTrackerTaskSet(void *p);
   static void deleteArray_HPionTrackerTaskSet(void *p);
   static void destruct_HPionTrackerTaskSet(void *p);
   static void streamer_HPionTrackerTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTaskSet*)
   {
      ::HPionTrackerTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTaskSet", ::HPionTrackerTaskSet::Class_Version(), "././hpiontrackertaskset.h", 6,
                  typeid(::HPionTrackerTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerTaskSet) );
      instance.SetNew(&new_HPionTrackerTaskSet);
      instance.SetNewArray(&newArray_HPionTrackerTaskSet);
      instance.SetDelete(&delete_HPionTrackerTaskSet);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTaskSet);
      instance.SetDestructor(&destruct_HPionTrackerTaskSet);
      instance.SetStreamerFunc(&streamer_HPionTrackerTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTaskSet*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTrb3Lookup_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTrb3Lookup(void *p = 0);
   static void *newArray_HPionTrackerTrb3Lookup(Long_t size, void *p);
   static void delete_HPionTrackerTrb3Lookup(void *p);
   static void deleteArray_HPionTrackerTrb3Lookup(void *p);
   static void destruct_HPionTrackerTrb3Lookup(void *p);
   static void streamer_HPionTrackerTrb3Lookup(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTrb3Lookup*)
   {
      ::HPionTrackerTrb3Lookup *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTrb3Lookup >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTrb3Lookup", ::HPionTrackerTrb3Lookup::Class_Version(), "././hpiontrackertrb3lookup.h", 72,
                  typeid(::HPionTrackerTrb3Lookup), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTrb3Lookup::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerTrb3Lookup) );
      instance.SetNew(&new_HPionTrackerTrb3Lookup);
      instance.SetNewArray(&newArray_HPionTrackerTrb3Lookup);
      instance.SetDelete(&delete_HPionTrackerTrb3Lookup);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTrb3Lookup);
      instance.SetDestructor(&destruct_HPionTrackerTrb3Lookup);
      instance.SetStreamerFunc(&streamer_HPionTrackerTrb3Lookup);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTrb3Lookup*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTrb3Lookup*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTrb3Lookup*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTrb3LookupBoard_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTrb3LookupBoard(void *p = 0);
   static void *newArray_HPionTrackerTrb3LookupBoard(Long_t size, void *p);
   static void delete_HPionTrackerTrb3LookupBoard(void *p);
   static void deleteArray_HPionTrackerTrb3LookupBoard(void *p);
   static void destruct_HPionTrackerTrb3LookupBoard(void *p);
   static void streamer_HPionTrackerTrb3LookupBoard(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTrb3LookupBoard*)
   {
      ::HPionTrackerTrb3LookupBoard *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTrb3LookupBoard >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTrb3LookupBoard", ::HPionTrackerTrb3LookupBoard::Class_Version(), "././hpiontrackertrb3lookup.h", 49,
                  typeid(::HPionTrackerTrb3LookupBoard), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTrb3LookupBoard::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerTrb3LookupBoard) );
      instance.SetNew(&new_HPionTrackerTrb3LookupBoard);
      instance.SetNewArray(&newArray_HPionTrackerTrb3LookupBoard);
      instance.SetDelete(&delete_HPionTrackerTrb3LookupBoard);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTrb3LookupBoard);
      instance.SetDestructor(&destruct_HPionTrackerTrb3LookupBoard);
      instance.SetStreamerFunc(&streamer_HPionTrackerTrb3LookupBoard);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTrb3LookupBoard*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTrb3LookupBoard*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupBoard*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTrb3Unpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTrb3Unpacker(void *p = 0);
   static void *newArray_HPionTrackerTrb3Unpacker(Long_t size, void *p);
   static void delete_HPionTrackerTrb3Unpacker(void *p);
   static void deleteArray_HPionTrackerTrb3Unpacker(void *p);
   static void destruct_HPionTrackerTrb3Unpacker(void *p);
   static void streamer_HPionTrackerTrb3Unpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTrb3Unpacker*)
   {
      ::HPionTrackerTrb3Unpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTrb3Unpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTrb3Unpacker", ::HPionTrackerTrb3Unpacker::Class_Version(), "././hpiontrackertrb3unpacker.h", 51,
                  typeid(::HPionTrackerTrb3Unpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTrb3Unpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerTrb3Unpacker) );
      instance.SetNew(&new_HPionTrackerTrb3Unpacker);
      instance.SetNewArray(&newArray_HPionTrackerTrb3Unpacker);
      instance.SetDelete(&delete_HPionTrackerTrb3Unpacker);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTrb3Unpacker);
      instance.SetDestructor(&destruct_HPionTrackerTrb3Unpacker);
      instance.SetStreamerFunc(&streamer_HPionTrackerTrb3Unpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTrb3Unpacker*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTrb3Unpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTrb3Unpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerCalRunPars_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerCalRunPars(void *p = 0);
   static void *newArray_HPionTrackerCalRunPars(Long_t size, void *p);
   static void delete_HPionTrackerCalRunPars(void *p);
   static void deleteArray_HPionTrackerCalRunPars(void *p);
   static void destruct_HPionTrackerCalRunPars(void *p);
   static void streamer_HPionTrackerCalRunPars(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerCalRunPars*)
   {
      ::HPionTrackerCalRunPars *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerCalRunPars >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerCalRunPars", ::HPionTrackerCalRunPars::Class_Version(), "././hpiontrackercalrunpar.h", 23,
                  typeid(::HPionTrackerCalRunPars), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerCalRunPars::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerCalRunPars) );
      instance.SetNew(&new_HPionTrackerCalRunPars);
      instance.SetNewArray(&newArray_HPionTrackerCalRunPars);
      instance.SetDelete(&delete_HPionTrackerCalRunPars);
      instance.SetDeleteArray(&deleteArray_HPionTrackerCalRunPars);
      instance.SetDestructor(&destruct_HPionTrackerCalRunPars);
      instance.SetStreamerFunc(&streamer_HPionTrackerCalRunPars);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerCalRunPars*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerCalRunPars*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerCalRunPars*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerCalRunPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerCalRunPar(void *p = 0);
   static void *newArray_HPionTrackerCalRunPar(Long_t size, void *p);
   static void delete_HPionTrackerCalRunPar(void *p);
   static void deleteArray_HPionTrackerCalRunPar(void *p);
   static void destruct_HPionTrackerCalRunPar(void *p);
   static void streamer_HPionTrackerCalRunPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerCalRunPar*)
   {
      ::HPionTrackerCalRunPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerCalRunPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerCalRunPar", ::HPionTrackerCalRunPar::Class_Version(), "././hpiontrackercalrunpar.h", 72,
                  typeid(::HPionTrackerCalRunPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerCalRunPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerCalRunPar) );
      instance.SetNew(&new_HPionTrackerCalRunPar);
      instance.SetNewArray(&newArray_HPionTrackerCalRunPar);
      instance.SetDelete(&delete_HPionTrackerCalRunPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerCalRunPar);
      instance.SetDestructor(&destruct_HPionTrackerCalRunPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerCalRunPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerCalRunPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerCalRunPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerCalRunPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerCalPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerCalPar(void *p = 0);
   static void *newArray_HPionTrackerCalPar(Long_t size, void *p);
   static void delete_HPionTrackerCalPar(void *p);
   static void deleteArray_HPionTrackerCalPar(void *p);
   static void destruct_HPionTrackerCalPar(void *p);
   static void streamer_HPionTrackerCalPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerCalPar*)
   {
      ::HPionTrackerCalPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerCalPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerCalPar", ::HPionTrackerCalPar::Class_Version(), "././hpiontrackercalpar.h", 53,
                  typeid(::HPionTrackerCalPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerCalPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerCalPar) );
      instance.SetNew(&new_HPionTrackerCalPar);
      instance.SetNewArray(&newArray_HPionTrackerCalPar);
      instance.SetDelete(&delete_HPionTrackerCalPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerCalPar);
      instance.SetDestructor(&destruct_HPionTrackerCalPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerCalPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerCalPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerCalPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerCalPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerHitFPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerHitFPar(void *p = 0);
   static void *newArray_HPionTrackerHitFPar(Long_t size, void *p);
   static void delete_HPionTrackerHitFPar(void *p);
   static void deleteArray_HPionTrackerHitFPar(void *p);
   static void destruct_HPionTrackerHitFPar(void *p);
   static void streamer_HPionTrackerHitFPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerHitFPar*)
   {
      ::HPionTrackerHitFPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerHitFPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerHitFPar", ::HPionTrackerHitFPar::Class_Version(), "././hpiontrackerhitfpar.h", 9,
                  typeid(::HPionTrackerHitFPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerHitFPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerHitFPar) );
      instance.SetNew(&new_HPionTrackerHitFPar);
      instance.SetNewArray(&newArray_HPionTrackerHitFPar);
      instance.SetDelete(&delete_HPionTrackerHitFPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerHitFPar);
      instance.SetDestructor(&destruct_HPionTrackerHitFPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerHitFPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerHitFPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerHitFPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerHitFPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerCalibrater_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerCalibrater(void *p = 0);
   static void *newArray_HPionTrackerCalibrater(Long_t size, void *p);
   static void delete_HPionTrackerCalibrater(void *p);
   static void deleteArray_HPionTrackerCalibrater(void *p);
   static void destruct_HPionTrackerCalibrater(void *p);
   static void streamer_HPionTrackerCalibrater(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerCalibrater*)
   {
      ::HPionTrackerCalibrater *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerCalibrater >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerCalibrater", ::HPionTrackerCalibrater::Class_Version(), "././hpiontrackercalibrater.h", 13,
                  typeid(::HPionTrackerCalibrater), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerCalibrater::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerCalibrater) );
      instance.SetNew(&new_HPionTrackerCalibrater);
      instance.SetNewArray(&newArray_HPionTrackerCalibrater);
      instance.SetDelete(&delete_HPionTrackerCalibrater);
      instance.SetDeleteArray(&deleteArray_HPionTrackerCalibrater);
      instance.SetDestructor(&destruct_HPionTrackerCalibrater);
      instance.SetStreamerFunc(&streamer_HPionTrackerCalibrater);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerCalibrater*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerCalibrater*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerCalibrater*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerGeomPar(void *p = 0);
   static void *newArray_HPionTrackerGeomPar(Long_t size, void *p);
   static void delete_HPionTrackerGeomPar(void *p);
   static void deleteArray_HPionTrackerGeomPar(void *p);
   static void destruct_HPionTrackerGeomPar(void *p);
   static void streamer_HPionTrackerGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerGeomPar*)
   {
      ::HPionTrackerGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerGeomPar", ::HPionTrackerGeomPar::Class_Version(), "././hpiontrackergeompar.h", 30,
                  typeid(::HPionTrackerGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerGeomPar) );
      instance.SetNew(&new_HPionTrackerGeomPar);
      instance.SetNewArray(&newArray_HPionTrackerGeomPar);
      instance.SetDelete(&delete_HPionTrackerGeomPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerGeomPar);
      instance.SetDestructor(&destruct_HPionTrackerGeomPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerGeomPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerHitF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerHitF(void *p = 0);
   static void *newArray_HPionTrackerHitF(Long_t size, void *p);
   static void delete_HPionTrackerHitF(void *p);
   static void deleteArray_HPionTrackerHitF(void *p);
   static void destruct_HPionTrackerHitF(void *p);
   static void streamer_HPionTrackerHitF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerHitF*)
   {
      ::HPionTrackerHitF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerHitF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerHitF", ::HPionTrackerHitF::Class_Version(), "././hpiontrackerhitf.h", 32,
                  typeid(::HPionTrackerHitF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerHitF::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerHitF) );
      instance.SetNew(&new_HPionTrackerHitF);
      instance.SetNewArray(&newArray_HPionTrackerHitF);
      instance.SetDelete(&delete_HPionTrackerHitF);
      instance.SetDeleteArray(&deleteArray_HPionTrackerHitF);
      instance.SetDestructor(&destruct_HPionTrackerHitF);
      instance.SetStreamerFunc(&streamer_HPionTrackerHitF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerHitF*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerHitF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerHitF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerMomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerMomPar(void *p = 0);
   static void *newArray_HPionTrackerMomPar(Long_t size, void *p);
   static void delete_HPionTrackerMomPar(void *p);
   static void deleteArray_HPionTrackerMomPar(void *p);
   static void destruct_HPionTrackerMomPar(void *p);
   static void streamer_HPionTrackerMomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerMomPar*)
   {
      ::HPionTrackerMomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerMomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerMomPar", ::HPionTrackerMomPar::Class_Version(), "././hpiontrackermompar.h", 9,
                  typeid(::HPionTrackerMomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerMomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerMomPar) );
      instance.SetNew(&new_HPionTrackerMomPar);
      instance.SetNewArray(&newArray_HPionTrackerMomPar);
      instance.SetDelete(&delete_HPionTrackerMomPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerMomPar);
      instance.SetDestructor(&destruct_HPionTrackerMomPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerMomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerMomPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerMomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerMomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerMomRunPars_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerMomRunPars(void *p = 0);
   static void *newArray_HPionTrackerMomRunPars(Long_t size, void *p);
   static void delete_HPionTrackerMomRunPars(void *p);
   static void deleteArray_HPionTrackerMomRunPars(void *p);
   static void destruct_HPionTrackerMomRunPars(void *p);
   static void streamer_HPionTrackerMomRunPars(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerMomRunPars*)
   {
      ::HPionTrackerMomRunPars *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerMomRunPars >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerMomRunPars", ::HPionTrackerMomRunPars::Class_Version(), "././hpiontrackermomrunpar.h", 23,
                  typeid(::HPionTrackerMomRunPars), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerMomRunPars::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerMomRunPars) );
      instance.SetNew(&new_HPionTrackerMomRunPars);
      instance.SetNewArray(&newArray_HPionTrackerMomRunPars);
      instance.SetDelete(&delete_HPionTrackerMomRunPars);
      instance.SetDeleteArray(&deleteArray_HPionTrackerMomRunPars);
      instance.SetDestructor(&destruct_HPionTrackerMomRunPars);
      instance.SetStreamerFunc(&streamer_HPionTrackerMomRunPars);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerMomRunPars*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerMomRunPars*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerMomRunPars*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerMomRunPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerMomRunPar(void *p = 0);
   static void *newArray_HPionTrackerMomRunPar(Long_t size, void *p);
   static void delete_HPionTrackerMomRunPar(void *p);
   static void deleteArray_HPionTrackerMomRunPar(void *p);
   static void destruct_HPionTrackerMomRunPar(void *p);
   static void streamer_HPionTrackerMomRunPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerMomRunPar*)
   {
      ::HPionTrackerMomRunPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerMomRunPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerMomRunPar", ::HPionTrackerMomRunPar::Class_Version(), "././hpiontrackermomrunpar.h", 72,
                  typeid(::HPionTrackerMomRunPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerMomRunPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerMomRunPar) );
      instance.SetNew(&new_HPionTrackerMomRunPar);
      instance.SetNewArray(&newArray_HPionTrackerMomRunPar);
      instance.SetDelete(&delete_HPionTrackerMomRunPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerMomRunPar);
      instance.SetDestructor(&destruct_HPionTrackerMomRunPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerMomRunPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerMomRunPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerMomRunPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerMomRunPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTrackFPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTrackFPar(void *p = 0);
   static void *newArray_HPionTrackerTrackFPar(Long_t size, void *p);
   static void delete_HPionTrackerTrackFPar(void *p);
   static void deleteArray_HPionTrackerTrackFPar(void *p);
   static void destruct_HPionTrackerTrackFPar(void *p);
   static void streamer_HPionTrackerTrackFPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTrackFPar*)
   {
      ::HPionTrackerTrackFPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTrackFPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTrackFPar", ::HPionTrackerTrackFPar::Class_Version(), "././hpiontrackertrackfpar.h", 9,
                  typeid(::HPionTrackerTrackFPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTrackFPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerTrackFPar) );
      instance.SetNew(&new_HPionTrackerTrackFPar);
      instance.SetNewArray(&newArray_HPionTrackerTrackFPar);
      instance.SetDelete(&delete_HPionTrackerTrackFPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTrackFPar);
      instance.SetDestructor(&destruct_HPionTrackerTrackFPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerTrackFPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTrackFPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTrackFPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTrackFPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerBeamPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerBeamPar(void *p = 0);
   static void *newArray_HPionTrackerBeamPar(Long_t size, void *p);
   static void delete_HPionTrackerBeamPar(void *p);
   static void deleteArray_HPionTrackerBeamPar(void *p);
   static void destruct_HPionTrackerBeamPar(void *p);
   static void streamer_HPionTrackerBeamPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerBeamPar*)
   {
      ::HPionTrackerBeamPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerBeamPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerBeamPar", ::HPionTrackerBeamPar::Class_Version(), "././hpiontrackerbeampar.h", 9,
                  typeid(::HPionTrackerBeamPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerBeamPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerBeamPar) );
      instance.SetNew(&new_HPionTrackerBeamPar);
      instance.SetNewArray(&newArray_HPionTrackerBeamPar);
      instance.SetDelete(&delete_HPionTrackerBeamPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerBeamPar);
      instance.SetDestructor(&destruct_HPionTrackerBeamPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerBeamPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerBeamPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerBeamPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerBeamPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTrackF_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTrackF(void *p = 0);
   static void *newArray_HPionTrackerTrackF(Long_t size, void *p);
   static void delete_HPionTrackerTrackF(void *p);
   static void deleteArray_HPionTrackerTrackF(void *p);
   static void destruct_HPionTrackerTrackF(void *p);
   static void streamer_HPionTrackerTrackF(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTrackF*)
   {
      ::HPionTrackerTrackF *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTrackF >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTrackF", ::HPionTrackerTrackF::Class_Version(), "././hpiontrackertrackf.h", 41,
                  typeid(::HPionTrackerTrackF), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTrackF::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerTrackF) );
      instance.SetNew(&new_HPionTrackerTrackF);
      instance.SetNewArray(&newArray_HPionTrackerTrackF);
      instance.SetDelete(&delete_HPionTrackerTrackF);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTrackF);
      instance.SetDestructor(&destruct_HPionTrackerTrackF);
      instance.SetStreamerFunc(&streamer_HPionTrackerTrackF);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTrackF*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTrackF*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTrackF*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerContFact(void *p = 0);
   static void *newArray_HPionTrackerContFact(Long_t size, void *p);
   static void delete_HPionTrackerContFact(void *p);
   static void deleteArray_HPionTrackerContFact(void *p);
   static void destruct_HPionTrackerContFact(void *p);
   static void streamer_HPionTrackerContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerContFact*)
   {
      ::HPionTrackerContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerContFact", ::HPionTrackerContFact::Class_Version(), "././hpiontrackercontfact.h", 9,
                  typeid(::HPionTrackerContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerContFact) );
      instance.SetNew(&new_HPionTrackerContFact);
      instance.SetNewArray(&newArray_HPionTrackerContFact);
      instance.SetDelete(&delete_HPionTrackerContFact);
      instance.SetDeleteArray(&deleteArray_HPionTrackerContFact);
      instance.SetDestructor(&destruct_HPionTrackerContFact);
      instance.SetStreamerFunc(&streamer_HPionTrackerContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerContFact*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HPionTrackerParAsciiFileIo(void *p);
   static void deleteArray_HPionTrackerParAsciiFileIo(void *p);
   static void destruct_HPionTrackerParAsciiFileIo(void *p);
   static void streamer_HPionTrackerParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerParAsciiFileIo*)
   {
      ::HPionTrackerParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerParAsciiFileIo", ::HPionTrackerParAsciiFileIo::Class_Version(), "././hpiontrackerparasciifileio.h", 9,
                  typeid(::HPionTrackerParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerParAsciiFileIo) );
      instance.SetDelete(&delete_HPionTrackerParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HPionTrackerParAsciiFileIo);
      instance.SetDestructor(&destruct_HPionTrackerParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HPionTrackerParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HPionTrackerParRootFileIo(void *p);
   static void deleteArray_HPionTrackerParRootFileIo(void *p);
   static void destruct_HPionTrackerParRootFileIo(void *p);
   static void streamer_HPionTrackerParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerParRootFileIo*)
   {
      ::HPionTrackerParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerParRootFileIo", ::HPionTrackerParRootFileIo::Class_Version(), "././hpiontrackerparrootfileio.h", 10,
                  typeid(::HPionTrackerParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerParRootFileIo) );
      instance.SetDelete(&delete_HPionTrackerParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HPionTrackerParRootFileIo);
      instance.SetDestructor(&destruct_HPionTrackerParRootFileIo);
      instance.SetStreamerFunc(&streamer_HPionTrackerParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerTrb3LookupChan_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerTrb3LookupChan(void *p = 0);
   static void *newArray_HPionTrackerTrb3LookupChan(Long_t size, void *p);
   static void delete_HPionTrackerTrb3LookupChan(void *p);
   static void deleteArray_HPionTrackerTrb3LookupChan(void *p);
   static void destruct_HPionTrackerTrb3LookupChan(void *p);
   static void streamer_HPionTrackerTrb3LookupChan(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerTrb3LookupChan*)
   {
      ::HPionTrackerTrb3LookupChan *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerTrb3LookupChan >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerTrb3LookupChan", ::HPionTrackerTrb3LookupChan::Class_Version(), "././hpiontrackertrb3lookup.h", 11,
                  typeid(::HPionTrackerTrb3LookupChan), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerTrb3LookupChan::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerTrb3LookupChan) );
      instance.SetNew(&new_HPionTrackerTrb3LookupChan);
      instance.SetNewArray(&newArray_HPionTrackerTrb3LookupChan);
      instance.SetDelete(&delete_HPionTrackerTrb3LookupChan);
      instance.SetDeleteArray(&deleteArray_HPionTrackerTrb3LookupChan);
      instance.SetDestructor(&destruct_HPionTrackerTrb3LookupChan);
      instance.SetStreamerFunc(&streamer_HPionTrackerTrb3LookupChan);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerTrb3LookupChan*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerTrb3LookupChan*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupChan*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerCalParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerCalParCell(void *p = 0);
   static void *newArray_HPionTrackerCalParCell(Long_t size, void *p);
   static void delete_HPionTrackerCalParCell(void *p);
   static void deleteArray_HPionTrackerCalParCell(void *p);
   static void destruct_HPionTrackerCalParCell(void *p);
   static void streamer_HPionTrackerCalParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerCalParCell*)
   {
      ::HPionTrackerCalParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerCalParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerCalParCell", ::HPionTrackerCalParCell::Class_Version(), "././hpiontrackercalpar.h", 8,
                  typeid(::HPionTrackerCalParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerCalParCell::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerCalParCell) );
      instance.SetNew(&new_HPionTrackerCalParCell);
      instance.SetNewArray(&newArray_HPionTrackerCalParCell);
      instance.SetDelete(&delete_HPionTrackerCalParCell);
      instance.SetDeleteArray(&deleteArray_HPionTrackerCalParCell);
      instance.SetDestructor(&destruct_HPionTrackerCalParCell);
      instance.SetStreamerFunc(&streamer_HPionTrackerCalParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerCalParCell*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerCalParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerCalParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerCalParMod_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerCalParMod(void *p = 0);
   static void *newArray_HPionTrackerCalParMod(Long_t size, void *p);
   static void delete_HPionTrackerCalParMod(void *p);
   static void deleteArray_HPionTrackerCalParMod(void *p);
   static void destruct_HPionTrackerCalParMod(void *p);
   static void streamer_HPionTrackerCalParMod(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerCalParMod*)
   {
      ::HPionTrackerCalParMod *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerCalParMod >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerCalParMod", ::HPionTrackerCalParMod::Class_Version(), "././hpiontrackercalpar.h", 39,
                  typeid(::HPionTrackerCalParMod), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerCalParMod::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerCalParMod) );
      instance.SetNew(&new_HPionTrackerCalParMod);
      instance.SetNewArray(&newArray_HPionTrackerCalParMod);
      instance.SetDelete(&delete_HPionTrackerCalParMod);
      instance.SetDeleteArray(&deleteArray_HPionTrackerCalParMod);
      instance.SetDestructor(&destruct_HPionTrackerCalParMod);
      instance.SetStreamerFunc(&streamer_HPionTrackerCalParMod);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerCalParMod*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerCalParMod*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerCalParMod*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HBeamElement_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HBeamElement(void *p = 0);
   static void *newArray_HBeamElement(Long_t size, void *p);
   static void delete_HBeamElement(void *p);
   static void deleteArray_HBeamElement(void *p);
   static void destruct_HBeamElement(void *p);
   static void streamer_HBeamElement(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HBeamElement*)
   {
      ::HBeamElement *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HBeamElement >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HBeamElement", ::HBeamElement::Class_Version(), "././HBeam.h", 74,
                  typeid(::HBeamElement), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HBeamElement::Dictionary, isa_proxy, 0,
                  sizeof(::HBeamElement) );
      instance.SetNew(&new_HBeamElement);
      instance.SetNewArray(&newArray_HBeamElement);
      instance.SetDelete(&delete_HBeamElement);
      instance.SetDeleteArray(&deleteArray_HBeamElement);
      instance.SetDestructor(&destruct_HBeamElement);
      instance.SetStreamerFunc(&streamer_HBeamElement);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HBeamElement*)
   {
      return GenerateInitInstanceLocal((::HBeamElement*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HBeamElement*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HBeamParticle_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HBeamParticle(void *p = 0);
   static void *newArray_HBeamParticle(Long_t size, void *p);
   static void delete_HBeamParticle(void *p);
   static void deleteArray_HBeamParticle(void *p);
   static void destruct_HBeamParticle(void *p);
   static void streamer_HBeamParticle(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HBeamParticle*)
   {
      ::HBeamParticle *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HBeamParticle >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HBeamParticle", ::HBeamParticle::Class_Version(), "././HBeam.h", 252,
                  typeid(::HBeamParticle), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HBeamParticle::Dictionary, isa_proxy, 0,
                  sizeof(::HBeamParticle) );
      instance.SetNew(&new_HBeamParticle);
      instance.SetNewArray(&newArray_HBeamParticle);
      instance.SetDelete(&delete_HBeamParticle);
      instance.SetDeleteArray(&deleteArray_HBeamParticle);
      instance.SetDestructor(&destruct_HBeamParticle);
      instance.SetStreamerFunc(&streamer_HBeamParticle);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HBeamParticle*)
   {
      return GenerateInitInstanceLocal((::HBeamParticle*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HBeamParticle*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HBeam_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HBeam(void *p = 0);
   static void *newArray_HBeam(Long_t size, void *p);
   static void delete_HBeam(void *p);
   static void deleteArray_HBeam(void *p);
   static void destruct_HBeam(void *p);
   static void streamer_HBeam(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HBeam*)
   {
      ::HBeam *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HBeam >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HBeam", ::HBeam::Class_Version(), "././HBeam.h", 313,
                  typeid(::HBeam), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HBeam::Dictionary, isa_proxy, 0,
                  sizeof(::HBeam) );
      instance.SetNew(&new_HBeam);
      instance.SetNewArray(&newArray_HBeam);
      instance.SetDelete(&delete_HBeam);
      instance.SetDeleteArray(&deleteArray_HBeam);
      instance.SetDestructor(&destruct_HBeam);
      instance.SetStreamerFunc(&streamer_HBeam);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HBeam*)
   {
      return GenerateInitInstanceLocal((::HBeam*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HBeam*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HPionTrackerDetGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HPionTrackerDetGeomPar(void *p = 0);
   static void *newArray_HPionTrackerDetGeomPar(Long_t size, void *p);
   static void delete_HPionTrackerDetGeomPar(void *p);
   static void deleteArray_HPionTrackerDetGeomPar(void *p);
   static void destruct_HPionTrackerDetGeomPar(void *p);
   static void streamer_HPionTrackerDetGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HPionTrackerDetGeomPar*)
   {
      ::HPionTrackerDetGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HPionTrackerDetGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HPionTrackerDetGeomPar", ::HPionTrackerDetGeomPar::Class_Version(), "././hpiontrackergeompar.h", 8,
                  typeid(::HPionTrackerDetGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HPionTrackerDetGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HPionTrackerDetGeomPar) );
      instance.SetNew(&new_HPionTrackerDetGeomPar);
      instance.SetNewArray(&newArray_HPionTrackerDetGeomPar);
      instance.SetDelete(&delete_HPionTrackerDetGeomPar);
      instance.SetDeleteArray(&deleteArray_HPionTrackerDetGeomPar);
      instance.SetDestructor(&destruct_HPionTrackerDetGeomPar);
      instance.SetStreamerFunc(&streamer_HPionTrackerDetGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HPionTrackerDetGeomPar*)
   {
      return GenerateInitInstanceLocal((::HPionTrackerDetGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HPionTrackerDetGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerDetector::Class_Name()
{
   return "HPionTrackerDetector";
}

//______________________________________________________________________________
const char *HPionTrackerDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerRaw::Class_Name()
{
   return "HPionTrackerRaw";
}

//______________________________________________________________________________
const char *HPionTrackerRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerCal::Class_Name()
{
   return "HPionTrackerCal";
}

//______________________________________________________________________________
const char *HPionTrackerCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerHit::Class_Name()
{
   return "HPionTrackerHit";
}

//______________________________________________________________________________
const char *HPionTrackerHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTrack::Class_Name()
{
   return "HPionTrackerTrack";
}

//______________________________________________________________________________
const char *HPionTrackerTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTaskSet::Class_Name()
{
   return "HPionTrackerTaskSet";
}

//______________________________________________________________________________
const char *HPionTrackerTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTrb3Lookup::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTrb3Lookup::Class_Name()
{
   return "HPionTrackerTrb3Lookup";
}

//______________________________________________________________________________
const char *HPionTrackerTrb3Lookup::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Lookup*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTrb3Lookup::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Lookup*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTrb3Lookup::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Lookup*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTrb3Lookup::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Lookup*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTrb3LookupBoard::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTrb3LookupBoard::Class_Name()
{
   return "HPionTrackerTrb3LookupBoard";
}

//______________________________________________________________________________
const char *HPionTrackerTrb3LookupBoard::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupBoard*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTrb3LookupBoard::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupBoard*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTrb3LookupBoard::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupBoard*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTrb3LookupBoard::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupBoard*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTrb3Unpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTrb3Unpacker::Class_Name()
{
   return "HPionTrackerTrb3Unpacker";
}

//______________________________________________________________________________
const char *HPionTrackerTrb3Unpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Unpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTrb3Unpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Unpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTrb3Unpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Unpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTrb3Unpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3Unpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerCalRunPars::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerCalRunPars::Class_Name()
{
   return "HPionTrackerCalRunPars";
}

//______________________________________________________________________________
const char *HPionTrackerCalRunPars::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPars*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerCalRunPars::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPars*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerCalRunPars::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPars*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerCalRunPars::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPars*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerCalRunPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerCalRunPar::Class_Name()
{
   return "HPionTrackerCalRunPar";
}

//______________________________________________________________________________
const char *HPionTrackerCalRunPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerCalRunPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerCalRunPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerCalRunPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalRunPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerCalPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerCalPar::Class_Name()
{
   return "HPionTrackerCalPar";
}

//______________________________________________________________________________
const char *HPionTrackerCalPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerCalPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerCalPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerCalPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerHitFPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerHitFPar::Class_Name()
{
   return "HPionTrackerHitFPar";
}

//______________________________________________________________________________
const char *HPionTrackerHitFPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitFPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerHitFPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitFPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerHitFPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitFPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerHitFPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitFPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerCalibrater::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerCalibrater::Class_Name()
{
   return "HPionTrackerCalibrater";
}

//______________________________________________________________________________
const char *HPionTrackerCalibrater::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalibrater*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerCalibrater::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalibrater*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerCalibrater::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalibrater*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerCalibrater::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalibrater*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerGeomPar::Class_Name()
{
   return "HPionTrackerGeomPar";
}

//______________________________________________________________________________
const char *HPionTrackerGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerHitF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerHitF::Class_Name()
{
   return "HPionTrackerHitF";
}

//______________________________________________________________________________
const char *HPionTrackerHitF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerHitF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerHitF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerHitF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerHitF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerMomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerMomPar::Class_Name()
{
   return "HPionTrackerMomPar";
}

//______________________________________________________________________________
const char *HPionTrackerMomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerMomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerMomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerMomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerMomRunPars::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerMomRunPars::Class_Name()
{
   return "HPionTrackerMomRunPars";
}

//______________________________________________________________________________
const char *HPionTrackerMomRunPars::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPars*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerMomRunPars::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPars*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerMomRunPars::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPars*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerMomRunPars::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPars*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerMomRunPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerMomRunPar::Class_Name()
{
   return "HPionTrackerMomRunPar";
}

//______________________________________________________________________________
const char *HPionTrackerMomRunPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerMomRunPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerMomRunPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerMomRunPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerMomRunPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTrackFPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTrackFPar::Class_Name()
{
   return "HPionTrackerTrackFPar";
}

//______________________________________________________________________________
const char *HPionTrackerTrackFPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackFPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTrackFPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackFPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTrackFPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackFPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTrackFPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackFPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerBeamPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerBeamPar::Class_Name()
{
   return "HPionTrackerBeamPar";
}

//______________________________________________________________________________
const char *HPionTrackerBeamPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerBeamPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerBeamPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerBeamPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerBeamPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerBeamPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerBeamPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerBeamPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTrackF::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTrackF::Class_Name()
{
   return "HPionTrackerTrackF";
}

//______________________________________________________________________________
const char *HPionTrackerTrackF::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackF*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTrackF::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackF*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTrackF::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackF*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTrackF::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrackF*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerContFact::Class_Name()
{
   return "HPionTrackerContFact";
}

//______________________________________________________________________________
const char *HPionTrackerContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerParAsciiFileIo::Class_Name()
{
   return "HPionTrackerParAsciiFileIo";
}

//______________________________________________________________________________
const char *HPionTrackerParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerParRootFileIo::Class_Name()
{
   return "HPionTrackerParRootFileIo";
}

//______________________________________________________________________________
const char *HPionTrackerParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerTrb3LookupChan::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerTrb3LookupChan::Class_Name()
{
   return "HPionTrackerTrb3LookupChan";
}

//______________________________________________________________________________
const char *HPionTrackerTrb3LookupChan::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupChan*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerTrb3LookupChan::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupChan*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerTrb3LookupChan::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupChan*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerTrb3LookupChan::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerTrb3LookupChan*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerCalParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerCalParCell::Class_Name()
{
   return "HPionTrackerCalParCell";
}

//______________________________________________________________________________
const char *HPionTrackerCalParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerCalParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerCalParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerCalParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerCalParMod::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerCalParMod::Class_Name()
{
   return "HPionTrackerCalParMod";
}

//______________________________________________________________________________
const char *HPionTrackerCalParMod::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParMod*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerCalParMod::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParMod*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerCalParMod::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParMod*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerCalParMod::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerCalParMod*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HBeamElement::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HBeamElement::Class_Name()
{
   return "HBeamElement";
}

//______________________________________________________________________________
const char *HBeamElement::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamElement*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HBeamElement::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamElement*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HBeamElement::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamElement*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HBeamElement::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamElement*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HBeamParticle::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HBeamParticle::Class_Name()
{
   return "HBeamParticle";
}

//______________________________________________________________________________
const char *HBeamParticle::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamParticle*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HBeamParticle::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamParticle*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HBeamParticle::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamParticle*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HBeamParticle::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBeamParticle*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HBeam::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HBeam::Class_Name()
{
   return "HBeam";
}

//______________________________________________________________________________
const char *HBeam::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBeam*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HBeam::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HBeam*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HBeam::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBeam*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HBeam::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HBeam*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HPionTrackerDetGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HPionTrackerDetGeomPar::Class_Name()
{
   return "HPionTrackerDetGeomPar";
}

//______________________________________________________________________________
const char *HPionTrackerDetGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HPionTrackerDetGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HPionTrackerDetGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HPionTrackerDetGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HPionTrackerDetGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HPionTrackerDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetector::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HPionTrackerDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerDetector::IsA(), kTRUE);
      HDetector::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerDetector.
      TClass *R__cl = ::HPionTrackerDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerDetector(void *p) {
      return  p ? new(p) ::HPionTrackerDetector : new ::HPionTrackerDetector;
   }
   static void *newArray_HPionTrackerDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerDetector[nElements] : new ::HPionTrackerDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerDetector(void *p) {
      delete ((::HPionTrackerDetector*)p);
   }
   static void deleteArray_HPionTrackerDetector(void *p) {
      delete [] ((::HPionTrackerDetector*)p);
   }
   static void destruct_HPionTrackerDetector(void *p) {
      typedef ::HPionTrackerDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerDetector(TBuffer &buf, void *obj) {
      ((::HPionTrackerDetector*)obj)->::HPionTrackerDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerDetector

//______________________________________________________________________________
void HPionTrackerRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fMultiplicity;
      R__b >> fModule;
      R__b >> fStrip;
      R__b.ReadStaticArray((float*)fTime);
      R__b.ReadStaticArray((float*)fCharge);
      R__b.ReadStaticArray((char*)fPileUp);
      R__b.ReadStaticArray((char*)fOverflow);
      R__b.CheckByteCount(R__s, R__c, HPionTrackerRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerRaw::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fMultiplicity;
      R__b << fModule;
      R__b << fStrip;
      R__b.WriteArray(fTime, 1);
      R__b.WriteArray(fCharge, 1);
      R__b.WriteArray(fPileUp, 1);
      R__b.WriteArray(fOverflow, 1);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerRaw.
      TClass *R__cl = ::HPionTrackerRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMultiplicity", &fMultiplicity);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fModule", &fModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fStrip", &fStrip);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime[1]", fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge[1]", fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPileUp[1]", fPileUp);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOverflow[1]", fOverflow);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerRaw(void *p) {
      return  p ? new(p) ::HPionTrackerRaw : new ::HPionTrackerRaw;
   }
   static void *newArray_HPionTrackerRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerRaw[nElements] : new ::HPionTrackerRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerRaw(void *p) {
      delete ((::HPionTrackerRaw*)p);
   }
   static void deleteArray_HPionTrackerRaw(void *p) {
      delete [] ((::HPionTrackerRaw*)p);
   }
   static void destruct_HPionTrackerRaw(void *p) {
      typedef ::HPionTrackerRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerRaw(TBuffer &buf, void *obj) {
      ((::HPionTrackerRaw*)obj)->::HPionTrackerRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerRaw

//______________________________________________________________________________
void HPionTrackerCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HPionTrackerRaw::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HPionTrackerCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerCal::IsA(), kTRUE);
      HPionTrackerRaw::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerCal.
      TClass *R__cl = ::HPionTrackerCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      HPionTrackerRaw::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerCal(void *p) {
      return  p ? new(p) ::HPionTrackerCal : new ::HPionTrackerCal;
   }
   static void *newArray_HPionTrackerCal(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerCal[nElements] : new ::HPionTrackerCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerCal(void *p) {
      delete ((::HPionTrackerCal*)p);
   }
   static void deleteArray_HPionTrackerCal(void *p) {
      delete [] ((::HPionTrackerCal*)p);
   }
   static void destruct_HPionTrackerCal(void *p) {
      typedef ::HPionTrackerCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerCal(TBuffer &buf, void *obj) {
      ((::HPionTrackerCal*)obj)->::HPionTrackerCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerCal

//______________________________________________________________________________
void HPionTrackerHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerHit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fPlane;
      R__b >> fHitCnt;
      R__b >> fTime;
      R__b >> fTimeX;
      R__b >> fTimeY;
      R__b >> fCharge;
      R__b >> fChargeX;
      R__b >> fChargeY;
      R__b >> fLocalX;
      R__b >> fLocalY;
      R__b >> fLabX;
      R__b >> fLabY;
      R__b >> fLabZ;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerHit::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerHit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fPlane;
      R__b << fHitCnt;
      R__b << fTime;
      R__b << fTimeX;
      R__b << fTimeY;
      R__b << fCharge;
      R__b << fChargeX;
      R__b << fChargeY;
      R__b << fLocalX;
      R__b << fLocalY;
      R__b << fLabX;
      R__b << fLabY;
      R__b << fLabZ;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerHit.
      TClass *R__cl = ::HPionTrackerHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlane", &fPlane);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitCnt", &fHitCnt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTime", &fTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeX", &fTimeX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeY", &fTimeY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeX", &fChargeX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeY", &fChargeY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLocalX", &fLocalX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLocalY", &fLocalY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabX", &fLabX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabY", &fLabY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fLabZ", &fLabZ);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerHit(void *p) {
      return  p ? new(p) ::HPionTrackerHit : new ::HPionTrackerHit;
   }
   static void *newArray_HPionTrackerHit(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerHit[nElements] : new ::HPionTrackerHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerHit(void *p) {
      delete ((::HPionTrackerHit*)p);
   }
   static void deleteArray_HPionTrackerHit(void *p) {
      delete [] ((::HPionTrackerHit*)p);
   }
   static void destruct_HPionTrackerHit(void *p) {
      typedef ::HPionTrackerHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerHit(TBuffer &buf, void *obj) {
      ((::HPionTrackerHit*)obj)->::HPionTrackerHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerHit

//______________________________________________________________________________
void HPionTrackerTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTrack.
      TClass *R__cl = ::HPionTrackerTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP", &fP);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta", &fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi", &fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCosTheta", &fCosTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX1", &fX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY1", &fY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fX2", &fX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY2", &fY2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXh", &fXh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYh", &fYh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPx", &fPx);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPy", &fPy);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPz", &fPz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPhi0", &fPhi0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTheta0", &fTheta0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fY0", &fY0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMatch", &fMatch);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDist", &fDist);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTrack(void *p) {
      return  p ? new(p) ::HPionTrackerTrack : new ::HPionTrackerTrack;
   }
   static void *newArray_HPionTrackerTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTrack[nElements] : new ::HPionTrackerTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTrack(void *p) {
      delete ((::HPionTrackerTrack*)p);
   }
   static void deleteArray_HPionTrackerTrack(void *p) {
      delete [] ((::HPionTrackerTrack*)p);
   }
   static void destruct_HPionTrackerTrack(void *p) {
      typedef ::HPionTrackerTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTrack(TBuffer &buf, void *obj) {
      ((::HPionTrackerTrack*)obj)->::HPionTrackerTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTrack

//______________________________________________________________________________
void HPionTrackerTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b >> fSkipEvent;
      R__b >> fUsePionTrackerHit;
      R__b >> fUsePionTrackerTrack;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b << fSkipEvent;
      R__b << fUsePionTrackerHit;
      R__b << fUsePionTrackerTrack;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTaskSet.
      TClass *R__cl = ::HPionTrackerTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fSkipEvent", &fSkipEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsePionTrackerHit", &fUsePionTrackerHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUsePionTrackerTrack", &fUsePionTrackerTrack);
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTaskSet(void *p) {
      return  p ? new(p) ::HPionTrackerTaskSet : new ::HPionTrackerTaskSet;
   }
   static void *newArray_HPionTrackerTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTaskSet[nElements] : new ::HPionTrackerTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTaskSet(void *p) {
      delete ((::HPionTrackerTaskSet*)p);
   }
   static void deleteArray_HPionTrackerTaskSet(void *p) {
      delete [] ((::HPionTrackerTaskSet*)p);
   }
   static void destruct_HPionTrackerTaskSet(void *p) {
      typedef ::HPionTrackerTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTaskSet(TBuffer &buf, void *obj) {
      ((::HPionTrackerTaskSet*)obj)->::HPionTrackerTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTaskSet

//______________________________________________________________________________
void HPionTrackerTrb3Unpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerTrb3Unpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HPionTrackerTrb3Unpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTrb3Unpacker.
      TClass *R__cl = ::HPionTrackerTrb3Unpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "subEvtId", &subEvtId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "uTrbNetAddress", &uTrbNetAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nEvt", &nEvt);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "debugFlag", &debugFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "quietMode", &quietMode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "reportCritical", &reportCritical);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pLookup", &pLookup);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTrbBoard", &pTrbBoard);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTrb3Unpacker(void *p) {
      return  p ? new(p) ::HPionTrackerTrb3Unpacker : new ::HPionTrackerTrb3Unpacker;
   }
   static void *newArray_HPionTrackerTrb3Unpacker(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTrb3Unpacker[nElements] : new ::HPionTrackerTrb3Unpacker[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTrb3Unpacker(void *p) {
      delete ((::HPionTrackerTrb3Unpacker*)p);
   }
   static void deleteArray_HPionTrackerTrb3Unpacker(void *p) {
      delete [] ((::HPionTrackerTrb3Unpacker*)p);
   }
   static void destruct_HPionTrackerTrb3Unpacker(void *p) {
      typedef ::HPionTrackerTrb3Unpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTrb3Unpacker(TBuffer &buf, void *obj) {
      ((::HPionTrackerTrb3Unpacker*)obj)->::HPionTrackerTrb3Unpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTrb3Unpacker

//______________________________________________________________________________
void HPionTrackerCalibrater::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerCalibrater.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HPionTrackerCalibrater::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerCalibrater.
      TClass *R__cl = ::HPionTrackerCalibrater::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRawCat", &pRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalCat", &pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalpar", &pCalpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHitfpar", &pHitfpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pRunpar", &pRunpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "correction", &correction);
      R__insp.InspectMember(correction, "correction.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrs[4]", corrs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "charge_offset[4]", charge_offset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "calib_charge[4]", calib_charge);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerCalibrater(void *p) {
      return  p ? new(p) ::HPionTrackerCalibrater : new ::HPionTrackerCalibrater;
   }
   static void *newArray_HPionTrackerCalibrater(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerCalibrater[nElements] : new ::HPionTrackerCalibrater[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerCalibrater(void *p) {
      delete ((::HPionTrackerCalibrater*)p);
   }
   static void deleteArray_HPionTrackerCalibrater(void *p) {
      delete [] ((::HPionTrackerCalibrater*)p);
   }
   static void destruct_HPionTrackerCalibrater(void *p) {
      typedef ::HPionTrackerCalibrater current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerCalibrater(TBuffer &buf, void *obj) {
      ((::HPionTrackerCalibrater*)obj)->::HPionTrackerCalibrater::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerCalibrater

//______________________________________________________________________________
void HPionTrackerHitF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerHitF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HPionTrackerHitF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerHitF.
      TClass *R__cl = ::HPionTrackerHitF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pCalCat", &pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHitCat", &pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loccal", &loccal);
      R__insp.InspectMember(loccal, "loccal.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHitfpar", &pHitfpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeompar", &pGeompar);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerHitF(void *p) {
      return  p ? new(p) ::HPionTrackerHitF : new ::HPionTrackerHitF;
   }
   static void *newArray_HPionTrackerHitF(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerHitF[nElements] : new ::HPionTrackerHitF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerHitF(void *p) {
      delete ((::HPionTrackerHitF*)p);
   }
   static void deleteArray_HPionTrackerHitF(void *p) {
      delete [] ((::HPionTrackerHitF*)p);
   }
   static void destruct_HPionTrackerHitF(void *p) {
      typedef ::HPionTrackerHitF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerHitF(TBuffer &buf, void *obj) {
      ((::HPionTrackerHitF*)obj)->::HPionTrackerHitF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerHitF

//______________________________________________________________________________
void HPionTrackerTrackF::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerTrackF.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HPionTrackerTrackF::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTrackF.
      TClass *R__cl = ::HPionTrackerTrackF::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHitCat", &pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTrackCat", &pTrackCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*iter", &iter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lochit", &lochit);
      R__insp.InspectMember(lochit, "lochit.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "loc", &loc);
      R__insp.InspectMember(loc, "loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTrackfpar", &pTrackfpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTrackBeampar", &pTrackBeampar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTrackerMompar", &pTrackerMompar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pTrackerMomRunpar", &pTrackerMomRunpar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "correction", &correction);
      R__insp.InspectMember(correction, "correction.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "corrs[2]", corrs);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "idet1", &idet1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "idet2", &idet2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_det1", &id_det1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_det2", &id_det2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_outQ9", &id_outQ9);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "id_targ", &id_targ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T12[2]", T12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T14[2]", T14);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T16[2]", T16);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T126[2]", T126);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T146[2]", T146);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T166[2]", T166);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T32[2]", T32);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T33[2]", T33);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T34[2]", T34);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T36[2]", T36);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T336[2]", T336);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T346[2]", T346);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T366[2]", T366);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T12_t", &T12_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T14_t", &T14_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T16_t", &T16_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T126_t", &T126_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T146_t", &T146_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T166_t", &T166_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T32_t", &T32_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T33_t", &T33_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T34_t", &T34_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T36_t", &T36_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T326_t", &T326_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T336_t", &T336_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T346_t", &T346_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T366_t", &T366_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T21_t", &T21_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T22_t", &T22_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T23_t", &T23_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T24_t", &T24_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T26_t", &T26_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T226_t", &T226_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T246_t", &T246_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T266_t", &T266_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T41_t", &T41_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T42_t", &T42_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T43_t", &T43_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T44_t", &T44_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T46_t", &T46_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T426_t", &T426_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T436_t", &T436_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T446_t", &T446_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "T466_t", &T466_t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nev", &nev);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inputpos", (void*)&inputpos);
      R__insp.InspectMember("ifstream", (void*)&inputpos, "inputpos.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "scanpos", (void*)&scanpos);
      R__insp.InspectMember("ifstream", (void*)&scanpos, "scanpos.", true);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTrackF(void *p) {
      return  p ? new(p) ::HPionTrackerTrackF : new ::HPionTrackerTrackF;
   }
   static void *newArray_HPionTrackerTrackF(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTrackF[nElements] : new ::HPionTrackerTrackF[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTrackF(void *p) {
      delete ((::HPionTrackerTrackF*)p);
   }
   static void deleteArray_HPionTrackerTrackF(void *p) {
      delete [] ((::HPionTrackerTrackF*)p);
   }
   static void destruct_HPionTrackerTrackF(void *p) {
      typedef ::HPionTrackerTrackF current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTrackF(TBuffer &buf, void *obj) {
      ((::HPionTrackerTrackF*)obj)->::HPionTrackerTrackF::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTrackF

//______________________________________________________________________________
void HPionTrackerContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HPionTrackerContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerContFact.
      TClass *R__cl = ::HPionTrackerContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerContFact(void *p) {
      return  p ? new(p) ::HPionTrackerContFact : new ::HPionTrackerContFact;
   }
   static void *newArray_HPionTrackerContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerContFact[nElements] : new ::HPionTrackerContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerContFact(void *p) {
      delete ((::HPionTrackerContFact*)p);
   }
   static void deleteArray_HPionTrackerContFact(void *p) {
      delete [] ((::HPionTrackerContFact*)p);
   }
   static void destruct_HPionTrackerContFact(void *p) {
      typedef ::HPionTrackerContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerContFact(TBuffer &buf, void *obj) {
      ((::HPionTrackerContFact*)obj)->::HPionTrackerContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerContFact

//______________________________________________________________________________
void HPionTrackerParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HPionTrackerParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerParAsciiFileIo.
      TClass *R__cl = ::HPionTrackerParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HPionTrackerParAsciiFileIo(void *p) {
      delete ((::HPionTrackerParAsciiFileIo*)p);
   }
   static void deleteArray_HPionTrackerParAsciiFileIo(void *p) {
      delete [] ((::HPionTrackerParAsciiFileIo*)p);
   }
   static void destruct_HPionTrackerParAsciiFileIo(void *p) {
      typedef ::HPionTrackerParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HPionTrackerParAsciiFileIo*)obj)->::HPionTrackerParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerParAsciiFileIo

//______________________________________________________________________________
void HPionTrackerParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerParRootFileIo.

   HDetParRootFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HPionTrackerParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerParRootFileIo.
      TClass *R__cl = ::HPionTrackerParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HPionTrackerParRootFileIo(void *p) {
      delete ((::HPionTrackerParRootFileIo*)p);
   }
   static void deleteArray_HPionTrackerParRootFileIo(void *p) {
      delete [] ((::HPionTrackerParRootFileIo*)p);
   }
   static void destruct_HPionTrackerParRootFileIo(void *p) {
      typedef ::HPionTrackerParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerParRootFileIo(TBuffer &buf, void *obj) {
      ((::HPionTrackerParRootFileIo*)obj)->::HPionTrackerParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerParRootFileIo

//______________________________________________________________________________
void HPionTrackerTrb3LookupChan::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerTrb3LookupChan.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> module;
      R__b >> cell;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerTrb3LookupChan::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerTrb3LookupChan::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << module;
      R__b << cell;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerTrb3LookupChan::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTrb3LookupChan.
      TClass *R__cl = ::HPionTrackerTrb3LookupChan::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "module", &module);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cell", &cell);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTrb3LookupChan(void *p) {
      return  p ? new(p) ::HPionTrackerTrb3LookupChan : new ::HPionTrackerTrb3LookupChan;
   }
   static void *newArray_HPionTrackerTrb3LookupChan(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTrb3LookupChan[nElements] : new ::HPionTrackerTrb3LookupChan[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTrb3LookupChan(void *p) {
      delete ((::HPionTrackerTrb3LookupChan*)p);
   }
   static void deleteArray_HPionTrackerTrb3LookupChan(void *p) {
      delete [] ((::HPionTrackerTrb3LookupChan*)p);
   }
   static void destruct_HPionTrackerTrb3LookupChan(void *p) {
      typedef ::HPionTrackerTrb3LookupChan current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTrb3LookupChan(TBuffer &buf, void *obj) {
      ((::HPionTrackerTrb3LookupChan*)obj)->::HPionTrackerTrb3LookupChan::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTrb3LookupChan

//______________________________________________________________________________
void HPionTrackerTrb3LookupBoard::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerTrb3LookupBoard.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerTrb3LookupBoard::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerTrb3LookupBoard::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerTrb3LookupBoard::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTrb3LookupBoard.
      TClass *R__cl = ::HPionTrackerTrb3LookupBoard::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTrb3LookupBoard(void *p) {
      return  p ? new(p) ::HPionTrackerTrb3LookupBoard : new ::HPionTrackerTrb3LookupBoard;
   }
   static void *newArray_HPionTrackerTrb3LookupBoard(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTrb3LookupBoard[nElements] : new ::HPionTrackerTrb3LookupBoard[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTrb3LookupBoard(void *p) {
      delete ((::HPionTrackerTrb3LookupBoard*)p);
   }
   static void deleteArray_HPionTrackerTrb3LookupBoard(void *p) {
      delete [] ((::HPionTrackerTrb3LookupBoard*)p);
   }
   static void destruct_HPionTrackerTrb3LookupBoard(void *p) {
      typedef ::HPionTrackerTrb3LookupBoard current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTrb3LookupBoard(TBuffer &buf, void *obj) {
      ((::HPionTrackerTrb3LookupBoard*)obj)->::HPionTrackerTrb3LookupBoard::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTrb3LookupBoard

//______________________________________________________________________________
void HPionTrackerTrb3Lookup::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerTrb3Lookup.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b >> arrayOffset;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerTrb3Lookup::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerTrb3Lookup::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b << arrayOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerTrb3Lookup::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTrb3Lookup.
      TClass *R__cl = ::HPionTrackerTrb3Lookup::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "arrayOffset", &arrayOffset);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTrb3Lookup(void *p) {
      return  p ? new(p) ::HPionTrackerTrb3Lookup : new ::HPionTrackerTrb3Lookup;
   }
   static void *newArray_HPionTrackerTrb3Lookup(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTrb3Lookup[nElements] : new ::HPionTrackerTrb3Lookup[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTrb3Lookup(void *p) {
      delete ((::HPionTrackerTrb3Lookup*)p);
   }
   static void deleteArray_HPionTrackerTrb3Lookup(void *p) {
      delete [] ((::HPionTrackerTrb3Lookup*)p);
   }
   static void destruct_HPionTrackerTrb3Lookup(void *p) {
      typedef ::HPionTrackerTrb3Lookup current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTrb3Lookup(TBuffer &buf, void *obj) {
      ((::HPionTrackerTrb3Lookup*)obj)->::HPionTrackerTrb3Lookup::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTrb3Lookup

//______________________________________________________________________________
void HPionTrackerCalParCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerCalParCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> tdcSlope;
      R__b >> tdcOffset;
      R__b >> adcSlope;
      R__b >> adcOffset;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerCalParCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerCalParCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << tdcSlope;
      R__b << tdcOffset;
      R__b << adcSlope;
      R__b << adcOffset;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerCalParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerCalParCell.
      TClass *R__cl = ::HPionTrackerCalParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcSlope", &tdcSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tdcOffset", &tdcOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adcSlope", &adcSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "adcOffset", &adcOffset);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerCalParCell(void *p) {
      return  p ? new(p) ::HPionTrackerCalParCell : new ::HPionTrackerCalParCell;
   }
   static void *newArray_HPionTrackerCalParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerCalParCell[nElements] : new ::HPionTrackerCalParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerCalParCell(void *p) {
      delete ((::HPionTrackerCalParCell*)p);
   }
   static void deleteArray_HPionTrackerCalParCell(void *p) {
      delete [] ((::HPionTrackerCalParCell*)p);
   }
   static void destruct_HPionTrackerCalParCell(void *p) {
      typedef ::HPionTrackerCalParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerCalParCell(TBuffer &buf, void *obj) {
      ((::HPionTrackerCalParCell*)obj)->::HPionTrackerCalParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerCalParCell

//______________________________________________________________________________
void HPionTrackerCalParMod::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerCalParMod.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerCalParMod::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerCalParMod::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerCalParMod::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerCalParMod.
      TClass *R__cl = ::HPionTrackerCalParMod::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerCalParMod(void *p) {
      return  p ? new(p) ::HPionTrackerCalParMod : new ::HPionTrackerCalParMod;
   }
   static void *newArray_HPionTrackerCalParMod(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerCalParMod[nElements] : new ::HPionTrackerCalParMod[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerCalParMod(void *p) {
      delete ((::HPionTrackerCalParMod*)p);
   }
   static void deleteArray_HPionTrackerCalParMod(void *p) {
      delete [] ((::HPionTrackerCalParMod*)p);
   }
   static void destruct_HPionTrackerCalParMod(void *p) {
      typedef ::HPionTrackerCalParMod current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerCalParMod(TBuffer &buf, void *obj) {
      ((::HPionTrackerCalParMod*)obj)->::HPionTrackerCalParMod::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerCalParMod

//______________________________________________________________________________
void HPionTrackerCalPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerCalPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> array;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerCalPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerCalPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << array;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerCalPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerCalPar.
      TClass *R__cl = ::HPionTrackerCalPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*array", &array);
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerCalPar(void *p) {
      return  p ? new(p) ::HPionTrackerCalPar : new ::HPionTrackerCalPar;
   }
   static void *newArray_HPionTrackerCalPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerCalPar[nElements] : new ::HPionTrackerCalPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerCalPar(void *p) {
      delete ((::HPionTrackerCalPar*)p);
   }
   static void deleteArray_HPionTrackerCalPar(void *p) {
      delete [] ((::HPionTrackerCalPar*)p);
   }
   static void destruct_HPionTrackerCalPar(void *p) {
      typedef ::HPionTrackerCalPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerCalPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerCalPar*)obj)->::HPionTrackerCalPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerCalPar

//______________________________________________________________________________
void HPionTrackerCalRunPars::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerCalRunPars.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> npars;
      offsets.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HPionTrackerCalRunPars::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerCalRunPars::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << npars;
      offsets.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerCalRunPars::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerCalRunPars.
      TClass *R__cl = ::HPionTrackerCalRunPars::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npars", &npars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsets", &offsets);
      R__insp.InspectMember(offsets, "offsets.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerCalRunPars(void *p) {
      return  p ? new(p) ::HPionTrackerCalRunPars : new ::HPionTrackerCalRunPars;
   }
   static void *newArray_HPionTrackerCalRunPars(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerCalRunPars[nElements] : new ::HPionTrackerCalRunPars[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerCalRunPars(void *p) {
      delete ((::HPionTrackerCalRunPars*)p);
   }
   static void deleteArray_HPionTrackerCalRunPars(void *p) {
      delete [] ((::HPionTrackerCalRunPars*)p);
   }
   static void destruct_HPionTrackerCalRunPars(void *p) {
      typedef ::HPionTrackerCalRunPars current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerCalRunPars(TBuffer &buf, void *obj) {
      ((::HPionTrackerCalRunPars*)obj)->::HPionTrackerCalRunPars::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerCalRunPars

//______________________________________________________________________________
void HPionTrackerCalRunPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerCalRunPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      {
         map<Int_t,HPionTrackerCalRunPars*> &R__stl =  fMRunID;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(HPionTrackerCalRunPars));
         if (R__tcl2==0) {
            Error("fMRunID streamer","Missing the TClass object for HPionTrackerCalRunPars!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            HPionTrackerCalRunPars* R__t2;
            R__t2 = (HPionTrackerCalRunPars*)R__b.ReadObjectAny(R__tcl2);
            typedef int Value_t;
            std::pair<Value_t const, HPionTrackerCalRunPars* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         vector<Int_t> &R__stl =  fVRunID;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HPionTrackerCalRunPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerCalRunPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      {
         map<Int_t,HPionTrackerCalRunPars*> &R__stl =  fMRunID;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<Int_t,HPionTrackerCalRunPars*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b << ((*R__k).second);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  fVRunID;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerCalRunPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerCalRunPar.
      TClass *R__cl = ::HPionTrackerCalRunPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMRunID", (void*)&fMRunID);
      R__insp.InspectMember("map<Int_t,HPionTrackerCalRunPars*>", (void*)&fMRunID, "fMRunID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVRunID", (void*)&fVRunID);
      R__insp.InspectMember("vector<Int_t>", (void*)&fVRunID, "fVRunID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMIter", (void*)&fMIter);
      R__insp.InspectMember("map<int,HPionTrackerCalRunPars*,less<int>,allocator<pair<const int,HPionTrackerCalRunPars*> > >::iterator", (void*)&fMIter, "fMIter.", true);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerCalRunPar(void *p) {
      return  p ? new(p) ::HPionTrackerCalRunPar : new ::HPionTrackerCalRunPar;
   }
   static void *newArray_HPionTrackerCalRunPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerCalRunPar[nElements] : new ::HPionTrackerCalRunPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerCalRunPar(void *p) {
      delete ((::HPionTrackerCalRunPar*)p);
   }
   static void deleteArray_HPionTrackerCalRunPar(void *p) {
      delete [] ((::HPionTrackerCalRunPar*)p);
   }
   static void destruct_HPionTrackerCalRunPar(void *p) {
      typedef ::HPionTrackerCalRunPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerCalRunPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerCalRunPar*)obj)->::HPionTrackerCalRunPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerCalRunPar

//______________________________________________________________________________
void HPionTrackerHitFPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerHitFPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> numModules;
      fTimeWindowOffset.Streamer(R__b);
      fTimeWindowWidth.Streamer(R__b);
      fChargeThresh.Streamer(R__b);
      fClusterDistX.Streamer(R__b);
      fClusterDistT.Streamer(R__b);
      fClusterThresh.Streamer(R__b);
      fHitMatchTimeC.Streamer(R__b);
      fHitMatchTimeW.Streamer(R__b);
      fHitMatchChargeC.Streamer(R__b);
      fHitMatchChargeW.Streamer(R__b);
      R__b >> numPlanes;
      fPlanePair.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HPionTrackerHitFPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerHitFPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << numModules;
      fTimeWindowOffset.Streamer(R__b);
      fTimeWindowWidth.Streamer(R__b);
      fChargeThresh.Streamer(R__b);
      fClusterDistX.Streamer(R__b);
      fClusterDistT.Streamer(R__b);
      fClusterThresh.Streamer(R__b);
      fHitMatchTimeC.Streamer(R__b);
      fHitMatchTimeW.Streamer(R__b);
      fHitMatchChargeC.Streamer(R__b);
      fHitMatchChargeW.Streamer(R__b);
      R__b << numPlanes;
      fPlanePair.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerHitFPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerHitFPar.
      TClass *R__cl = ::HPionTrackerHitFPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numModules", &numModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWindowOffset", &fTimeWindowOffset);
      R__insp.InspectMember(fTimeWindowOffset, "fTimeWindowOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTimeWindowWidth", &fTimeWindowWidth);
      R__insp.InspectMember(fTimeWindowWidth, "fTimeWindowWidth.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeThresh", &fChargeThresh);
      R__insp.InspectMember(fChargeThresh, "fChargeThresh.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterDistX", &fClusterDistX);
      R__insp.InspectMember(fClusterDistX, "fClusterDistX.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterDistT", &fClusterDistT);
      R__insp.InspectMember(fClusterDistT, "fClusterDistT.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fClusterThresh", &fClusterThresh);
      R__insp.InspectMember(fClusterThresh, "fClusterThresh.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitMatchTimeC", &fHitMatchTimeC);
      R__insp.InspectMember(fHitMatchTimeC, "fHitMatchTimeC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitMatchTimeW", &fHitMatchTimeW);
      R__insp.InspectMember(fHitMatchTimeW, "fHitMatchTimeW.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitMatchChargeC", &fHitMatchChargeC);
      R__insp.InspectMember(fHitMatchChargeC, "fHitMatchChargeC.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fHitMatchChargeW", &fHitMatchChargeW);
      R__insp.InspectMember(fHitMatchChargeW, "fHitMatchChargeW.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numPlanes", &numPlanes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlanePair", &fPlanePair);
      R__insp.InspectMember(fPlanePair, "fPlanePair.");
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerHitFPar(void *p) {
      return  p ? new(p) ::HPionTrackerHitFPar : new ::HPionTrackerHitFPar;
   }
   static void *newArray_HPionTrackerHitFPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerHitFPar[nElements] : new ::HPionTrackerHitFPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerHitFPar(void *p) {
      delete ((::HPionTrackerHitFPar*)p);
   }
   static void deleteArray_HPionTrackerHitFPar(void *p) {
      delete [] ((::HPionTrackerHitFPar*)p);
   }
   static void destruct_HPionTrackerHitFPar(void *p) {
      typedef ::HPionTrackerHitFPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerHitFPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerHitFPar*)obj)->::HPionTrackerHitFPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerHitFPar

//______________________________________________________________________________
void HPionTrackerTrackFPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerTrackFPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fTrackingFlag;
      R__b >> fRefMom;
      R__b >> fRefX1;
      R__b >> fRefY1;
      R__b >> fRefX2;
      R__b >> fRefY2;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerTrackFPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerTrackFPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fTrackingFlag;
      R__b << fRefMom;
      R__b << fRefX1;
      R__b << fRefY1;
      R__b << fRefX2;
      R__b << fRefY2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerTrackFPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerTrackFPar.
      TClass *R__cl = ::HPionTrackerTrackFPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fTrackingFlag", &fTrackingFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefMom", &fRefMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefX1", &fRefX1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefY1", &fRefY1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefX2", &fRefX2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fRefY2", &fRefY2);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerTrackFPar(void *p) {
      return  p ? new(p) ::HPionTrackerTrackFPar : new ::HPionTrackerTrackFPar;
   }
   static void *newArray_HPionTrackerTrackFPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerTrackFPar[nElements] : new ::HPionTrackerTrackFPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerTrackFPar(void *p) {
      delete ((::HPionTrackerTrackFPar*)p);
   }
   static void deleteArray_HPionTrackerTrackFPar(void *p) {
      delete [] ((::HPionTrackerTrackFPar*)p);
   }
   static void destruct_HPionTrackerTrackFPar(void *p) {
      typedef ::HPionTrackerTrackFPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerTrackFPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerTrackFPar*)obj)->::HPionTrackerTrackFPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerTrackFPar

//______________________________________________________________________________
void HPionTrackerMomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerMomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> fYYWeight;
      R__b >> fYYSlope;
      R__b >> fYYOffset;
      R__b >> fMomWeight;
      R__b >> fElossCorr;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerMomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerMomPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << fYYWeight;
      R__b << fYYSlope;
      R__b << fYYOffset;
      R__b << fMomWeight;
      R__b << fElossCorr;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerMomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerMomPar.
      TClass *R__cl = ::HPionTrackerMomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYYWeight", &fYYWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYYSlope", &fYYSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYYOffset", &fYYOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomWeight", &fMomWeight);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fElossCorr", &fElossCorr);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerMomPar(void *p) {
      return  p ? new(p) ::HPionTrackerMomPar : new ::HPionTrackerMomPar;
   }
   static void *newArray_HPionTrackerMomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerMomPar[nElements] : new ::HPionTrackerMomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerMomPar(void *p) {
      delete ((::HPionTrackerMomPar*)p);
   }
   static void deleteArray_HPionTrackerMomPar(void *p) {
      delete [] ((::HPionTrackerMomPar*)p);
   }
   static void destruct_HPionTrackerMomPar(void *p) {
      typedef ::HPionTrackerMomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerMomPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerMomPar*)obj)->::HPionTrackerMomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerMomPar

//______________________________________________________________________________
void HPionTrackerMomRunPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerMomRunPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      {
         map<Int_t,HPionTrackerMomRunPars*> &R__stl =  fMRunID;
         R__stl.clear();
         TClass *R__tcl2 = TBuffer::GetClass(typeid(HPionTrackerMomRunPars));
         if (R__tcl2==0) {
            Error("fMRunID streamer","Missing the TClass object for HPionTrackerMomRunPars!");
            return;
         }
         int R__i, R__n;
         R__b >> R__n;
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            HPionTrackerMomRunPars* R__t2;
            R__t2 = (HPionTrackerMomRunPars*)R__b.ReadObjectAny(R__tcl2);
            typedef int Value_t;
            std::pair<Value_t const, HPionTrackerMomRunPars* > R__t3(R__t,R__t2);
            R__stl.insert(R__t3);
         }
      }
      {
         vector<Int_t> &R__stl =  fVRunID;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            int R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HPionTrackerMomRunPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerMomRunPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      {
         map<Int_t,HPionTrackerMomRunPars*> &R__stl =  fMRunID;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            map<Int_t,HPionTrackerMomRunPars*>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << ((*R__k).first );
            R__b << ((*R__k).second);
            }
         }
      }
      {
         vector<Int_t> &R__stl =  fVRunID;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Int_t>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerMomRunPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerMomRunPar.
      TClass *R__cl = ::HPionTrackerMomRunPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMRunID", (void*)&fMRunID);
      R__insp.InspectMember("map<Int_t,HPionTrackerMomRunPars*>", (void*)&fMRunID, "fMRunID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fVRunID", (void*)&fVRunID);
      R__insp.InspectMember("vector<Int_t>", (void*)&fVRunID, "fVRunID.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMIter", (void*)&fMIter);
      R__insp.InspectMember("map<int,HPionTrackerMomRunPars*,less<int>,allocator<pair<const int,HPionTrackerMomRunPars*> > >::iterator", (void*)&fMIter, "fMIter.", true);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerMomRunPar(void *p) {
      return  p ? new(p) ::HPionTrackerMomRunPar : new ::HPionTrackerMomRunPar;
   }
   static void *newArray_HPionTrackerMomRunPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerMomRunPar[nElements] : new ::HPionTrackerMomRunPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerMomRunPar(void *p) {
      delete ((::HPionTrackerMomRunPar*)p);
   }
   static void deleteArray_HPionTrackerMomRunPar(void *p) {
      delete [] ((::HPionTrackerMomRunPar*)p);
   }
   static void destruct_HPionTrackerMomRunPar(void *p) {
      typedef ::HPionTrackerMomRunPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerMomRunPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerMomRunPar*)obj)->::HPionTrackerMomRunPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerMomRunPar

//______________________________________________________________________________
void HPionTrackerMomRunPars::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerMomRunPars.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> npars;
      offsets.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HPionTrackerMomRunPars::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerMomRunPars::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << npars;
      offsets.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerMomRunPars::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerMomRunPars.
      TClass *R__cl = ::HPionTrackerMomRunPars::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npars", &npars);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "offsets", &offsets);
      R__insp.InspectMember(offsets, "offsets.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerMomRunPars(void *p) {
      return  p ? new(p) ::HPionTrackerMomRunPars : new ::HPionTrackerMomRunPars;
   }
   static void *newArray_HPionTrackerMomRunPars(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerMomRunPars[nElements] : new ::HPionTrackerMomRunPars[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerMomRunPars(void *p) {
      delete ((::HPionTrackerMomRunPars*)p);
   }
   static void deleteArray_HPionTrackerMomRunPars(void *p) {
      delete [] ((::HPionTrackerMomRunPars*)p);
   }
   static void destruct_HPionTrackerMomRunPars(void *p) {
      typedef ::HPionTrackerMomRunPars current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerMomRunPars(TBuffer &buf, void *obj) {
      ((::HPionTrackerMomRunPars*)obj)->::HPionTrackerMomRunPars::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerMomRunPars

//______________________________________________________________________________
void HBeamElement::Streamer(TBuffer &R__b)
{
   // Stream an object of class HBeamElement.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fName.Streamer(R__b);
      R__b >> fDistance;
      R__b >> fId;
      R__b.ReadStaticArray((double*)Tij);
      R__b.ReadStaticArray((double*)Tijk);
      R__b.ReadStaticArray((double*)fout);
      R__b >> fxCut;
      R__b >> fyCut;
      R__b >> fCutType;
      R__b >> fCtAll;
      R__b >> fCtFail;
      R__b >> fAccepted;
      R__b.CheckByteCount(R__s, R__c, HBeamElement::IsA());
   } else {
      R__c = R__b.WriteVersion(HBeamElement::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fName.Streamer(R__b);
      R__b << fDistance;
      R__b << fId;
      R__b.WriteArray((double*)Tij, 25);
      R__b.WriteArray((double*)Tijk, 125);
      R__b.WriteArray(fout, 5);
      R__b << fxCut;
      R__b << fyCut;
      R__b << fCutType;
      R__b << fCtAll;
      R__b << fCtFail;
      R__b << fAccepted;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HBeamElement::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HBeamElement.
      TClass *R__cl = ::HBeamElement::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fName", &fName);
      R__insp.InspectMember(fName, "fName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistance", &fDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fId", &fId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tij[5][5]", Tij);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Tijk[5][5][5]", Tijk);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fout[5]", fout);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fxCut", &fxCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fyCut", &fyCut);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCutType", &fCutType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCtAll", &fCtAll);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCtFail", &fCtFail);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAccepted", &fAccepted);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HBeamElement(void *p) {
      return  p ? new(p) ::HBeamElement : new ::HBeamElement;
   }
   static void *newArray_HBeamElement(Long_t nElements, void *p) {
      return p ? new(p) ::HBeamElement[nElements] : new ::HBeamElement[nElements];
   }
   // Wrapper around operator delete
   static void delete_HBeamElement(void *p) {
      delete ((::HBeamElement*)p);
   }
   static void deleteArray_HBeamElement(void *p) {
      delete [] ((::HBeamElement*)p);
   }
   static void destruct_HBeamElement(void *p) {
      typedef ::HBeamElement current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HBeamElement(TBuffer &buf, void *obj) {
      ((::HBeamElement*)obj)->::HBeamElement::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HBeamElement

//______________________________________________________________________________
void HBeamParticle::Streamer(TBuffer &R__b)
{
   // Stream an object of class HBeamParticle.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fP.Streamer(R__b);
      fPos.Streamer(R__b);
      fOffset.Streamer(R__b);
      fMomRes.Streamer(R__b);
      R__b >> fBeamMom;
      R__b >> fBeamMomSmeared;
      R__b >> fPid;
      R__b >> fDetnum;
      fName.Streamer(R__b);
      R__b >> fbeamtube_size_x;
      R__b >> fbeamtube_size_y;
      R__b >> fAccepted;
      R__b.CheckByteCount(R__s, R__c, HBeamParticle::IsA());
   } else {
      R__c = R__b.WriteVersion(HBeamParticle::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fP.Streamer(R__b);
      fPos.Streamer(R__b);
      fOffset.Streamer(R__b);
      fMomRes.Streamer(R__b);
      R__b << fBeamMom;
      R__b << fBeamMomSmeared;
      R__b << fPid;
      R__b << fDetnum;
      fName.Streamer(R__b);
      R__b << fbeamtube_size_x;
      R__b << fbeamtube_size_y;
      R__b << fAccepted;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HBeamParticle::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HBeamParticle.
      TClass *R__cl = ::HBeamParticle::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fP", &fP);
      R__insp.InspectMember(fP, "fP.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPos", &fPos);
      R__insp.InspectMember(fPos, "fPos.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fOffset", &fOffset);
      R__insp.InspectMember(fOffset, "fOffset.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fMomRes", &fMomRes);
      R__insp.InspectMember(fMomRes, "fMomRes.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamMom", &fBeamMom);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeamMomSmeared", &fBeamMomSmeared);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPid", &fPid);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDetnum", &fDetnum);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fName", &fName);
      R__insp.InspectMember(fName, "fName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbeamtube_size_x", &fbeamtube_size_x);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fbeamtube_size_y", &fbeamtube_size_y);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fAccepted", &fAccepted);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HBeamParticle(void *p) {
      return  p ? new(p) ::HBeamParticle : new ::HBeamParticle;
   }
   static void *newArray_HBeamParticle(Long_t nElements, void *p) {
      return p ? new(p) ::HBeamParticle[nElements] : new ::HBeamParticle[nElements];
   }
   // Wrapper around operator delete
   static void delete_HBeamParticle(void *p) {
      delete ((::HBeamParticle*)p);
   }
   static void deleteArray_HBeamParticle(void *p) {
      delete [] ((::HBeamParticle*)p);
   }
   static void destruct_HBeamParticle(void *p) {
      typedef ::HBeamParticle current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HBeamParticle(TBuffer &buf, void *obj) {
      ((::HBeamParticle*)obj)->::HBeamParticle::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HBeamParticle

//______________________________________________________________________________
void HBeam::Streamer(TBuffer &R__b)
{
   // Stream an object of class HBeam.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      fBeam.Streamer(R__b);
      R__b >> fProfile;
      {
         vector<HBeamElement> &R__stl =  fdetectors;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            HBeamElement R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      {
         vector<HBeamElement> &R__stl =  felements;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            HBeamElement R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b >> fnum_target;
      R__b.ReadStaticArray((double*)ftoPluto);
      R__b.ReadStaticArray((double*)ffromPluto);
      R__b.CheckByteCount(R__s, R__c, HBeam::IsA());
   } else {
      R__c = R__b.WriteVersion(HBeam::IsA(), kTRUE);
      TObject::Streamer(R__b);
      fBeam.Streamer(R__b);
      R__b << fProfile;
      {
         vector<HBeamElement> &R__stl =  fdetectors;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<HBeamElement>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((HBeamElement&)(*R__k)).Streamer(R__b);
            }
         }
      }
      {
         vector<HBeamElement> &R__stl =  felements;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<HBeamElement>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((HBeamElement&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b << fnum_target;
      R__b.WriteArray(ftoPluto, 5);
      R__b.WriteArray(ffromPluto, 5);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HBeam::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HBeam.
      TClass *R__cl = ::HBeam::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBeam", &fBeam);
      R__insp.InspectMember(fBeam, "fBeam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fProfile", &fProfile);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fdetectors", (void*)&fdetectors);
      R__insp.InspectMember("vector<HBeamElement>", (void*)&fdetectors, "fdetectors.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "felements", (void*)&felements);
      R__insp.InspectMember("vector<HBeamElement>", (void*)&felements, "felements.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fhistory", (void*)&fhistory);
      R__insp.InspectMember("vector<HBeamParticle>", (void*)&fhistory, "fhistory.", true);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fnum_target", &fnum_target);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftoPluto[5]", ftoPluto);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ffromPluto[5]", ffromPluto);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HBeam(void *p) {
      return  p ? new(p) ::HBeam : new ::HBeam;
   }
   static void *newArray_HBeam(Long_t nElements, void *p) {
      return p ? new(p) ::HBeam[nElements] : new ::HBeam[nElements];
   }
   // Wrapper around operator delete
   static void delete_HBeam(void *p) {
      delete ((::HBeam*)p);
   }
   static void deleteArray_HBeam(void *p) {
      delete [] ((::HBeam*)p);
   }
   static void destruct_HBeam(void *p) {
      typedef ::HBeam current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HBeam(TBuffer &buf, void *obj) {
      ((::HBeam*)obj)->::HBeam::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HBeam

//______________________________________________________________________________
void HPionTrackerBeamPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerBeamPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      beam.Streamer(R__b);
      R__b >> ftargetElementNum;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerBeamPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerBeamPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      beam.Streamer(R__b);
      R__b << ftargetElementNum;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerBeamPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerBeamPar.
      TClass *R__cl = ::HPionTrackerBeamPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "beam", &beam);
      R__insp.InspectMember(beam, "beam.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ftargetElementNum", &ftargetElementNum);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerBeamPar(void *p) {
      return  p ? new(p) ::HPionTrackerBeamPar : new ::HPionTrackerBeamPar;
   }
   static void *newArray_HPionTrackerBeamPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerBeamPar[nElements] : new ::HPionTrackerBeamPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerBeamPar(void *p) {
      delete ((::HPionTrackerBeamPar*)p);
   }
   static void deleteArray_HPionTrackerBeamPar(void *p) {
      delete [] ((::HPionTrackerBeamPar*)p);
   }
   static void destruct_HPionTrackerBeamPar(void *p) {
      typedef ::HPionTrackerBeamPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerBeamPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerBeamPar*)obj)->::HPionTrackerBeamPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerBeamPar

//______________________________________________________________________________
void HPionTrackerDetGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerDetGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> numStrips;
      R__b >> stripDistance;
      labTransform.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HPionTrackerDetGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerDetGeomPar::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << numStrips;
      R__b << stripDistance;
      labTransform.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerDetGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerDetGeomPar.
      TClass *R__cl = ::HPionTrackerDetGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numStrips", &numStrips);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "stripDistance", &stripDistance);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "labTransform", &labTransform);
      R__insp.InspectMember(labTransform, "labTransform.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerDetGeomPar(void *p) {
      return  p ? new(p) ::HPionTrackerDetGeomPar : new ::HPionTrackerDetGeomPar;
   }
   static void *newArray_HPionTrackerDetGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerDetGeomPar[nElements] : new ::HPionTrackerDetGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerDetGeomPar(void *p) {
      delete ((::HPionTrackerDetGeomPar*)p);
   }
   static void deleteArray_HPionTrackerDetGeomPar(void *p) {
      delete [] ((::HPionTrackerDetGeomPar*)p);
   }
   static void destruct_HPionTrackerDetGeomPar(void *p) {
      typedef ::HPionTrackerDetGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerDetGeomPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerDetGeomPar*)obj)->::HPionTrackerDetGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerDetGeomPar

//______________________________________________________________________________
void HPionTrackerGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HPionTrackerGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      R__b >> pDetectors;
      R__b >> numDetectors;
      R__b.CheckByteCount(R__s, R__c, HPionTrackerGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HPionTrackerGeomPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      R__b << pDetectors;
      R__b << numDetectors;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HPionTrackerGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HPionTrackerGeomPar.
      TClass *R__cl = ::HPionTrackerGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDetectors", &pDetectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numDetectors", &numDetectors);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HPionTrackerGeomPar(void *p) {
      return  p ? new(p) ::HPionTrackerGeomPar : new ::HPionTrackerGeomPar;
   }
   static void *newArray_HPionTrackerGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HPionTrackerGeomPar[nElements] : new ::HPionTrackerGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HPionTrackerGeomPar(void *p) {
      delete ((::HPionTrackerGeomPar*)p);
   }
   static void deleteArray_HPionTrackerGeomPar(void *p) {
      delete [] ((::HPionTrackerGeomPar*)p);
   }
   static void destruct_HPionTrackerGeomPar(void *p) {
      typedef ::HPionTrackerGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HPionTrackerGeomPar(TBuffer &buf, void *obj) {
      ((::HPionTrackerGeomPar*)obj)->::HPionTrackerGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HPionTrackerGeomPar

namespace ROOTDict {
   void maplEintcOHPionTrackerCalRunParsmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOHPionTrackerCalRunParsmUgR_Dictionary();
   static void *new_maplEintcOHPionTrackerCalRunParsmUgR(void *p = 0);
   static void *newArray_maplEintcOHPionTrackerCalRunParsmUgR(Long_t size, void *p);
   static void delete_maplEintcOHPionTrackerCalRunParsmUgR(void *p);
   static void deleteArray_maplEintcOHPionTrackerCalRunParsmUgR(void *p);
   static void destruct_maplEintcOHPionTrackerCalRunParsmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<int,HPionTrackerCalRunPars*>*)
   {
      map<int,HPionTrackerCalRunPars*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,HPionTrackerCalRunPars*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,HPionTrackerCalRunPars*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,HPionTrackerCalRunPars*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEintcOHPionTrackerCalRunParsmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,HPionTrackerCalRunPars*>) );
      instance.SetNew(&new_maplEintcOHPionTrackerCalRunParsmUgR);
      instance.SetNewArray(&newArray_maplEintcOHPionTrackerCalRunParsmUgR);
      instance.SetDelete(&delete_maplEintcOHPionTrackerCalRunParsmUgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOHPionTrackerCalRunParsmUgR);
      instance.SetDestructor(&destruct_maplEintcOHPionTrackerCalRunParsmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<int,HPionTrackerCalRunPars*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,HPionTrackerCalRunPars*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOHPionTrackerCalRunParsmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<int,HPionTrackerCalRunPars*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEintcOHPionTrackerCalRunParsmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,HPionTrackerCalRunPars*> : new map<int,HPionTrackerCalRunPars*>;
   }
   static void *newArray_maplEintcOHPionTrackerCalRunParsmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,HPionTrackerCalRunPars*>[nElements] : new map<int,HPionTrackerCalRunPars*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOHPionTrackerCalRunParsmUgR(void *p) {
      delete ((map<int,HPionTrackerCalRunPars*>*)p);
   }
   static void deleteArray_maplEintcOHPionTrackerCalRunParsmUgR(void *p) {
      delete [] ((map<int,HPionTrackerCalRunPars*>*)p);
   }
   static void destruct_maplEintcOHPionTrackerCalRunParsmUgR(void *p) {
      typedef map<int,HPionTrackerCalRunPars*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<int,HPionTrackerCalRunPars*>

namespace ROOTDict {
   void maplEintcOHPionTrackerMomRunParsmUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void maplEintcOHPionTrackerMomRunParsmUgR_Dictionary();
   static void *new_maplEintcOHPionTrackerMomRunParsmUgR(void *p = 0);
   static void *newArray_maplEintcOHPionTrackerMomRunParsmUgR(Long_t size, void *p);
   static void delete_maplEintcOHPionTrackerMomRunParsmUgR(void *p);
   static void deleteArray_maplEintcOHPionTrackerMomRunParsmUgR(void *p);
   static void destruct_maplEintcOHPionTrackerMomRunParsmUgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const map<int,HPionTrackerMomRunPars*>*)
   {
      map<int,HPionTrackerMomRunPars*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(map<int,HPionTrackerMomRunPars*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("map<int,HPionTrackerMomRunPars*>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/map", 63,
                  typeid(map<int,HPionTrackerMomRunPars*>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &maplEintcOHPionTrackerMomRunParsmUgR_Dictionary, isa_proxy, 0,
                  sizeof(map<int,HPionTrackerMomRunPars*>) );
      instance.SetNew(&new_maplEintcOHPionTrackerMomRunParsmUgR);
      instance.SetNewArray(&newArray_maplEintcOHPionTrackerMomRunParsmUgR);
      instance.SetDelete(&delete_maplEintcOHPionTrackerMomRunParsmUgR);
      instance.SetDeleteArray(&deleteArray_maplEintcOHPionTrackerMomRunParsmUgR);
      instance.SetDestructor(&destruct_maplEintcOHPionTrackerMomRunParsmUgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::MapInsert< map<int,HPionTrackerMomRunPars*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const map<int,HPionTrackerMomRunPars*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void maplEintcOHPionTrackerMomRunParsmUgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const map<int,HPionTrackerMomRunPars*>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_maplEintcOHPionTrackerMomRunParsmUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,HPionTrackerMomRunPars*> : new map<int,HPionTrackerMomRunPars*>;
   }
   static void *newArray_maplEintcOHPionTrackerMomRunParsmUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) map<int,HPionTrackerMomRunPars*>[nElements] : new map<int,HPionTrackerMomRunPars*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_maplEintcOHPionTrackerMomRunParsmUgR(void *p) {
      delete ((map<int,HPionTrackerMomRunPars*>*)p);
   }
   static void deleteArray_maplEintcOHPionTrackerMomRunParsmUgR(void *p) {
      delete [] ((map<int,HPionTrackerMomRunPars*>*)p);
   }
   static void destruct_maplEintcOHPionTrackerMomRunParsmUgR(void *p) {
      typedef map<int,HPionTrackerMomRunPars*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class map<int,HPionTrackerMomRunPars*>

namespace ROOTDict {
   void vectorlEHBeamElementgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEHBeamElementgR_Dictionary();
   static void *new_vectorlEHBeamElementgR(void *p = 0);
   static void *newArray_vectorlEHBeamElementgR(Long_t size, void *p);
   static void delete_vectorlEHBeamElementgR(void *p);
   static void deleteArray_vectorlEHBeamElementgR(void *p);
   static void destruct_vectorlEHBeamElementgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<HBeamElement>*)
   {
      vector<HBeamElement> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<HBeamElement>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<HBeamElement>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<HBeamElement>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEHBeamElementgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<HBeamElement>) );
      instance.SetNew(&new_vectorlEHBeamElementgR);
      instance.SetNewArray(&newArray_vectorlEHBeamElementgR);
      instance.SetDelete(&delete_vectorlEHBeamElementgR);
      instance.SetDeleteArray(&deleteArray_vectorlEHBeamElementgR);
      instance.SetDestructor(&destruct_vectorlEHBeamElementgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<HBeamElement> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<HBeamElement>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEHBeamElementgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<HBeamElement>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEHBeamElementgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HBeamElement> : new vector<HBeamElement>;
   }
   static void *newArray_vectorlEHBeamElementgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HBeamElement>[nElements] : new vector<HBeamElement>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEHBeamElementgR(void *p) {
      delete ((vector<HBeamElement>*)p);
   }
   static void deleteArray_vectorlEHBeamElementgR(void *p) {
      delete [] ((vector<HBeamElement>*)p);
   }
   static void destruct_vectorlEHBeamElementgR(void *p) {
      typedef vector<HBeamElement> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<HBeamElement>

namespace ROOTDict {
   void vectorlEintgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEintgR_Dictionary();
   static void *new_vectorlEintgR(void *p = 0);
   static void *newArray_vectorlEintgR(Long_t size, void *p);
   static void delete_vectorlEintgR(void *p);
   static void deleteArray_vectorlEintgR(void *p);
   static void destruct_vectorlEintgR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<int>*)
   {
      vector<int> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<int>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<int>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<int>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEintgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<int>) );
      instance.SetNew(&new_vectorlEintgR);
      instance.SetNewArray(&newArray_vectorlEintgR);
      instance.SetDelete(&delete_vectorlEintgR);
      instance.SetDeleteArray(&deleteArray_vectorlEintgR);
      instance.SetDestructor(&destruct_vectorlEintgR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<int> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<int>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEintgR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<int>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEintgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int> : new vector<int>;
   }
   static void *newArray_vectorlEintgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<int>[nElements] : new vector<int>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEintgR(void *p) {
      delete ((vector<int>*)p);
   }
   static void deleteArray_vectorlEintgR(void *p) {
      delete [] ((vector<int>*)p);
   }
   static void destruct_vectorlEintgR(void *p) {
      typedef vector<int> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<int>

/********************************************************
* ../build/pc/PionTrackerDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtablePionTrackerDict();

extern "C" void G__set_cpp_environmentPionTrackerDict() {
  G__cpp_reset_tagtablePionTrackerDict();
}
#include <new>
extern "C" int G__cpp_dllrevPionTrackerDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HPionTrackerDetector */
static int G__PionTrackerDict_190_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerDetector[n];
     } else {
       p = new((void*) gvp) HPionTrackerDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerDetector;
     } else {
       p = new((void*) gvp) HPionTrackerDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HPionTrackerDetector*) G__getstructoffset())->buildMatrixCategory((const Text_t*) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HPionTrackerDetector*) G__getstructoffset())->buildMatrixCategory((const Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HPionTrackerDetector*) G__getstructoffset())->buildLinearCategory((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerDetector*) G__getstructoffset())->getMaxModInSetup());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_190_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_190_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerDetector(*(HPionTrackerDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerDetector G__THPionTrackerDetector;
static int G__PionTrackerDict_190_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerDetector*) (soff+(sizeof(HPionTrackerDetector)*i)))->~G__THPionTrackerDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerDetector*) (soff))->~G__THPionTrackerDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_190_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerDetector* dest = (HPionTrackerDetector*) G__getstructoffset();
   *dest = *(HPionTrackerDetector*) libp->para[0].ref;
   const HPionTrackerDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerRaw */
static int G__PionTrackerDict_191_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerRaw[n];
     } else {
       p = new((void*) gvp) HPionTrackerRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerRaw;
     } else {
       p = new((void*) gvp) HPionTrackerRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerRaw*) G__getstructoffset())->getMultiplicity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerRaw*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerRaw*) G__getstructoffset())->getStrip());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerRaw*) G__getstructoffset())->getTime((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerRaw*) G__getstructoffset())->getCharge((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HPionTrackerRaw*) G__getstructoffset())->getPileup((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((const HPionTrackerRaw*) G__getstructoffset())->getOverflow((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerRaw*) G__getstructoffset())->getTimeAndCharge((const Int_t) G__int(libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerRaw*) G__getstructoffset())->getErrors((const Int_t) G__int(libp->para[0]), *(Char_t*) G__Charref(&libp->para[1])
, *(Char_t*) G__Charref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerRaw*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerRaw*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerRaw*) G__getstructoffset())->setStrip((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerRaw*) G__getstructoffset())->setAddress((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HPionTrackerRaw*) G__getstructoffset())->setData((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Char_t) G__int(libp->para[2]), (const Char_t) G__int(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HPionTrackerRaw*) G__getstructoffset())->setData((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Char_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HPionTrackerRaw*) G__getstructoffset())->setData((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_191_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_191_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerRaw(*(HPionTrackerRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerRaw G__THPionTrackerRaw;
static int G__PionTrackerDict_191_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerRaw*) (soff+(sizeof(HPionTrackerRaw)*i)))->~G__THPionTrackerRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerRaw*) (soff))->~G__THPionTrackerRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_191_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerRaw* dest = (HPionTrackerRaw*) G__getstructoffset();
   *dest = *(HPionTrackerRaw*) libp->para[0].ref;
   const HPionTrackerRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerCal */
static int G__PionTrackerDict_192_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCal::InvalidAdc());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_192_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__PionTrackerDict_192_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCal *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCal[n];
     } else {
       p = new((void*) gvp) HPionTrackerCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCal;
     } else {
       p = new((void*) gvp) HPionTrackerCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_192_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerCal(*(HPionTrackerCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerCal G__THPionTrackerCal;
static int G__PionTrackerDict_192_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerCal*) (soff+(sizeof(HPionTrackerCal)*i)))->~G__THPionTrackerCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerCal*) (soff))->~G__THPionTrackerCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_192_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCal* dest = (HPionTrackerCal*) G__getstructoffset();
   *dest = *(HPionTrackerCal*) libp->para[0].ref;
   const HPionTrackerCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerHit */
static int G__PionTrackerDict_193_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHit[n];
     } else {
       p = new((void*) gvp) HPionTrackerHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHit;
     } else {
       p = new((void*) gvp) HPionTrackerHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerHit*) G__getstructoffset())->getPlane());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerHit*) G__getstructoffset())->getHitCnt());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHit*) G__getstructoffset())->getTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHit*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->getTimeAndCharge(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->getTimeAndChargeX(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->getTimeAndChargeY(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerHit*) G__getstructoffset())->getLocalPos(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerHit*) G__getstructoffset())->getLabPos(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->setPlaneHit((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->setPlane((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->setHitCnt((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->setTimeAndCharge((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]), (const Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->setLocalPos((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->setLabPos((const Float_t) G__double(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_193_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_193_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerHit(*(HPionTrackerHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerHit G__THPionTrackerHit;
static int G__PionTrackerDict_193_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerHit*) (soff+(sizeof(HPionTrackerHit)*i)))->~G__THPionTrackerHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerHit*) (soff))->~G__THPionTrackerHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_193_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerHit* dest = (HPionTrackerHit*) G__getstructoffset();
   *dest = *(HPionTrackerHit*) libp->para[0].ref;
   const HPionTrackerHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTrack */
static int G__PionTrackerDict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrack[n];
     } else {
       p = new((void*) gvp) HPionTrackerTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrack;
     } else {
       p = new((void*) gvp) HPionTrackerTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getPx());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getPy());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getPz());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getMatch());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getP());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getCosTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getPhi0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getTheta0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getY0());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrack*) G__getstructoffset())->getDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setPxyz((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setPThetaPhi((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setPos1((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setPos2((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setPosH((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setPosAll((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setProdAngles((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setProdY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->setDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerTrack*) G__getstructoffset())->getPos1(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerTrack*) G__getstructoffset())->getPos2(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerTrack*) G__getstructoffset())->getPosH(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerTrack*) G__getstructoffset())->getProdAngles(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerTrack*) G__getstructoffset())->getProdY(*(Float_t*) G__Floatref(&libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_194_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_194_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerTrack(*(HPionTrackerTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTrack G__THPionTrackerTrack;
static int G__PionTrackerDict_194_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTrack*) (soff+(sizeof(HPionTrackerTrack)*i)))->~G__THPionTrackerTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTrack*) (soff))->~G__THPionTrackerTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_194_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrack* dest = (HPionTrackerTrack*) G__getstructoffset();
   *dest = *(HPionTrackerTrack*) libp->para[0].ref;
   const HPionTrackerTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTaskSet */
static int G__PionTrackerDict_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTaskSet[n];
     } else {
       p = new((void*) gvp) HPionTrackerTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTaskSet;
     } else {
       p = new((void*) gvp) HPionTrackerTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HPionTrackerTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HPionTrackerTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HPionTrackerTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HPionTrackerTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HPionTrackerTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTaskSet G__THPionTrackerTaskSet;
static int G__PionTrackerDict_211_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTaskSet*) (soff+(sizeof(HPionTrackerTaskSet)*i)))->~G__THPionTrackerTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTaskSet*) (soff))->~G__THPionTrackerTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTrb3Lookup */
static int G__PionTrackerDict_216_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3Lookup* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     } else {
       p = new((void*) gvp) HPionTrackerTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HPionTrackerTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerTrb3Lookup(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerTrb3Lookup((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3Lookup((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerTrb3Lookup((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerTrb3Lookup[n];
       } else {
         p = new((void*) gvp) HPionTrackerTrb3Lookup[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerTrb3Lookup;
       } else {
         p = new((void*) gvp) HPionTrackerTrb3Lookup;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HPionTrackerTrb3Lookup*) G__getstructoffset())->getBoard((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HPionTrackerTrb3Lookup*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerTrb3Lookup*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerTrb3Lookup*) G__getstructoffset())->getArrayOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Lookup*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerTrb3Lookup*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerTrb3Lookup*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Lookup*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Lookup*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTrb3Lookup::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3Lookup::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTrb3Lookup::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTrb3Lookup::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Lookup*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3Lookup::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3Lookup::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3Lookup::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_216_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3Lookup::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_216_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerTrb3Lookup* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerTrb3Lookup(*(HPionTrackerTrb3Lookup*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTrb3Lookup G__THPionTrackerTrb3Lookup;
static int G__PionTrackerDict_216_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTrb3Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTrb3Lookup*) (soff+(sizeof(HPionTrackerTrb3Lookup)*i)))->~G__THPionTrackerTrb3Lookup();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTrb3Lookup*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTrb3Lookup*) (soff))->~G__THPionTrackerTrb3Lookup();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_216_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3Lookup* dest = (HPionTrackerTrb3Lookup*) G__getstructoffset();
   *dest = *(HPionTrackerTrb3Lookup*) libp->para[0].ref;
   const HPionTrackerTrb3Lookup& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTrb3LookupBoard */
static int G__PionTrackerDict_217_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3LookupBoard* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3LookupBoard[n];
     } else {
       p = new((void*) gvp) HPionTrackerTrb3LookupBoard[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3LookupBoard;
     } else {
       p = new((void*) gvp) HPionTrackerTrb3LookupBoard;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HPionTrackerTrb3LookupBoard*) G__getstructoffset())->getChannel((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HPionTrackerTrb3LookupChan& obj = ((HPionTrackerTrb3LookupBoard*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerTrb3LookupBoard*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupBoard*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTrb3LookupBoard::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3LookupBoard::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTrb3LookupBoard::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTrb3LookupBoard::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupBoard*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3LookupBoard::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3LookupBoard::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3LookupBoard::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_217_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3LookupBoard::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_217_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerTrb3LookupBoard* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerTrb3LookupBoard(*(HPionTrackerTrb3LookupBoard*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTrb3LookupBoard G__THPionTrackerTrb3LookupBoard;
static int G__PionTrackerDict_217_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTrb3LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTrb3LookupBoard*) (soff+(sizeof(HPionTrackerTrb3LookupBoard)*i)))->~G__THPionTrackerTrb3LookupBoard();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTrb3LookupBoard*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTrb3LookupBoard*) (soff))->~G__THPionTrackerTrb3LookupBoard();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_217_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3LookupBoard* dest = (HPionTrackerTrb3LookupBoard*) G__getstructoffset();
   *dest = *(HPionTrackerTrb3LookupBoard*) libp->para[0].ref;
   const HPionTrackerTrb3LookupBoard& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTrb3Unpacker */
static int G__PionTrackerDict_221_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3Unpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3Unpacker((UInt_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerTrb3Unpacker((UInt_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerTrb3Unpacker[n];
       } else {
         p = new((void*) gvp) HPionTrackerTrb3Unpacker[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerTrb3Unpacker;
       } else {
         p = new((void*) gvp) HPionTrackerTrb3Unpacker;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Unpacker*) G__getstructoffset())->setDebugFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerTrb3Unpacker*) G__getstructoffset())->getDebugFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Unpacker*) G__getstructoffset())->setQuietMode();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Unpacker*) G__getstructoffset())->setReportCritical();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTrb3Unpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3Unpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTrb3Unpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTrb3Unpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3Unpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3Unpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3Unpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3Unpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_221_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3Unpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_221_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerTrb3Unpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerTrb3Unpacker(*(HPionTrackerTrb3Unpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTrb3Unpacker G__THPionTrackerTrb3Unpacker;
static int G__PionTrackerDict_221_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTrb3Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTrb3Unpacker*) (soff+(sizeof(HPionTrackerTrb3Unpacker)*i)))->~G__THPionTrackerTrb3Unpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTrb3Unpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTrb3Unpacker*) (soff))->~G__THPionTrackerTrb3Unpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_221_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3Unpacker* dest = (HPionTrackerTrb3Unpacker*) G__getstructoffset();
   *dest = *(HPionTrackerTrb3Unpacker*) libp->para[0].ref;
   const HPionTrackerTrb3Unpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerCalRunPars */
static int G__PionTrackerDict_475_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalRunPars* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalRunPars((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerCalRunPars((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalRunPars[n];
       } else {
         p = new((void*) gvp) HPionTrackerCalRunPars[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalRunPars;
       } else {
         p = new((void*) gvp) HPionTrackerCalRunPars;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerCalRunPars*) G__getstructoffset())->getNVals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPars*) G__getstructoffset())->setSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPars*) G__getstructoffset())->setVal((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HPionTrackerCalRunPars*) G__getstructoffset())->getVal((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPars*) G__getstructoffset())->copyVals((HPionTrackerCalRunPars*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPars*) G__getstructoffset())->getVals((HPionTrackerCalRunPars*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HPionTrackerCalRunPars*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HPionTrackerCalRunPars*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HPionTrackerCalRunPars*) G__getstructoffset())->data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPars*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerCalRunPars::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalRunPars::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerCalRunPars::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerCalRunPars::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPars*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalRunPars::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalRunPars::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalRunPars::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_475_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalRunPars::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_475_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerCalRunPars* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerCalRunPars(*(HPionTrackerCalRunPars*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerCalRunPars G__THPionTrackerCalRunPars;
static int G__PionTrackerDict_475_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerCalRunPars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerCalRunPars*) (soff+(sizeof(HPionTrackerCalRunPars)*i)))->~G__THPionTrackerCalRunPars();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerCalRunPars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerCalRunPars*) (soff))->~G__THPionTrackerCalRunPars();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_475_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalRunPars* dest = (HPionTrackerCalRunPars*) G__getstructoffset();
   *dest = *(HPionTrackerCalRunPars*) libp->para[0].ref;
   const HPionTrackerCalRunPars& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerCalRunPar */
static int G__PionTrackerDict_476_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalRunPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalRunPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerCalRunPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalRunPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerCalRunPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalRunPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerCalRunPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalRunPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerCalRunPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalRunPar;
       } else {
         p = new((void*) gvp) HPionTrackerCalRunPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->findRunID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->removeRun((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->removeRun((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->addRun((Int_t) G__int(libp->para[0]), (HPionTrackerCalRunPars*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->addRun((Int_t) G__int(libp->para[0]), (HPionTrackerCalRunPars*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->getRun((Int_t) G__int(libp->para[0]), (HPionTrackerCalRunPars*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPar*) G__getstructoffset())->finishRunList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->getRangeRunID(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->getNRunIDs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HPionTrackerCalRunPar*) G__getstructoffset())->getRunIDList((TArrayI*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HPionTrackerCalRunPar*) G__getstructoffset())->getRunIDList();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPar*) G__getstructoffset())->printRunIDList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPar*) G__getstructoffset())->printRun((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HPionTrackerCalRunPar*) G__getstructoffset())->reset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HPionTrackerCalRunPar*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerCalRunPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerCalRunPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalRunPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerCalRunPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerCalRunPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalRunPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalRunPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalRunPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalRunPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_476_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalRunPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_476_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerCalRunPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerCalRunPar(*(HPionTrackerCalRunPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerCalRunPar G__THPionTrackerCalRunPar;
static int G__PionTrackerDict_476_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerCalRunPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerCalRunPar*) (soff+(sizeof(HPionTrackerCalRunPar)*i)))->~G__THPionTrackerCalRunPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerCalRunPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerCalRunPar*) (soff))->~G__THPionTrackerCalRunPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_476_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalRunPar* dest = (HPionTrackerCalRunPar*) G__getstructoffset();
   *dest = *(HPionTrackerCalRunPar*) libp->para[0].ref;
   const HPionTrackerCalRunPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerCalPar */
static int G__PionTrackerDict_489_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerCalPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerCalPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalPar;
       } else {
         p = new((void*) gvp) HPionTrackerCalPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HPionTrackerCalParMod& obj = ((HPionTrackerCalPar*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerCalPar*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalPar*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerCalPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerCalPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerCalPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_489_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_489_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerCalPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerCalPar(*(HPionTrackerCalPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerCalPar G__THPionTrackerCalPar;
static int G__PionTrackerDict_489_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerCalPar*) (soff+(sizeof(HPionTrackerCalPar)*i)))->~G__THPionTrackerCalPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerCalPar*) (soff))->~G__THPionTrackerCalPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_489_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalPar* dest = (HPionTrackerCalPar*) G__getstructoffset();
   *dest = *(HPionTrackerCalPar*) libp->para[0].ref;
   const HPionTrackerCalPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerHitFPar */
static int G__PionTrackerDict_490_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerHitFPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHitFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerHitFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHitFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerHitFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHitFPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerHitFPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerHitFPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerHitFPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerHitFPar;
       } else {
         p = new((void*) gvp) HPionTrackerHitFPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getNumModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getTimeWindowOffset((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getTimeWindowWidth((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getChargeThresh((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getClusterDistX((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getClusterDistT((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getClusterThresh((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getHitMatchTimeC((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getHitMatchTimeW((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getHitMatchChargeC((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerHitFPar*) G__getstructoffset())->getHitMatchChargeW((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerHitFPar*) G__getstructoffset())->getNumPlanes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((const HPionTrackerHitFPar*) G__getstructoffset())->getPlanePair((const Int_t) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, *(Int_t*) G__Intref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerHitFPar*) G__getstructoffset())->getPlaneX((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerHitFPar*) G__getstructoffset())->getPlaneY((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerHitFPar*) G__getstructoffset())->setNumModules((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setTimeWindowOffset((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setTimeWindowWidth((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setChargeThresh((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setClusterDistX((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setClusterDistT((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setClusterThresh((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setHitMatchTime((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setHitMatchCharge((const Int_t) G__int(libp->para[0]), (const Float_t) G__double(libp->para[1])
, (const Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setNumPlanes((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->setPlanePair((const Int_t) G__int(libp->para[0]), (const Int_t) G__int(libp->para[1])
, (const Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerHitFPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHitFPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerHitFPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerHitFPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitFPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHitFPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerHitFPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHitFPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_490_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerHitFPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_490_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerHitFPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerHitFPar(*(HPionTrackerHitFPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerHitFPar G__THPionTrackerHitFPar;
static int G__PionTrackerDict_490_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerHitFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerHitFPar*) (soff+(sizeof(HPionTrackerHitFPar)*i)))->~G__THPionTrackerHitFPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerHitFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerHitFPar*) (soff))->~G__THPionTrackerHitFPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_490_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerHitFPar* dest = (HPionTrackerHitFPar*) G__getstructoffset();
   *dest = *(HPionTrackerHitFPar*) libp->para[0].ref;
   const HPionTrackerHitFPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerCalibrater */
static int G__PionTrackerDict_491_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalibrater[n];
     } else {
       p = new((void*) gvp) HPionTrackerCalibrater[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalibrater;
     } else {
       p = new((void*) gvp) HPionTrackerCalibrater;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HPionTrackerCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HPionTrackerCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerCalibrater::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalibrater::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerCalibrater::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerCalibrater::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalibrater*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalibrater::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalibrater::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalibrater::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_491_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalibrater::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerCalibrater G__THPionTrackerCalibrater;
static int G__PionTrackerDict_491_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerCalibrater*) (soff+(sizeof(HPionTrackerCalibrater)*i)))->~G__THPionTrackerCalibrater();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerCalibrater*) (soff))->~G__THPionTrackerCalibrater();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerGeomPar */
static int G__PionTrackerDict_492_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerGeomPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerGeomPar;
       } else {
         p = new((void*) gvp) HPionTrackerGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerGeomPar*) G__getstructoffset())->getNumDetectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerGeomPar*) G__getstructoffset())->setNumDetectors((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HPionTrackerGeomPar*) G__getstructoffset())->getDetector((const Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_492_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_492_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerGeomPar(*(HPionTrackerGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerGeomPar G__THPionTrackerGeomPar;
static int G__PionTrackerDict_492_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerGeomPar*) (soff+(sizeof(HPionTrackerGeomPar)*i)))->~G__THPionTrackerGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerGeomPar*) (soff))->~G__THPionTrackerGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_492_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerGeomPar* dest = (HPionTrackerGeomPar*) G__getstructoffset();
   *dest = *(HPionTrackerGeomPar*) libp->para[0].ref;
   const HPionTrackerGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerHitF */
static int G__PionTrackerDict_500_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHitF[n];
     } else {
       p = new((void*) gvp) HPionTrackerHitF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHitF;
     } else {
       p = new((void*) gvp) HPionTrackerHitF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerHitF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHitF(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerHitF(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerHitF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerHitF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHitF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerHitF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerHitF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerHitF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHitF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerHitF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerHitF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_500_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerHitF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerHitF G__THPionTrackerHitF;
static int G__PionTrackerDict_500_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerHitF*) (soff+(sizeof(HPionTrackerHitF)*i)))->~G__THPionTrackerHitF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerHitF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerHitF*) (soff))->~G__THPionTrackerHitF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerMomPar */
static int G__PionTrackerDict_501_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerMomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerMomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerMomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerMomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerMomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerMomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerMomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerMomPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerMomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerMomPar;
       } else {
         p = new((void*) gvp) HPionTrackerMomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerMomPar*) G__getstructoffset())->getYYWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerMomPar*) G__getstructoffset())->getYYSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerMomPar*) G__getstructoffset())->getYYOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerMomPar*) G__getstructoffset())->getMomWeight());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerMomPar*) G__getstructoffset())->getElossCorr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomPar*) G__getstructoffset())->setYYWeight((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomPar*) G__getstructoffset())->setYYSlope((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomPar*) G__getstructoffset())->setYYOffset((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomPar*) G__getstructoffset())->setMomWeight((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomPar*) G__getstructoffset())->setElossCorr((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerMomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerMomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerMomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerMomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_501_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerMomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_501_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerMomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerMomPar(*(HPionTrackerMomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerMomPar G__THPionTrackerMomPar;
static int G__PionTrackerDict_501_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerMomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerMomPar*) (soff+(sizeof(HPionTrackerMomPar)*i)))->~G__THPionTrackerMomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerMomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerMomPar*) (soff))->~G__THPionTrackerMomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_501_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerMomPar* dest = (HPionTrackerMomPar*) G__getstructoffset();
   *dest = *(HPionTrackerMomPar*) libp->para[0].ref;
   const HPionTrackerMomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerMomRunPars */
static int G__PionTrackerDict_502_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerMomRunPars* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerMomRunPars((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerMomRunPars((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerMomRunPars[n];
       } else {
         p = new((void*) gvp) HPionTrackerMomRunPars[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerMomRunPars;
       } else {
         p = new((void*) gvp) HPionTrackerMomRunPars;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerMomRunPars*) G__getstructoffset())->getNVals());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPars*) G__getstructoffset())->setSize((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPars*) G__getstructoffset())->setVal((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HPionTrackerMomRunPars*) G__getstructoffset())->getVal((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPars*) G__getstructoffset())->copyVals((HPionTrackerMomRunPars*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPars*) G__getstructoffset())->getVals((HPionTrackerMomRunPars*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HPionTrackerMomRunPars*) G__getstructoffset())->print((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HPionTrackerMomRunPars*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 68, (long) ((HPionTrackerMomRunPars*) G__getstructoffset())->data());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPars*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerMomRunPars::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomRunPars::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerMomRunPars::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerMomRunPars::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPars*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomRunPars::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerMomRunPars::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomRunPars::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_502_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerMomRunPars::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_502_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerMomRunPars* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerMomRunPars(*(HPionTrackerMomRunPars*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerMomRunPars G__THPionTrackerMomRunPars;
static int G__PionTrackerDict_502_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerMomRunPars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerMomRunPars*) (soff+(sizeof(HPionTrackerMomRunPars)*i)))->~G__THPionTrackerMomRunPars();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerMomRunPars*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerMomRunPars*) (soff))->~G__THPionTrackerMomRunPars();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_502_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerMomRunPars* dest = (HPionTrackerMomRunPars*) G__getstructoffset();
   *dest = *(HPionTrackerMomRunPars*) libp->para[0].ref;
   const HPionTrackerMomRunPars& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerMomRunPar */
static int G__PionTrackerDict_503_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerMomRunPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerMomRunPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerMomRunPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerMomRunPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerMomRunPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerMomRunPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerMomRunPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerMomRunPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerMomRunPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerMomRunPar;
       } else {
         p = new((void*) gvp) HPionTrackerMomRunPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->findRunID((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->removeRun((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->removeRun((Int_t) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->addRun((Int_t) G__int(libp->para[0]), (HPionTrackerMomRunPars*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->addRun((Int_t) G__int(libp->para[0]), (HPionTrackerMomRunPars*) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->getRun((Int_t) G__int(libp->para[0]), (HPionTrackerMomRunPars*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPar*) G__getstructoffset())->finishRunList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->getRangeRunID(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->getNRunIDs());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HPionTrackerMomRunPar*) G__getstructoffset())->getRunIDList((TArrayI*) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HPionTrackerMomRunPar*) G__getstructoffset())->getRunIDList();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPar*) G__getstructoffset())->printRunIDList();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPar*) G__getstructoffset())->printRun((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HPionTrackerMomRunPar*) G__getstructoffset())->reset((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HPionTrackerMomRunPar*) G__getstructoffset())->reset();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerMomRunPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerMomRunPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomRunPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerMomRunPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerMomRunPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerMomRunPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomRunPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerMomRunPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerMomRunPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_503_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerMomRunPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_503_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerMomRunPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerMomRunPar(*(HPionTrackerMomRunPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerMomRunPar G__THPionTrackerMomRunPar;
static int G__PionTrackerDict_503_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerMomRunPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerMomRunPar*) (soff+(sizeof(HPionTrackerMomRunPar)*i)))->~G__THPionTrackerMomRunPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerMomRunPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerMomRunPar*) (soff))->~G__THPionTrackerMomRunPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_503_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerMomRunPar* dest = (HPionTrackerMomRunPar*) G__getstructoffset();
   *dest = *(HPionTrackerMomRunPar*) libp->para[0].ref;
   const HPionTrackerMomRunPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTrackFPar */
static int G__PionTrackerDict_511_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrackFPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrackFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerTrackFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrackFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerTrackFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrackFPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerTrackFPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerTrackFPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerTrackFPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerTrackFPar;
       } else {
         p = new((void*) gvp) HPionTrackerTrackFPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HPionTrackerTrackFPar*) G__getstructoffset())->getTrackingFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrackFPar*) G__getstructoffset())->getRefMom());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrackFPar*) G__getstructoffset())->getRefX1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrackFPar*) G__getstructoffset())->getRefY1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrackFPar*) G__getstructoffset())->getRefX2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerTrackFPar*) G__getstructoffset())->getRefY2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackFPar*) G__getstructoffset())->setTrackingFlag((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackFPar*) G__getstructoffset())->setRefMom((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackFPar*) G__getstructoffset())->setRefX1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackFPar*) G__getstructoffset())->setRefY1((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackFPar*) G__getstructoffset())->setRefX2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackFPar*) G__getstructoffset())->setRefY2((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTrackFPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrackFPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTrackFPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTrackFPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackFPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrackFPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrackFPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrackFPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_511_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrackFPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_511_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerTrackFPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerTrackFPar(*(HPionTrackerTrackFPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTrackFPar G__THPionTrackerTrackFPar;
static int G__PionTrackerDict_511_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTrackFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTrackFPar*) (soff+(sizeof(HPionTrackerTrackFPar)*i)))->~G__THPionTrackerTrackFPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTrackFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTrackFPar*) (soff))->~G__THPionTrackerTrackFPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_511_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrackFPar* dest = (HPionTrackerTrackFPar*) G__getstructoffset();
   *dest = *(HPionTrackerTrackFPar*) libp->para[0].ref;
   const HPionTrackerTrackFPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerBeamPar */
static int G__PionTrackerDict_512_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerBeamPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerBeamPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerBeamPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerBeamPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerBeamPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerBeamPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerBeamPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerBeamPar[n];
       } else {
         p = new((void*) gvp) HPionTrackerBeamPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerBeamPar;
       } else {
         p = new((void*) gvp) HPionTrackerBeamPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerBeamPar*) G__getstructoffset())->printParam();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HPionTrackerBeamPar*) G__getstructoffset())->initBeamLine(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HPionTrackerBeamPar*) G__getstructoffset())->initBeamLine(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HPionTrackerBeamPar*) G__getstructoffset())->initBeamLine(*((TString*) G__int(libp->para[0]))));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerBeamPar*) G__getstructoffset())->createAsciiFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HBeam& obj = ((HPionTrackerBeamPar*) G__getstructoffset())->getBeam();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerBeamPar*) G__getstructoffset())->getTargetElementNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerBeamPar*) G__getstructoffset())->getNBeamElements());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HPionTrackerBeamPar*) G__getstructoffset())->getBeamElement((UInt_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerBeamPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerBeamPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerBeamPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerBeamPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerBeamPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerBeamPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerBeamPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerBeamPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_512_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerBeamPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_512_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerBeamPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerBeamPar(*(HPionTrackerBeamPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerBeamPar G__THPionTrackerBeamPar;
static int G__PionTrackerDict_512_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerBeamPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerBeamPar*) (soff+(sizeof(HPionTrackerBeamPar)*i)))->~G__THPionTrackerBeamPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerBeamPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerBeamPar*) (soff))->~G__THPionTrackerBeamPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_512_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerBeamPar* dest = (HPionTrackerBeamPar*) G__getstructoffset();
   *dest = *(HPionTrackerBeamPar*) libp->para[0].ref;
   const HPionTrackerBeamPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTrackF */
static int G__PionTrackerDict_514_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrackF* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrackF[n];
     } else {
       p = new((void*) gvp) HPionTrackerTrackF[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrackF;
     } else {
       p = new((void*) gvp) HPionTrackerTrackF;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrackF* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrackF(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HPionTrackerTrackF(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrackF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HPionTrackerTrackF((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackF*) G__getstructoffset())->setBeamElements((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTrackF::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrackF::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTrackF::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTrackF::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrackF*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrackF::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrackF::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrackF::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_514_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrackF::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTrackF G__THPionTrackerTrackF;
static int G__PionTrackerDict_514_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTrackF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTrackF*) (soff+(sizeof(HPionTrackerTrackF)*i)))->~G__THPionTrackerTrackF();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTrackF*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTrackF*) (soff))->~G__THPionTrackerTrackF();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerContFact */
static int G__PionTrackerDict_517_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerContFact[n];
     } else {
       p = new((void*) gvp) HPionTrackerContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerContFact;
     } else {
       p = new((void*) gvp) HPionTrackerContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_517_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_517_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerContFact(*(HPionTrackerContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerContFact G__THPionTrackerContFact;
static int G__PionTrackerDict_517_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerContFact*) (soff+(sizeof(HPionTrackerContFact)*i)))->~G__THPionTrackerContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerContFact*) (soff))->~G__THPionTrackerContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_517_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerContFact* dest = (HPionTrackerContFact*) G__getstructoffset();
   *dest = *(HPionTrackerContFact*) libp->para[0].ref;
   const HPionTrackerContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerParAsciiFileIo */
static int G__PionTrackerDict_527_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HPionTrackerParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HPionTrackerParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_527_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_527_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerParAsciiFileIo(*(HPionTrackerParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerParAsciiFileIo G__THPionTrackerParAsciiFileIo;
static int G__PionTrackerDict_527_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerParAsciiFileIo*) (soff+(sizeof(HPionTrackerParAsciiFileIo)*i)))->~G__THPionTrackerParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerParAsciiFileIo*) (soff))->~G__THPionTrackerParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_527_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerParAsciiFileIo* dest = (HPionTrackerParAsciiFileIo*) G__getstructoffset();
   *dest = *(HPionTrackerParAsciiFileIo*) libp->para[0].ref;
   const HPionTrackerParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerParRootFileIo */
static int G__PionTrackerDict_560_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HPionTrackerParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HPionTrackerParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HPionTrackerParRootFileIo*) G__getstructoffset())->read((HPionTrackerCalPar*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_560_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_560_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerParRootFileIo(*(HPionTrackerParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerParRootFileIo G__THPionTrackerParRootFileIo;
static int G__PionTrackerDict_560_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerParRootFileIo*) (soff+(sizeof(HPionTrackerParRootFileIo)*i)))->~G__THPionTrackerParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerParRootFileIo*) (soff))->~G__THPionTrackerParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_560_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerParRootFileIo* dest = (HPionTrackerParRootFileIo*) G__getstructoffset();
   *dest = *(HPionTrackerParRootFileIo*) libp->para[0].ref;
   const HPionTrackerParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerTrb3LookupChan */
static int G__PionTrackerDict_563_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3LookupChan* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3LookupChan[n];
     } else {
       p = new((void*) gvp) HPionTrackerTrb3LookupChan[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerTrb3LookupChan;
     } else {
       p = new((void*) gvp) HPionTrackerTrb3LookupChan;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->getCell());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->getAddress(*(Int_t*) G__Intref(&libp->para[0]), *(Int_t*) G__Intref(&libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->setModule((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->setCell((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->fill(*(HPionTrackerTrb3LookupChan*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerTrb3LookupChan::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3LookupChan::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerTrb3LookupChan::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerTrb3LookupChan::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerTrb3LookupChan*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3LookupChan::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3LookupChan::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerTrb3LookupChan::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_563_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerTrb3LookupChan::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_563_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerTrb3LookupChan* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerTrb3LookupChan(*(HPionTrackerTrb3LookupChan*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerTrb3LookupChan G__THPionTrackerTrb3LookupChan;
static int G__PionTrackerDict_563_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerTrb3LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerTrb3LookupChan*) (soff+(sizeof(HPionTrackerTrb3LookupChan)*i)))->~G__THPionTrackerTrb3LookupChan();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerTrb3LookupChan*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerTrb3LookupChan*) (soff))->~G__THPionTrackerTrb3LookupChan();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_563_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerTrb3LookupChan* dest = (HPionTrackerTrb3LookupChan*) G__getstructoffset();
   *dest = *(HPionTrackerTrb3LookupChan*) libp->para[0].ref;
   const HPionTrackerTrb3LookupChan& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerCalParCell */
static int G__PionTrackerDict_564_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalParCell[n];
     } else {
       p = new((void*) gvp) HPionTrackerCalParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalParCell;
     } else {
       p = new((void*) gvp) HPionTrackerCalParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HPionTrackerCalParCell*) G__getstructoffset())->getTdcSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HPionTrackerCalParCell*) G__getstructoffset())->getTdcOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HPionTrackerCalParCell*) G__getstructoffset())->getAdcSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HPionTrackerCalParCell*) G__getstructoffset())->getAdcOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->getData((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->setTdcSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->setTdcOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->setAdcSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->setAdcOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->fill((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->fill((Float_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->fill(*(HPionTrackerCalParCell*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerCalParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerCalParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerCalParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_564_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_564_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerCalParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerCalParCell(*(HPionTrackerCalParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerCalParCell G__THPionTrackerCalParCell;
static int G__PionTrackerDict_564_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerCalParCell*) (soff+(sizeof(HPionTrackerCalParCell)*i)))->~G__THPionTrackerCalParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerCalParCell*) (soff))->~G__THPionTrackerCalParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_564_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalParCell* dest = (HPionTrackerCalParCell*) G__getstructoffset();
   *dest = *(HPionTrackerCalParCell*) libp->para[0].ref;
   const HPionTrackerCalParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerCalParMod */
static int G__PionTrackerDict_565_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalParMod* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerCalParMod((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HPionTrackerCalParMod((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalParMod[n];
       } else {
         p = new((void*) gvp) HPionTrackerCalParMod[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HPionTrackerCalParMod;
       } else {
         p = new((void*) gvp) HPionTrackerCalParMod;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HPionTrackerCalParCell& obj = ((HPionTrackerCalParMod*) G__getstructoffset())->operator[]((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HPionTrackerCalParMod*) G__getstructoffset())->getSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerCalParMod::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalParMod::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerCalParMod::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerCalParMod::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerCalParMod*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalParMod::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalParMod::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerCalParMod::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_565_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerCalParMod::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_565_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerCalParMod* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerCalParMod(*(HPionTrackerCalParMod*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerCalParMod G__THPionTrackerCalParMod;
static int G__PionTrackerDict_565_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerCalParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerCalParMod*) (soff+(sizeof(HPionTrackerCalParMod)*i)))->~G__THPionTrackerCalParMod();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerCalParMod*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerCalParMod*) (soff))->~G__THPionTrackerCalParMod();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_565_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerCalParMod* dest = (HPionTrackerCalParMod*) G__getstructoffset();
   *dest = *(HPionTrackerCalParMod*) libp->para[0].ref;
   const HPionTrackerCalParMod& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HBeamElement */
static int G__PionTrackerDict_627_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBeamElement* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBeamElement(
*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HBeamElement(
*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBeamElement(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) HBeamElement(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBeamElement(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HBeamElement(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HBeamElement[n];
       } else {
         p = new((void*) gvp) HBeamElement[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HBeamElement;
       } else {
         p = new((void*) gvp) HBeamElement;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->setElement(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->printTij();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->printTijk();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HBeamElement*) G__getstructoffset())->print((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HBeamElement*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HBeamElement*) G__getstructoffset())->isInAcceptance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->check();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->toLinearArray(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->fromLinearArray(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HBeamElement::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeamElement::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HBeamElement::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBeamElement::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamElement*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeamElement::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBeamElement::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeamElement::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_627_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBeamElement::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_627_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HBeamElement* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HBeamElement(*(HBeamElement*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HBeamElement G__THBeamElement;
static int G__PionTrackerDict_627_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HBeamElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HBeamElement*) (soff+(sizeof(HBeamElement)*i)))->~G__THBeamElement();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HBeamElement*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HBeamElement*) (soff))->~G__THBeamElement();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_627_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBeamElement* dest = (HBeamElement*) G__getstructoffset();
   *dest = *(HBeamElement*) libp->para[0].ref;
   const HBeamElement& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HBeamParticle */
static int G__PionTrackerDict_628_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBeamParticle* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBeamParticle[n];
     } else {
       p = new((void*) gvp) HBeamParticle[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBeamParticle;
     } else {
       p = new((void*) gvp) HBeamParticle;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamParticle*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HBeamParticle*) G__getstructoffset())->print((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HBeamParticle*) G__getstructoffset())->print();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HBeamParticle::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeamParticle::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HBeamParticle::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBeamParticle::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeamParticle*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeamParticle::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBeamParticle::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeamParticle::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_628_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBeamParticle::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_628_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HBeamParticle* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HBeamParticle(*(HBeamParticle*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HBeamParticle G__THBeamParticle;
static int G__PionTrackerDict_628_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HBeamParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HBeamParticle*) (soff+(sizeof(HBeamParticle)*i)))->~G__THBeamParticle();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HBeamParticle*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HBeamParticle*) (soff))->~G__THBeamParticle();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_628_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBeamParticle* dest = (HBeamParticle*) G__getstructoffset();
   *dest = *(HBeamParticle*) libp->para[0].ref;
   const HBeamParticle& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HBeam */
static int G__PionTrackerDict_629_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBeam* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBeam[n];
     } else {
       p = new((void*) gvp) HBeam[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HBeam;
     } else {
       p = new((void*) gvp) HBeam;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HBeamElement>& obj = ((HBeam*) G__getstructoffset())->getDetectors();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HBeamElement>& obj = ((HBeam*) G__getstructoffset())->getElements();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HBeamParticle>& obj = ((HBeam*) G__getstructoffset())->getHistory();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeam*) G__getstructoffset())->setTargetElementOnly((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      G__letint(result7, 105, (long) ((HBeam*) G__getstructoffset())->addDetector(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
      break;
   case 4:
      G__letint(result7, 105, (long) ((HBeam*) G__getstructoffset())->addDetector(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 105, (long) ((HBeam*) G__getstructoffset())->addDetector(*((TString*) G__int(libp->para[0])), (Double_t) G__double(libp->para[1])
, (Int_t) G__int(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 6:
      ((HBeam*) G__getstructoffset())->setBeam((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HBeam*) G__getstructoffset())->setBeam((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HBeam*) G__getstructoffset())->setBeam((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HBeam*) G__getstructoffset())->setBeamResolution((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HBeam*) G__getstructoffset())->setBeamResolution((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HBeam*) G__getstructoffset())->setBeamResolution((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HBeam*) G__getstructoffset())->setBeamResolution();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HBeam*) G__getstructoffset())->setBeamProfile((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HBeam*) G__getstructoffset())->setBeamProfile((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HBeam*) G__getstructoffset())->setBeamProfile();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeam*) G__getstructoffset())->createBeam(*(HBeamParticle*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HBeam*) G__getstructoffset())->transport(*(HBeamParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HBeam*) G__getstructoffset())->createDetectorHits(*(HBeamParticle*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HBeamParticle>& obj = ((HBeam*) G__getstructoffset())->newParticle();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HBeam*) G__getstructoffset())->printBeamLine((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HBeam*) G__getstructoffset())->printBeamLine();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeam*) G__getstructoffset())->printBeamProfile();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeam*) G__getstructoffset())->printDetectors();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HBeam*) G__getstructoffset())->initBeamLine(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])
, (Bool_t) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HBeam*) G__getstructoffset())->initBeamLine(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HBeam::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeam::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HBeam::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HBeam::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HBeam*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeam::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBeam::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HBeam::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_629_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HBeam::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_629_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HBeam* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HBeam(*(HBeam*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HBeam G__THBeam;
static int G__PionTrackerDict_629_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HBeam*) (soff+(sizeof(HBeam)*i)))->~G__THBeam();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HBeam*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HBeam*) (soff))->~G__THBeam();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_629_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HBeam* dest = (HBeam*) G__getstructoffset();
   *dest = *(HBeam*) libp->para[0].ref;
   const HBeam& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HPionTrackerDetGeomPar */
static int G__PionTrackerDict_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerDetGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerDetGeomPar[n];
     } else {
       p = new((void*) gvp) HPionTrackerDetGeomPar[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HPionTrackerDetGeomPar;
     } else {
       p = new((void*) gvp) HPionTrackerDetGeomPar;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HPionTrackerDetGeomPar*) G__getstructoffset())->getLabTransform();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerDetGeomPar*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerDetGeomPar*) G__getstructoffset())->getNumStrips());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HPionTrackerDetGeomPar*) G__getstructoffset())->getStripDistance());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerDetGeomPar*) G__getstructoffset())->setNumStrips((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerDetGeomPar*) G__getstructoffset())->setStripDistance((const Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HPionTrackerDetGeomPar*) G__getstructoffset())->getStripPos((const Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HPionTrackerDetGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerDetGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HPionTrackerDetGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HPionTrackerDetGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HPionTrackerDetGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerDetGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerDetGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HPionTrackerDetGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__PionTrackerDict_638_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HPionTrackerDetGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__PionTrackerDict_638_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HPionTrackerDetGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HPionTrackerDetGeomPar(*(HPionTrackerDetGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HPionTrackerDetGeomPar G__THPionTrackerDetGeomPar;
static int G__PionTrackerDict_638_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HPionTrackerDetGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HPionTrackerDetGeomPar*) (soff+(sizeof(HPionTrackerDetGeomPar)*i)))->~G__THPionTrackerDetGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HPionTrackerDetGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HPionTrackerDetGeomPar*) (soff))->~G__THPionTrackerDetGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__PionTrackerDict_638_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HPionTrackerDetGeomPar* dest = (HPionTrackerDetGeomPar*) G__getstructoffset();
   *dest = *(HPionTrackerDetGeomPar*) libp->para[0].ref;
   const HPionTrackerDetGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HPionTrackerDetector */

/* HPionTrackerRaw */

/* HPionTrackerCal */

/* HPionTrackerHit */

/* HPionTrackerTrack */

/* HPionTrackerTaskSet */

/* HPionTrackerTrb3Lookup */

/* HPionTrackerTrb3LookupBoard */

/* HPionTrackerTrb3Unpacker */

/* HPionTrackerCalRunPars */

/* HPionTrackerCalRunPar */

/* HPionTrackerCalPar */

/* HPionTrackerHitFPar */

/* HPionTrackerCalibrater */

/* HPionTrackerGeomPar */

/* HPionTrackerHitF */

/* HPionTrackerMomPar */

/* HPionTrackerMomRunPars */

/* HPionTrackerMomRunPar */

/* HPionTrackerTrackFPar */

/* HPionTrackerBeamPar */

/* HPionTrackerTrackF */

/* HPionTrackerContFact */

/* HPionTrackerParAsciiFileIo */

/* HPionTrackerParRootFileIo */

/* HPionTrackerTrb3LookupChan */

/* HPionTrackerCalParCell */

/* HPionTrackerCalParMod */

/* HBeamElement */

/* HBeamParticle */

/* HBeam */

/* HPionTrackerDetGeomPar */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncPionTrackerDict {
 public:
  G__Sizep2memfuncPionTrackerDict(): p(&G__Sizep2memfuncPionTrackerDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncPionTrackerDict::*p)();
};

size_t G__get_sizep2memfuncPionTrackerDict()
{
  G__Sizep2memfuncPionTrackerDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritancePionTrackerDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector))) {
     HPionTrackerDetector *G__Lderived;
     G__Lderived=(HPionTrackerDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector),G__get_linked_tagnum(&G__PionTrackerDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw))) {
     HPionTrackerRaw *G__Lderived;
     G__Lderived=(HPionTrackerRaw*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal))) {
     HPionTrackerCal *G__Lderived;
     G__Lderived=(HPionTrackerCal*)0x1000;
     {
       HPionTrackerRaw *G__Lpbase=(HPionTrackerRaw*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal),G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit))) {
     HPionTrackerHit *G__Lderived;
     G__Lderived=(HPionTrackerHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack))) {
     HPionTrackerTrack *G__Lderived;
     G__Lderived=(HPionTrackerTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet))) {
     HPionTrackerTaskSet *G__Lderived;
     G__Lderived=(HPionTrackerTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet),G__get_linked_tagnum(&G__PionTrackerDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet),G__get_linked_tagnum(&G__PionTrackerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup))) {
     HPionTrackerTrb3Lookup *G__Lderived;
     G__Lderived=(HPionTrackerTrb3Lookup*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard))) {
     HPionTrackerTrb3LookupBoard *G__Lderived;
     G__Lderived=(HPionTrackerTrb3LookupBoard*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker))) {
     HPionTrackerTrb3Unpacker *G__Lderived;
     G__Lderived=(HPionTrackerTrb3Unpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker),G__get_linked_tagnum(&G__PionTrackerDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet))) {
     HParSet *G__Lderived;
     G__Lderived=(HParSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars))) {
     HPionTrackerCalRunPars *G__Lderived;
     G__Lderived=(HPionTrackerCalRunPars*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar))) {
     HPionTrackerCalRunPar *G__Lderived;
     G__Lderived=(HPionTrackerCalRunPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar))) {
     HPionTrackerCalPar *G__Lderived;
     G__Lderived=(HPionTrackerCalPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar))) {
     HPionTrackerHitFPar *G__Lderived;
     G__Lderived=(HPionTrackerHitFPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater))) {
     HPionTrackerCalibrater *G__Lderived;
     G__Lderived=(HPionTrackerCalibrater*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater),G__get_linked_tagnum(&G__PionTrackerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater),G__get_linked_tagnum(&G__PionTrackerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar))) {
     HPionTrackerGeomPar *G__Lderived;
     G__Lderived=(HPionTrackerGeomPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF))) {
     HPionTrackerHitF *G__Lderived;
     G__Lderived=(HPionTrackerHitF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF),G__get_linked_tagnum(&G__PionTrackerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF),G__get_linked_tagnum(&G__PionTrackerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar))) {
     HPionTrackerMomPar *G__Lderived;
     G__Lderived=(HPionTrackerMomPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars))) {
     HPionTrackerMomRunPars *G__Lderived;
     G__Lderived=(HPionTrackerMomRunPars*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar))) {
     HPionTrackerMomRunPar *G__Lderived;
     G__Lderived=(HPionTrackerMomRunPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar))) {
     HPionTrackerTrackFPar *G__Lderived;
     G__Lderived=(HPionTrackerTrackFPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar))) {
     HPionTrackerBeamPar *G__Lderived;
     G__Lderived=(HPionTrackerBeamPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar),G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF))) {
     HPionTrackerTrackF *G__Lderived;
     G__Lderived=(HPionTrackerTrackF*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF),G__get_linked_tagnum(&G__PionTrackerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF),G__get_linked_tagnum(&G__PionTrackerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact))) {
     HPionTrackerContFact *G__Lderived;
     G__Lderived=(HPionTrackerContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact),G__get_linked_tagnum(&G__PionTrackerDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo))) {
     HPionTrackerParAsciiFileIo *G__Lderived;
     G__Lderived=(HPionTrackerParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo))) {
     HPionTrackerParRootFileIo *G__Lderived;
     G__Lderived=(HPionTrackerParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan))) {
     HPionTrackerTrb3LookupChan *G__Lderived;
     G__Lderived=(HPionTrackerTrb3LookupChan*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell))) {
     HPionTrackerCalParCell *G__Lderived;
     G__Lderived=(HPionTrackerCalParCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod))) {
     HPionTrackerCalParMod *G__Lderived;
     G__Lderived=(HPionTrackerCalParMod*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement))) {
     HBeamElement *G__Lderived;
     G__Lderived=(HBeamElement*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle))) {
     HBeamParticle *G__Lderived;
     G__Lderived=(HBeamParticle*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam))) {
     HBeam *G__Lderived;
     G__Lderived=(HBeam*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar))) {
     HPionTrackerDetGeomPar *G__Lderived;
     G__Lderived=(HPionTrackerDetGeomPar*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar),G__get_linked_tagnum(&G__PionTrackerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetablePionTrackerDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("UInt_t",104,-1,0,-1);
   G__setnewtype(-1,"Unsigned integer 4 bytes (unsigned int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,HPionTrackerCalRunPars*>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HPionTrackerCalRunPars*>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HPionTrackerCalRunPars*,less<int> >",117,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Int_t,Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_pairlEintcOfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("pair<Float_t,std::pair<Int_t,Float_t> >",117,G__get_linked_tagnum(&G__PionTrackerDictLN_pairlEfloatcOpairlEintcOfloatgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HitCanData>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHitCanDatacOallocatorlEHitCanDatagRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHitCanDatacOallocatorlEHitCanDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHitCanDatacOallocatorlEHitCanDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHitCanDatacOallocatorlEHitCanDatagRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHitCanDatacOallocatorlEHitCanDatagRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,HPionTrackerMomRunPars*>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HPionTrackerMomRunPars*>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,HPionTrackerMomRunPars*,less<int> >",117,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixT<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow_const<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn_const<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTColumn_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag_const<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat_const<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTFlat_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub_const<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTSub_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow_const<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTSparseRow_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag_const<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTSparseDiag_constlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTRow<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTColumn<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTColumnlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTDiag<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTFlat<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTFlatlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSub<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTSublEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseRow<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTSparseRowlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTSparseDiag<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TMatrixTSparseDiaglEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementActionT<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TElementActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TElementPosActionT<Float_t>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_TElementPosActionTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HBeamElement>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamElementcOallocatorlEHBeamElementgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamElementcOallocatorlEHBeamElementgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HBeamParticle>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HPionTrackerDetector */
static void G__setup_memvarHPionTrackerDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector));
   { HPionTrackerDetector *p; p=(HPionTrackerDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerRaw */
static void G__setup_memvarHPionTrackerRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw));
   { HPionTrackerRaw *p; p=(HPionTrackerRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMultiplicity=",0,"number of hits per strip per event");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fModule=",0,"module number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fStrip=",0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,-1,G__defined_typename("Int_t"),-2,2,"fMaxMultiplicity=1LL",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fTime[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCharge[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fPileUp[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"fOverflow[1]=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerCal */
static void G__setup_memvarHPionTrackerCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal));
   { HPionTrackerCal *p; p=(HPionTrackerCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerHit */
static void G__setup_memvarHPionTrackerHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit));
   { HPionTrackerHit *p; p=(HPionTrackerHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fPlane=",0,"plane number (0,1)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fHitCnt=",0,"hit counter");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTime=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeX=",0,"time of hit in cluster X");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTimeY=",0,"time of hit in cluster Y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeX=",0,"charge of hit in cluster X");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeY=",0,"charge of hit in cluster Y");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLocalX=",0,"position of cluster in detector coordinate system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLocalY=",0,"position of cluster in detector coordinate system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLabX=",0,"X position of cluster in lab coordinate system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLabY=",0,"Y position of cluster in lab coordinate system [mm]");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fLabZ=",0,"Z position of cluster in lab coordinate system [mm]");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTrack */
static void G__setup_memvarHPionTrackerTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack));
   { HPionTrackerTrack *p; p=(HPionTrackerTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fP=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fCosTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX1=",0,"position on pion det 1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fX2=",0,"position on pion det 2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY2=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXh=",0,"X position on target");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYh=",0,"Y position on target");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPx=",0,"X momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPy=",0,"Y momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPz=",0,"Z momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPhi0=",0,"phi production target	");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fTheta0=",0,"theta production target");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fY0=",0,"y postion at the production target");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fMatch=",0,"quality match");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDist=",0,"momentum selection based on distance");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTaskSet */
static void G__setup_memvarHPionTrackerTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet));
   { HPionTrackerTaskSet *p; p=(HPionTrackerTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fSkipEvent=",0,"Switch to control skipping event w/o found reconstructed time. Default is kFALSE");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUsePionTrackerHit=",0,"Turns on/off PionTrackerHitF task. Default is kTRUE");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"fUsePionTrackerTrack=",0,"Turns on/off PionTrackerHitF task. Default is kTRUE");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTrb3Lookup */
static void G__setup_memvarHPionTrackerTrb3Lookup(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup));
   { HPionTrackerTrb3Lookup *p; p=(HPionTrackerTrb3Lookup*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HPionTrackerTrb3LookupBoard");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"arrayOffset=",0,"offset to calculate the index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTrb3LookupBoard */
static void G__setup_memvarHPionTrackerTrb3LookupBoard(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard));
   { HPionTrackerTrb3LookupBoard *p; p=(HPionTrackerTrb3LookupBoard*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HPionTrackerTrb3LookupChan objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTrb3Unpacker */
static void G__setup_memvarHPionTrackerTrb3Unpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker));
   { HPionTrackerTrb3Unpacker *p; p=(HPionTrackerTrb3Unpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"subEvtId=",0,"subevent id");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"uTrbNetAddress=",0,"TrbNetAdress");
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,2,"nEvt=",0,"Evt SeqNumber");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"debugFlag=",0,"! allows to print subevent information to the STDOUT");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"quietMode=",0,"! do not print errors!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"reportCritical=",0,"! report critical errors!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HLocation),-1,-1,2,"loc=",0,"location of raw cell object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup),-1,-1,2,"pLookup=",0,"TRB3 lookup table for PionTracker");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard),-1,-1,2,"pTrbBoard=",0,"pointer to TRB board in lookup table ");
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3UnpackercLcLptstate),-1,-2,1,G__FastAllocString(2048).Format("sm_wait_for_board=%lldLL",(long long)HPionTrackerTrb3Unpacker::sm_wait_for_board).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3UnpackercLcLptstate),-1,-2,1,G__FastAllocString(2048).Format("sm_header=%lldLL",(long long)HPionTrackerTrb3Unpacker::sm_header).data(),0,(char*)NULL);
   G__memvar_setup((void*)G__PVOID,105,0,1,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3UnpackercLcLptstate),-1,-2,1,G__FastAllocString(2048).Format("sm_data=%lldLL",(long long)HPionTrackerTrb3Unpacker::sm_data).data(),0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerCalRunPars */
static void G__setup_memvarHPionTrackerCalRunPars(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars));
   { HPionTrackerCalRunPars *p; p=(HPionTrackerCalRunPars*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"npars=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayD),-1,-1,2,"offsets=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerCalRunPar */
static void G__setup_memvarHPionTrackerCalRunPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar));
   { HPionTrackerCalRunPar *p; p=(HPionTrackerCalRunPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgR),G__defined_typename("map<Int_t,HPionTrackerCalRunPars*>"),-1,2,"fMRunID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fVRunID=",0,"list of runIDs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgRcLcLiterator),-1,-1,2,"fMIter=",0,"! remember the current runMap");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerCalPar */
static void G__setup_memvarHPionTrackerCalPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar));
   { HPionTrackerCalPar *p; p=(HPionTrackerCalPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TObjArray),-1,-1,2,"array=",0,"array of pointers of type HPionTrackerCalParMod");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerHitFPar */
static void G__setup_memvarHPionTrackerHitFPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar));
   { HPionTrackerHitFPar *p; p=(HPionTrackerHitFPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numModules=",0,"number of modules");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fTimeWindowOffset=",0,"time window offset");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fTimeWindowWidth=",0,"time window width");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fChargeThresh=",0,"threshold value for single strip charge");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fClusterDistX=",0,"max cluster dist x");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fClusterDistT=",0,"max cluster dist T");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fClusterThresh=",0,"min cluster charge");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fHitMatchTimeC=",0,"center");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fHitMatchTimeW=",0,"width: 3 sigma");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fHitMatchChargeC=",0,"center");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayF),-1,-1,2,"fHitMatchChargeW=",0,"width: 3 sigma");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"numPlanes=",0,"number of modules");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayI),-1,-1,2,"fPlanePair=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerCalibrater */
static void G__setup_memvarHPionTrackerCalibrater(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater));
   { HPionTrackerCalibrater *p; p=(HPionTrackerCalibrater*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory),-1,-1,2,"pRawCat=",0,"pointer to the raw data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory),-1,-1,2,"pCalCat=",0,"pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HIterator),-1,-1,2,"iter=",0,"iterator on raw data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HLocation),-1,-1,2,"loc=",0,"location for new cal object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar),-1,-1,2,"pCalpar=",0,"pointer to calibration parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar),-1,-1,2,"pHitfpar=",0,"pinter to hit parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar),-1,-1,2,"pRunpar=",0,"pionter to calibration paramters");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars),-1,-1,2,"correction=",0,"!corrections per strip ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"corrs[4]=",0,"corrections for global temperature offset (runID)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"charge_offset[4]=",0,"corrections for global temperature offset (by comparing modules) ");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"calib_charge[4]=",0,"switch on/off usage of adc in hitfinder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerGeomPar */
static void G__setup_memvarHPionTrackerGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar));
   { HPionTrackerGeomPar *p; p=(HPionTrackerGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TObjArray),-1,-1,4,"pDetectors=",0,"linear array of all detectors (type HPionTrackerDetGeomPar)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numDetectors=",0,"number of detectors");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerHitF */
static void G__setup_memvarHPionTrackerHitF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF));
   { HPionTrackerHitF *p; p=(HPionTrackerHitF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory),-1,-1,2,"pCalCat=",0,"pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory),-1,-1,2,"pHitCat=",0,"pointer to the hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HIterator),-1,-1,2,"iter=",0,"iterator on cal data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HLocation),-1,-1,2,"loccal=",0,"location of the cal object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HLocation),-1,-1,2,"loc=",0,"location for new hit object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar),-1,-1,2,"pHitfpar=",0,"hit finder parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar),-1,-1,2,"pGeompar=",0,"geometry parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerMomPar */
static void G__setup_memvarHPionTrackerMomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar));
   { HPionTrackerMomPar *p; p=(HPionTrackerMomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fYYWeight=",0,"weighting factor of the yy correlation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fYYSlope=",0,"slope of the yy correlation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fYYOffset=",0,"offset of the yy correlation");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fMomWeight=",0,"weighting factor of the yy correlation");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fElossCorr=",0,"energy loss correction of the pion momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerMomRunPars */
static void G__setup_memvarHPionTrackerMomRunPars(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars));
   { HPionTrackerMomRunPars *p; p=(HPionTrackerMomRunPars*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"npars=",0,"???????");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TArrayD),-1,-1,2,"offsets=",0,"???");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerMomRunPar */
static void G__setup_memvarHPionTrackerMomRunPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar));
   { HPionTrackerMomRunPar *p; p=(HPionTrackerMomRunPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgR),G__defined_typename("map<Int_t,HPionTrackerMomRunPars*>"),-1,2,"fMRunID=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR),G__defined_typename("vector<Int_t>"),-1,2,"fVRunID=",0,"list of runIDs");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgRcLcLiterator),-1,-1,2,"fMIter=",0,"! remember the current runMap");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTrackFPar */
static void G__setup_memvarHPionTrackerTrackFPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar));
   { HPionTrackerTrackFPar *p; p=(HPionTrackerTrackFPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"fTrackingFlag=",0,"tracking flag for momentum reconstruction (0: no tracking) ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRefMom=",0,"central momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRefX1=",0,"reference position X1 at central momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRefY1=",0,"reference position Y1 at central momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRefX2=",0,"reference position X2 at central momentum");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fRefY2=",0,"reference position Y2 at central momentum");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerBeamPar */
static void G__setup_memvarHPionTrackerBeamPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar));
   { HPionTrackerBeamPar *p; p=(HPionTrackerBeamPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam),-1,-1,4,"beam=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"ftargetElementNum=",0,"element ID of target");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTrackF */
static void G__setup_memvarHPionTrackerTrackF(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF));
   { HPionTrackerTrackF *p; p=(HPionTrackerTrackF*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory),-1,-1,2,"pHitCat=",0,"pointer to the cal data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory),-1,-1,2,"pTrackCat=",0,"pointer to the hit data");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HIterator),-1,-1,2,"iter=",0,"iterator on cal data.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HLocation),-1,-1,2,"lochit=",0,"location of the cal object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HLocation),-1,-1,2,"loc=",0,"location for new hit object");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar),-1,-1,2,"pTrackfpar=",0,"pointer to track finder parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar),-1,-1,2,"pTrackBeampar=",0,"pointer to beam parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar),-1,-1,2,"pTrackerMompar=",0,"pointer to momentum selection & correction parameters");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar),-1,-1,2,"pTrackerMomRunpar=",0,"pointer to momentum selection & correction  parameters per run");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars),-1,-1,2,"correction=",0,"momentum selection & corrections per run");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"corrs[2]=",0,"momentum correction: max transmission & mean offset");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"idet1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"idet2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"id_det1=",0,"beam element");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"id_det2=",0,"beam element");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"id_outQ9=",0,"beam element");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"id_targ=",0,"beam element");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T12[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T14[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T16[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T126[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T146[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T166[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T32[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T33[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T34[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T36[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T336[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T346[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T366[2]=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T12_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T14_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T16_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T126_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T146_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T166_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T32_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T33_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T34_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T36_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T326_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T336_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T346_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T366_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T21_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T22_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T23_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T24_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T26_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T226_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T246_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T266_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T41_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T42_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T43_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T44_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T46_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T426_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T436_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T446_t=",0,"!");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"T466_t=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nev=",0,"! EVENT COUNTER FOR FILE");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ifstream"),-1,2,"inputpos=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("ifstream"),-1,2,"scanpos=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerContFact */
static void G__setup_memvarHPionTrackerContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact));
   { HPionTrackerContFact *p; p=(HPionTrackerContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerParAsciiFileIo */
static void G__setup_memvarHPionTrackerParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo));
   { HPionTrackerParAsciiFileIo *p; p=(HPionTrackerParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerParRootFileIo */
static void G__setup_memvarHPionTrackerParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo));
   { HPionTrackerParRootFileIo *p; p=(HPionTrackerParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerTrb3LookupChan */
static void G__setup_memvarHPionTrackerTrb3LookupChan(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan));
   { HPionTrackerTrb3LookupChan *p; p=(HPionTrackerTrb3LookupChan*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"module=",0,"module number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"cell=",0,"cell number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerCalParCell */
static void G__setup_memvarHPionTrackerCalParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell));
   { HPionTrackerCalParCell *p; p=(HPionTrackerCalParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcSlope=",0,"TDC slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"tdcOffset=",0,"TDC offset");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adcSlope=",0,"ADC slope");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"adcOffset=",0,"ADC offset");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerCalParMod */
static void G__setup_memvarHPionTrackerCalParMod(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod));
   { HPionTrackerCalParMod *p; p=(HPionTrackerCalParMod*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TObjArray),-1,-1,2,"array=",0,"pointer array containing HPionTrackerCalParCell objects");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HBeamElement */
static void G__setup_memvarHBeamElement(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement));
   { HBeamElement *p; p=(HBeamElement*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TString),-1,-1,1,"fName=",0,"name of the lement : default  = Element[i]");
   G__memvar_setup((void*)((long)(&p->fDistance)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fDistance=",0,"position along beam line");
   G__memvar_setup((void*)((long)(&p->fId)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fId=",0,"element number");
   G__memvar_setup((void*)((long)(&p->Tij)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Tij[5][5]=",0,"first order transform");
   G__memvar_setup((void*)((long)(&p->Tijk)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Tijk[5][5][5]=",0,"second order transform");
   G__memvar_setup((void*)((long)(&p->fout)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fout[5]=",0,"particle state at element [x,tx,y,ty,dp]");
   G__memvar_setup((void*)((long)(&p->fxCut)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fxCut=",0,"cut ond x for apperture");
   G__memvar_setup((void*)((long)(&p->fyCut)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fyCut=",0,"cut ond y for apperture");
   G__memvar_setup((void*)((long)(&p->fCutType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fCutType=",0,"0: no cut ,1 : radial cut (default), 2: square cut");
   G__memvar_setup((void*)((long)(&p->fCtAll)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"fCtAll=",0,"count all beam particle transport");
   G__memvar_setup((void*)((long)(&p->fCtFail)-(long)(p)),110,0,0,-1,G__defined_typename("Long64_t"),-1,1,"fCtFail=",0,"count if particle is out of apperture");
   G__memvar_setup((void*)((long)(&p->fAccepted)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fAccepted=",0,"remembers the last result of check()");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HBeamParticle */
static void G__setup_memvarHBeamParticle(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle));
   { HBeamParticle *p; p=(HBeamParticle*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fP)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TVector3),-1,-1,1,"fP=",0,"momentum vector");
   G__memvar_setup((void*)((long)(&p->fPos)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TVector3),-1,-1,1,"fPos=",0,"position vector");
   G__memvar_setup((void*)((long)(&p->fOffset)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TVector3),-1,-1,1,"fOffset=",0,"beam could be displaced : profile function makes use of it");
   G__memvar_setup((void*)((long)(&p->fMomRes)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TVector3),-1,-1,1,"fMomRes=",0,"momentum resolution");
   G__memvar_setup((void*)((long)(&p->fBeamMom)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fBeamMom=",0,"nominal beam momentum");
   G__memvar_setup((void*)((long)(&p->fBeamMomSmeared)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fBeamMomSmeared=",0,"smeared beam momentum");
   G__memvar_setup((void*)((long)(&p->fPid)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fPid=",0,"type of beam particle");
   G__memvar_setup((void*)((long)(&p->fDetnum)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fDetnum=",0,"detector number where the transported particle was registered");
   G__memvar_setup((void*)((long)(&p->fName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TString),-1,-1,1,"fName=",0,"name of detecor where particle was registered");
   G__memvar_setup((void*)((long)(&p->fbeamtube_size_x)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fbeamtube_size_x=",0,"x general acceptance of the beam tube");
   G__memvar_setup((void*)((long)(&p->fbeamtube_size_y)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"fbeamtube_size_y=",0,"y general acceptance of the beam tube");
   G__memvar_setup((void*)((long)(&p->fAccepted)-(long)(p)),103,0,0,-1,G__defined_typename("Bool_t"),-1,1,"fAccepted=",0,"whether the particle was reaching the detector without violation acceptance");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HBeam */
static void G__setup_memvarHBeam(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam));
   { HBeam *p; p=(HBeam*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle),-1,-1,4,"fBeam=",0,"beam particle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TF1),-1,-1,4,"fProfile=",0,"-> beam profile");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR),G__defined_typename("vector<HBeamElement>"),-1,4,"fdetectors=",0,"vector of all detectors");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR),G__defined_typename("vector<HBeamElement>"),-1,4,"felements=",0,"vector of all beam elements");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR),G__defined_typename("vector<HBeamParticle>"),-1,4,"fhistory=",0,"! vector of beam particle at all detectors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fnum_target=",0,"index of elemnt target");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ftoPluto[5]=",0,"units -> transport ->Pluto");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"ffromPluto[5]=",0,"units -> Pluto     ->transport");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HPionTrackerDetGeomPar */
static void G__setup_memvarHPionTrackerDetGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar));
   { HPionTrackerDetGeomPar *p; p=(HPionTrackerDetGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"numStrips=",0,"number of strips in a detector plane           ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"stripDistance=",0,"distance between strip centers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_HGeomTransform),-1,-1,4,"labTransform=",0,"lab transformation of the detector front plane");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__PionTrackerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarPionTrackerDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHPionTrackerDetector(void) {
   /* HPionTrackerDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector));
   G__memfunc_setup("HPionTrackerDetector",2020,G__PionTrackerDict_190_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildMatrixCategory",1987,G__PionTrackerDict_190_0_5, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name f - 'Float_t' 0 '1.0' fill", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildLinearCategory",1961,G__PionTrackerDict_190_0_6, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory), -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getMaxModInSetup",1614,G__PionTrackerDict_190_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_190_0_9, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_190_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_190_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_190_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_190_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_190_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_190_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_190_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_190_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerDetector", 2020, G__PionTrackerDict_190_0_21, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerDetector", 2146, G__PionTrackerDict_190_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_190_0_23, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetector), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerRaw(void) {
   /* HPionTrackerRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw));
   G__memfunc_setup("HPionTrackerRaw",1492,G__PionTrackerDict_191_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMultiplicity",1609,G__PionTrackerDict_191_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__PionTrackerDict_191_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStrip",850,G__PionTrackerDict_191_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__PionTrackerDict_191_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__PionTrackerDict_191_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPileup",943,G__PionTrackerDict_191_0_7, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOverflow",1172,G__PionTrackerDict_191_0_8, 99, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndCharge",1580,G__PionTrackerDict_191_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - n f - 'Float_t' 1 - time "
"f - 'Float_t' 1 - charge", "hit: time, charge", (void*) NULL, 0);
   G__memfunc_setup("getErrors",957,G__PionTrackerDict_191_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - n c - 'Char_t' 1 - pileup "
"c - 'Char_t' 1 - overflow", "hit: pileup, overflow", (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__PionTrackerDict_191_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - m i - 'Int_t' 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__PionTrackerDict_191_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStrip",862,G__PionTrackerDict_191_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__PionTrackerDict_191_0_14, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - m i - 'Int_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setData",710,G__PionTrackerDict_191_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - time f - 'Float_t' 10 - charge "
"c - 'Char_t' 10 '0' pileup c - 'Char_t' 10 '0' overflow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_191_0_16, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_191_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_191_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_191_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_191_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_191_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_191_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_191_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_191_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerRaw::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerRaw", 1492, G__PionTrackerDict_191_0_28, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerRaw", 1618, G__PionTrackerDict_191_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_191_0_30, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerRaw), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerCal(void) {
   /* HPionTrackerCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal));
   G__memfunc_setup("InvalidAdc",975,G__PionTrackerDict_192_0_1, 105, -1, G__defined_typename("Int_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Int_t (*)())(&HPionTrackerCal::InvalidAdc) ), 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_192_0_2, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_192_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_192_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_192_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_192_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_192_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_192_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_192_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_192_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCal::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("HPionTrackerCal", 1466, G__PionTrackerDict_192_0_14, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerCal", 1466, G__PionTrackerDict_192_0_15, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerCal", 1592, G__PionTrackerDict_192_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_192_0_17, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCal), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerHit(void) {
   /* HPionTrackerHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit));
   G__memfunc_setup("HPionTrackerHit",1487,G__PionTrackerDict_193_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlane",816,G__PionTrackerDict_193_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitCnt",906,G__PionTrackerDict_193_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTime",719,G__PionTrackerDict_193_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__PionTrackerDict_193_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndCharge",1580,G__PionTrackerDict_193_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndChargeX",1668,G__PionTrackerDict_193_0_7, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeAndChargeY",1669,G__PionTrackerDict_193_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLocalPos",1117,G__PionTrackerDict_193_0_9, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabPos",897,G__PionTrackerDict_193_0_10, 121, -1, -1, 0, 3, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - - "
"f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlaneHit",1121,G__PionTrackerDict_193_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - m i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlane",828,G__PionTrackerDict_193_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitCnt",918,G__PionTrackerDict_193_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeAndCharge",1592,G__PionTrackerDict_193_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 10 - - f - 'Float_t' 10 - - "
"f - 'Float_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLocalPos",1129,G__PionTrackerDict_193_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLabPos",909,G__PionTrackerDict_193_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 10 - x f - 'Float_t' 10 - y "
"f - 'Float_t' 10 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAvgs",804,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_193_0_18, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_193_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_193_0_20, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_193_0_21, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_193_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_193_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_193_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_193_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_193_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerHit", 1487, G__PionTrackerDict_193_0_30, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerHit", 1613, G__PionTrackerDict_193_0_31, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_193_0_32, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHit), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTrack(void) {
   /* HPionTrackerTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack));
   G__memfunc_setup("HPionTrackerTrack",1695,G__PionTrackerDict_194_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPx",520,G__PionTrackerDict_194_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPy",521,G__PionTrackerDict_194_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPz",522,G__PionTrackerDict_194_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatch",813,G__PionTrackerDict_194_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getP",400,G__PionTrackerDict_194_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__PionTrackerDict_194_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__PionTrackerDict_194_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCosTheta",1115,G__PionTrackerDict_194_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi0",657,G__PionTrackerDict_194_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta0",870,G__PionTrackerDict_194_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY0",457,G__PionTrackerDict_194_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDist",724,G__PionTrackerDict_194_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPxyz",775,G__PionTrackerDict_194_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - px f - 'Float_t' 0 - py "
"f - 'Float_t' 0 - pz f - 'Float_t' 0 - match", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPThetaPhi",1203,G__PionTrackerDict_194_0_15, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - p f - 'Float_t' 0 - theta "
"f - 'Float_t' 0 - phi f - 'Float_t' 0 - match", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPos1",687,G__PionTrackerDict_194_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPos2",688,G__PionTrackerDict_194_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosH",710,G__PionTrackerDict_194_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPosAll",919,G__PionTrackerDict_194_0_19, 121, -1, -1, 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setProdAngles",1339,G__PionTrackerDict_194_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setProdY",826,G__PionTrackerDict_194_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDist",736,G__PionTrackerDict_194_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPos1",675,G__PionTrackerDict_194_0_23, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPos2",676,G__PionTrackerDict_194_0_24, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosH",698,G__PionTrackerDict_194_0_25, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getProdAngles",1327,G__PionTrackerDict_194_0_26, 121, -1, -1, 0, 2, 1, 1, 8, 
"f - 'Float_t' 1 - - f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getProdY",814,G__PionTrackerDict_194_0_27, 121, -1, -1, 0, 1, 1, 1, 8, "f - 'Float_t' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_194_0_28, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_194_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_194_0_30, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_194_0_31, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_194_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_194_0_36, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_194_0_37, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_194_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_194_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerTrack", 1695, G__PionTrackerDict_194_0_40, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTrack", 1821, G__PionTrackerDict_194_0_41, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_194_0_42, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrack), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTaskSet(void) {
   /* HPionTrackerTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet));
   G__memfunc_setup("parseArguments",1489,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'TString' - 0 - s1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerTaskSet",1897,G__PionTrackerDict_211_0_2, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerTaskSet",1897,G__PionTrackerDict_211_0_3, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__PionTrackerDict_211_0_4, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_211_0_5, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_211_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_211_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_211_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_211_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_211_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_211_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_211_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_211_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTaskSet", 2023, G__PionTrackerDict_211_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTrb3Lookup(void) {
   /* HPionTrackerTrb3Lookup */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup));
   G__memfunc_setup("HPionTrackerTrb3Lookup",2175,G__PionTrackerDict_216_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup), -1, 0, 5, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerTrb3Lookup\"' name C - 'Char_t' 10 '\"Lookup table for the TRB3 unpacker of the PionTracker\"' title "
"C - 'Char_t' 10 '\"PionTrackerTrb3LookupProduction\"' context i - 'Int_t' 0 'Trbnet::kPionTrackerTrb3MinTrbnetAddress' minTrbnetAddress "
"i - 'Int_t' 0 'Trbnet::kPionTrackerTrb3MaxTrbnetAddress' maxTrbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoard",808,G__PionTrackerDict_216_0_2, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - trbnetAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__PionTrackerDict_216_0_3, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__PionTrackerDict_216_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getArrayOffset",1446,G__PionTrackerDict_216_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParams",1169,G__PionTrackerDict_216_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__PionTrackerDict_216_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__PionTrackerDict_216_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__PionTrackerDict_216_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__PionTrackerDict_216_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_216_0_14, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTrb3Lookup::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_216_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3Lookup::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_216_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTrb3Lookup::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_216_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTrb3Lookup::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_216_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_216_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3Lookup::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_216_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3Lookup::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_216_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3Lookup::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_216_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3Lookup::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerTrb3Lookup", 2175, G__PionTrackerDict_216_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerTrb3Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTrb3Lookup", 2301, G__PionTrackerDict_216_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_216_0_28, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerTrb3Lookup' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTrb3LookupBoard(void) {
   /* HPionTrackerTrb3LookupBoard */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard));
   G__memfunc_setup("HPionTrackerTrb3LookupBoard",2663,G__PionTrackerDict_217_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel",1017,G__PionTrackerDict_217_0_2, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__PionTrackerDict_217_0_3, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__PionTrackerDict_217_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PionTrackerDict_217_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_217_0_6, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTrb3LookupBoard::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_217_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3LookupBoard::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_217_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTrb3LookupBoard::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_217_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTrb3LookupBoard::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_217_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_217_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3LookupBoard::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_217_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3LookupBoard::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_217_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3LookupBoard::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_217_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3LookupBoard::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerTrb3LookupBoard", 2663, G__PionTrackerDict_217_0_18, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerTrb3LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTrb3LookupBoard", 2789, G__PionTrackerDict_217_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_217_0_20, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerTrb3LookupBoard' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTrb3Unpacker(void) {
   /* HPionTrackerTrb3Unpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker));
   G__memfunc_setup("HPionTrackerTrb3Unpacker",2366,G__PionTrackerDict_221_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 '0' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setDebugFlag",1197,G__PionTrackerDict_221_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - db", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDebugFlag",1185,G__PionTrackerDict_221_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setQuietMode",1241,G__PionTrackerDict_221_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setReportCritical",1779,G__PionTrackerDict_221_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("decodeSubevent",1456,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_ptheaderset), -1, 0, 1, 1, 2, 0, "h - 'UInt_t' 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decodeData_Cosy13",1599,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_ptdataset), -1, 0, 2, 1, 2, 0, 
"h - 'UInt_t' 0 - d u 'ptheaderset' - 11 - hs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("decodeData_140115",1385,(G__InterfaceMethod) NULL, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_ptdataset), -1, 0, 2, 1, 2, 0, 
"h - 'UInt_t' 0 - d u 'ptheaderset' - 11 - hs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillRaw",721,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 2, 0, "u 'ptdataset' - 11 - ptds", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillRaw",721,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 2, 0, 
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - c - 'Char_t' 0 - - "
"c - 'Char_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_221_0_14, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTrb3Unpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_221_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3Unpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_221_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTrb3Unpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_221_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTrb3Unpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_221_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_221_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3Unpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_221_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3Unpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_221_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3Unpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_221_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3Unpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerTrb3Unpacker", 2366, G__PionTrackerDict_221_0_26, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerTrb3Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTrb3Unpacker", 2492, G__PionTrackerDict_221_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_221_0_28, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerTrb3Unpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerCalRunPars(void) {
   /* HPionTrackerCalRunPars */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars));
   G__memfunc_setup("HPionTrackerCalRunPars",2181,G__PionTrackerDict_475_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '4' size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNVals",804,G__PionTrackerDict_475_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSize",743,G__PionTrackerDict_475_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVal",623,G__PionTrackerDict_475_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVal",611,G__PionTrackerDict_475_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyVals",849,G__PionTrackerDict_475_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HPionTrackerCalRunPars' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVals",726,G__PionTrackerDict_475_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HPionTrackerCalRunPars' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__PionTrackerDict_475_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' runID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("data",410,G__PionTrackerDict_475_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PionTrackerDict_475_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_475_0_11, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerCalRunPars::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_475_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalRunPars::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_475_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerCalRunPars::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_475_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerCalRunPars::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_475_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_475_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalRunPars::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_475_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalRunPars::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_475_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalRunPars::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_475_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalRunPars::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerCalRunPars", 2181, G__PionTrackerDict_475_0_23, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerCalRunPars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerCalRunPars", 2307, G__PionTrackerDict_475_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_475_0_25, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPars), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerCalRunPars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerCalRunPar(void) {
   /* HPionTrackerCalRunPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar));
   G__memfunc_setup("HPionTrackerCalRunPar",2066,G__PionTrackerDict_476_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerCalRunPar\"' name C - 'Char_t' 10 '\"PionTracker Cal Parameters per run\"' title "
"C - 'Char_t' 10 '\"PionTrackerCalRunParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findRunID",867,G__PionTrackerDict_476_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - runID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeRun",963,G__PionTrackerDict_476_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - runID i - 'Int_t' 0 '1' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRun",606,G__PionTrackerDict_476_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - runID U 'HPionTrackerCalRunPars' - 0 - data "
"g - 'Bool_t' 0 'kFALSE' overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRun",629,G__PionTrackerDict_476_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - runID U 'HPionTrackerCalRunPars' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finishRunList",1362,G__PionTrackerDict_476_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRangeRunID",1263,G__PionTrackerDict_476_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - first i - 'Int_t' 1 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRunIDs",963,G__PionTrackerDict_476_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunIDList",1182,G__PionTrackerDict_476_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArrayI' - 0 '0' ar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printRunIDList",1419,G__PionTrackerDict_476_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printRun",866,G__PionTrackerDict_476_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - runID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__PionTrackerDict_476_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParams",1169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,G__PionTrackerDict_476_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - pFile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__PionTrackerDict_476_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PionTrackerDict_476_0_21, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerCalRunPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_476_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalRunPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_476_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerCalRunPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_476_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerCalRunPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_476_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_476_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalRunPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_476_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalRunPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_476_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalRunPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_476_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalRunPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerCalRunPar", 2066, G__PionTrackerDict_476_0_33, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerCalRunPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerCalRunPar", 2192, G__PionTrackerDict_476_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_476_0_35, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalRunPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerCalRunPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerCalPar(void) {
   /* HPionTrackerCalPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar));
   G__memfunc_setup("HPionTrackerCalPar",1757,G__PionTrackerDict_489_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerCalPar\"' name C - 'Char_t' 10 '\"Calibration parameters of the PionTracker\"' title "
"C - 'Char_t' 10 '\"PionTrackerCalParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__PionTrackerDict_489_0_2, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__PionTrackerDict_489_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - input I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParams",1169,G__PionTrackerDict_489_0_7, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readline",836,G__PionTrackerDict_489_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__PionTrackerDict_489_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__PionTrackerDict_489_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_489_0_11, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerCalPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_489_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_489_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerCalPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_489_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerCalPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_489_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_489_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_489_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_489_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_489_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerCalPar", 1757, G__PionTrackerDict_489_0_23, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerCalPar", 1883, G__PionTrackerDict_489_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_489_0_25, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerHitFPar(void) {
   /* HPionTrackerHitFPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar));
   G__memfunc_setup("HPionTrackerHitFPar",1848,G__PionTrackerDict_490_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerHitFPar\"' name C - 'Char_t' 10 '\"HitFinder parameters of the PionTracker\"' title "
"C - 'Char_t' 10 '\"PionTrackerHitFParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNumModules",1353,G__PionTrackerDict_490_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeWindowOffset",1966,G__PionTrackerDict_490_0_6, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTimeWindowWidth",1863,G__PionTrackerDict_490_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeThresh",1528,G__PionTrackerDict_490_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterDistX",1550,G__PionTrackerDict_490_0_9, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterDistT",1546,G__PionTrackerDict_490_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterThresh",1680,G__PionTrackerDict_490_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitMatchTimeC",1572,G__PionTrackerDict_490_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitMatchTimeW",1592,G__PionTrackerDict_490_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitMatchChargeC",1759,G__PionTrackerDict_490_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitMatchChargeW",1779,G__PionTrackerDict_490_0_15, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumPlanes",1235,G__PionTrackerDict_490_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlanePair",1212,G__PionTrackerDict_490_0_17, 121, -1, -1, 0, 3, 1, 1, 8, 
"i - 'Int_t' 10 - - i - 'Int_t' 1 - x "
"i - 'Int_t' 1 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlaneX",904,G__PionTrackerDict_490_0_18, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlaneY",905,G__PionTrackerDict_490_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumModules",1365,G__PionTrackerDict_490_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeWindowOffset",1978,G__PionTrackerDict_490_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTimeWindowWidth",1875,G__PionTrackerDict_490_0_22, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeThresh",1540,G__PionTrackerDict_490_0_23, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterDistX",1562,G__PionTrackerDict_490_0_24, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterDistT",1558,G__PionTrackerDict_490_0_25, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterThresh",1692,G__PionTrackerDict_490_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitMatchTime",1517,G__PionTrackerDict_490_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - - "
"f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitMatchCharge",1704,G__PionTrackerDict_490_0_28, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - - f - 'Float_t' 10 - - "
"f - 'Float_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumPlanes",1247,G__PionTrackerDict_490_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlanePair",1224,G__PionTrackerDict_490_0_30, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 10 - - i - 'Int_t' 10 - - "
"i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParam",817,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 0, 
"U 'HParamList' - 0 - l C - - 10 - name "
"U 'TArrayF' - 0 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParam",817,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 4, 0, 
"U 'HParamList' - 0 - l C - - 10 - name "
"U 'TArrayI' - 0 - arr i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_490_0_33, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerHitFPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_490_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHitFPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_490_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerHitFPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_490_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerHitFPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_490_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_490_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHitFPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_490_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerHitFPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_490_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHitFPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_490_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerHitFPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerHitFPar", 1848, G__PionTrackerDict_490_0_45, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerHitFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerHitFPar", 1974, G__PionTrackerDict_490_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_490_0_47, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitFPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerHitFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerCalibrater(void) {
   /* HPionTrackerCalibrater */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater));
   G__memfunc_setup("HPionTrackerCalibrater",2211,G__PionTrackerDict_491_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerCalibrater",2211,G__PionTrackerDict_491_0_2, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalibrater), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PionTrackerDict_491_0_7, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerCalibrater::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_491_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalibrater::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_491_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerCalibrater::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_491_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerCalibrater::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_491_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_491_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalibrater::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_491_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalibrater::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_491_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalibrater::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_491_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalibrater::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerCalibrater", 2337, G__PionTrackerDict_491_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerGeomPar(void) {
   /* HPionTrackerGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar));
   G__memfunc_setup("HPionTrackerGeomPar",1877,G__PionTrackerDict_492_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerGeomPar\"' name C - 'Char_t' 10 '\"Geometry parameters of the PionTracker\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParams",1169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getNumDetectors",1565,G__PionTrackerDict_492_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumDetectors",1577,G__PionTrackerDict_492_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDetector",1146,G__PionTrackerDict_492_0_8, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_492_0_9, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_492_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_492_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_492_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_492_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_492_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_492_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_492_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_492_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerGeomPar", 1877, G__PionTrackerDict_492_0_21, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerGeomPar", 2003, G__PionTrackerDict_492_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_492_0_23, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerGeomPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerHitF(void) {
   /* HPionTrackerHitF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF));
   G__memfunc_setup("sortfunction",1326,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 3, 2, 0, 
"u 'HitCanData' - 10 - can1 u 'HitCanData' - 10 - can2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerHitF",1557,G__PionTrackerDict_500_0_2, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerHitF",1557,G__PionTrackerDict_500_0_3, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerHitF), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' skip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PionTrackerDict_500_0_7, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerHitF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_500_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHitF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_500_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerHitF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_500_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerHitF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_500_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_500_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHitF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_500_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerHitF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_500_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerHitF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_500_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerHitF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerHitF", 1683, G__PionTrackerDict_500_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerMomPar(void) {
   /* HPionTrackerMomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar));
   G__memfunc_setup("HPionTrackerMomPar",1782,G__PionTrackerDict_501_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerMomPar\"' name C - 'Char_t' 10 '\"Momentum correction parameters of the PionTracker\"' title "
"C - 'Char_t' 10 '\"PionTrackerMomParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getYYWeight",1114,G__PionTrackerDict_501_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYYSlope",1013,G__PionTrackerDict_501_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYYOffset",1113,G__PionTrackerDict_501_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMomWeight",1233,G__PionTrackerDict_501_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElossCorr",1244,G__PionTrackerDict_501_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYYWeight",1126,G__PionTrackerDict_501_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - bt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYYSlope",1025,G__PionTrackerDict_501_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setYYOffset",1125,G__PionTrackerDict_501_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMomWeight",1245,G__PionTrackerDict_501_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - ry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElossCorr",1256,G__PionTrackerDict_501_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_501_0_15, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerMomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_501_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_501_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerMomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_501_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerMomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_501_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_501_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_501_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerMomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_501_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_501_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerMomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerMomPar", 1782, G__PionTrackerDict_501_0_27, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerMomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerMomPar", 1908, G__PionTrackerDict_501_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_501_0_29, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerMomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerMomRunPars(void) {
   /* HPionTrackerMomRunPars */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars));
   G__memfunc_setup("HPionTrackerMomRunPars",2206,G__PionTrackerDict_502_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '2' size", "size 2: max trans. value + offset", (void*) NULL, 0);
   G__memfunc_setup("getNVals",804,G__PionTrackerDict_502_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSize",743,G__PionTrackerDict_502_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - size", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVal",623,G__PionTrackerDict_502_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - val", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVal",611,G__PionTrackerDict_502_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyVals",849,G__PionTrackerDict_502_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HPionTrackerMomRunPars' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVals",726,G__PionTrackerDict_502_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HPionTrackerMomRunPars' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__PionTrackerDict_502_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '-1' runID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("data",410,G__PionTrackerDict_502_0_9, 68, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PionTrackerDict_502_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_502_0_11, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerMomRunPars::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_502_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomRunPars::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_502_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerMomRunPars::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_502_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerMomRunPars::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_502_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_502_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomRunPars::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_502_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerMomRunPars::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_502_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomRunPars::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_502_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerMomRunPars::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerMomRunPars", 2206, G__PionTrackerDict_502_0_23, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerMomRunPars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerMomRunPars", 2332, G__PionTrackerDict_502_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_502_0_25, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPars), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerMomRunPars' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerMomRunPar(void) {
   /* HPionTrackerMomRunPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar));
   G__memfunc_setup("HPionTrackerMomRunPar",2091,G__PionTrackerDict_503_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerMomRunPar\"' name C - 'Char_t' 10 '\"PionTracker Mom Parameters per run\"' title "
"C - 'Char_t' 10 '\"PionTrackerMomRunParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findRunID",867,G__PionTrackerDict_503_0_2, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - runID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeRun",963,G__PionTrackerDict_503_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - runID i - 'Int_t' 0 '1' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addRun",606,G__PionTrackerDict_503_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - runID U 'HPionTrackerMomRunPars' - 0 - data "
"g - 'Bool_t' 0 'kFALSE' overwrite", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRun",629,G__PionTrackerDict_503_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - runID U 'HPionTrackerMomRunPars' - 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finishRunList",1362,G__PionTrackerDict_503_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRangeRunID",1263,G__PionTrackerDict_503_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - first i - 'Int_t' 1 - last", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRunIDs",963,G__PionTrackerDict_503_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRunIDList",1182,G__PionTrackerDict_503_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TArrayI' - 0 '0' ar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printRunIDList",1419,G__PionTrackerDict_503_0_10, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printRun",866,G__PionTrackerDict_503_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - runID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__PionTrackerDict_503_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParams",1169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - l", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,G__PionTrackerDict_503_0_19, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - pFile", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putAsciiHeader",1419,G__PionTrackerDict_503_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PionTrackerDict_503_0_21, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerMomRunPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_503_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomRunPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_503_0_23, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerMomRunPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_503_0_24, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerMomRunPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_503_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_503_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomRunPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_503_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerMomRunPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_503_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerMomRunPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_503_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerMomRunPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerMomRunPar", 2091, G__PionTrackerDict_503_0_33, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerMomRunPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerMomRunPar", 2217, G__PionTrackerDict_503_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_503_0_35, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerMomRunPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerMomRunPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTrackFPar(void) {
   /* HPionTrackerTrackFPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar));
   G__memfunc_setup("HPionTrackerTrackFPar",2056,G__PionTrackerDict_511_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerTrackFPar\"' name C - 'Char_t' 10 '\"HitFinder parameters of the PionTracker\"' title "
"C - 'Char_t' 10 '\"PionTrackerTrackFParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTrackingFlag",1517,G__PionTrackerDict_511_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefMom",902,G__PionTrackerDict_511_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefX1",742,G__PionTrackerDict_511_0_7, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefY1",743,G__PionTrackerDict_511_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefX2",743,G__PionTrackerDict_511_0_9, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRefY2",744,G__PionTrackerDict_511_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackingFlag",1529,G__PionTrackerDict_511_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - bt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefMom",914,G__PionTrackerDict_511_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rm", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefX1",754,G__PionTrackerDict_511_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefY1",755,G__PionTrackerDict_511_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - ry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefX2",755,G__PionTrackerDict_511_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - rx", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRefY2",756,G__PionTrackerDict_511_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - ry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_511_0_17, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTrackFPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_511_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrackFPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_511_0_19, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTrackFPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_511_0_20, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTrackFPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_511_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_511_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrackFPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_511_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrackFPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_511_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrackFPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_511_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrackFPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerTrackFPar", 2056, G__PionTrackerDict_511_0_29, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerTrackFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTrackFPar", 2182, G__PionTrackerDict_511_0_30, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_511_0_31, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackFPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerTrackFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerBeamPar(void) {
   /* HPionTrackerBeamPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar));
   G__memfunc_setup("HPionTrackerBeamPar",1858,G__PionTrackerDict_512_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"PionTrackerBeamPar\"' name C - 'Char_t' 10 '\"parameters of the PionBeam\"' title "
"C - 'Char_t' 10 '\"PionTrackerBeamParProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("printParam",1054,G__PionTrackerDict_512_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initBeamLine",1201,G__PionTrackerDict_512_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TString' - 0 - filename i - 'Int_t' 0 '32' targetElementNum "
"g - 'Bool_t' 0 'kFALSE' debug", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createAsciiFile",1501,G__PionTrackerDict_512_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeam",693,G__PionTrackerDict_512_0_8, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTargetElementNumber",2266,G__PionTrackerDict_512_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNBeamElements",1600,G__PionTrackerDict_512_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBeamElement",1407,G__PionTrackerDict_512_0_11, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement), -1, 0, 1, 1, 1, 0, "h - 'UInt_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_512_0_12, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerBeamPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_512_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerBeamPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_512_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerBeamPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_512_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerBeamPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_512_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_512_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerBeamPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_512_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerBeamPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_512_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerBeamPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_512_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerBeamPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerBeamPar", 1858, G__PionTrackerDict_512_0_24, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerBeamPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerBeamPar", 1984, G__PionTrackerDict_512_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_512_0_26, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerBeamPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerBeamPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTrackF(void) {
   /* HPionTrackerTrackF */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF));
   G__memfunc_setup("sortfunction",1326,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 2, 3, 2, 0, 
"u 'track' - 10 - tr1 u 'track' - 10 - tr2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initVars",848,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("insertTrack",1162,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'track' - 11 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("momrec",643,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 6, 1, 2, 0, 
"f - 'Float_t' 0 - x1 f - 'Float_t' 0 - y1 "
"f - 'Float_t' 0 - x2 f - 'Float_t' 0 - y2 "
"f - 'Float_t' 0 - momref u 'track' - 1 - tr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerTrackF",1765,G__PionTrackerDict_514_0_5, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerTrackF",1765,G__PionTrackerDict_514_0_6, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrackF), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"g - 'Bool_t' 0 'kFALSE' skip", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBeamElements",1534,G__PionTrackerDict_514_0_7, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - id1 i - 'Int_t' 0 - id2 "
"i - 'Int_t' 0 - outQ9 i - 'Int_t' 0 - idtarg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PionTrackerDict_514_0_12, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTrackF::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_514_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrackF::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_514_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTrackF::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_514_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTrackF::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_514_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_514_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrackF::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_514_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrackF::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_514_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrackF::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_514_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrackF::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTrackF", 1891, G__PionTrackerDict_514_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerContFact(void) {
   /* HPionTrackerContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HPionTrackerContFact",1980,G__PionTrackerDict_517_0_2, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PionTrackerDict_517_0_4, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_517_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_517_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_517_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_517_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_517_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_517_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_517_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_517_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerContFact", 1980, G__PionTrackerDict_517_0_16, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerContFact", 2106, G__PionTrackerDict_517_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_517_0_18, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerContFact), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerParAsciiFileIo(void) {
   /* HPionTrackerParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo));
   G__memfunc_setup("HPionTrackerParAsciiFileIo",2542,G__PionTrackerDict_527_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__PionTrackerDict_527_0_4, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_527_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_527_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_527_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_527_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_527_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_527_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_527_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_527_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerParAsciiFileIo", 2542, G__PionTrackerDict_527_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerParAsciiFileIo", 2668, G__PionTrackerDict_527_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_527_0_18, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerParRootFileIo(void) {
   /* HPionTrackerParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo));
   G__memfunc_setup("HPionTrackerParRootFileIo",2473,G__PionTrackerDict_560_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__PionTrackerDict_560_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HPionTrackerCalPar' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_560_0_4, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_560_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_560_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_560_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_560_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_560_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_560_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_560_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_560_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerParRootFileIo", 2473, G__PionTrackerDict_560_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerParRootFileIo", 2599, G__PionTrackerDict_560_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_560_0_18, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerTrb3LookupChan(void) {
   /* HPionTrackerTrb3LookupChan */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan));
   G__memfunc_setup("HPionTrackerTrb3LookupChan",2553,G__PionTrackerDict_563_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__PionTrackerDict_563_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCell",704,G__PionTrackerDict_563_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__PionTrackerDict_563_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 1 - m i - 'Int_t' 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PionTrackerDict_563_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__PionTrackerDict_563_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCell",716,G__PionTrackerDict_563_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__PionTrackerDict_563_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - m i - 'Int_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__PionTrackerDict_563_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HPionTrackerTrb3LookupChan' - 1 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_563_0_10, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerTrb3LookupChan::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_563_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3LookupChan::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_563_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerTrb3LookupChan::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_563_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerTrb3LookupChan::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_563_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_563_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3LookupChan::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_563_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3LookupChan::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_563_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerTrb3LookupChan::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_563_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerTrb3LookupChan::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerTrb3LookupChan", 2553, G__PionTrackerDict_563_0_22, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerTrb3LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerTrb3LookupChan", 2679, G__PionTrackerDict_563_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_563_0_24, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerTrb3LookupChan' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerCalParCell(void) {
   /* HPionTrackerCalParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell));
   G__memfunc_setup("HPionTrackerCalParCell",2141,G__PionTrackerDict_564_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PionTrackerDict_564_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcSlope",1118,G__PionTrackerDict_564_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTdcOffset",1218,G__PionTrackerDict_564_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAdcSlope",1099,G__PionTrackerDict_564_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAdcOffset",1199,G__PionTrackerDict_564_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getData",698,G__PionTrackerDict_564_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - data", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcSlope",1130,G__PionTrackerDict_564_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTdcOffset",1230,G__PionTrackerDict_564_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAdcSlope",1111,G__PionTrackerDict_564_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAdcOffset",1211,G__PionTrackerDict_564_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - o", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__PionTrackerDict_564_0_12, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - - f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__PionTrackerDict_564_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "F - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__PionTrackerDict_564_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HPionTrackerCalParCell' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_564_0_15, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerCalParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_564_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_564_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerCalParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_564_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerCalParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_564_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_564_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_564_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_564_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_564_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerCalParCell", 2141, G__PionTrackerDict_564_0_27, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerCalParCell", 2267, G__PionTrackerDict_564_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_564_0_29, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerCalParMod(void) {
   /* HPionTrackerCalParMod */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod));
   G__memfunc_setup("HPionTrackerCalParMod",2045,G__PionTrackerDict_565_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '128' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator[]",1060,G__PionTrackerDict_565_0_2, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParCell), -1, 1, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSize",731,G__PionTrackerDict_565_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_565_0_4, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerCalParMod::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_565_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalParMod::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_565_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerCalParMod::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_565_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerCalParMod::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_565_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_565_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalParMod::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_565_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalParMod::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_565_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerCalParMod::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_565_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerCalParMod::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerCalParMod", 2045, G__PionTrackerDict_565_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerCalParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerCalParMod", 2171, G__PionTrackerDict_565_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_565_0_18, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerCalParMod), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerCalParMod' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHBeamElement(void) {
   /* HBeamElement */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement));
   G__memfunc_setup("HBeamElement",1159,G__PionTrackerDict_627_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement), -1, 0, 3, 1, 1, 0, 
"u 'TString' - 0 '\"not_set\"' n d - 'Double_t' 0 '0' dist "
"i - 'Int_t' 0 '-1' id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setElement",1046,G__PionTrackerDict_627_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'TString' - 0 - name i - 'Int_t' 0 - cuttype "
"d - 'Double_t' 0 - xcut d - 'Double_t' 0 - ycut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PionTrackerDict_627_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTij",852,G__PionTrackerDict_627_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printTijk",959,G__PionTrackerDict_627_0_5, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__PionTrackerDict_627_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' printAll", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isInAcceptance",1402,G__PionTrackerDict_627_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("check",510,G__PionTrackerDict_627_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("toLinearArray",1341,G__PionTrackerDict_627_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 1 - all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fromLinearArray",1550,G__PionTrackerDict_627_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 1 - all", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_627_0_11, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HBeamElement::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_627_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeamElement::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_627_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HBeamElement::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_627_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HBeamElement::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_627_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_627_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeamElement::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_627_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBeamElement::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_627_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeamElement::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_627_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBeamElement::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HBeamElement", 1159, G__PionTrackerDict_627_0_23, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement), -1, 0, 1, 1, 1, 0, "u 'HBeamElement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HBeamElement", 1285, G__PionTrackerDict_627_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_627_0_25, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamElement), -1, 1, 1, 1, 1, 0, "u 'HBeamElement' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHBeamParticle(void) {
   /* HBeamParticle */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle));
   G__memfunc_setup("HBeamParticle",1265,G__PionTrackerDict_628_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__PionTrackerDict_628_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__PionTrackerDict_628_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' printAll", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_628_0_4, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HBeamParticle::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_628_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeamParticle::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_628_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HBeamParticle::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_628_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HBeamParticle::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_628_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_628_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeamParticle::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_628_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBeamParticle::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_628_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeamParticle::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_628_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBeamParticle::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HBeamParticle", 1265, G__PionTrackerDict_628_0_16, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle), -1, 0, 1, 1, 1, 0, "u 'HBeamParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HBeamParticle", 1391, G__PionTrackerDict_628_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_628_0_18, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HBeamParticle), -1, 1, 1, 1, 1, 0, "u 'HBeamParticle' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHBeam(void) {
   /* HBeam */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam));
   G__memfunc_setup("profile",753,(G__InterfaceMethod) NULL, 100, -1, G__defined_typename("Double_t"), 0, 2, 3, 4, 0, 
"D - 'Double_t' 0 - x D - 'Double_t' 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetElement",1661,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "h - 'UInt_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HBeam",445,G__PionTrackerDict_629_0_3, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDetectors",1261,G__PionTrackerDict_629_0_4, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR), G__defined_typename("vector<HBeamElement>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getElements",1149,G__PionTrackerDict_629_0_5, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR), G__defined_typename("vector<HBeamElement>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHistory",1074,G__PionTrackerDict_629_0_6, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR), G__defined_typename("vector<HBeamParticle>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTargetElementOnly",2079,G__PionTrackerDict_629_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addDetector",1123,G__PionTrackerDict_629_0_8, 105, -1, G__defined_typename("Int_t"), 0, 5, 1, 1, 0, 
"u 'TString' - 0 - name d - 'Double_t' 0 - distance "
"i - 'Int_t' 0 - cutType d - 'Double_t' 0 '50' xcut "
"d - 'Double_t' 0 '50' ycut", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBeam",705,G__PionTrackerDict_629_0_9, 121, -1, -1, 0, 6, 1, 1, 0, 
"i - 'Int_t' 0 - id d - 'Double_t' 0 - p "
"d - 'Double_t' 0 - dbeamtube_size_x d - 'Double_t' 0 - dbeamtube_size_y "
"d - 'Double_t' 0 '0' xoff d - 'Double_t' 0 '0' yoff", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBeamResolution",1781,G__PionTrackerDict_629_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '0.001' dpx d - 'Double_t' 0 '0.005' dpy "
"d - 'Double_t' 0 '0.06' dpz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBeamProfile",1426,G__PionTrackerDict_629_0_11, 121, -1, -1, 0, 2, 1, 1, 0, 
"d - 'Double_t' 0 '0.05' sigma_beam d - 'Double_t' 0 '0' flat_radius", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createBeam",1001,G__PionTrackerDict_629_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HBeamParticle' - 1 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transport",1005,G__PionTrackerDict_629_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HBeamParticle' - 1 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createDetectorHits",1862,G__PionTrackerDict_629_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HBeamParticle' - 1 - part", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("newParticle",1150,G__PionTrackerDict_629_0_15, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR), G__defined_typename("vector<HBeamParticle>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printBeamLine",1322,G__PionTrackerDict_629_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' trans", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printBeamProfile",1651,G__PionTrackerDict_629_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printDetectors",1498,G__PionTrackerDict_629_0_18, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initBeamLine",1201,G__PionTrackerDict_629_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"u 'TString' - 0 - filename i - 'Int_t' 0 - targetElementNum "
"g - 'Bool_t' 0 'kFALSE' debug", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_629_0_20, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HBeam::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_629_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeam::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_629_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HBeam::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_629_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HBeam::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_629_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_629_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeam::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_629_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBeam::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_629_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HBeam::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_629_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HBeam::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HBeam", 445, G__PionTrackerDict_629_0_32, (int) ('i'), G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam), -1, 0, 1, 1, 1, 0, "u 'HBeam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HBeam", 571, G__PionTrackerDict_629_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_629_0_34, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HBeam), -1, 1, 1, 1, 1, 0, "u 'HBeam' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHPionTrackerDetGeomPar(void) {
   /* HPionTrackerDetGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar));
   G__memfunc_setup("HPionTrackerDetGeomPar",2162,G__PionTrackerDict_638_0_1, 105, G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransform",1547,G__PionTrackerDict_638_0_2, 117, G__get_linked_tagnum(&G__PionTrackerDictLN_HGeomTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__PionTrackerDict_638_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNumStrips",1269,G__PionTrackerDict_638_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStripDistance",1661,G__PionTrackerDict_638_0_5, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNumStrips",1281,G__PionTrackerDict_638_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setStripDistance",1673,G__PionTrackerDict_638_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getStripPos",1156,G__PionTrackerDict_638_0_8, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 10 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__PionTrackerDict_638_0_9, 85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HPionTrackerDetGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__PionTrackerDict_638_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerDetGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__PionTrackerDict_638_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HPionTrackerDetGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__PionTrackerDict_638_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HPionTrackerDetGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__PionTrackerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__PionTrackerDict_638_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__PionTrackerDict_638_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerDetGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__PionTrackerDict_638_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerDetGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__PionTrackerDict_638_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HPionTrackerDetGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__PionTrackerDict_638_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HPionTrackerDetGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HPionTrackerDetGeomPar", 2162, G__PionTrackerDict_638_0_21, (int) ('i'), 
G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar), -1, 0, 1, 1, 1, 0, "u 'HPionTrackerDetGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HPionTrackerDetGeomPar", 2288, G__PionTrackerDict_638_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__PionTrackerDict_638_0_23, (int) ('u'), G__get_linked_tagnum(&G__PionTrackerDictLN_HPionTrackerDetGeomPar), -1, 1, 1, 1, 1, 0, "u 'HPionTrackerDetGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncPionTrackerDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {
   G__memvar_setup((void*)(&catPionTrackerRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catPionTrackerRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catPionTrackerCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catPionTrackerCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catPionTrackerHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catPionTrackerHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catPionTrackerTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catPionTrackerTrack=",0,(char*)NULL);

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalPionTrackerDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {
}

static void G__cpp_setup_func29() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcPionTrackerDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
  G__cpp_setup_func29();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__PionTrackerDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR = { "basic_ifstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerDetector = { "HPionTrackerDetector" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerRaw = { "HPionTrackerRaw" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerCal = { "HPionTrackerCal" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerHit = { "HPionTrackerHit" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrack = { "HPionTrackerTrack" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTaskSet = { "HPionTrackerTaskSet" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrb3Lookup = { "HPionTrackerTrb3Lookup" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard = { "HPionTrackerTrb3LookupBoard" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_ptheaderset = { "ptheaderset" , 115 , -1 };
G__linked_taginfo G__PionTrackerDictLN_ptdataset = { "ptdataset" , 115 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrb3Unpacker = { "HPionTrackerTrb3Unpacker" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrb3UnpackercLcLptstate = { "HPionTrackerTrb3Unpacker::ptstate" , 101 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerCalRunPars = { "HPionTrackerCalRunPars" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerCalRunPar = { "HPionTrackerCalRunPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgR = { "map<int,HPionTrackerCalRunPars*,less<int>,allocator<pair<const int,HPionTrackerCalRunPars*> > >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgRcLcLiterator = { "map<int,HPionTrackerCalRunPars*,less<int>,allocator<pair<const int,HPionTrackerCalRunPars*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerCalPar = { "HPionTrackerCalPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerHitFPar = { "HPionTrackerHitFPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerCalibrater = { "HPionTrackerCalibrater" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerGeomPar = { "HPionTrackerGeomPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_pairlEintcOfloatgR = { "pair<int,float>" , 115 , -1 };
G__linked_taginfo G__PionTrackerDictLN_pairlEfloatcOpairlEintcOfloatgRsPgR = { "pair<float,pair<int,float> >" , 115 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HitCanData = { "HitCanData" , 115 , -1 };
G__linked_taginfo G__PionTrackerDictLN_vectorlEHitCanDatacOallocatorlEHitCanDatagRsPgR = { "vector<HitCanData,allocator<HitCanData> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_reverse_iteratorlEvectorlEHitCanDatacOallocatorlEHitCanDatagRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HitCanData,allocator<HitCanData> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerHitF = { "HPionTrackerHitF" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerMomPar = { "HPionTrackerMomPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerMomRunPars = { "HPionTrackerMomRunPars" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerMomRunPar = { "HPionTrackerMomRunPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgR = { "map<int,HPionTrackerMomRunPars*,less<int>,allocator<pair<const int,HPionTrackerMomRunPars*> > >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgRcLcLiterator = { "map<int,HPionTrackerMomRunPars*,less<int>,allocator<pair<const int,HPionTrackerMomRunPars*> > >::iterator" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrackFPar = { "HPionTrackerTrackFPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerBeamPar = { "HPionTrackerBeamPar" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_track = { "track" , 115 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrackF = { "HPionTrackerTrackF" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerContFact = { "HPionTrackerContFact" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerParAsciiFileIo = { "HPionTrackerParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerParRootFileIo = { "HPionTrackerParRootFileIo" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerTrb3LookupChan = { "HPionTrackerTrb3LookupChan" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerCalParCell = { "HPionTrackerCalParCell" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerCalParMod = { "HPionTrackerCalParMod" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TElementActionTlEfloatgR = { "TElementActionT<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TElementPosActionTlEfloatgR = { "TElementPosActionT<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTlEfloatgR = { "TMatrixT<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTRow_constlEfloatgR = { "TMatrixTRow_const<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTRowlEfloatgR = { "TMatrixTRow<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTDiag_constlEfloatgR = { "TMatrixTDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTColumn_constlEfloatgR = { "TMatrixTColumn_const<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTFlat_constlEfloatgR = { "TMatrixTFlat_const<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTSub_constlEfloatgR = { "TMatrixTSub_const<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTSparseRow_constlEfloatgR = { "TMatrixTSparseRow_const<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTSparseDiag_constlEfloatgR = { "TMatrixTSparseDiag_const<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTColumnlEfloatgR = { "TMatrixTColumn<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTDiaglEfloatgR = { "TMatrixTDiag<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTFlatlEfloatgR = { "TMatrixTFlat<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTSublEfloatgR = { "TMatrixTSub<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTSparseRowlEfloatgR = { "TMatrixTSparseRow<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TMatrixTSparseDiaglEfloatgR = { "TMatrixTSparseDiag<float>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TVector3 = { "TVector3" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_TF1 = { "TF1" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HBeamElement = { "HBeamElement" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HBeamParticle = { "HBeamParticle" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HBeam = { "HBeam" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR = { "vector<HBeamElement,allocator<HBeamElement> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamElementcOallocatorlEHBeamElementgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HBeamElement,allocator<HBeamElement> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR = { "vector<HBeamParticle,allocator<HBeamParticle> >" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HBeamParticle,allocator<HBeamParticle> >::iterator>" , 99 , -1 };
G__linked_taginfo G__PionTrackerDictLN_HPionTrackerDetGeomPar = { "HPionTrackerDetGeomPar" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtablePionTrackerDict() {
  G__PionTrackerDictLN_TClass.tagnum = -1 ;
  G__PionTrackerDictLN_TBuffer.tagnum = -1 ;
  G__PionTrackerDictLN_TMemberInspector.tagnum = -1 ;
  G__PionTrackerDictLN_TObject.tagnum = -1 ;
  G__PionTrackerDictLN_TNamed.tagnum = -1 ;
  G__PionTrackerDictLN_TString.tagnum = -1 ;
  G__PionTrackerDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PionTrackerDictLN_TObjArray.tagnum = -1 ;
  G__PionTrackerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PionTrackerDictLN_TArrayI.tagnum = -1 ;
  G__PionTrackerDictLN_HTask.tagnum = -1 ;
  G__PionTrackerDictLN_HCategory.tagnum = -1 ;
  G__PionTrackerDictLN_HParIo.tagnum = -1 ;
  G__PionTrackerDictLN_HDetector.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerDetector.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerRaw.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerCal.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerHit.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrack.tagnum = -1 ;
  G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__PionTrackerDictLN_HTaskSet.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTaskSet.tagnum = -1 ;
  G__PionTrackerDictLN_HLocation.tagnum = -1 ;
  G__PionTrackerDictLN_HldUnpack.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrb3Lookup.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard.tagnum = -1 ;
  G__PionTrackerDictLN_ptheaderset.tagnum = -1 ;
  G__PionTrackerDictLN_ptdataset.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrb3Unpacker.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrb3UnpackercLcLptstate.tagnum = -1 ;
  G__PionTrackerDictLN_HReconstructor.tagnum = -1 ;
  G__PionTrackerDictLN_TArrayD.tagnum = -1 ;
  G__PionTrackerDictLN_TArrayF.tagnum = -1 ;
  G__PionTrackerDictLN_HParSet.tagnum = -1 ;
  G__PionTrackerDictLN_HParamList.tagnum = -1 ;
  G__PionTrackerDictLN_HParCond.tagnum = -1 ;
  G__PionTrackerDictLN_HDetParIo.tagnum = -1 ;
  G__PionTrackerDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerCalRunPars.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerCalRunPar.tagnum = -1 ;
  G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PionTrackerDictLN_HIterator.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerCalPar.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerHitFPar.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerCalibrater.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerGeomPar.tagnum = -1 ;
  G__PionTrackerDictLN_pairlEintcOfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_pairlEfloatcOpairlEintcOfloatgRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_HitCanData.tagnum = -1 ;
  G__PionTrackerDictLN_vectorlEHitCanDatacOallocatorlEHitCanDatagRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_reverse_iteratorlEvectorlEHitCanDatacOallocatorlEHitCanDatagRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerHitF.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerMomPar.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerMomRunPars.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerMomRunPar.tagnum = -1 ;
  G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgRcLcLiterator.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrackFPar.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerBeamPar.tagnum = -1 ;
  G__PionTrackerDictLN_track.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrackF.tagnum = -1 ;
  G__PionTrackerDictLN_HContainer.tagnum = -1 ;
  G__PionTrackerDictLN_HContFact.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerContFact.tagnum = -1 ;
  G__PionTrackerDictLN_HGeomTransform.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerParAsciiFileIo.tagnum = -1 ;
  G__PionTrackerDictLN_HParRootFile.tagnum = -1 ;
  G__PionTrackerDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerParRootFileIo.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerTrb3LookupChan.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerCalParCell.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerCalParMod.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__PionTrackerDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__PionTrackerDictLN_TElementActionTlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TElementPosActionTlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTRow_constlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTRowlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTDiag_constlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTColumn_constlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTFlat_constlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTSub_constlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTSparseRow_constlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTSparseDiag_constlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTColumnlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTDiaglEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTFlatlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTSublEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTSparseRowlEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TMatrixTSparseDiaglEfloatgR.tagnum = -1 ;
  G__PionTrackerDictLN_TVector3.tagnum = -1 ;
  G__PionTrackerDictLN_TF1.tagnum = -1 ;
  G__PionTrackerDictLN_HBeamElement.tagnum = -1 ;
  G__PionTrackerDictLN_HBeamParticle.tagnum = -1 ;
  G__PionTrackerDictLN_HBeam.tagnum = -1 ;
  G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamElementcOallocatorlEHBeamElementgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR.tagnum = -1 ;
  G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__PionTrackerDictLN_HPionTrackerDetGeomPar.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtablePionTrackerDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TString);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_basic_ifstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerDetector),sizeof(HPionTrackerDetector),-1,62720,"Detector class for Pion Tracker",G__setup_memvarHPionTrackerDetector,G__setup_memfuncHPionTrackerDetector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerRaw),sizeof(HPionTrackerRaw),-1,29952,"raw data of PionTracker",G__setup_memvarHPionTrackerRaw,G__setup_memfuncHPionTrackerRaw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerCal),sizeof(HPionTrackerCal),-1,28672,"calibrated data of PionTracker",G__setup_memvarHPionTrackerCal,G__setup_memfuncHPionTrackerCal);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerHit),sizeof(HPionTrackerHit),-1,29952,"detector hits of PionTracker",G__setup_memvarHPionTrackerHit,G__setup_memfuncHPionTrackerHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrack),sizeof(HPionTrackerTrack),-1,95488,"detector hits of PionTracker",G__setup_memvarHPionTrackerTrack,G__setup_memfuncHPionTrackerTrack);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTaskSet),sizeof(HPionTrackerTaskSet),-1,62720,"Set of PionTracker tasks",G__setup_memvarHPionTrackerTaskSet,G__setup_memfuncHPionTrackerTaskSet);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HldUnpack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrb3Lookup),sizeof(HPionTrackerTrb3Lookup),-1,62720,"Lookup table for the TRB3 unpacker of the PionTracker",G__setup_memvarHPionTrackerTrb3Lookup,G__setup_memfuncHPionTrackerTrb3Lookup);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrb3LookupBoard),sizeof(HPionTrackerTrb3LookupBoard),-1,29952,"Board level of  the lookup table for the PionTracker TRB3 unpacker",G__setup_memvarHPionTrackerTrb3LookupBoard,G__setup_memfuncHPionTrackerTrb3LookupBoard);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_ptheaderset);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_ptdataset);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrb3Unpacker),sizeof(HPionTrackerTrb3Unpacker),-1,29952,"TRB3 unpacker for PionTracker",G__setup_memvarHPionTrackerTrb3Unpacker,G__setup_memfuncHPionTrackerTrb3Unpacker);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrb3UnpackercLcLptstate);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HReconstructor);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HParamList);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HParCond);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerCalRunPars),sizeof(HPionTrackerCalRunPars),-1,29952,(char*)NULL,G__setup_memvarHPionTrackerCalRunPars,G__setup_memfuncHPionTrackerCalRunPars);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerCalRunPar),sizeof(HPionTrackerCalRunPar),-1,62720,"Container for the PionTracker cal parameters per run",G__setup_memvarHPionTrackerCalRunPar,G__setup_memfuncHPionTrackerCalRunPar);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_maplEintcOHPionTrackerCalRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerCalRunParsmUgRsPgRsPgRcLcLiterator);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerCalPar),sizeof(HPionTrackerCalPar),-1,62720,"Container for the calibration parameters of the PionTracker",G__setup_memvarHPionTrackerCalPar,G__setup_memfuncHPionTrackerCalPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerHitFPar),sizeof(HPionTrackerHitFPar),-1,62720,"Container for the hit finder parameters of the PionTracker",G__setup_memvarHPionTrackerHitFPar,G__setup_memfuncHPionTrackerHitFPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerCalibrater),sizeof(HPionTrackerCalibrater),-1,62720,"Calibrater raw->cal for PionTracker data",G__setup_memvarHPionTrackerCalibrater,G__setup_memfuncHPionTrackerCalibrater);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerGeomPar),sizeof(HPionTrackerGeomPar),-1,62720,"Container for the geometry parameters of the PionTracker",G__setup_memvarHPionTrackerGeomPar,G__setup_memfuncHPionTrackerGeomPar);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_pairlEintcOfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_pairlEfloatcOpairlEintcOfloatgRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HitCanData);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_vectorlEHitCanDatacOallocatorlEHitCanDatagRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHitCanDatacOallocatorlEHitCanDatagRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerHitF),sizeof(HPionTrackerHitF),-1,62720,"Hit finder cal->hit for PionTracker",G__setup_memvarHPionTrackerHitF,G__setup_memfuncHPionTrackerHitF);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerMomPar),sizeof(HPionTrackerMomPar),-1,62720,"Container for the momentum selection and correction parameters of the PionTracker",G__setup_memvarHPionTrackerMomPar,G__setup_memfuncHPionTrackerMomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerMomRunPars),sizeof(HPionTrackerMomRunPars),-1,29952,(char*)NULL,G__setup_memvarHPionTrackerMomRunPars,G__setup_memfuncHPionTrackerMomRunPars);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerMomRunPar),sizeof(HPionTrackerMomRunPar),-1,62720,"Container for the PionTracker momentum parameters per run",G__setup_memvarHPionTrackerMomRunPar,G__setup_memfuncHPionTrackerMomRunPar);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_maplEintcOHPionTrackerMomRunParsmUcOlesslEintgRcOallocatorlEpairlEconstsPintcOHPionTrackerMomRunParsmUgRsPgRsPgRcLcLiterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrackFPar),sizeof(HPionTrackerTrackFPar),-1,62720,"Container for the hit finder parameters of the PionTracker",G__setup_memvarHPionTrackerTrackFPar,G__setup_memfuncHPionTrackerTrackFPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerBeamPar),sizeof(HPionTrackerBeamPar),-1,62720,"Container for the beam parameters of the PionTracker",G__setup_memvarHPionTrackerBeamPar,G__setup_memfuncHPionTrackerBeamPar);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_track);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrackF),sizeof(HPionTrackerTrackF),-1,62720,"Hit finder cal->hit for PionTracker",G__setup_memvarHPionTrackerTrackF,G__setup_memfuncHPionTrackerTrackF);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerContFact),sizeof(HPionTrackerContFact),-1,62720,"Factory for parameter containers in libPionTracker",G__setup_memvarHPionTrackerContFact,G__setup_memfuncHPionTrackerContFact);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HGeomTransform);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerParAsciiFileIo),sizeof(HPionTrackerParAsciiFileIo),-1,62464,"Class for PionTracker parameter I/O from Ascii files",G__setup_memvarHPionTrackerParAsciiFileIo,G__setup_memfuncHPionTrackerParAsciiFileIo);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerParRootFileIo),sizeof(HPionTrackerParRootFileIo),-1,62464,"Class for parameter I/O from ROOT file for PionTracker",G__setup_memvarHPionTrackerParRootFileIo,G__setup_memfuncHPionTrackerParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerTrb3LookupChan),sizeof(HPionTrackerTrb3LookupChan),-1,29952,"Channel level of the lookup table for the PionTracker TRB3 unpacker",G__setup_memvarHPionTrackerTrb3LookupChan,G__setup_memfuncHPionTrackerTrb3LookupChan);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerCalParCell),sizeof(HPionTrackerCalParCell),-1,29952,"Chan level of the PionTracker calibration parameters",G__setup_memvarHPionTrackerCalParCell,G__setup_memfuncHPionTrackerCalParCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerCalParMod),sizeof(HPionTrackerCalParMod),-1,29952,"Module level of PionTracker Calibration parameters",G__setup_memvarHPionTrackerCalParMod,G__setup_memfuncHPionTrackerCalParMod);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TElementActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TElementPosActionTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTColumn_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTFlat_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTSub_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTSparseRow_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTSparseDiag_constlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTColumnlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTFlatlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTSublEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTSparseRowlEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TMatrixTSparseDiaglEfloatgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TVector3);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_TF1);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HBeamElement),sizeof(HBeamElement),-1,28928,(char*)NULL,G__setup_memvarHBeamElement,G__setup_memfuncHBeamElement);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HBeamParticle),sizeof(HBeamParticle),-1,28928,(char*)NULL,G__setup_memvarHBeamParticle,G__setup_memfuncHBeamParticle);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HBeam),sizeof(HBeam),-1,29952,(char*)NULL,G__setup_memvarHBeam,G__setup_memfuncHBeam);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_vectorlEHBeamElementcOallocatorlEHBeamElementgRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamElementcOallocatorlEHBeamElementgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_vectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgR);
   G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_reverse_iteratorlEvectorlEHBeamParticlecOallocatorlEHBeamParticlegRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__PionTrackerDictLN_HPionTrackerDetGeomPar),sizeof(HPionTrackerDetGeomPar),-1,29952,"Geometry of a Pion Tracker",G__setup_memvarHPionTrackerDetGeomPar,G__setup_memfuncHPionTrackerDetGeomPar);
}
extern "C" void G__cpp_setupPionTrackerDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupPionTrackerDict()");
  G__set_cpp_environmentPionTrackerDict();
  G__cpp_setup_tagtablePionTrackerDict();

  G__cpp_setup_inheritancePionTrackerDict();

  G__cpp_setup_typetablePionTrackerDict();

  G__cpp_setup_memvarPionTrackerDict();

  G__cpp_setup_memfuncPionTrackerDict();
  G__cpp_setup_globalPionTrackerDict();
  G__cpp_setup_funcPionTrackerDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncPionTrackerDict();
  return;
}
class G__cpp_setup_initPionTrackerDict {
  public:
    G__cpp_setup_initPionTrackerDict() { G__add_setup_func("PionTrackerDict",(G__incsetup)(&G__cpp_setupPionTrackerDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initPionTrackerDict() { G__remove_setup_func("PionTrackerDict"); }
};
G__cpp_setup_initPionTrackerDict G__cpp_setup_initializerPionTrackerDict;


//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:52:41 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdISimulationDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "SimulationDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HGeomIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HGeomIo(void *p);
   static void deleteArray_HGeomIo(void *p);
   static void destruct_HGeomIo(void *p);
   static void streamer_HGeomIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomIo*)
   {
      ::HGeomIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomIo", ::HGeomIo::Class_Version(), "././hgeomio.h", 11,
                  typeid(::HGeomIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomIo::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomIo) );
      instance.SetDelete(&delete_HGeomIo);
      instance.SetDeleteArray(&deleteArray_HGeomIo);
      instance.SetDestructor(&destruct_HGeomIo);
      instance.SetStreamerFunc(&streamer_HGeomIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomIo*)
   {
      return GenerateInitInstanceLocal((::HGeomIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HGeomSet(void *p);
   static void deleteArray_HGeomSet(void *p);
   static void destruct_HGeomSet(void *p);
   static void streamer_HGeomSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomSet*)
   {
      ::HGeomSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomSet", ::HGeomSet::Class_Version(), "././hgeomset.h", 18,
                  typeid(::HGeomSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomSet::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomSet) );
      instance.SetDelete(&delete_HGeomSet);
      instance.SetDeleteArray(&deleteArray_HGeomSet);
      instance.SetDestructor(&destruct_HGeomSet);
      instance.SetStreamerFunc(&streamer_HGeomSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomSet*)
   {
      return GenerateInitInstanceLocal((::HGeomSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMedia_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomMedia(void *p = 0);
   static void *newArray_HGeomMedia(Long_t size, void *p);
   static void delete_HGeomMedia(void *p);
   static void deleteArray_HGeomMedia(void *p);
   static void destruct_HGeomMedia(void *p);
   static void streamer_HGeomMedia(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMedia*)
   {
      ::HGeomMedia *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomMedia >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMedia", ::HGeomMedia::Class_Version(), "././hgeommedia.h", 10,
                  typeid(::HGeomMedia), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomMedia::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMedia) );
      instance.SetNew(&new_HGeomMedia);
      instance.SetNewArray(&newArray_HGeomMedia);
      instance.SetDelete(&delete_HGeomMedia);
      instance.SetDeleteArray(&deleteArray_HGeomMedia);
      instance.SetDestructor(&destruct_HGeomMedia);
      instance.SetStreamerFunc(&streamer_HGeomMedia);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMedia*)
   {
      return GenerateInitInstanceLocal((::HGeomMedia*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMedia*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomBuilder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HGeomBuilder(void *p);
   static void deleteArray_HGeomBuilder(void *p);
   static void destruct_HGeomBuilder(void *p);
   static void streamer_HGeomBuilder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomBuilder*)
   {
      ::HGeomBuilder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomBuilder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomBuilder", ::HGeomBuilder::Class_Version(), "././hgeombuilder.h", 13,
                  typeid(::HGeomBuilder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomBuilder::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomBuilder) );
      instance.SetDelete(&delete_HGeomBuilder);
      instance.SetDeleteArray(&deleteArray_HGeomBuilder);
      instance.SetDestructor(&destruct_HGeomBuilder);
      instance.SetStreamerFunc(&streamer_HGeomBuilder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomBuilder*)
   {
      return GenerateInitInstanceLocal((::HGeomBuilder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomBuilder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomInterface_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomInterface(void *p = 0);
   static void *newArray_HGeomInterface(Long_t size, void *p);
   static void delete_HGeomInterface(void *p);
   static void deleteArray_HGeomInterface(void *p);
   static void destruct_HGeomInterface(void *p);
   static void streamer_HGeomInterface(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomInterface*)
   {
      ::HGeomInterface *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomInterface >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomInterface", ::HGeomInterface::Class_Version(), "././hgeominterface.h", 34,
                  typeid(::HGeomInterface), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomInterface::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomInterface) );
      instance.SetNew(&new_HGeomInterface);
      instance.SetNewArray(&newArray_HGeomInterface);
      instance.SetDelete(&delete_HGeomInterface);
      instance.SetDeleteArray(&deleteArray_HGeomInterface);
      instance.SetDestructor(&destruct_HGeomInterface);
      instance.SetStreamerFunc(&streamer_HGeomInterface);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomInterface*)
   {
      return GenerateInitInstanceLocal((::HGeomInterface*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomInterface*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HGeomHit(void *p);
   static void deleteArray_HGeomHit(void *p);
   static void destruct_HGeomHit(void *p);
   static void streamer_HGeomHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomHit*)
   {
      ::HGeomHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomHit", ::HGeomHit::Class_Version(), "././hgeomhit.h", 14,
                  typeid(::HGeomHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomHit) );
      instance.SetDelete(&delete_HGeomHit);
      instance.SetDeleteArray(&deleteArray_HGeomHit);
      instance.SetDestructor(&destruct_HGeomHit);
      instance.SetStreamerFunc(&streamer_HGeomHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomHit*)
   {
      return GenerateInitInstanceLocal((::HGeomHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomAsciiIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomAsciiIo(void *p = 0);
   static void *newArray_HGeomAsciiIo(Long_t size, void *p);
   static void delete_HGeomAsciiIo(void *p);
   static void deleteArray_HGeomAsciiIo(void *p);
   static void destruct_HGeomAsciiIo(void *p);
   static void streamer_HGeomAsciiIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomAsciiIo*)
   {
      ::HGeomAsciiIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomAsciiIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomAsciiIo", ::HGeomAsciiIo::Class_Version(), "././hgeomasciiio.h", 10,
                  typeid(::HGeomAsciiIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomAsciiIo::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomAsciiIo) );
      instance.SetNew(&new_HGeomAsciiIo);
      instance.SetNewArray(&newArray_HGeomAsciiIo);
      instance.SetDelete(&delete_HGeomAsciiIo);
      instance.SetDeleteArray(&deleteArray_HGeomAsciiIo);
      instance.SetDestructor(&destruct_HGeomAsciiIo);
      instance.SetStreamerFunc(&streamer_HGeomAsciiIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomAsciiIo*)
   {
      return GenerateInitInstanceLocal((::HGeomAsciiIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomAsciiIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomNode_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomNode(void *p = 0);
   static void *newArray_HGeomNode(Long_t size, void *p);
   static void delete_HGeomNode(void *p);
   static void deleteArray_HGeomNode(void *p);
   static void destruct_HGeomNode(void *p);
   static void streamer_HGeomNode(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomNode*)
   {
      ::HGeomNode *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomNode >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomNode", ::HGeomNode::Class_Version(), "././hgeomnode.h", 21,
                  typeid(::HGeomNode), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomNode::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomNode) );
      instance.SetNew(&new_HGeomNode);
      instance.SetNewArray(&newArray_HGeomNode);
      instance.SetDelete(&delete_HGeomNode);
      instance.SetDeleteArray(&deleteArray_HGeomNode);
      instance.SetDestructor(&destruct_HGeomNode);
      instance.SetStreamerFunc(&streamer_HGeomNode);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomNode*)
   {
      return GenerateInitInstanceLocal((::HGeomNode*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomNode*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMedium_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomMedium(void *p = 0);
   static void *newArray_HGeomMedium(Long_t size, void *p);
   static void delete_HGeomMedium(void *p);
   static void deleteArray_HGeomMedium(void *p);
   static void destruct_HGeomMedium(void *p);
   static void streamer_HGeomMedium(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMedium*)
   {
      ::HGeomMedium *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomMedium >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMedium", ::HGeomMedium::Class_Version(), "././hgeommedium.h", 9,
                  typeid(::HGeomMedium), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomMedium::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMedium) );
      instance.SetNew(&new_HGeomMedium);
      instance.SetNewArray(&newArray_HGeomMedium);
      instance.SetDelete(&delete_HGeomMedium);
      instance.SetDeleteArray(&deleteArray_HGeomMedium);
      instance.SetDestructor(&destruct_HGeomMedium);
      instance.SetStreamerFunc(&streamer_HGeomMedium);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMedium*)
   {
      return GenerateInitInstanceLocal((::HGeomMedium*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMedium*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMdcWire_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void HGeomMdcWire_Dictionary();
   static void *new_HGeomMdcWire(void *p = 0);
   static void *newArray_HGeomMdcWire(Long_t size, void *p);
   static void delete_HGeomMdcWire(void *p);
   static void deleteArray_HGeomMdcWire(void *p);
   static void destruct_HGeomMdcWire(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMdcWire*)
   {
      ::HGeomMdcWire *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HGeomMdcWire),0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMdcWire", "././hgeommdcwire.h", 9,
                  typeid(::HGeomMdcWire), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &HGeomMdcWire_Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMdcWire) );
      instance.SetNew(&new_HGeomMdcWire);
      instance.SetNewArray(&newArray_HGeomMdcWire);
      instance.SetDelete(&delete_HGeomMdcWire);
      instance.SetDeleteArray(&deleteArray_HGeomMdcWire);
      instance.SetDestructor(&destruct_HGeomMdcWire);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMdcWire*)
   {
      return GenerateInitInstanceLocal((::HGeomMdcWire*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMdcWire*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void HGeomMdcWire_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWire*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomRootBuilder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomRootBuilder(void *p = 0);
   static void *newArray_HGeomRootBuilder(Long_t size, void *p);
   static void delete_HGeomRootBuilder(void *p);
   static void deleteArray_HGeomRootBuilder(void *p);
   static void destruct_HGeomRootBuilder(void *p);
   static void streamer_HGeomRootBuilder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomRootBuilder*)
   {
      ::HGeomRootBuilder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomRootBuilder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomRootBuilder", ::HGeomRootBuilder::Class_Version(), "././hgeomrootbuilder.h", 8,
                  typeid(::HGeomRootBuilder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomRootBuilder::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomRootBuilder) );
      instance.SetNew(&new_HGeomRootBuilder);
      instance.SetNewArray(&newArray_HGeomRootBuilder);
      instance.SetDelete(&delete_HGeomRootBuilder);
      instance.SetDeleteArray(&deleteArray_HGeomRootBuilder);
      instance.SetDestructor(&destruct_HGeomRootBuilder);
      instance.SetStreamerFunc(&streamer_HGeomRootBuilder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomRootBuilder*)
   {
      return GenerateInitInstanceLocal((::HGeomRootBuilder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomRootBuilder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomCave_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomCave(void *p = 0);
   static void *newArray_HGeomCave(Long_t size, void *p);
   static void delete_HGeomCave(void *p);
   static void deleteArray_HGeomCave(void *p);
   static void destruct_HGeomCave(void *p);
   static void streamer_HGeomCave(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomCave*)
   {
      ::HGeomCave *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomCave >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomCave", ::HGeomCave::Class_Version(), "././hgeomcave.h", 9,
                  typeid(::HGeomCave), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomCave::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomCave) );
      instance.SetNew(&new_HGeomCave);
      instance.SetNewArray(&newArray_HGeomCave);
      instance.SetDelete(&delete_HGeomCave);
      instance.SetDeleteArray(&deleteArray_HGeomCave);
      instance.SetDestructor(&destruct_HGeomCave);
      instance.SetStreamerFunc(&streamer_HGeomCave);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomCave*)
   {
      return GenerateInitInstanceLocal((::HGeomCave*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomCave*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomSectors_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomSectors(void *p = 0);
   static void *newArray_HGeomSectors(Long_t size, void *p);
   static void delete_HGeomSectors(void *p);
   static void deleteArray_HGeomSectors(void *p);
   static void destruct_HGeomSectors(void *p);
   static void streamer_HGeomSectors(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomSectors*)
   {
      ::HGeomSectors *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomSectors >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomSectors", ::HGeomSectors::Class_Version(), "././hgeomsectors.h", 9,
                  typeid(::HGeomSectors), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomSectors::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomSectors) );
      instance.SetNew(&new_HGeomSectors);
      instance.SetNewArray(&newArray_HGeomSectors);
      instance.SetDelete(&delete_HGeomSectors);
      instance.SetDeleteArray(&deleteArray_HGeomSectors);
      instance.SetDestructor(&destruct_HGeomSectors);
      instance.SetStreamerFunc(&streamer_HGeomSectors);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomSectors*)
   {
      return GenerateInitInstanceLocal((::HGeomSectors*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomSectors*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomCoils_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomCoils(void *p = 0);
   static void *newArray_HGeomCoils(Long_t size, void *p);
   static void delete_HGeomCoils(void *p);
   static void deleteArray_HGeomCoils(void *p);
   static void destruct_HGeomCoils(void *p);
   static void streamer_HGeomCoils(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomCoils*)
   {
      ::HGeomCoils *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomCoils >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomCoils", ::HGeomCoils::Class_Version(), "././hgeomcoils.h", 7,
                  typeid(::HGeomCoils), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomCoils::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomCoils) );
      instance.SetNew(&new_HGeomCoils);
      instance.SetNewArray(&newArray_HGeomCoils);
      instance.SetDelete(&delete_HGeomCoils);
      instance.SetDeleteArray(&deleteArray_HGeomCoils);
      instance.SetDestructor(&destruct_HGeomCoils);
      instance.SetStreamerFunc(&streamer_HGeomCoils);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomCoils*)
   {
      return GenerateInitInstanceLocal((::HGeomCoils*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomCoils*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomFrames_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomFrames(void *p = 0);
   static void *newArray_HGeomFrames(Long_t size, void *p);
   static void delete_HGeomFrames(void *p);
   static void deleteArray_HGeomFrames(void *p);
   static void destruct_HGeomFrames(void *p);
   static void streamer_HGeomFrames(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomFrames*)
   {
      ::HGeomFrames *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomFrames >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomFrames", ::HGeomFrames::Class_Version(), "././hgeomframes.h", 6,
                  typeid(::HGeomFrames), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomFrames::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomFrames) );
      instance.SetNew(&new_HGeomFrames);
      instance.SetNewArray(&newArray_HGeomFrames);
      instance.SetDelete(&delete_HGeomFrames);
      instance.SetDeleteArray(&deleteArray_HGeomFrames);
      instance.SetDestructor(&destruct_HGeomFrames);
      instance.SetStreamerFunc(&streamer_HGeomFrames);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomFrames*)
   {
      return GenerateInitInstanceLocal((::HGeomFrames*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomFrames*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTarget_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTarget(void *p = 0);
   static void *newArray_HGeomTarget(Long_t size, void *p);
   static void delete_HGeomTarget(void *p);
   static void deleteArray_HGeomTarget(void *p);
   static void destruct_HGeomTarget(void *p);
   static void streamer_HGeomTarget(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTarget*)
   {
      ::HGeomTarget *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTarget >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTarget", ::HGeomTarget::Class_Version(), "././hgeomtarget.h", 6,
                  typeid(::HGeomTarget), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTarget::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTarget) );
      instance.SetNew(&new_HGeomTarget);
      instance.SetNewArray(&newArray_HGeomTarget);
      instance.SetDelete(&delete_HGeomTarget);
      instance.SetDeleteArray(&deleteArray_HGeomTarget);
      instance.SetDestructor(&destruct_HGeomTarget);
      instance.SetStreamerFunc(&streamer_HGeomTarget);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTarget*)
   {
      return GenerateInitInstanceLocal((::HGeomTarget*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTarget*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMdc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomMdc(void *p = 0);
   static void *newArray_HGeomMdc(Long_t size, void *p);
   static void delete_HGeomMdc(void *p);
   static void deleteArray_HGeomMdc(void *p);
   static void destruct_HGeomMdc(void *p);
   static void streamer_HGeomMdc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMdc*)
   {
      ::HGeomMdc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomMdc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMdc", ::HGeomMdc::Class_Version(), "././hgeommdc.h", 11,
                  typeid(::HGeomMdc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomMdc::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMdc) );
      instance.SetNew(&new_HGeomMdc);
      instance.SetNewArray(&newArray_HGeomMdc);
      instance.SetDelete(&delete_HGeomMdc);
      instance.SetDeleteArray(&deleteArray_HGeomMdc);
      instance.SetDestructor(&destruct_HGeomMdc);
      instance.SetStreamerFunc(&streamer_HGeomMdc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMdc*)
   {
      return GenerateInitInstanceLocal((::HGeomMdc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMdc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMdcHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomMdcHit(void *p = 0);
   static void *newArray_HGeomMdcHit(Long_t size, void *p);
   static void delete_HGeomMdcHit(void *p);
   static void deleteArray_HGeomMdcHit(void *p);
   static void destruct_HGeomMdcHit(void *p);
   static void streamer_HGeomMdcHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMdcHit*)
   {
      ::HGeomMdcHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomMdcHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMdcHit", ::HGeomMdcHit::Class_Version(), "././hgeommdchit.h", 8,
                  typeid(::HGeomMdcHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomMdcHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMdcHit) );
      instance.SetNew(&new_HGeomMdcHit);
      instance.SetNewArray(&newArray_HGeomMdcHit);
      instance.SetDelete(&delete_HGeomMdcHit);
      instance.SetDeleteArray(&deleteArray_HGeomMdcHit);
      instance.SetDestructor(&destruct_HGeomMdcHit);
      instance.SetStreamerFunc(&streamer_HGeomMdcHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMdcHit*)
   {
      return GenerateInitInstanceLocal((::HGeomMdcHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMdcHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTof_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTof(void *p = 0);
   static void *newArray_HGeomTof(Long_t size, void *p);
   static void delete_HGeomTof(void *p);
   static void deleteArray_HGeomTof(void *p);
   static void destruct_HGeomTof(void *p);
   static void streamer_HGeomTof(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTof*)
   {
      ::HGeomTof *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTof >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTof", ::HGeomTof::Class_Version(), "././hgeomtof.h", 7,
                  typeid(::HGeomTof), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTof::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTof) );
      instance.SetNew(&new_HGeomTof);
      instance.SetNewArray(&newArray_HGeomTof);
      instance.SetDelete(&delete_HGeomTof);
      instance.SetDeleteArray(&deleteArray_HGeomTof);
      instance.SetDestructor(&destruct_HGeomTof);
      instance.SetStreamerFunc(&streamer_HGeomTof);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTof*)
   {
      return GenerateInitInstanceLocal((::HGeomTof*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTof*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomTofHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomTofHit(void *p = 0);
   static void *newArray_HGeomTofHit(Long_t size, void *p);
   static void delete_HGeomTofHit(void *p);
   static void deleteArray_HGeomTofHit(void *p);
   static void destruct_HGeomTofHit(void *p);
   static void streamer_HGeomTofHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomTofHit*)
   {
      ::HGeomTofHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomTofHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomTofHit", ::HGeomTofHit::Class_Version(), "././hgeomtofhit.h", 8,
                  typeid(::HGeomTofHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomTofHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomTofHit) );
      instance.SetNew(&new_HGeomTofHit);
      instance.SetNewArray(&newArray_HGeomTofHit);
      instance.SetDelete(&delete_HGeomTofHit);
      instance.SetDeleteArray(&deleteArray_HGeomTofHit);
      instance.SetDestructor(&destruct_HGeomTofHit);
      instance.SetStreamerFunc(&streamer_HGeomTofHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomTofHit*)
   {
      return GenerateInitInstanceLocal((::HGeomTofHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomTofHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomRich_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomRich(void *p = 0);
   static void *newArray_HGeomRich(Long_t size, void *p);
   static void delete_HGeomRich(void *p);
   static void deleteArray_HGeomRich(void *p);
   static void destruct_HGeomRich(void *p);
   static void streamer_HGeomRich(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomRich*)
   {
      ::HGeomRich *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomRich >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomRich", ::HGeomRich::Class_Version(), "././hgeomrich.h", 6,
                  typeid(::HGeomRich), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomRich::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomRich) );
      instance.SetNew(&new_HGeomRich);
      instance.SetNewArray(&newArray_HGeomRich);
      instance.SetDelete(&delete_HGeomRich);
      instance.SetDeleteArray(&deleteArray_HGeomRich);
      instance.SetDestructor(&destruct_HGeomRich);
      instance.SetStreamerFunc(&streamer_HGeomRich);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomRich*)
   {
      return GenerateInitInstanceLocal((::HGeomRich*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomRich*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomRichHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomRichHit(void *p = 0);
   static void *newArray_HGeomRichHit(Long_t size, void *p);
   static void delete_HGeomRichHit(void *p);
   static void deleteArray_HGeomRichHit(void *p);
   static void destruct_HGeomRichHit(void *p);
   static void streamer_HGeomRichHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomRichHit*)
   {
      ::HGeomRichHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomRichHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomRichHit", ::HGeomRichHit::Class_Version(), "././hgeomrichhit.h", 8,
                  typeid(::HGeomRichHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomRichHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomRichHit) );
      instance.SetNew(&new_HGeomRichHit);
      instance.SetNewArray(&newArray_HGeomRichHit);
      instance.SetDelete(&delete_HGeomRichHit);
      instance.SetDeleteArray(&deleteArray_HGeomRichHit);
      instance.SetDestructor(&destruct_HGeomRichHit);
      instance.SetStreamerFunc(&streamer_HGeomRichHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomRichHit*)
   {
      return GenerateInitInstanceLocal((::HGeomRichHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomRichHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomShower_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomShower(void *p = 0);
   static void *newArray_HGeomShower(Long_t size, void *p);
   static void delete_HGeomShower(void *p);
   static void deleteArray_HGeomShower(void *p);
   static void destruct_HGeomShower(void *p);
   static void streamer_HGeomShower(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomShower*)
   {
      ::HGeomShower *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomShower >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomShower", ::HGeomShower::Class_Version(), "././hgeomshower.h", 7,
                  typeid(::HGeomShower), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomShower::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomShower) );
      instance.SetNew(&new_HGeomShower);
      instance.SetNewArray(&newArray_HGeomShower);
      instance.SetDelete(&delete_HGeomShower);
      instance.SetDeleteArray(&deleteArray_HGeomShower);
      instance.SetDestructor(&destruct_HGeomShower);
      instance.SetStreamerFunc(&streamer_HGeomShower);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomShower*)
   {
      return GenerateInitInstanceLocal((::HGeomShower*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomShower*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomShowerHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomShowerHit(void *p = 0);
   static void *newArray_HGeomShowerHit(Long_t size, void *p);
   static void delete_HGeomShowerHit(void *p);
   static void deleteArray_HGeomShowerHit(void *p);
   static void destruct_HGeomShowerHit(void *p);
   static void streamer_HGeomShowerHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomShowerHit*)
   {
      ::HGeomShowerHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomShowerHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomShowerHit", ::HGeomShowerHit::Class_Version(), "././hgeomshowerhit.h", 8,
                  typeid(::HGeomShowerHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomShowerHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomShowerHit) );
      instance.SetNew(&new_HGeomShowerHit);
      instance.SetNewArray(&newArray_HGeomShowerHit);
      instance.SetDelete(&delete_HGeomShowerHit);
      instance.SetDeleteArray(&deleteArray_HGeomShowerHit);
      instance.SetDestructor(&destruct_HGeomShowerHit);
      instance.SetStreamerFunc(&streamer_HGeomShowerHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomShowerHit*)
   {
      return GenerateInitInstanceLocal((::HGeomShowerHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomShowerHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomStart_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomStart(void *p = 0);
   static void *newArray_HGeomStart(Long_t size, void *p);
   static void delete_HGeomStart(void *p);
   static void deleteArray_HGeomStart(void *p);
   static void destruct_HGeomStart(void *p);
   static void streamer_HGeomStart(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomStart*)
   {
      ::HGeomStart *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomStart >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomStart", ::HGeomStart::Class_Version(), "././hgeomstart.h", 6,
                  typeid(::HGeomStart), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomStart::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomStart) );
      instance.SetNew(&new_HGeomStart);
      instance.SetNewArray(&newArray_HGeomStart);
      instance.SetDelete(&delete_HGeomStart);
      instance.SetDeleteArray(&deleteArray_HGeomStart);
      instance.SetDestructor(&destruct_HGeomStart);
      instance.SetStreamerFunc(&streamer_HGeomStart);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomStart*)
   {
      return GenerateInitInstanceLocal((::HGeomStart*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomStart*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomStartHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomStartHit(void *p = 0);
   static void *newArray_HGeomStartHit(Long_t size, void *p);
   static void delete_HGeomStartHit(void *p);
   static void deleteArray_HGeomStartHit(void *p);
   static void destruct_HGeomStartHit(void *p);
   static void streamer_HGeomStartHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomStartHit*)
   {
      ::HGeomStartHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomStartHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomStartHit", ::HGeomStartHit::Class_Version(), "././hgeomstarthit.h", 8,
                  typeid(::HGeomStartHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomStartHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomStartHit) );
      instance.SetNew(&new_HGeomStartHit);
      instance.SetNewArray(&newArray_HGeomStartHit);
      instance.SetDelete(&delete_HGeomStartHit);
      instance.SetDeleteArray(&deleteArray_HGeomStartHit);
      instance.SetDestructor(&destruct_HGeomStartHit);
      instance.SetStreamerFunc(&streamer_HGeomStartHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomStartHit*)
   {
      return GenerateInitInstanceLocal((::HGeomStartHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomStartHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomFWall_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomFWall(void *p = 0);
   static void *newArray_HGeomFWall(Long_t size, void *p);
   static void delete_HGeomFWall(void *p);
   static void deleteArray_HGeomFWall(void *p);
   static void destruct_HGeomFWall(void *p);
   static void streamer_HGeomFWall(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomFWall*)
   {
      ::HGeomFWall *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomFWall >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomFWall", ::HGeomFWall::Class_Version(), "././hgeomfwall.h", 6,
                  typeid(::HGeomFWall), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomFWall::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomFWall) );
      instance.SetNew(&new_HGeomFWall);
      instance.SetNewArray(&newArray_HGeomFWall);
      instance.SetDelete(&delete_HGeomFWall);
      instance.SetDeleteArray(&deleteArray_HGeomFWall);
      instance.SetDestructor(&destruct_HGeomFWall);
      instance.SetStreamerFunc(&streamer_HGeomFWall);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomFWall*)
   {
      return GenerateInitInstanceLocal((::HGeomFWall*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomFWall*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomFWallHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomFWallHit(void *p = 0);
   static void *newArray_HGeomFWallHit(Long_t size, void *p);
   static void delete_HGeomFWallHit(void *p);
   static void deleteArray_HGeomFWallHit(void *p);
   static void destruct_HGeomFWallHit(void *p);
   static void streamer_HGeomFWallHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomFWallHit*)
   {
      ::HGeomFWallHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomFWallHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomFWallHit", ::HGeomFWallHit::Class_Version(), "././hgeomfwallhit.h", 8,
                  typeid(::HGeomFWallHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomFWallHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomFWallHit) );
      instance.SetNew(&new_HGeomFWallHit);
      instance.SetNewArray(&newArray_HGeomFWallHit);
      instance.SetDelete(&delete_HGeomFWallHit);
      instance.SetDeleteArray(&deleteArray_HGeomFWallHit);
      instance.SetDestructor(&destruct_HGeomFWallHit);
      instance.SetStreamerFunc(&streamer_HGeomFWallHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomFWallHit*)
   {
      return GenerateInitInstanceLocal((::HGeomFWallHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomFWallHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomUser_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomUser(void *p = 0);
   static void *newArray_HGeomUser(Long_t size, void *p);
   static void delete_HGeomUser(void *p);
   static void deleteArray_HGeomUser(void *p);
   static void destruct_HGeomUser(void *p);
   static void streamer_HGeomUser(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomUser*)
   {
      ::HGeomUser *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomUser >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomUser", ::HGeomUser::Class_Version(), "././hgeomuser.h", 7,
                  typeid(::HGeomUser), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomUser::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomUser) );
      instance.SetNew(&new_HGeomUser);
      instance.SetNewArray(&newArray_HGeomUser);
      instance.SetDelete(&delete_HGeomUser);
      instance.SetDeleteArray(&deleteArray_HGeomUser);
      instance.SetDestructor(&destruct_HGeomUser);
      instance.SetStreamerFunc(&streamer_HGeomUser);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomUser*)
   {
      return GenerateInitInstanceLocal((::HGeomUser*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomUser*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomUserHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomUserHit(void *p = 0);
   static void *newArray_HGeomUserHit(Long_t size, void *p);
   static void delete_HGeomUserHit(void *p);
   static void deleteArray_HGeomUserHit(void *p);
   static void destruct_HGeomUserHit(void *p);
   static void streamer_HGeomUserHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomUserHit*)
   {
      ::HGeomUserHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomUserHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomUserHit", ::HGeomUserHit::Class_Version(), "././hgeomuserhit.h", 8,
                  typeid(::HGeomUserHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomUserHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomUserHit) );
      instance.SetNew(&new_HGeomUserHit);
      instance.SetNewArray(&newArray_HGeomUserHit);
      instance.SetDelete(&delete_HGeomUserHit);
      instance.SetDeleteArray(&deleteArray_HGeomUserHit);
      instance.SetDestructor(&destruct_HGeomUserHit);
      instance.SetStreamerFunc(&streamer_HGeomUserHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomUserHit*)
   {
      return GenerateInitInstanceLocal((::HGeomUserHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomUserHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomRpc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomRpc(void *p = 0);
   static void *newArray_HGeomRpc(Long_t size, void *p);
   static void delete_HGeomRpc(void *p);
   static void deleteArray_HGeomRpc(void *p);
   static void destruct_HGeomRpc(void *p);
   static void streamer_HGeomRpc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomRpc*)
   {
      ::HGeomRpc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomRpc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomRpc", ::HGeomRpc::Class_Version(), "././hgeomrpc.h", 6,
                  typeid(::HGeomRpc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomRpc::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomRpc) );
      instance.SetNew(&new_HGeomRpc);
      instance.SetNewArray(&newArray_HGeomRpc);
      instance.SetDelete(&delete_HGeomRpc);
      instance.SetDeleteArray(&deleteArray_HGeomRpc);
      instance.SetDestructor(&destruct_HGeomRpc);
      instance.SetStreamerFunc(&streamer_HGeomRpc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomRpc*)
   {
      return GenerateInitInstanceLocal((::HGeomRpc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomRpc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomRpcHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomRpcHit(void *p = 0);
   static void *newArray_HGeomRpcHit(Long_t size, void *p);
   static void delete_HGeomRpcHit(void *p);
   static void deleteArray_HGeomRpcHit(void *p);
   static void destruct_HGeomRpcHit(void *p);
   static void streamer_HGeomRpcHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomRpcHit*)
   {
      ::HGeomRpcHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomRpcHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomRpcHit", ::HGeomRpcHit::Class_Version(), "././hgeomrpchit.h", 8,
                  typeid(::HGeomRpcHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomRpcHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomRpcHit) );
      instance.SetNew(&new_HGeomRpcHit);
      instance.SetNewArray(&newArray_HGeomRpcHit);
      instance.SetDelete(&delete_HGeomRpcHit);
      instance.SetDeleteArray(&deleteArray_HGeomRpcHit);
      instance.SetDestructor(&destruct_HGeomRpcHit);
      instance.SetStreamerFunc(&streamer_HGeomRpcHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomRpcHit*)
   {
      return GenerateInitInstanceLocal((::HGeomRpcHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomRpcHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomEmc_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomEmc(void *p = 0);
   static void *newArray_HGeomEmc(Long_t size, void *p);
   static void delete_HGeomEmc(void *p);
   static void deleteArray_HGeomEmc(void *p);
   static void destruct_HGeomEmc(void *p);
   static void streamer_HGeomEmc(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomEmc*)
   {
      ::HGeomEmc *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomEmc >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomEmc", ::HGeomEmc::Class_Version(), "././hgeomemc.h", 6,
                  typeid(::HGeomEmc), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomEmc::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomEmc) );
      instance.SetNew(&new_HGeomEmc);
      instance.SetNewArray(&newArray_HGeomEmc);
      instance.SetDelete(&delete_HGeomEmc);
      instance.SetDeleteArray(&deleteArray_HGeomEmc);
      instance.SetDestructor(&destruct_HGeomEmc);
      instance.SetStreamerFunc(&streamer_HGeomEmc);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomEmc*)
   {
      return GenerateInitInstanceLocal((::HGeomEmc*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomEmc*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomEmcHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomEmcHit(void *p = 0);
   static void *newArray_HGeomEmcHit(Long_t size, void *p);
   static void delete_HGeomEmcHit(void *p);
   static void deleteArray_HGeomEmcHit(void *p);
   static void destruct_HGeomEmcHit(void *p);
   static void streamer_HGeomEmcHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomEmcHit*)
   {
      ::HGeomEmcHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomEmcHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomEmcHit", ::HGeomEmcHit::Class_Version(), "././hgeomemchit.h", 8,
                  typeid(::HGeomEmcHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomEmcHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomEmcHit) );
      instance.SetNew(&new_HGeomEmcHit);
      instance.SetNewArray(&newArray_HGeomEmcHit);
      instance.SetDelete(&delete_HGeomEmcHit);
      instance.SetDeleteArray(&deleteArray_HGeomEmcHit);
      instance.SetDestructor(&destruct_HGeomEmcHit);
      instance.SetStreamerFunc(&streamer_HGeomEmcHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomEmcHit*)
   {
      return GenerateInitInstanceLocal((::HGeomEmcHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomEmcHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomFwDet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomFwDet(void *p = 0);
   static void *newArray_HGeomFwDet(Long_t size, void *p);
   static void delete_HGeomFwDet(void *p);
   static void deleteArray_HGeomFwDet(void *p);
   static void destruct_HGeomFwDet(void *p);
   static void streamer_HGeomFwDet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomFwDet*)
   {
      ::HGeomFwDet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomFwDet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomFwDet", ::HGeomFwDet::Class_Version(), "././hgeomfwdet.h", 6,
                  typeid(::HGeomFwDet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomFwDet::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomFwDet) );
      instance.SetNew(&new_HGeomFwDet);
      instance.SetNewArray(&newArray_HGeomFwDet);
      instance.SetDelete(&delete_HGeomFwDet);
      instance.SetDeleteArray(&deleteArray_HGeomFwDet);
      instance.SetDestructor(&destruct_HGeomFwDet);
      instance.SetStreamerFunc(&streamer_HGeomFwDet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomFwDet*)
   {
      return GenerateInitInstanceLocal((::HGeomFwDet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomFwDet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomFwDetHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomFwDetHit(void *p = 0);
   static void *newArray_HGeomFwDetHit(Long_t size, void *p);
   static void delete_HGeomFwDetHit(void *p);
   static void deleteArray_HGeomFwDetHit(void *p);
   static void destruct_HGeomFwDetHit(void *p);
   static void streamer_HGeomFwDetHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomFwDetHit*)
   {
      ::HGeomFwDetHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomFwDetHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomFwDetHit", ::HGeomFwDetHit::Class_Version(), "././hgeomfwdethit.h", 8,
                  typeid(::HGeomFwDetHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomFwDetHit::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomFwDetHit) );
      instance.SetNew(&new_HGeomFwDetHit);
      instance.SetNewArray(&newArray_HGeomFwDetHit);
      instance.SetDelete(&delete_HGeomFwDetHit);
      instance.SetDeleteArray(&deleteArray_HGeomFwDetHit);
      instance.SetDestructor(&destruct_HGeomFwDetHit);
      instance.SetStreamerFunc(&streamer_HGeomFwDetHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomFwDetHit*)
   {
      return GenerateInitInstanceLocal((::HGeomFwDetHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomFwDetHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMdcWirePlane_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomMdcWirePlane(void *p = 0);
   static void *newArray_HGeomMdcWirePlane(Long_t size, void *p);
   static void delete_HGeomMdcWirePlane(void *p);
   static void deleteArray_HGeomMdcWirePlane(void *p);
   static void destruct_HGeomMdcWirePlane(void *p);
   static void streamer_HGeomMdcWirePlane(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMdcWirePlane*)
   {
      ::HGeomMdcWirePlane *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomMdcWirePlane >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMdcWirePlane", ::HGeomMdcWirePlane::Class_Version(), "././hgeommdcwireplanes.h", 11,
                  typeid(::HGeomMdcWirePlane), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomMdcWirePlane::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMdcWirePlane) );
      instance.SetNew(&new_HGeomMdcWirePlane);
      instance.SetNewArray(&newArray_HGeomMdcWirePlane);
      instance.SetDelete(&delete_HGeomMdcWirePlane);
      instance.SetDeleteArray(&deleteArray_HGeomMdcWirePlane);
      instance.SetDestructor(&destruct_HGeomMdcWirePlane);
      instance.SetStreamerFunc(&streamer_HGeomMdcWirePlane);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMdcWirePlane*)
   {
      return GenerateInitInstanceLocal((::HGeomMdcWirePlane*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMdcWirePlane*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomMdcWirePlanes_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomMdcWirePlanes(void *p = 0);
   static void *newArray_HGeomMdcWirePlanes(Long_t size, void *p);
   static void delete_HGeomMdcWirePlanes(void *p);
   static void deleteArray_HGeomMdcWirePlanes(void *p);
   static void destruct_HGeomMdcWirePlanes(void *p);
   static void streamer_HGeomMdcWirePlanes(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomMdcWirePlanes*)
   {
      ::HGeomMdcWirePlanes *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomMdcWirePlanes >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomMdcWirePlanes", ::HGeomMdcWirePlanes::Class_Version(), "././hgeommdcwireplanes.h", 32,
                  typeid(::HGeomMdcWirePlanes), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomMdcWirePlanes::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomMdcWirePlanes) );
      instance.SetNew(&new_HGeomMdcWirePlanes);
      instance.SetNewArray(&newArray_HGeomMdcWirePlanes);
      instance.SetDelete(&delete_HGeomMdcWirePlanes);
      instance.SetDeleteArray(&deleteArray_HGeomMdcWirePlanes);
      instance.SetDestructor(&destruct_HGeomMdcWirePlanes);
      instance.SetStreamerFunc(&streamer_HGeomMdcWirePlanes);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomMdcWirePlanes*)
   {
      return GenerateInitInstanceLocal((::HGeomMdcWirePlanes*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomMdcWirePlanes*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HGeomIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomIo::Class_Name()
{
   return "HGeomIo";
}

//______________________________________________________________________________
const char *HGeomIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomSet::Class_Name()
{
   return "HGeomSet";
}

//______________________________________________________________________________
const char *HGeomSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomMedia::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomMedia::Class_Name()
{
   return "HGeomMedia";
}

//______________________________________________________________________________
const char *HGeomMedia::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedia*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomMedia::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedia*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomMedia::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedia*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomMedia::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedia*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomBuilder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomBuilder::Class_Name()
{
   return "HGeomBuilder";
}

//______________________________________________________________________________
const char *HGeomBuilder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBuilder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomBuilder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBuilder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomBuilder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBuilder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomBuilder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomBuilder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomInterface::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomInterface::Class_Name()
{
   return "HGeomInterface";
}

//______________________________________________________________________________
const char *HGeomInterface::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomInterface*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomInterface::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomInterface*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomInterface::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomInterface*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomInterface::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomInterface*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomHit::Class_Name()
{
   return "HGeomHit";
}

//______________________________________________________________________________
const char *HGeomHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomAsciiIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomAsciiIo::Class_Name()
{
   return "HGeomAsciiIo";
}

//______________________________________________________________________________
const char *HGeomAsciiIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomAsciiIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomAsciiIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomAsciiIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomAsciiIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomAsciiIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomAsciiIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomAsciiIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomNode::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomNode::Class_Name()
{
   return "HGeomNode";
}

//______________________________________________________________________________
const char *HGeomNode::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomNode*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomNode::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomNode*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomNode::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomNode*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomNode::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomNode*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomMedium::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomMedium::Class_Name()
{
   return "HGeomMedium";
}

//______________________________________________________________________________
const char *HGeomMedium::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedium*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomMedium::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedium*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomMedium::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedium*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomMedium::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMedium*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomRootBuilder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomRootBuilder::Class_Name()
{
   return "HGeomRootBuilder";
}

//______________________________________________________________________________
const char *HGeomRootBuilder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRootBuilder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomRootBuilder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRootBuilder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomRootBuilder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRootBuilder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomRootBuilder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRootBuilder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomCave::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomCave::Class_Name()
{
   return "HGeomCave";
}

//______________________________________________________________________________
const char *HGeomCave::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCave*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomCave::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCave*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomCave::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCave*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomCave::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCave*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomSectors::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomSectors::Class_Name()
{
   return "HGeomSectors";
}

//______________________________________________________________________________
const char *HGeomSectors::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSectors*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomSectors::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSectors*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomSectors::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSectors*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomSectors::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomSectors*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomCoils::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomCoils::Class_Name()
{
   return "HGeomCoils";
}

//______________________________________________________________________________
const char *HGeomCoils::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCoils*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomCoils::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCoils*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomCoils::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCoils*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomCoils::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomCoils*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomFrames::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomFrames::Class_Name()
{
   return "HGeomFrames";
}

//______________________________________________________________________________
const char *HGeomFrames::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFrames*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomFrames::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFrames*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomFrames::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFrames*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomFrames::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFrames*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTarget::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTarget::Class_Name()
{
   return "HGeomTarget";
}

//______________________________________________________________________________
const char *HGeomTarget::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTarget*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTarget::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTarget*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTarget::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTarget*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTarget::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTarget*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomMdc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomMdc::Class_Name()
{
   return "HGeomMdc";
}

//______________________________________________________________________________
const char *HGeomMdc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomMdc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomMdc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomMdc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomMdcHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomMdcHit::Class_Name()
{
   return "HGeomMdcHit";
}

//______________________________________________________________________________
const char *HGeomMdcHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomMdcHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomMdcHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomMdcHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTof::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTof::Class_Name()
{
   return "HGeomTof";
}

//______________________________________________________________________________
const char *HGeomTof::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTof*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTof::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTof*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTof::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTof*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTof::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTof*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomTofHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomTofHit::Class_Name()
{
   return "HGeomTofHit";
}

//______________________________________________________________________________
const char *HGeomTofHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTofHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomTofHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTofHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomTofHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTofHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomTofHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomTofHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomRich::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomRich::Class_Name()
{
   return "HGeomRich";
}

//______________________________________________________________________________
const char *HGeomRich::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRich*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomRich::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRich*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomRich::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRich*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomRich::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRich*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomRichHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomRichHit::Class_Name()
{
   return "HGeomRichHit";
}

//______________________________________________________________________________
const char *HGeomRichHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRichHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomRichHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRichHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomRichHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRichHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomRichHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRichHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomShower::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomShower::Class_Name()
{
   return "HGeomShower";
}

//______________________________________________________________________________
const char *HGeomShower::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShower*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomShower::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShower*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomShower::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShower*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomShower::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShower*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomShowerHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomShowerHit::Class_Name()
{
   return "HGeomShowerHit";
}

//______________________________________________________________________________
const char *HGeomShowerHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShowerHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomShowerHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShowerHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomShowerHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShowerHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomShowerHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomShowerHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomStart::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomStart::Class_Name()
{
   return "HGeomStart";
}

//______________________________________________________________________________
const char *HGeomStart::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStart*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomStart::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStart*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomStart::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStart*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomStart::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStart*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomStartHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomStartHit::Class_Name()
{
   return "HGeomStartHit";
}

//______________________________________________________________________________
const char *HGeomStartHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStartHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomStartHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStartHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomStartHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStartHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomStartHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomStartHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomFWall::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomFWall::Class_Name()
{
   return "HGeomFWall";
}

//______________________________________________________________________________
const char *HGeomFWall::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWall*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomFWall::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWall*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomFWall::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWall*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomFWall::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWall*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomFWallHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomFWallHit::Class_Name()
{
   return "HGeomFWallHit";
}

//______________________________________________________________________________
const char *HGeomFWallHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWallHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomFWallHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWallHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomFWallHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWallHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomFWallHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFWallHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomUser::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomUser::Class_Name()
{
   return "HGeomUser";
}

//______________________________________________________________________________
const char *HGeomUser::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUser*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomUser::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUser*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomUser::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUser*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomUser::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUser*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomUserHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomUserHit::Class_Name()
{
   return "HGeomUserHit";
}

//______________________________________________________________________________
const char *HGeomUserHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUserHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomUserHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUserHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomUserHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUserHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomUserHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomUserHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomRpc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomRpc::Class_Name()
{
   return "HGeomRpc";
}

//______________________________________________________________________________
const char *HGeomRpc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomRpc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomRpc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomRpc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomRpcHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomRpcHit::Class_Name()
{
   return "HGeomRpcHit";
}

//______________________________________________________________________________
const char *HGeomRpcHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpcHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomRpcHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpcHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomRpcHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpcHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomRpcHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomRpcHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomEmc::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomEmc::Class_Name()
{
   return "HGeomEmc";
}

//______________________________________________________________________________
const char *HGeomEmc::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmc*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomEmc::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmc*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomEmc::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmc*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomEmc::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmc*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomEmcHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomEmcHit::Class_Name()
{
   return "HGeomEmcHit";
}

//______________________________________________________________________________
const char *HGeomEmcHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmcHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomEmcHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmcHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomEmcHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmcHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomEmcHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomEmcHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomFwDet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomFwDet::Class_Name()
{
   return "HGeomFwDet";
}

//______________________________________________________________________________
const char *HGeomFwDet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomFwDet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomFwDet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomFwDet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomFwDetHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomFwDetHit::Class_Name()
{
   return "HGeomFwDetHit";
}

//______________________________________________________________________________
const char *HGeomFwDetHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDetHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomFwDetHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDetHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomFwDetHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDetHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomFwDetHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomFwDetHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomMdcWirePlane::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomMdcWirePlane::Class_Name()
{
   return "HGeomMdcWirePlane";
}

//______________________________________________________________________________
const char *HGeomMdcWirePlane::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlane*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomMdcWirePlane::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlane*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomMdcWirePlane::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlane*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomMdcWirePlane::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlane*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomMdcWirePlanes::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomMdcWirePlanes::Class_Name()
{
   return "HGeomMdcWirePlanes";
}

//______________________________________________________________________________
const char *HGeomMdcWirePlanes::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlanes*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomMdcWirePlanes::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlanes*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomMdcWirePlanes::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlanes*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomMdcWirePlanes::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomMdcWirePlanes*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HGeomInterface::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomInterface.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomInterface::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomInterface.
      TClass *R__cl = ::HGeomInterface::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fileInput", &fileInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*oraInput", &oraInput);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*output", &output);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSets", &nSets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nActualSets", &nActualSets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFiles", &nFiles);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sets", &sets);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*media", &media);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*shapes", &shapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*masterNodes", &masterNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "setupFile", &setupFile);
      R__insp.InspectMember(setupFile, "setupFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geoBuilder", &geoBuilder);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "paramFile", &paramFile);
      R__insp.InspectMember(paramFile, "paramFile.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomInterface(void *p) {
      return  p ? new(p) ::HGeomInterface : new ::HGeomInterface;
   }
   static void *newArray_HGeomInterface(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomInterface[nElements] : new ::HGeomInterface[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomInterface(void *p) {
      delete ((::HGeomInterface*)p);
   }
   static void deleteArray_HGeomInterface(void *p) {
      delete [] ((::HGeomInterface*)p);
   }
   static void destruct_HGeomInterface(void *p) {
      typedef ::HGeomInterface current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomInterface(TBuffer &buf, void *obj) {
      ((::HGeomInterface*)obj)->::HGeomInterface::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomInterface

//______________________________________________________________________________
void HGeomBuilder::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomBuilder.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomBuilder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomBuilder.
      TClass *R__cl = ::HGeomBuilder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRot", &nRot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMed", &nMed);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HGeomBuilder(void *p) {
      delete ((::HGeomBuilder*)p);
   }
   static void deleteArray_HGeomBuilder(void *p) {
      delete [] ((::HGeomBuilder*)p);
   }
   static void destruct_HGeomBuilder(void *p) {
      typedef ::HGeomBuilder current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomBuilder(TBuffer &buf, void *obj) {
      ((::HGeomBuilder*)obj)->::HGeomBuilder::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomBuilder

//______________________________________________________________________________
void HGeomRootBuilder::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomRootBuilder.

   HGeomBuilder::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomRootBuilder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomRootBuilder.
      TClass *R__cl = ::HGeomRootBuilder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*geoManager", &geoManager);
      HGeomBuilder::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomRootBuilder(void *p) {
      return  p ? new(p) ::HGeomRootBuilder : new ::HGeomRootBuilder;
   }
   static void *newArray_HGeomRootBuilder(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomRootBuilder[nElements] : new ::HGeomRootBuilder[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomRootBuilder(void *p) {
      delete ((::HGeomRootBuilder*)p);
   }
   static void deleteArray_HGeomRootBuilder(void *p) {
      delete [] ((::HGeomRootBuilder*)p);
   }
   static void destruct_HGeomRootBuilder(void *p) {
      typedef ::HGeomRootBuilder current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomRootBuilder(TBuffer &buf, void *obj) {
      ((::HGeomRootBuilder*)obj)->::HGeomRootBuilder::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomRootBuilder

//______________________________________________________________________________
void HGeomIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomIo.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomIo.
      TClass *R__cl = ::HGeomIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HGeomIo(void *p) {
      delete ((::HGeomIo*)p);
   }
   static void deleteArray_HGeomIo(void *p) {
      delete [] ((::HGeomIo*)p);
   }
   static void destruct_HGeomIo(void *p) {
      typedef ::HGeomIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomIo(TBuffer &buf, void *obj) {
      ((::HGeomIo*)obj)->::HGeomIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomIo

//______________________________________________________________________________
void HGeomAsciiIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomAsciiIo.

   HGeomIo::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomAsciiIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomAsciiIo.
      TClass *R__cl = ::HGeomAsciiIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filename", &filename);
      R__insp.InspectMember(filename, "filename.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "filedir", &filedir);
      R__insp.InspectMember(filedir, "filedir.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "writable", &writable);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*file", &file);
      HGeomIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomAsciiIo(void *p) {
      return  p ? new(p) ::HGeomAsciiIo : new ::HGeomAsciiIo;
   }
   static void *newArray_HGeomAsciiIo(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomAsciiIo[nElements] : new ::HGeomAsciiIo[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomAsciiIo(void *p) {
      delete ((::HGeomAsciiIo*)p);
   }
   static void deleteArray_HGeomAsciiIo(void *p) {
      delete [] ((::HGeomAsciiIo*)p);
   }
   static void destruct_HGeomAsciiIo(void *p) {
      typedef ::HGeomAsciiIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomAsciiIo(TBuffer &buf, void *obj) {
      ((::HGeomAsciiIo*)obj)->::HGeomAsciiIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomAsciiIo

//______________________________________________________________________________
void HGeomMedium::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomMedium.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomMedium::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomMedium.
      TClass *R__cl = ::HGeomMedium::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "medId", &medId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "autoflag", &autoflag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nComponents", &nComponents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "weightFac", &weightFac);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ca", &ca);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cz", &cz);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*cw", &cw);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "density", &density);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "radLen", &radLen);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sensFlag", &sensFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fldFlag", &fldFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fld", &fld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "epsil", &epsil);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "madfld", &madfld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxstep", &maxstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxde", &maxde);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "minstep", &minstep);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "npckov", &npckov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ppckov", &ppckov);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*absco", &absco);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*effic", &effic);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rindex", &rindex);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMedium(void *p) {
      return  p ? new(p) ::HGeomMedium : new ::HGeomMedium;
   }
   static void *newArray_HGeomMedium(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomMedium[nElements] : new ::HGeomMedium[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMedium(void *p) {
      delete ((::HGeomMedium*)p);
   }
   static void deleteArray_HGeomMedium(void *p) {
      delete [] ((::HGeomMedium*)p);
   }
   static void destruct_HGeomMedium(void *p) {
      typedef ::HGeomMedium current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomMedium(TBuffer &buf, void *obj) {
      ((::HGeomMedium*)obj)->::HGeomMedium::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomMedium

//______________________________________________________________________________
void HGeomMedia::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomMedia.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomMedia::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomMedia.
      TClass *R__cl = ::HGeomMedia::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*media", &media);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "inputFile", &inputFile);
      R__insp.InspectMember(inputFile, "inputFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "author", &author);
      R__insp.InspectMember(author, "author.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "description", &description);
      R__insp.InspectMember(description, "description.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMedia(void *p) {
      return  p ? new(p) ::HGeomMedia : new ::HGeomMedia;
   }
   static void *newArray_HGeomMedia(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomMedia[nElements] : new ::HGeomMedia[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMedia(void *p) {
      delete ((::HGeomMedia*)p);
   }
   static void deleteArray_HGeomMedia(void *p) {
      delete [] ((::HGeomMedia*)p);
   }
   static void destruct_HGeomMedia(void *p) {
      typedef ::HGeomMedia current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomMedia(TBuffer &buf, void *obj) {
      ((::HGeomMedia*)obj)->::HGeomMedia::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomMedia

//______________________________________________________________________________
void HGeomNode::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomNode.

   HGeomVolume::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomNode::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomNode.
      TClass *R__cl = ::HGeomNode::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShape", &pShape);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pMother", &pMother);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*medium", &medium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "volumeType", &volumeType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "active", &active);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "center", &center);
      R__insp.InspectMember(center, "center.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*labTransform", &labTransform);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*copyNode", &copyNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "created", &created);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*rootVolume", &rootVolume);
      HGeomVolume::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomNode(void *p) {
      return  p ? new(p) ::HGeomNode : new ::HGeomNode;
   }
   static void *newArray_HGeomNode(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomNode[nElements] : new ::HGeomNode[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomNode(void *p) {
      delete ((::HGeomNode*)p);
   }
   static void deleteArray_HGeomNode(void *p) {
      delete [] ((::HGeomNode*)p);
   }
   static void destruct_HGeomNode(void *p) {
      typedef ::HGeomNode current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomNode(TBuffer &buf, void *obj) {
      ((::HGeomNode*)obj)->::HGeomNode::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomNode

//______________________________________________________________________________
void HGeomSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomSet.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomSet.
      TClass *R__cl = ::HGeomSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*volumes", &volumes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*masterNodes", &masterNodes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxSectors", &maxSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxKeepinVolumes", &maxKeepinVolumes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxModules", &maxModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*modules", &modules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pShapes", &pShapes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "geoFile", &geoFile);
      R__insp.InspectMember(geoFile, "geoFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pHit", &pHit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "author", &author);
      R__insp.InspectMember(author, "author.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "description", &description);
      R__insp.InspectMember(description, "description.");
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HGeomSet(void *p) {
      delete ((::HGeomSet*)p);
   }
   static void deleteArray_HGeomSet(void *p) {
      delete [] ((::HGeomSet*)p);
   }
   static void destruct_HGeomSet(void *p) {
      typedef ::HGeomSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomSet(TBuffer &buf, void *obj) {
      ((::HGeomSet*)obj)->::HGeomSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomSet

//______________________________________________________________________________
void HGeomHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomHit.

   TNamed::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomHit.
      TClass *R__cl = ::HGeomHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*copies", &copies);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "hitFile", &hitFile);
      R__insp.InspectMember(hitFile, "hitFile.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pSet", &pSet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*currentNode", &currentNode);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "compName[5]", compName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nh", &nh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*chnamh", &chnamh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nbitsh", &nbitsh);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*orig", &orig);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fact", &fact);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nvmax", &nvmax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nv", &nv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*chnmsv", &chnmsv);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*nbitsv", &nbitsv);
      TNamed::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HGeomHit(void *p) {
      delete ((::HGeomHit*)p);
   }
   static void deleteArray_HGeomHit(void *p) {
      delete [] ((::HGeomHit*)p);
   }
   static void destruct_HGeomHit(void *p) {
      typedef ::HGeomHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomHit(TBuffer &buf, void *obj) {
      ((::HGeomHit*)obj)->::HGeomHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomHit

//______________________________________________________________________________
void HGeomCave::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomCave.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomCave::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomCave.
      TClass *R__cl = ::HGeomCave::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "name", &name);
      R__insp.InspectMember(name, "name.");
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomCave(void *p) {
      return  p ? new(p) ::HGeomCave : new ::HGeomCave;
   }
   static void *newArray_HGeomCave(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomCave[nElements] : new ::HGeomCave[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomCave(void *p) {
      delete ((::HGeomCave*)p);
   }
   static void deleteArray_HGeomCave(void *p) {
      delete [] ((::HGeomCave*)p);
   }
   static void destruct_HGeomCave(void *p) {
      typedef ::HGeomCave current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomCave(TBuffer &buf, void *obj) {
      ((::HGeomCave*)obj)->::HGeomCave::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomCave

//______________________________________________________________________________
void HGeomSectors::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomSectors.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomSectors::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomSectors.
      TClass *R__cl = ::HGeomSectors::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[5]", modName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomSectors(void *p) {
      return  p ? new(p) ::HGeomSectors : new ::HGeomSectors;
   }
   static void *newArray_HGeomSectors(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomSectors[nElements] : new ::HGeomSectors[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomSectors(void *p) {
      delete ((::HGeomSectors*)p);
   }
   static void deleteArray_HGeomSectors(void *p) {
      delete [] ((::HGeomSectors*)p);
   }
   static void destruct_HGeomSectors(void *p) {
      typedef ::HGeomSectors current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomSectors(TBuffer &buf, void *obj) {
      ((::HGeomSectors*)obj)->::HGeomSectors::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomSectors

//______________________________________________________________________________
void HGeomMdc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomMdc.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomMdc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomMdc.
      TClass *R__cl = ::HGeomMdc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[6]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[3]", eleName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wnbuf[36]", wnbuf);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wn0", &wn0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wn1", &wn1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wn2", &wn2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wn3", &wn3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireObjects", (void*)&wireObjects);
      R__insp.InspectMember("vector<HGeomMdcWire*>", (void*)&wireObjects, "wireObjects.", false);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMdc(void *p) {
      return  p ? new(p) ::HGeomMdc : new ::HGeomMdc;
   }
   static void *newArray_HGeomMdc(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomMdc[nElements] : new ::HGeomMdc[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMdc(void *p) {
      delete ((::HGeomMdc*)p);
   }
   static void deleteArray_HGeomMdc(void *p) {
      delete [] ((::HGeomMdc*)p);
   }
   static void destruct_HGeomMdc(void *p) {
      typedef ::HGeomMdc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomMdc(TBuffer &buf, void *obj) {
      ((::HGeomMdc*)obj)->::HGeomMdc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomMdc

//______________________________________________________________________________
void HGeomMdcHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomMdcHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomMdcHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomMdcHit.
      TClass *R__cl = ::HGeomMdcHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMdcHit(void *p) {
      return  p ? new(p) ::HGeomMdcHit : new ::HGeomMdcHit;
   }
   static void *newArray_HGeomMdcHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomMdcHit[nElements] : new ::HGeomMdcHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMdcHit(void *p) {
      delete ((::HGeomMdcHit*)p);
   }
   static void deleteArray_HGeomMdcHit(void *p) {
      delete [] ((::HGeomMdcHit*)p);
   }
   static void destruct_HGeomMdcHit(void *p) {
      typedef ::HGeomMdcHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomMdcHit(TBuffer &buf, void *obj) {
      ((::HGeomMdcHit*)obj)->::HGeomMdcHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomMdcHit

//______________________________________________________________________________
void HGeomCoils::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomCoils.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomCoils::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomCoils.
      TClass *R__cl = ::HGeomCoils::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[6]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomCoils(void *p) {
      return  p ? new(p) ::HGeomCoils : new ::HGeomCoils;
   }
   static void *newArray_HGeomCoils(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomCoils[nElements] : new ::HGeomCoils[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomCoils(void *p) {
      delete ((::HGeomCoils*)p);
   }
   static void deleteArray_HGeomCoils(void *p) {
      delete [] ((::HGeomCoils*)p);
   }
   static void destruct_HGeomCoils(void *p) {
      typedef ::HGeomCoils current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomCoils(TBuffer &buf, void *obj) {
      ((::HGeomCoils*)obj)->::HGeomCoils::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomCoils

//______________________________________________________________________________
void HGeomTof::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTof.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomTof::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTof.
      TClass *R__cl = ::HGeomTof::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[6]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[4]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTof(void *p) {
      return  p ? new(p) ::HGeomTof : new ::HGeomTof;
   }
   static void *newArray_HGeomTof(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTof[nElements] : new ::HGeomTof[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTof(void *p) {
      delete ((::HGeomTof*)p);
   }
   static void deleteArray_HGeomTof(void *p) {
      delete [] ((::HGeomTof*)p);
   }
   static void destruct_HGeomTof(void *p) {
      typedef ::HGeomTof current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTof(TBuffer &buf, void *obj) {
      ((::HGeomTof*)obj)->::HGeomTof::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTof

//______________________________________________________________________________
void HGeomTofHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTofHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomTofHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTofHit.
      TClass *R__cl = ::HGeomTofHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTofHit(void *p) {
      return  p ? new(p) ::HGeomTofHit : new ::HGeomTofHit;
   }
   static void *newArray_HGeomTofHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTofHit[nElements] : new ::HGeomTofHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTofHit(void *p) {
      delete ((::HGeomTofHit*)p);
   }
   static void deleteArray_HGeomTofHit(void *p) {
      delete [] ((::HGeomTofHit*)p);
   }
   static void destruct_HGeomTofHit(void *p) {
      typedef ::HGeomTofHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTofHit(TBuffer &buf, void *obj) {
      ((::HGeomTofHit*)obj)->::HGeomTofHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTofHit

//______________________________________________________________________________
void HGeomRich::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomRich.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomRich::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomRich.
      TClass *R__cl = ::HGeomRich::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[5]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomRich(void *p) {
      return  p ? new(p) ::HGeomRich : new ::HGeomRich;
   }
   static void *newArray_HGeomRich(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomRich[nElements] : new ::HGeomRich[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomRich(void *p) {
      delete ((::HGeomRich*)p);
   }
   static void deleteArray_HGeomRich(void *p) {
      delete [] ((::HGeomRich*)p);
   }
   static void destruct_HGeomRich(void *p) {
      typedef ::HGeomRich current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomRich(TBuffer &buf, void *obj) {
      ((::HGeomRich*)obj)->::HGeomRich::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomRich

//______________________________________________________________________________
void HGeomRichHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomRichHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomRichHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomRichHit.
      TClass *R__cl = ::HGeomRichHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomRichHit(void *p) {
      return  p ? new(p) ::HGeomRichHit : new ::HGeomRichHit;
   }
   static void *newArray_HGeomRichHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomRichHit[nElements] : new ::HGeomRichHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomRichHit(void *p) {
      delete ((::HGeomRichHit*)p);
   }
   static void deleteArray_HGeomRichHit(void *p) {
      delete [] ((::HGeomRichHit*)p);
   }
   static void destruct_HGeomRichHit(void *p) {
      typedef ::HGeomRichHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomRichHit(TBuffer &buf, void *obj) {
      ((::HGeomRichHit*)obj)->::HGeomRichHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomRichHit

//______________________________________________________________________________
void HGeomShower::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomShower.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomShower::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomShower.
      TClass *R__cl = ::HGeomShower::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "keepinName[5]", keepinName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[6]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[3]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomShower(void *p) {
      return  p ? new(p) ::HGeomShower : new ::HGeomShower;
   }
   static void *newArray_HGeomShower(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomShower[nElements] : new ::HGeomShower[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomShower(void *p) {
      delete ((::HGeomShower*)p);
   }
   static void deleteArray_HGeomShower(void *p) {
      delete [] ((::HGeomShower*)p);
   }
   static void destruct_HGeomShower(void *p) {
      typedef ::HGeomShower current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomShower(TBuffer &buf, void *obj) {
      ((::HGeomShower*)obj)->::HGeomShower::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomShower

//______________________________________________________________________________
void HGeomShowerHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomShowerHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomShowerHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomShowerHit.
      TClass *R__cl = ::HGeomShowerHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomShowerHit(void *p) {
      return  p ? new(p) ::HGeomShowerHit : new ::HGeomShowerHit;
   }
   static void *newArray_HGeomShowerHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomShowerHit[nElements] : new ::HGeomShowerHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomShowerHit(void *p) {
      delete ((::HGeomShowerHit*)p);
   }
   static void deleteArray_HGeomShowerHit(void *p) {
      delete [] ((::HGeomShowerHit*)p);
   }
   static void destruct_HGeomShowerHit(void *p) {
      typedef ::HGeomShowerHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomShowerHit(TBuffer &buf, void *obj) {
      ((::HGeomShowerHit*)obj)->::HGeomShowerHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomShowerHit

//______________________________________________________________________________
void HGeomFrames::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomFrames.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomFrames::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomFrames.
      TClass *R__cl = ::HGeomFrames::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[2]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomFrames(void *p) {
      return  p ? new(p) ::HGeomFrames : new ::HGeomFrames;
   }
   static void *newArray_HGeomFrames(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomFrames[nElements] : new ::HGeomFrames[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomFrames(void *p) {
      delete ((::HGeomFrames*)p);
   }
   static void deleteArray_HGeomFrames(void *p) {
      delete [] ((::HGeomFrames*)p);
   }
   static void destruct_HGeomFrames(void *p) {
      typedef ::HGeomFrames current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomFrames(TBuffer &buf, void *obj) {
      ((::HGeomFrames*)obj)->::HGeomFrames::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomFrames

//______________________________________________________________________________
void HGeomTarget::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomTarget.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomTarget::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomTarget.
      TClass *R__cl = ::HGeomTarget::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[2]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomTarget(void *p) {
      return  p ? new(p) ::HGeomTarget : new ::HGeomTarget;
   }
   static void *newArray_HGeomTarget(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomTarget[nElements] : new ::HGeomTarget[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomTarget(void *p) {
      delete ((::HGeomTarget*)p);
   }
   static void deleteArray_HGeomTarget(void *p) {
      delete [] ((::HGeomTarget*)p);
   }
   static void destruct_HGeomTarget(void *p) {
      typedef ::HGeomTarget current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomTarget(TBuffer &buf, void *obj) {
      ((::HGeomTarget*)obj)->::HGeomTarget::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomTarget

//______________________________________________________________________________
void HGeomStart::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomStart.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomStart::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomStart.
      TClass *R__cl = ::HGeomStart::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[2]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomStart(void *p) {
      return  p ? new(p) ::HGeomStart : new ::HGeomStart;
   }
   static void *newArray_HGeomStart(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomStart[nElements] : new ::HGeomStart[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomStart(void *p) {
      delete ((::HGeomStart*)p);
   }
   static void deleteArray_HGeomStart(void *p) {
      delete [] ((::HGeomStart*)p);
   }
   static void destruct_HGeomStart(void *p) {
      typedef ::HGeomStart current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomStart(TBuffer &buf, void *obj) {
      ((::HGeomStart*)obj)->::HGeomStart::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomStart

//______________________________________________________________________________
void HGeomStartHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomStartHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomStartHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomStartHit.
      TClass *R__cl = ::HGeomStartHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomStartHit(void *p) {
      return  p ? new(p) ::HGeomStartHit : new ::HGeomStartHit;
   }
   static void *newArray_HGeomStartHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomStartHit[nElements] : new ::HGeomStartHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomStartHit(void *p) {
      delete ((::HGeomStartHit*)p);
   }
   static void deleteArray_HGeomStartHit(void *p) {
      delete [] ((::HGeomStartHit*)p);
   }
   static void destruct_HGeomStartHit(void *p) {
      typedef ::HGeomStartHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomStartHit(TBuffer &buf, void *obj) {
      ((::HGeomStartHit*)obj)->::HGeomStartHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomStartHit

//______________________________________________________________________________
void HGeomFWall::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomFWall.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomFWall::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomFWall.
      TClass *R__cl = ::HGeomFWall::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[5]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomFWall(void *p) {
      return  p ? new(p) ::HGeomFWall : new ::HGeomFWall;
   }
   static void *newArray_HGeomFWall(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomFWall[nElements] : new ::HGeomFWall[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomFWall(void *p) {
      delete ((::HGeomFWall*)p);
   }
   static void deleteArray_HGeomFWall(void *p) {
      delete [] ((::HGeomFWall*)p);
   }
   static void destruct_HGeomFWall(void *p) {
      typedef ::HGeomFWall current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomFWall(TBuffer &buf, void *obj) {
      ((::HGeomFWall*)obj)->::HGeomFWall::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomFWall

//______________________________________________________________________________
void HGeomFWallHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomFWallHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomFWallHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomFWallHit.
      TClass *R__cl = ::HGeomFWallHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomFWallHit(void *p) {
      return  p ? new(p) ::HGeomFWallHit : new ::HGeomFWallHit;
   }
   static void *newArray_HGeomFWallHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomFWallHit[nElements] : new ::HGeomFWallHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomFWallHit(void *p) {
      delete ((::HGeomFWallHit*)p);
   }
   static void deleteArray_HGeomFWallHit(void *p) {
      delete [] ((::HGeomFWallHit*)p);
   }
   static void destruct_HGeomFWallHit(void *p) {
      typedef ::HGeomFWallHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomFWallHit(TBuffer &buf, void *obj) {
      ((::HGeomFWallHit*)obj)->::HGeomFWallHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomFWallHit

//______________________________________________________________________________
void HGeomRpc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomRpc.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomRpc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomRpc.
      TClass *R__cl = ::HGeomRpc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[6]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomRpc(void *p) {
      return  p ? new(p) ::HGeomRpc : new ::HGeomRpc;
   }
   static void *newArray_HGeomRpc(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomRpc[nElements] : new ::HGeomRpc[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomRpc(void *p) {
      delete ((::HGeomRpc*)p);
   }
   static void deleteArray_HGeomRpc(void *p) {
      delete [] ((::HGeomRpc*)p);
   }
   static void destruct_HGeomRpc(void *p) {
      typedef ::HGeomRpc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomRpc(TBuffer &buf, void *obj) {
      ((::HGeomRpc*)obj)->::HGeomRpc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomRpc

//______________________________________________________________________________
void HGeomRpcHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomRpcHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomRpcHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomRpcHit.
      TClass *R__cl = ::HGeomRpcHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomRpcHit(void *p) {
      return  p ? new(p) ::HGeomRpcHit : new ::HGeomRpcHit;
   }
   static void *newArray_HGeomRpcHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomRpcHit[nElements] : new ::HGeomRpcHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomRpcHit(void *p) {
      delete ((::HGeomRpcHit*)p);
   }
   static void deleteArray_HGeomRpcHit(void *p) {
      delete [] ((::HGeomRpcHit*)p);
   }
   static void destruct_HGeomRpcHit(void *p) {
      typedef ::HGeomRpcHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomRpcHit(TBuffer &buf, void *obj) {
      ((::HGeomRpcHit*)obj)->::HGeomRpcHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomRpcHit

//______________________________________________________________________________
void HGeomEmc::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomEmc.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomEmc::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomEmc.
      TClass *R__cl = ::HGeomEmc::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[6]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[2]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomEmc(void *p) {
      return  p ? new(p) ::HGeomEmc : new ::HGeomEmc;
   }
   static void *newArray_HGeomEmc(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomEmc[nElements] : new ::HGeomEmc[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomEmc(void *p) {
      delete ((::HGeomEmc*)p);
   }
   static void deleteArray_HGeomEmc(void *p) {
      delete [] ((::HGeomEmc*)p);
   }
   static void destruct_HGeomEmc(void *p) {
      typedef ::HGeomEmc current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomEmc(TBuffer &buf, void *obj) {
      ((::HGeomEmc*)obj)->::HGeomEmc::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomEmc

//______________________________________________________________________________
void HGeomEmcHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomEmcHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomEmcHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomEmcHit.
      TClass *R__cl = ::HGeomEmcHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomEmcHit(void *p) {
      return  p ? new(p) ::HGeomEmcHit : new ::HGeomEmcHit;
   }
   static void *newArray_HGeomEmcHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomEmcHit[nElements] : new ::HGeomEmcHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomEmcHit(void *p) {
      delete ((::HGeomEmcHit*)p);
   }
   static void deleteArray_HGeomEmcHit(void *p) {
      delete [] ((::HGeomEmcHit*)p);
   }
   static void destruct_HGeomEmcHit(void *p) {
      typedef ::HGeomEmcHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomEmcHit(TBuffer &buf, void *obj) {
      ((::HGeomEmcHit*)obj)->::HGeomEmcHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomEmcHit

//______________________________________________________________________________
void HGeomFwDet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomFwDet.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomFwDet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomFwDet.
      TClass *R__cl = ::HGeomFwDet::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[5]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[3]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomFwDet(void *p) {
      return  p ? new(p) ::HGeomFwDet : new ::HGeomFwDet;
   }
   static void *newArray_HGeomFwDet(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomFwDet[nElements] : new ::HGeomFwDet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomFwDet(void *p) {
      delete ((::HGeomFwDet*)p);
   }
   static void deleteArray_HGeomFwDet(void *p) {
      delete [] ((::HGeomFwDet*)p);
   }
   static void destruct_HGeomFwDet(void *p) {
      typedef ::HGeomFwDet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomFwDet(TBuffer &buf, void *obj) {
      ((::HGeomFwDet*)obj)->::HGeomFwDet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomFwDet

//______________________________________________________________________________
void HGeomFwDetHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomFwDetHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomFwDetHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomFwDetHit.
      TClass *R__cl = ::HGeomFwDetHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomFwDetHit(void *p) {
      return  p ? new(p) ::HGeomFwDetHit : new ::HGeomFwDetHit;
   }
   static void *newArray_HGeomFwDetHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomFwDetHit[nElements] : new ::HGeomFwDetHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomFwDetHit(void *p) {
      delete ((::HGeomFwDetHit*)p);
   }
   static void deleteArray_HGeomFwDetHit(void *p) {
      delete [] ((::HGeomFwDetHit*)p);
   }
   static void destruct_HGeomFwDetHit(void *p) {
      typedef ::HGeomFwDetHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomFwDetHit(TBuffer &buf, void *obj) {
      ((::HGeomFwDetHit*)obj)->::HGeomFwDetHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomFwDetHit

//______________________________________________________________________________
void HGeomUser::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomUser.

   HGeomSet::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomUser::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomUser.
      TClass *R__cl = ::HGeomUser::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "modName[6]", modName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "eleName[3]", eleName);
      HGeomSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomUser(void *p) {
      return  p ? new(p) ::HGeomUser : new ::HGeomUser;
   }
   static void *newArray_HGeomUser(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomUser[nElements] : new ::HGeomUser[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomUser(void *p) {
      delete ((::HGeomUser*)p);
   }
   static void deleteArray_HGeomUser(void *p) {
      delete [] ((::HGeomUser*)p);
   }
   static void destruct_HGeomUser(void *p) {
      typedef ::HGeomUser current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomUser(TBuffer &buf, void *obj) {
      ((::HGeomUser*)obj)->::HGeomUser::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomUser

//______________________________________________________________________________
void HGeomUserHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomUserHit.

   HGeomHit::Streamer(R__b);
}

//______________________________________________________________________________
void HGeomUserHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomUserHit.
      TClass *R__cl = ::HGeomUserHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      HGeomHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomUserHit(void *p) {
      return  p ? new(p) ::HGeomUserHit : new ::HGeomUserHit;
   }
   static void *newArray_HGeomUserHit(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomUserHit[nElements] : new ::HGeomUserHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomUserHit(void *p) {
      delete ((::HGeomUserHit*)p);
   }
   static void deleteArray_HGeomUserHit(void *p) {
      delete [] ((::HGeomUserHit*)p);
   }
   static void destruct_HGeomUserHit(void *p) {
      typedef ::HGeomUserHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomUserHit(TBuffer &buf, void *obj) {
      ((::HGeomUserHit*)obj)->::HGeomUserHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomUserHit

//______________________________________________________________________________
void HGeomMdcWirePlanes::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomMdcWirePlanes.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<HGeomMdcWirePlane> &R__stl =  fplanes;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            HGeomMdcWirePlane R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, HGeomMdcWirePlanes::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomMdcWirePlanes::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<HGeomMdcWirePlane> &R__stl =  fplanes;
         int R__n=(true) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<HGeomMdcWirePlane>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((HGeomMdcWirePlane&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomMdcWirePlanes::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomMdcWirePlanes.
      TClass *R__cl = ::HGeomMdcWirePlanes::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fplanes", (void*)&fplanes);
      R__insp.InspectMember("vector<HGeomMdcWirePlane>", (void*)&fplanes, "fplanes.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMdcWirePlanes(void *p) {
      return  p ? new(p) ::HGeomMdcWirePlanes : new ::HGeomMdcWirePlanes;
   }
   static void *newArray_HGeomMdcWirePlanes(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomMdcWirePlanes[nElements] : new ::HGeomMdcWirePlanes[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMdcWirePlanes(void *p) {
      delete ((::HGeomMdcWirePlanes*)p);
   }
   static void deleteArray_HGeomMdcWirePlanes(void *p) {
      delete [] ((::HGeomMdcWirePlanes*)p);
   }
   static void destruct_HGeomMdcWirePlanes(void *p) {
      typedef ::HGeomMdcWirePlanes current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomMdcWirePlanes(TBuffer &buf, void *obj) {
      ((::HGeomMdcWirePlanes*)obj)->::HGeomMdcWirePlanes::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomMdcWirePlanes

//______________________________________________________________________________
void HGeomMdcWirePlane::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomMdcWirePlane.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      planeName.Streamer(R__b);
      R__b >> planeType;
      R__b >> numWires;
      R__b >> centralWireNr;
      R__b >> wireDist;
      R__b >> wireOrient;
      R__b.ReadStaticArray((float*)wireRadius);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         wireMedium[R__i].Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HGeomMdcWirePlane::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomMdcWirePlane::IsA(), kTRUE);
      TObject::Streamer(R__b);
      planeName.Streamer(R__b);
      R__b << planeType;
      R__b << numWires;
      R__b << centralWireNr;
      R__b << wireDist;
      R__b << wireOrient;
      R__b.WriteArray(wireRadius, 2);
      int R__i;
      for (R__i = 0; R__i < 2; R__i++)
         wireMedium[R__i].Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomMdcWirePlane::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomMdcWirePlane.
      TClass *R__cl = ::HGeomMdcWirePlane::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeName", &planeName);
      R__insp.InspectMember(planeName, "planeName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "planeType", &planeType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "numWires", &numWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "centralWireNr", &centralWireNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireDist", &wireDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireOrient", &wireOrient);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireRadius[2]", wireRadius);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wireMedium[2]", wireMedium);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMdcWirePlane(void *p) {
      return  p ? new(p) ::HGeomMdcWirePlane : new ::HGeomMdcWirePlane;
   }
   static void *newArray_HGeomMdcWirePlane(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomMdcWirePlane[nElements] : new ::HGeomMdcWirePlane[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMdcWirePlane(void *p) {
      delete ((::HGeomMdcWirePlane*)p);
   }
   static void deleteArray_HGeomMdcWirePlane(void *p) {
      delete [] ((::HGeomMdcWirePlane*)p);
   }
   static void destruct_HGeomMdcWirePlane(void *p) {
      typedef ::HGeomMdcWirePlane current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomMdcWirePlane(TBuffer &buf, void *obj) {
      ((::HGeomMdcWirePlane*)obj)->::HGeomMdcWirePlane::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomMdcWirePlane

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomMdcWire(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HGeomMdcWire : new ::HGeomMdcWire;
   }
   static void *newArray_HGeomMdcWire(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) ::HGeomMdcWire[nElements] : new ::HGeomMdcWire[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomMdcWire(void *p) {
      delete ((::HGeomMdcWire*)p);
   }
   static void deleteArray_HGeomMdcWire(void *p) {
      delete [] ((::HGeomMdcWire*)p);
   }
   static void destruct_HGeomMdcWire(void *p) {
      typedef ::HGeomMdcWire current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class ::HGeomMdcWire

namespace ROOTDict {
   void vectorlEHGeomMdcWirePlanegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEHGeomMdcWirePlanegR_Dictionary();
   static void *new_vectorlEHGeomMdcWirePlanegR(void *p = 0);
   static void *newArray_vectorlEHGeomMdcWirePlanegR(Long_t size, void *p);
   static void delete_vectorlEHGeomMdcWirePlanegR(void *p);
   static void deleteArray_vectorlEHGeomMdcWirePlanegR(void *p);
   static void destruct_vectorlEHGeomMdcWirePlanegR(void *p);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const vector<HGeomMdcWirePlane>*)
   {
      vector<HGeomMdcWirePlane> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<HGeomMdcWirePlane>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<HGeomMdcWirePlane>", -2, "/cvmfs/hades.gsi.de/install/root-5.34.34/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<HGeomMdcWirePlane>), ::ROOT::DefineBehavior(ptr, ptr),
                  0, &vectorlEHGeomMdcWirePlanegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<HGeomMdcWirePlane>) );
      instance.SetNew(&new_vectorlEHGeomMdcWirePlanegR);
      instance.SetNewArray(&newArray_vectorlEHGeomMdcWirePlanegR);
      instance.SetDelete(&delete_vectorlEHGeomMdcWirePlanegR);
      instance.SetDeleteArray(&deleteArray_vectorlEHGeomMdcWirePlanegR);
      instance.SetDestructor(&destruct_vectorlEHGeomMdcWirePlanegR);
      instance.AdoptCollectionProxyInfo( ::ROOT::TCollectionProxyInfo::Generate( ::ROOT::TCollectionProxyInfo::Pushback< vector<HGeomMdcWirePlane> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<HGeomMdcWirePlane>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEHGeomMdcWirePlanegR_Dictionary() {
      ::ROOTDict::GenerateInitInstanceLocal((const vector<HGeomMdcWirePlane>*)0x0)->GetClass();
   }

} // end of namespace ROOTDict

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_vectorlEHGeomMdcWirePlanegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HGeomMdcWirePlane> : new vector<HGeomMdcWirePlane>;
   }
   static void *newArray_vectorlEHGeomMdcWirePlanegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<HGeomMdcWirePlane>[nElements] : new vector<HGeomMdcWirePlane>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEHGeomMdcWirePlanegR(void *p) {
      delete ((vector<HGeomMdcWirePlane>*)p);
   }
   static void deleteArray_vectorlEHGeomMdcWirePlanegR(void *p) {
      delete [] ((vector<HGeomMdcWirePlane>*)p);
   }
   static void destruct_vectorlEHGeomMdcWirePlanegR(void *p) {
      typedef vector<HGeomMdcWirePlane> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOTDict for class vector<HGeomMdcWirePlane>

/********************************************************
* ../build/pc/SimulationDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableSimulationDict();

extern "C" void G__set_cpp_environmentSimulationDict() {
  G__cpp_reset_tagtableSimulationDict();
}
#include <new>
extern "C" int G__cpp_dllrevSimulationDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HGeomIo */
static int G__SimulationDict_194_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->open((const Char_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->open((const Char_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomIo*) G__getstructoffset())->close();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomIo*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->isOpen());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->isWritable());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->read((HGeomMedia*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->read((HGeomSet*) G__int(libp->para[0]), (HGeomMedia*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->read((HGeomHit*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->write((HGeomMedia*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->write((HGeomSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->write((HGeomHit*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->readGeomConfig((HGeomInterface*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->setSimulRefRun((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomIo*) G__getstructoffset())->setHistoryDate((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_194_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomIo G__THGeomIo;
static int G__SimulationDict_194_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomIo*) (soff+(sizeof(HGeomIo)*i)))->~G__THGeomIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomIo*) (soff))->~G__THGeomIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_194_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomIo* dest = (HGeomIo*) G__getstructoffset();
   *dest = *(HGeomIo*) libp->para[0].ref;
   const HGeomIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomSet */
static int G__SimulationDict_195_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->setShapes((HGeomShapes*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->setMasterNodes((TList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->setGeomFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->setHitFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomSet*) G__getstructoffset())->getGeomFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomSet*) G__getstructoffset())->getHit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomSet*) G__getstructoffset())->getMaxSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomSet*) G__getstructoffset())->getMaxModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomSet*) G__getstructoffset())->getMaxKeepinVolumes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->setModules((Int_t) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HGeomSet*) G__getstructoffset())->getModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomSet*) G__getstructoffset())->getModule((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomSet*) G__getstructoffset())->getVolume((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomSet*) G__getstructoffset())->getMasterNode((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomSet*) G__getstructoffset())->getListOfVolumes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomSet*) G__getstructoffset())->getShapes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->setAuthor(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->setDescription(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((HGeomSet*) G__getstructoffset())->getAuthor();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((HGeomSet*) G__getstructoffset())->getDescription();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomSet*) G__getstructoffset())->getKeepinName((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomSet*) G__getstructoffset())->getModuleName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomSet*) G__getstructoffset())->getEleName((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomSet*) G__getstructoffset())->getSecNumInMod(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomSet*) G__getstructoffset())->getModNumInMod(*(TString*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomSet*) G__getstructoffset())->read(*(fstream*) libp->para[0].ref, (HGeomMedia*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->addRefNodes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomSet*) G__getstructoffset())->create((HGeomBuilder*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, (HGeomMedia*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomSet*) G__getstructoffset())->createAdditionalGeometry((HGeomBuilder*) G__int(libp->para[0]), *(TString*) libp->para[1].ref
, (HGeomMedia*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->compare(*(HGeomSet*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_195_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_195_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomSet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomSet(*(HGeomSet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomSet G__THGeomSet;
static int G__SimulationDict_195_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomSet*) (soff+(sizeof(HGeomSet)*i)))->~G__THGeomSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomSet*) (soff))->~G__THGeomSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_195_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomSet* dest = (HGeomSet*) G__getstructoffset();
   *dest = *(HGeomSet*) libp->para[0].ref;
   const HGeomSet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMedia */
static int G__SimulationDict_196_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMedia* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMedia[n];
     } else {
       p = new((void*) gvp) HGeomMedia[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMedia;
     } else {
       p = new((void*) gvp) HGeomMedia;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->setInputFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomMedia*) G__getstructoffset())->getInputFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->addMedium((HGeomMedium*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomMedia*) G__getstructoffset())->getMedium((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomMedia*) G__getstructoffset())->getListOfMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->read(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->list();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->setAuthor(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->setDescription(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((HGeomMedia*) G__getstructoffset())->getAuthor();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((HGeomMedia*) G__getstructoffset())->getDescription();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomMedia::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMedia::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomMedia::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomMedia::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedia*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMedia::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMedia::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMedia::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_196_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMedia::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_196_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMedia* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMedia(*(HGeomMedia*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMedia G__THGeomMedia;
static int G__SimulationDict_196_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMedia*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMedia*) (soff+(sizeof(HGeomMedia)*i)))->~G__THGeomMedia();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMedia*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMedia*) (soff))->~G__THGeomMedia();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_196_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMedia* dest = (HGeomMedia*) G__getstructoffset();
   *dest = *(HGeomMedia*) libp->para[0].ref;
   const HGeomMedia& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomBuilder */
static int G__SimulationDict_198_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomBuilder*) G__getstructoffset())->createNode((HGeomNode*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomBuilder*) G__getstructoffset())->createMedium((HGeomMedium*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomBuilder*) G__getstructoffset())->createHit((HGeomHit*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBuilder*) G__getstructoffset())->finalize();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomBuilder*) G__getstructoffset())->createVolume((HGeomMdcWire*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomBuilder*) G__getstructoffset())->createRotation((HGeomRotation*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomBuilder*) G__getstructoffset())->positionNode((HGeomMdcWire*) G__int(libp->para[0]), (HGeomNode*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBuilder*) G__getstructoffset())->fillMdcCommonBlock((HGeomNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomBuilder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBuilder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomBuilder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomBuilder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomBuilder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBuilder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomBuilder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomBuilder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_198_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomBuilder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomBuilder G__THGeomBuilder;
static int G__SimulationDict_198_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomBuilder*) (soff+(sizeof(HGeomBuilder)*i)))->~G__THGeomBuilder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomBuilder*) (soff))->~G__THGeomBuilder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_198_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomBuilder* dest = (HGeomBuilder*) G__getstructoffset();
   *dest = *(HGeomBuilder*) libp->para[0].ref;
   const HGeomBuilder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomInterface */
static int G__SimulationDict_202_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomInterface* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomInterface[n];
     } else {
       p = new((void*) gvp) HGeomInterface[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomInterface;
     } else {
       p = new((void*) gvp) HGeomInterface;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->setOracleInput((HGeomIo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->setOutput((HGeomIo*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->setGeomBuilder((HGeomBuilder*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomInterface*) G__getstructoffset())->getFileInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomInterface*) G__getstructoffset())->getOraInput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomInterface*) G__getstructoffset())->getOutput());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomInterface*) G__getstructoffset())->getShapes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomInterface*) G__getstructoffset())->getMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->addInputFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->addAlignment((HSpecGeomPar*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->addAlignment((HDetGeomPar*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomInterface*) G__getstructoffset())->findSet((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->readSet((HGeomSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->writeSet((HGeomSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->writeSet((HGeomSet*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->createSet((HGeomSet*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->deleteSet((HGeomSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->readMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->writeMedia());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->writeMedia((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->readAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->writeAll());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->createAll((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->createAll());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->createGeometry((Bool_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->createGeometry());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->readGeomConfig((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->addSetupFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomInterface*) G__getstructoffset())->readSetupFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->addParamFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomInterface::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomInterface::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomInterface::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomInterface::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomInterface*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomInterface::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomInterface::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomInterface::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_202_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomInterface::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_202_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomInterface* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomInterface(*(HGeomInterface*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomInterface G__THGeomInterface;
static int G__SimulationDict_202_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomInterface*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomInterface*) (soff+(sizeof(HGeomInterface)*i)))->~G__THGeomInterface();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomInterface*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomInterface*) (soff))->~G__THGeomInterface();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_202_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomInterface* dest = (HGeomInterface*) G__getstructoffset();
   *dest = *(HGeomInterface*) libp->para[0].ref;
   const HGeomInterface& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomHit */
static int G__SimulationDict_203_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomHit*) G__getstructoffset())->setHitFile((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomHit*) G__getstructoffset())->getHitFile());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomHit*) G__getstructoffset())->read(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomHit*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomHit*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomHit*) G__getstructoffset())->setCurrentNode((HGeomNode*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomHit*) G__getstructoffset())->getDetectorName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomHit*) G__getstructoffset())->getComponentName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomHit*) G__getstructoffset())->calcRefPos(*(HGeomVector*) libp->para[0].ref, *(TString*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomHit*) G__getstructoffset())->getIdType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomHit*) G__getstructoffset())->getNh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomHit*) G__getstructoffset())->getChnamh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HGeomHit*) G__getstructoffset())->getNbitsh());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HGeomHit*) G__getstructoffset())->getOrig());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HGeomHit*) G__getstructoffset())->getFact());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomHit*) G__getstructoffset())->getNv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomHit*) G__getstructoffset())->getChnmsv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 73, (long) ((HGeomHit*) G__getstructoffset())->getNbitsv());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomHit*) G__getstructoffset())->setNh((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomHit*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_203_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomHit G__THGeomHit;
static int G__SimulationDict_203_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomHit*) (soff+(sizeof(HGeomHit)*i)))->~G__THGeomHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomHit*) (soff))->~G__THGeomHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_203_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomHit* dest = (HGeomHit*) G__getstructoffset();
   *dest = *(HGeomHit*) libp->para[0].ref;
   const HGeomHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomAsciiIo */
static int G__SimulationDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomAsciiIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomAsciiIo[n];
     } else {
       p = new((void*) gvp) HGeomAsciiIo[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomAsciiIo;
     } else {
       p = new((void*) gvp) HGeomAsciiIo;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomAsciiIo*) G__getstructoffset())->setDirectory((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomAsciiIo*) G__getstructoffset())->getDirectory());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HGeomAsciiIo*) G__getstructoffset())->getFilename());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomAsciiIo*) G__getstructoffset())->readDetectorSetup((HGeomInterface*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomAsciiIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomAsciiIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomAsciiIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomAsciiIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomAsciiIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomAsciiIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomAsciiIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomAsciiIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_204_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomAsciiIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_204_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomAsciiIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomAsciiIo(*(HGeomAsciiIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomAsciiIo G__THGeomAsciiIo;
static int G__SimulationDict_204_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomAsciiIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomAsciiIo*) (soff+(sizeof(HGeomAsciiIo)*i)))->~G__THGeomAsciiIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomAsciiIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomAsciiIo*) (soff))->~G__THGeomAsciiIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_204_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomAsciiIo* dest = (HGeomAsciiIo*) G__getstructoffset();
   *dest = *(HGeomAsciiIo*) libp->para[0].ref;
   const HGeomAsciiIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomNode */
static int G__SimulationDict_205_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomNode[n];
     } else {
       p = new((void*) gvp) HGeomNode[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomNode;
     } else {
       p = new((void*) gvp) HGeomNode;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomNode* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeomNode(*(HGeomNode*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HGeomNode(*(HGeomNode*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomNode*) G__getstructoffset())->getVolumeType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->isTopNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->isRefNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->isKeepin());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->isModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomNode*) G__getstructoffset())->getCopyNo());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getShapePointer());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getMotherNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getMedium());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->isActive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HGeomNode*) G__getstructoffset())->getCenterPosition();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getLabTransform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getCopyNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getRootVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->getTree());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->isSensitive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->isCreated());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setCreated();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setName((const Text_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setVolumeType((EHGeomNodeType) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setVolumePar(*(HGeomNode*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setShape((HGeomBasicShape*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setMother((HGeomNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setMedium((HGeomMedium*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HGeomNode*) G__getstructoffset())->setActive((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HGeomNode*) G__getstructoffset())->setActive();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setCenterPosition(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setCopyNode((HGeomNode*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setRootVolume((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomNode*) G__getstructoffset())->calcLabTransform());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->setLabTransform(*(HGeomTransform*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->calcModuleTransform(*(HGeomTransform*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->calcRefPos(*(HGeomVector*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomNode*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomNode*) G__getstructoffset())->compare(*(HGeomNode*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomNode::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomNode::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomNode::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomNode::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomNode*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomNode::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomNode::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomNode::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_205_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomNode::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomNode G__THGeomNode;
static int G__SimulationDict_205_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomNode*) (soff+(sizeof(HGeomNode)*i)))->~G__THGeomNode();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomNode*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomNode*) (soff))->~G__THGeomNode();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_205_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomNode* dest = (HGeomNode*) G__getstructoffset();
   *dest = *(HGeomNode*) libp->para[0].ref;
   const HGeomNode& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMedium */
static int G__SimulationDict_206_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMedium* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMedium((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomMedium((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMedium[n];
       } else {
         p = new((void*) gvp) HGeomMedium[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMedium;
       } else {
         p = new((void*) gvp) HGeomMedium;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->setMediumIndex((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMedium*) G__getstructoffset())->getMediumIndex());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->setAutoFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMedium*) G__getstructoffset())->getAutoFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->setNComponents((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMedium*) G__getstructoffset())->getNComponents());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 4:
      G__letint(result7, 103, (long) ((HGeomMedium*) G__getstructoffset())->setComponent((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])));
      break;
   case 3:
      G__letint(result7, 103, (long) ((HGeomMedium*) G__getstructoffset())->setComponent((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->getComponent((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMedium*) G__getstructoffset())->getWeightFac());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->setDensity((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HGeomMedium*) G__getstructoffset())->getDensity());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->setRadiationLength((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HGeomMedium*) G__getstructoffset())->getRadiationLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->setNpckov((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMedium*) G__getstructoffset())->getNpckov());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomMedium*) G__getstructoffset())->setCerenkovPar((Int_t) G__int(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->getCerenkovPar((Int_t) G__int(libp->para[0]), (Double_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 8:
      ((HGeomMedium*) G__getstructoffset())->setMediumPar(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
      G__setnull(result7);
      break;
   case 7:
      ((HGeomMedium*) G__getstructoffset())->setMediumPar(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
      G__setnull(result7);
      break;
   case 6:
      ((HGeomMedium*) G__getstructoffset())->setMediumPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
      G__setnull(result7);
      break;
   case 5:
      ((HGeomMedium*) G__getstructoffset())->setMediumPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3])
, (Double_t) G__double(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HGeomMedium*) G__getstructoffset())->setMediumPar((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Double_t) G__double(libp->para[2]), (Double_t) G__double(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->getMediumPar((Double_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomMedium*) G__getstructoffset())->isSensitive());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMedium*) G__getstructoffset())->getSensitivityFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMedium*) G__getstructoffset())->getFieldFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HGeomMedium*) G__getstructoffset())->getField());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HGeomMedium*) G__getstructoffset())->getEpsil());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->read(*(fstream*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HGeomMedium*) G__getstructoffset())->calcRadiationLength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomMedium::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMedium::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomMedium::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomMedium::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMedium*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMedium::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMedium::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMedium::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_206_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMedium::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_206_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMedium* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMedium(*(HGeomMedium*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMedium G__THGeomMedium;
static int G__SimulationDict_206_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMedium*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMedium*) (soff+(sizeof(HGeomMedium)*i)))->~G__THGeomMedium();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMedium*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMedium*) (soff))->~G__THGeomMedium();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_206_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMedium* dest = (HGeomMedium*) G__getstructoffset();
   *dest = *(HGeomMedium*) libp->para[0].ref;
   const HGeomMedium& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMdcWire */
static int G__SimulationDict_208_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcWire* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 9:
     //m: 9
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     } else {
       p = new((void*) gvp) HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7])
, (Double_t) G__double(libp->para[8]));
     }
     break;
   case 8:
     //m: 8
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     } else {
       p = new((void*) gvp) HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]), (Double_t) G__double(libp->para[7]));
     }
     break;
   case 7:
     //m: 7
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     } else {
       p = new((void*) gvp) HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5])
, (Double_t) G__double(libp->para[6]));
     }
     break;
   case 6:
     //m: 6
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     } else {
       p = new((void*) gvp) HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Double_t) G__double(libp->para[5]));
     }
     break;
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     } else {
       p = new((void*) gvp) HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HGeomMdcWire(
(Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1]))
, (Int_t) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
     } else {
       p = new((void*) gvp) HGeomMdcWire((Int_t) G__int(libp->para[0]), *((TString*) G__int(libp->para[1])));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWire((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomMdcWire((Int_t) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMdcWire[n];
       } else {
         p = new((void*) gvp) HGeomMdcWire[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMdcWire;
       } else {
         p = new((void*) gvp) HGeomMdcWire;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWire*) G__getstructoffset())->setMediumInd((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWire*) G__getstructoffset())->setWireNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWire*) G__getstructoffset())->setCopyNumber((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWire*) G__getstructoffset())->setCopyNode((HGeomMdcWire*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWire*) G__getstructoffset())->setRootVolume((TGeoVolume*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TString& obj = ((HGeomMdcWire*) G__getstructoffset())->getWireName();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMdcWire*) G__getstructoffset())->getCopyNumber());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMdcWire*) G__getstructoffset())->getWireType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HGeomMdcWire*) G__getstructoffset())->getParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMdcWire*) G__getstructoffset())->getNParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HGeomMdcWire*) G__getstructoffset())->getPosition());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HGeomMdcWire*) G__getstructoffset())->getMediumInd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomMdcWire*) G__getstructoffset())->getCopyNode());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HGeomMdcWire*) G__getstructoffset())->getRootVolume());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWire*) G__getstructoffset())->getPosition(*(Double_t*) G__Doubleref(&libp->para[0]), *(Double_t*) G__Doubleref(&libp->para[1])
, *(Double_t*) G__Doubleref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_208_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWire*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_208_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMdcWire* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMdcWire(*(HGeomMdcWire*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMdcWire G__THGeomMdcWire;
static int G__SimulationDict_208_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 0
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMdcWire*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMdcWire*) (soff+(sizeof(HGeomMdcWire)*i)))->~G__THGeomMdcWire();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMdcWire*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMdcWire*) (soff))->~G__THGeomMdcWire();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_208_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcWire* dest = (HGeomMdcWire*) G__getstructoffset();
   *dest = *(HGeomMdcWire*) libp->para[0].ref;
   const HGeomMdcWire& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomRootBuilder */
static int G__SimulationDict_210_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRootBuilder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRootBuilder[n];
     } else {
       p = new((void*) gvp) HGeomRootBuilder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRootBuilder;
     } else {
       p = new((void*) gvp) HGeomRootBuilder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRootBuilder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeomRootBuilder((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HGeomRootBuilder((const char*) G__int(libp->para[0]), (const char*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRootBuilder*) G__getstructoffset())->setGeoManager((TGeoManager*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HGeomRootBuilder*) G__getstructoffset())->checkOverlaps((Double_t) G__double(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HGeomRootBuilder*) G__getstructoffset())->checkOverlaps();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomRootBuilder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRootBuilder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomRootBuilder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomRootBuilder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRootBuilder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRootBuilder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRootBuilder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRootBuilder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_210_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRootBuilder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_210_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomRootBuilder* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomRootBuilder(*(HGeomRootBuilder*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomRootBuilder G__THGeomRootBuilder;
static int G__SimulationDict_210_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomRootBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomRootBuilder*) (soff+(sizeof(HGeomRootBuilder)*i)))->~G__THGeomRootBuilder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomRootBuilder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomRootBuilder*) (soff))->~G__THGeomRootBuilder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_210_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRootBuilder* dest = (HGeomRootBuilder*) G__getstructoffset();
   *dest = *(HGeomRootBuilder*) libp->para[0].ref;
   const HGeomRootBuilder& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomCave */
static int G__SimulationDict_235_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCave* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCave[n];
     } else {
       p = new((void*) gvp) HGeomCave[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCave;
     } else {
       p = new((void*) gvp) HGeomCave;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomCave::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCave::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomCave::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomCave::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomCave*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCave::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCave::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCave::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_235_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCave::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_235_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomCave* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomCave(*(HGeomCave*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomCave G__THGeomCave;
static int G__SimulationDict_235_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomCave*) (soff+(sizeof(HGeomCave)*i)))->~G__THGeomCave();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomCave*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomCave*) (soff))->~G__THGeomCave();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_235_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCave* dest = (HGeomCave*) G__getstructoffset();
   *dest = *(HGeomCave*) libp->para[0].ref;
   const HGeomCave& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomSectors */
static int G__SimulationDict_236_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomSectors* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomSectors[n];
     } else {
       p = new((void*) gvp) HGeomSectors[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomSectors;
     } else {
       p = new((void*) gvp) HGeomSectors;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomSectors::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSectors::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomSectors::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomSectors::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomSectors*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSectors::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomSectors::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomSectors::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_236_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomSectors::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_236_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomSectors* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomSectors(*(HGeomSectors*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomSectors G__THGeomSectors;
static int G__SimulationDict_236_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomSectors*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomSectors*) (soff+(sizeof(HGeomSectors)*i)))->~G__THGeomSectors();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomSectors*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomSectors*) (soff))->~G__THGeomSectors();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_236_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomSectors* dest = (HGeomSectors*) G__getstructoffset();
   *dest = *(HGeomSectors*) libp->para[0].ref;
   const HGeomSectors& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomCoils */
static int G__SimulationDict_237_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCoils* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCoils[n];
     } else {
       p = new((void*) gvp) HGeomCoils[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomCoils;
     } else {
       p = new((void*) gvp) HGeomCoils;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomCoils::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCoils::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomCoils::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomCoils::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomCoils*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCoils::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCoils::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomCoils::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_237_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomCoils::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_237_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomCoils* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomCoils(*(HGeomCoils*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomCoils G__THGeomCoils;
static int G__SimulationDict_237_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomCoils*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomCoils*) (soff+(sizeof(HGeomCoils)*i)))->~G__THGeomCoils();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomCoils*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomCoils*) (soff))->~G__THGeomCoils();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_237_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomCoils* dest = (HGeomCoils*) G__getstructoffset();
   *dest = *(HGeomCoils*) libp->para[0].ref;
   const HGeomCoils& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomFrames */
static int G__SimulationDict_238_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFrames* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFrames[n];
     } else {
       p = new((void*) gvp) HGeomFrames[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFrames;
     } else {
       p = new((void*) gvp) HGeomFrames;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomFrames::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFrames::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomFrames::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomFrames::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomFrames*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFrames::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFrames::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFrames::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_238_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFrames::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_238_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomFrames* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomFrames(*(HGeomFrames*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomFrames G__THGeomFrames;
static int G__SimulationDict_238_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomFrames*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomFrames*) (soff+(sizeof(HGeomFrames)*i)))->~G__THGeomFrames();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomFrames*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomFrames*) (soff))->~G__THGeomFrames();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_238_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFrames* dest = (HGeomFrames*) G__getstructoffset();
   *dest = *(HGeomFrames*) libp->para[0].ref;
   const HGeomFrames& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTarget */
static int G__SimulationDict_239_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTarget* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTarget[n];
     } else {
       p = new((void*) gvp) HGeomTarget[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTarget;
     } else {
       p = new((void*) gvp) HGeomTarget;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTarget::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTarget::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTarget::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTarget::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTarget*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTarget::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTarget::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTarget::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_239_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTarget::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_239_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomTarget* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomTarget(*(HGeomTarget*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTarget G__THGeomTarget;
static int G__SimulationDict_239_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTarget*) (soff+(sizeof(HGeomTarget)*i)))->~G__THGeomTarget();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTarget*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTarget*) (soff))->~G__THGeomTarget();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_239_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTarget* dest = (HGeomTarget*) G__getstructoffset();
   *dest = *(HGeomTarget*) libp->para[0].ref;
   const HGeomTarget& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMdc */
static int G__SimulationDict_240_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdc[n];
     } else {
       p = new((void*) gvp) HGeomMdc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdc;
     } else {
       p = new((void*) gvp) HGeomMdc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomMdc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomMdc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomMdc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_240_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_240_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMdc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMdc(*(HGeomMdc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMdc G__THGeomMdc;
static int G__SimulationDict_240_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMdc*) (soff+(sizeof(HGeomMdc)*i)))->~G__THGeomMdc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMdc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMdc*) (soff))->~G__THGeomMdc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_240_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdc* dest = (HGeomMdc*) G__getstructoffset();
   *dest = *(HGeomMdc*) libp->para[0].ref;
   const HGeomMdc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMdcHit */
static int G__SimulationDict_245_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcHit((HGeomMdc*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomMdcHit((HGeomMdc*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMdcHit[n];
       } else {
         p = new((void*) gvp) HGeomMdcHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMdcHit;
       } else {
         p = new((void*) gvp) HGeomMdcHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomMdcHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomMdcHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomMdcHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdcHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_245_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdcHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_245_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMdcHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMdcHit(*(HGeomMdcHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMdcHit G__THGeomMdcHit;
static int G__SimulationDict_245_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMdcHit*) (soff+(sizeof(HGeomMdcHit)*i)))->~G__THGeomMdcHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMdcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMdcHit*) (soff))->~G__THGeomMdcHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_245_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcHit* dest = (HGeomMdcHit*) G__getstructoffset();
   *dest = *(HGeomMdcHit*) libp->para[0].ref;
   const HGeomMdcHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTof */
static int G__SimulationDict_246_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTof* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTof[n];
     } else {
       p = new((void*) gvp) HGeomTof[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTof;
     } else {
       p = new((void*) gvp) HGeomTof;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTof::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTof::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTof::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTof::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTof*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTof::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTof::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTof::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_246_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTof::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_246_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomTof* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomTof(*(HGeomTof*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTof G__THGeomTof;
static int G__SimulationDict_246_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTof*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTof*) (soff+(sizeof(HGeomTof)*i)))->~G__THGeomTof();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTof*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTof*) (soff))->~G__THGeomTof();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_246_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTof* dest = (HGeomTof*) G__getstructoffset();
   *dest = *(HGeomTof*) libp->para[0].ref;
   const HGeomTof& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomTofHit */
static int G__SimulationDict_247_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTofHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomTofHit((HGeomTof*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomTofHit((HGeomTof*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomTofHit[n];
       } else {
         p = new((void*) gvp) HGeomTofHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomTofHit;
       } else {
         p = new((void*) gvp) HGeomTofHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomTofHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTofHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomTofHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomTofHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomTofHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTofHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTofHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomTofHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_247_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomTofHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_247_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomTofHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomTofHit(*(HGeomTofHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomTofHit G__THGeomTofHit;
static int G__SimulationDict_247_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomTofHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomTofHit*) (soff+(sizeof(HGeomTofHit)*i)))->~G__THGeomTofHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomTofHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomTofHit*) (soff))->~G__THGeomTofHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_247_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomTofHit* dest = (HGeomTofHit*) G__getstructoffset();
   *dest = *(HGeomTofHit*) libp->para[0].ref;
   const HGeomTofHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomRich */
static int G__SimulationDict_248_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRich* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRich[n];
     } else {
       p = new((void*) gvp) HGeomRich[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRich;
     } else {
       p = new((void*) gvp) HGeomRich;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomRich::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRich::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomRich::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomRich::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRich*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRich::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRich::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRich::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_248_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRich::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_248_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomRich* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomRich(*(HGeomRich*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomRich G__THGeomRich;
static int G__SimulationDict_248_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomRich*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomRich*) (soff+(sizeof(HGeomRich)*i)))->~G__THGeomRich();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomRich*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomRich*) (soff))->~G__THGeomRich();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_248_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRich* dest = (HGeomRich*) G__getstructoffset();
   *dest = *(HGeomRich*) libp->para[0].ref;
   const HGeomRich& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomRichHit */
static int G__SimulationDict_249_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRichHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRichHit((HGeomRich*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomRichHit((HGeomRich*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomRichHit[n];
       } else {
         p = new((void*) gvp) HGeomRichHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomRichHit;
       } else {
         p = new((void*) gvp) HGeomRichHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomRichHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRichHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomRichHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomRichHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRichHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRichHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRichHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRichHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_249_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRichHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_249_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomRichHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomRichHit(*(HGeomRichHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomRichHit G__THGeomRichHit;
static int G__SimulationDict_249_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomRichHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomRichHit*) (soff+(sizeof(HGeomRichHit)*i)))->~G__THGeomRichHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomRichHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomRichHit*) (soff))->~G__THGeomRichHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_249_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRichHit* dest = (HGeomRichHit*) G__getstructoffset();
   *dest = *(HGeomRichHit*) libp->para[0].ref;
   const HGeomRichHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomShower */
static int G__SimulationDict_250_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomShower* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomShower[n];
     } else {
       p = new((void*) gvp) HGeomShower[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomShower;
     } else {
       p = new((void*) gvp) HGeomShower;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomShower::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShower::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomShower::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomShower::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomShower*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShower::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomShower::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShower::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_250_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomShower::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_250_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomShower* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomShower(*(HGeomShower*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomShower G__THGeomShower;
static int G__SimulationDict_250_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomShower*) (soff+(sizeof(HGeomShower)*i)))->~G__THGeomShower();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomShower*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomShower*) (soff))->~G__THGeomShower();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_250_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomShower* dest = (HGeomShower*) G__getstructoffset();
   *dest = *(HGeomShower*) libp->para[0].ref;
   const HGeomShower& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomShowerHit */
static int G__SimulationDict_251_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomShowerHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomShowerHit((HGeomShower*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomShowerHit((HGeomShower*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomShowerHit[n];
       } else {
         p = new((void*) gvp) HGeomShowerHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomShowerHit;
       } else {
         p = new((void*) gvp) HGeomShowerHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomShowerHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShowerHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomShowerHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomShowerHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomShowerHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShowerHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomShowerHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomShowerHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_251_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomShowerHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_251_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomShowerHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomShowerHit(*(HGeomShowerHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomShowerHit G__THGeomShowerHit;
static int G__SimulationDict_251_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomShowerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomShowerHit*) (soff+(sizeof(HGeomShowerHit)*i)))->~G__THGeomShowerHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomShowerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomShowerHit*) (soff))->~G__THGeomShowerHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_251_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomShowerHit* dest = (HGeomShowerHit*) G__getstructoffset();
   *dest = *(HGeomShowerHit*) libp->para[0].ref;
   const HGeomShowerHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomStart */
static int G__SimulationDict_252_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomStart* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomStart[n];
     } else {
       p = new((void*) gvp) HGeomStart[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomStart;
     } else {
       p = new((void*) gvp) HGeomStart;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomStart::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomStart::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomStart::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomStart::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomStart*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomStart::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomStart::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomStart::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_252_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomStart::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_252_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomStart* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomStart(*(HGeomStart*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomStart G__THGeomStart;
static int G__SimulationDict_252_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomStart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomStart*) (soff+(sizeof(HGeomStart)*i)))->~G__THGeomStart();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomStart*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomStart*) (soff))->~G__THGeomStart();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_252_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomStart* dest = (HGeomStart*) G__getstructoffset();
   *dest = *(HGeomStart*) libp->para[0].ref;
   const HGeomStart& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomStartHit */
static int G__SimulationDict_253_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomStartHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomStartHit((HGeomStart*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomStartHit((HGeomStart*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomStartHit[n];
       } else {
         p = new((void*) gvp) HGeomStartHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomStartHit;
       } else {
         p = new((void*) gvp) HGeomStartHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomStartHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomStartHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomStartHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomStartHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomStartHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomStartHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomStartHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomStartHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_253_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomStartHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_253_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomStartHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomStartHit(*(HGeomStartHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomStartHit G__THGeomStartHit;
static int G__SimulationDict_253_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomStartHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomStartHit*) (soff+(sizeof(HGeomStartHit)*i)))->~G__THGeomStartHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomStartHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomStartHit*) (soff))->~G__THGeomStartHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_253_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomStartHit* dest = (HGeomStartHit*) G__getstructoffset();
   *dest = *(HGeomStartHit*) libp->para[0].ref;
   const HGeomStartHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomFWall */
static int G__SimulationDict_254_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFWall* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFWall[n];
     } else {
       p = new((void*) gvp) HGeomFWall[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFWall;
     } else {
       p = new((void*) gvp) HGeomFWall;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomFWall::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFWall::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomFWall::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomFWall::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomFWall*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFWall::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFWall::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFWall::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_254_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFWall::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_254_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomFWall* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomFWall(*(HGeomFWall*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomFWall G__THGeomFWall;
static int G__SimulationDict_254_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomFWall*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomFWall*) (soff+(sizeof(HGeomFWall)*i)))->~G__THGeomFWall();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomFWall*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomFWall*) (soff))->~G__THGeomFWall();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_254_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFWall* dest = (HGeomFWall*) G__getstructoffset();
   *dest = *(HGeomFWall*) libp->para[0].ref;
   const HGeomFWall& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomFWallHit */
static int G__SimulationDict_255_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFWallHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFWallHit((HGeomFWall*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomFWallHit((HGeomFWall*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomFWallHit[n];
       } else {
         p = new((void*) gvp) HGeomFWallHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomFWallHit;
       } else {
         p = new((void*) gvp) HGeomFWallHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomFWallHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFWallHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomFWallHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomFWallHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomFWallHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFWallHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFWallHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFWallHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_255_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFWallHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_255_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomFWallHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomFWallHit(*(HGeomFWallHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomFWallHit G__THGeomFWallHit;
static int G__SimulationDict_255_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomFWallHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomFWallHit*) (soff+(sizeof(HGeomFWallHit)*i)))->~G__THGeomFWallHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomFWallHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomFWallHit*) (soff))->~G__THGeomFWallHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_255_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFWallHit* dest = (HGeomFWallHit*) G__getstructoffset();
   *dest = *(HGeomFWallHit*) libp->para[0].ref;
   const HGeomFWallHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomUser */
static int G__SimulationDict_256_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomUser* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomUser[n];
     } else {
       p = new((void*) gvp) HGeomUser[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomUser;
     } else {
       p = new((void*) gvp) HGeomUser;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomUser::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomUser::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomUser::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomUser::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomUser*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomUser::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomUser::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomUser::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_256_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomUser::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_256_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomUser* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomUser(*(HGeomUser*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomUser G__THGeomUser;
static int G__SimulationDict_256_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomUser*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomUser*) (soff+(sizeof(HGeomUser)*i)))->~G__THGeomUser();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomUser*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomUser*) (soff))->~G__THGeomUser();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_256_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomUser* dest = (HGeomUser*) G__getstructoffset();
   *dest = *(HGeomUser*) libp->para[0].ref;
   const HGeomUser& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomUserHit */
static int G__SimulationDict_257_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomUserHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomUserHit((HGeomUser*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomUserHit((HGeomUser*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomUserHit[n];
       } else {
         p = new((void*) gvp) HGeomUserHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomUserHit;
       } else {
         p = new((void*) gvp) HGeomUserHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomUserHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomUserHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomUserHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomUserHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomUserHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomUserHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomUserHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomUserHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_257_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomUserHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_257_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomUserHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomUserHit(*(HGeomUserHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomUserHit G__THGeomUserHit;
static int G__SimulationDict_257_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomUserHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomUserHit*) (soff+(sizeof(HGeomUserHit)*i)))->~G__THGeomUserHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomUserHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomUserHit*) (soff))->~G__THGeomUserHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_257_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomUserHit* dest = (HGeomUserHit*) G__getstructoffset();
   *dest = *(HGeomUserHit*) libp->para[0].ref;
   const HGeomUserHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomRpc */
static int G__SimulationDict_258_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRpc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRpc[n];
     } else {
       p = new((void*) gvp) HGeomRpc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRpc;
     } else {
       p = new((void*) gvp) HGeomRpc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomRpc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRpc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomRpc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomRpc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRpc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRpc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRpc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRpc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_258_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRpc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_258_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomRpc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomRpc(*(HGeomRpc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomRpc G__THGeomRpc;
static int G__SimulationDict_258_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomRpc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomRpc*) (soff+(sizeof(HGeomRpc)*i)))->~G__THGeomRpc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomRpc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomRpc*) (soff))->~G__THGeomRpc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_258_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRpc* dest = (HGeomRpc*) G__getstructoffset();
   *dest = *(HGeomRpc*) libp->para[0].ref;
   const HGeomRpc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomRpcHit */
static int G__SimulationDict_259_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRpcHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomRpcHit((HGeomRpc*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomRpcHit((HGeomRpc*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomRpcHit[n];
       } else {
         p = new((void*) gvp) HGeomRpcHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomRpcHit;
       } else {
         p = new((void*) gvp) HGeomRpcHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomRpcHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRpcHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomRpcHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomRpcHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomRpcHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRpcHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRpcHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomRpcHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_259_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomRpcHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_259_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomRpcHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomRpcHit(*(HGeomRpcHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomRpcHit G__THGeomRpcHit;
static int G__SimulationDict_259_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomRpcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomRpcHit*) (soff+(sizeof(HGeomRpcHit)*i)))->~G__THGeomRpcHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomRpcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomRpcHit*) (soff))->~G__THGeomRpcHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_259_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomRpcHit* dest = (HGeomRpcHit*) G__getstructoffset();
   *dest = *(HGeomRpcHit*) libp->para[0].ref;
   const HGeomRpcHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomEmc */
static int G__SimulationDict_260_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomEmc* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomEmc[n];
     } else {
       p = new((void*) gvp) HGeomEmc[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomEmc;
     } else {
       p = new((void*) gvp) HGeomEmc;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomEmc::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEmc::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomEmc::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomEmc::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomEmc*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEmc::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomEmc::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEmc::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_260_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomEmc::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_260_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomEmc* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomEmc(*(HGeomEmc*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomEmc G__THGeomEmc;
static int G__SimulationDict_260_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomEmc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomEmc*) (soff+(sizeof(HGeomEmc)*i)))->~G__THGeomEmc();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomEmc*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomEmc*) (soff))->~G__THGeomEmc();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_260_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomEmc* dest = (HGeomEmc*) G__getstructoffset();
   *dest = *(HGeomEmc*) libp->para[0].ref;
   const HGeomEmc& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomEmcHit */
static int G__SimulationDict_261_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomEmcHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomEmcHit((HGeomEmc*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomEmcHit((HGeomEmc*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomEmcHit[n];
       } else {
         p = new((void*) gvp) HGeomEmcHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomEmcHit;
       } else {
         p = new((void*) gvp) HGeomEmcHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomEmcHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEmcHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomEmcHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomEmcHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomEmcHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEmcHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomEmcHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomEmcHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_261_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomEmcHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_261_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomEmcHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomEmcHit(*(HGeomEmcHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomEmcHit G__THGeomEmcHit;
static int G__SimulationDict_261_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomEmcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomEmcHit*) (soff+(sizeof(HGeomEmcHit)*i)))->~G__THGeomEmcHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomEmcHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomEmcHit*) (soff))->~G__THGeomEmcHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_261_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomEmcHit* dest = (HGeomEmcHit*) G__getstructoffset();
   *dest = *(HGeomEmcHit*) libp->para[0].ref;
   const HGeomEmcHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomFwDet */
static int G__SimulationDict_262_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFwDet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFwDet[n];
     } else {
       p = new((void*) gvp) HGeomFwDet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFwDet;
     } else {
       p = new((void*) gvp) HGeomFwDet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomFwDet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFwDet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomFwDet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomFwDet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomFwDet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFwDet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFwDet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFwDet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_262_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFwDet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_262_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomFwDet* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomFwDet(*(HGeomFwDet*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomFwDet G__THGeomFwDet;
static int G__SimulationDict_262_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomFwDet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomFwDet*) (soff+(sizeof(HGeomFwDet)*i)))->~G__THGeomFwDet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomFwDet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomFwDet*) (soff))->~G__THGeomFwDet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_262_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFwDet* dest = (HGeomFwDet*) G__getstructoffset();
   *dest = *(HGeomFwDet*) libp->para[0].ref;
   const HGeomFwDet& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomFwDetHit */
static int G__SimulationDict_263_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFwDetHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomFwDetHit((HGeomFwDet*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomFwDetHit((HGeomFwDet*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomFwDetHit[n];
       } else {
         p = new((void*) gvp) HGeomFwDetHit[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomFwDetHit;
       } else {
         p = new((void*) gvp) HGeomFwDetHit;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomFwDetHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFwDetHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomFwDetHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomFwDetHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomFwDetHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFwDetHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFwDetHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomFwDetHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_263_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomFwDetHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_263_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomFwDetHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomFwDetHit(*(HGeomFwDetHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomFwDetHit G__THGeomFwDetHit;
static int G__SimulationDict_263_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomFwDetHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomFwDetHit*) (soff+(sizeof(HGeomFwDetHit)*i)))->~G__THGeomFwDetHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomFwDetHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomFwDetHit*) (soff))->~G__THGeomFwDetHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_263_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomFwDetHit* dest = (HGeomFwDetHit*) G__getstructoffset();
   *dest = *(HGeomFwDetHit*) libp->para[0].ref;
   const HGeomFwDetHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMdcWirePlane */
static int G__SimulationDict_264_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcWirePlane* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWirePlane(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HGeomMdcWirePlane(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWirePlane(*((TString*) G__int(libp->para[0])));
     } else {
       p = new((void*) gvp) HGeomMdcWirePlane(*((TString*) G__int(libp->para[0])));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMdcWirePlane[n];
       } else {
         p = new((void*) gvp) HGeomMdcWirePlane[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomMdcWirePlane;
       } else {
         p = new((void*) gvp) HGeomMdcWirePlane;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWirePlane*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWirePlane*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomMdcWirePlane::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcWirePlane::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomMdcWirePlane::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomMdcWirePlane::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWirePlane*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcWirePlane::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdcWirePlane::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcWirePlane::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_264_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdcWirePlane::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_264_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMdcWirePlane* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMdcWirePlane(*(HGeomMdcWirePlane*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMdcWirePlane G__THGeomMdcWirePlane;
static int G__SimulationDict_264_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMdcWirePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMdcWirePlane*) (soff+(sizeof(HGeomMdcWirePlane)*i)))->~G__THGeomMdcWirePlane();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMdcWirePlane*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMdcWirePlane*) (soff))->~G__THGeomMdcWirePlane();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_264_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcWirePlane* dest = (HGeomMdcWirePlane*) G__getstructoffset();
   *dest = *(HGeomMdcWirePlane*) libp->para[0].ref;
   const HGeomMdcWirePlane& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomMdcWirePlanes */
static int G__SimulationDict_265_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcWirePlanes* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWirePlanes[n];
     } else {
       p = new((void*) gvp) HGeomMdcWirePlanes[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomMdcWirePlanes;
     } else {
       p = new((void*) gvp) HGeomMdcWirePlanes;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const vector<HGeomMdcWirePlane>& obj = ((HGeomMdcWirePlanes*) G__getstructoffset())->getWirePlanes();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomMdcWirePlane& obj = ((HGeomMdcWirePlanes*) G__getstructoffset())->addWirePlane(*((TString*) G__int(libp->para[0])), (Int_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWirePlanes*) G__getstructoffset())->printWirePlanes();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomMdcWirePlanes::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcWirePlanes::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomMdcWirePlanes::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomMdcWirePlanes::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomMdcWirePlanes*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcWirePlanes::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdcWirePlanes::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomMdcWirePlanes::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__SimulationDict_265_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomMdcWirePlanes::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__SimulationDict_265_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomMdcWirePlanes* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomMdcWirePlanes(*(HGeomMdcWirePlanes*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomMdcWirePlanes G__THGeomMdcWirePlanes;
static int G__SimulationDict_265_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomMdcWirePlanes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomMdcWirePlanes*) (soff+(sizeof(HGeomMdcWirePlanes)*i)))->~G__THGeomMdcWirePlanes();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomMdcWirePlanes*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomMdcWirePlanes*) (soff))->~G__THGeomMdcWirePlanes();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__SimulationDict_265_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomMdcWirePlanes* dest = (HGeomMdcWirePlanes*) G__getstructoffset();
   *dest = *(HGeomMdcWirePlanes*) libp->para[0].ref;
   const HGeomMdcWirePlanes& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HGeomIo */

/* HGeomSet */

/* HGeomMedia */

/* HGeomBuilder */

/* HGeomInterface */

/* HGeomHit */

/* HGeomAsciiIo */

/* HGeomNode */

/* HGeomMedium */

/* HGeomMdcWire */

/* HGeomRootBuilder */

/* HGeomCave */

/* HGeomSectors */

/* HGeomCoils */

/* HGeomFrames */

/* HGeomTarget */

/* HGeomMdc */

/* HGeomMdcHit */

/* HGeomTof */

/* HGeomTofHit */

/* HGeomRich */

/* HGeomRichHit */

/* HGeomShower */

/* HGeomShowerHit */

/* HGeomStart */

/* HGeomStartHit */

/* HGeomFWall */

/* HGeomFWallHit */

/* HGeomUser */

/* HGeomUserHit */

/* HGeomRpc */

/* HGeomRpcHit */

/* HGeomEmc */

/* HGeomEmcHit */

/* HGeomFwDet */

/* HGeomFwDetHit */

/* HGeomMdcWirePlane */

/* HGeomMdcWirePlanes */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncSimulationDict {
 public:
  G__Sizep2memfuncSimulationDict(): p(&G__Sizep2memfuncSimulationDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncSimulationDict::*p)();
};

size_t G__get_sizep2memfuncSimulationDict()
{
  G__Sizep2memfuncSimulationDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceSimulationDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo))) {
     HGeomIo *G__Lderived;
     G__Lderived=(HGeomIo*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet))) {
     HGeomSet *G__Lderived;
     G__Lderived=(HGeomSet*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia))) {
     HGeomMedia *G__Lderived;
     G__Lderived=(HGeomMedia*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder))) {
     HGeomBuilder *G__Lderived;
     G__Lderived=(HGeomBuilder*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface))) {
     HGeomInterface *G__Lderived;
     G__Lderived=(HGeomInterface*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit))) {
     HGeomHit *G__Lderived;
     G__Lderived=(HGeomHit*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo))) {
     HGeomAsciiIo *G__Lderived;
     G__Lderived=(HGeomAsciiIo*)0x1000;
     {
       HGeomIo *G__Lpbase=(HGeomIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo),G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode))) {
     HGeomNode *G__Lderived;
     G__Lderived=(HGeomNode*)0x1000;
     {
       HGeomVolume *G__Lpbase=(HGeomVolume*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode),G__get_linked_tagnum(&G__SimulationDictLN_HGeomVolume),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium))) {
     HGeomMedium *G__Lderived;
     G__Lderived=(HGeomMedium*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder))) {
     HGeomRootBuilder *G__Lderived;
     G__Lderived=(HGeomRootBuilder*)0x1000;
     {
       HGeomBuilder *G__Lpbase=(HGeomBuilder*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder),G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomVolume))) {
     HGeomVolume *G__Lderived;
     G__Lderived=(HGeomVolume*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomVolume),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomVolume),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave))) {
     HGeomCave *G__Lderived;
     G__Lderived=(HGeomCave*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors))) {
     HGeomSectors *G__Lderived;
     G__Lderived=(HGeomSectors*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils))) {
     HGeomCoils *G__Lderived;
     G__Lderived=(HGeomCoils*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames))) {
     HGeomFrames *G__Lderived;
     G__Lderived=(HGeomFrames*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget))) {
     HGeomTarget *G__Lderived;
     G__Lderived=(HGeomTarget*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc))) {
     HGeomMdc *G__Lderived;
     G__Lderived=(HGeomMdc*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit))) {
     HGeomMdcHit *G__Lderived;
     G__Lderived=(HGeomMdcHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof))) {
     HGeomTof *G__Lderived;
     G__Lderived=(HGeomTof*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit))) {
     HGeomTofHit *G__Lderived;
     G__Lderived=(HGeomTofHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich))) {
     HGeomRich *G__Lderived;
     G__Lderived=(HGeomRich*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit))) {
     HGeomRichHit *G__Lderived;
     G__Lderived=(HGeomRichHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower))) {
     HGeomShower *G__Lderived;
     G__Lderived=(HGeomShower*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit))) {
     HGeomShowerHit *G__Lderived;
     G__Lderived=(HGeomShowerHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart))) {
     HGeomStart *G__Lderived;
     G__Lderived=(HGeomStart*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit))) {
     HGeomStartHit *G__Lderived;
     G__Lderived=(HGeomStartHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall))) {
     HGeomFWall *G__Lderived;
     G__Lderived=(HGeomFWall*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit))) {
     HGeomFWallHit *G__Lderived;
     G__Lderived=(HGeomFWallHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser))) {
     HGeomUser *G__Lderived;
     G__Lderived=(HGeomUser*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit))) {
     HGeomUserHit *G__Lderived;
     G__Lderived=(HGeomUserHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc))) {
     HGeomRpc *G__Lderived;
     G__Lderived=(HGeomRpc*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit))) {
     HGeomRpcHit *G__Lderived;
     G__Lderived=(HGeomRpcHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc))) {
     HGeomEmc *G__Lderived;
     G__Lderived=(HGeomEmc*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit))) {
     HGeomEmcHit *G__Lderived;
     G__Lderived=(HGeomEmcHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet))) {
     HGeomFwDet *G__Lderived;
     G__Lderived=(HGeomFwDet*)0x1000;
     {
       HGeomSet *G__Lpbase=(HGeomSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet),G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit))) {
     HGeomFwDetHit *G__Lderived;
     G__Lderived=(HGeomFwDetHit*)0x1000;
     {
       HGeomHit *G__Lpbase=(HGeomHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit),G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit),G__get_linked_tagnum(&G__SimulationDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane))) {
     HGeomMdcWirePlane *G__Lderived;
     G__Lderived=(HGeomMdcWirePlane*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes))) {
     HGeomMdcWirePlanes *G__Lderived;
     G__Lderived=(HGeomMdcWirePlanes*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes),G__get_linked_tagnum(&G__SimulationDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableSimulationDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__SimulationDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeomMdcWire*>",117,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<HGeomMdcWirePlane>",117,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HGeomIo */
static void G__setup_memvarHGeomIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo));
   { HGeomIo *p; p=(HGeomIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomSet */
static void G__setup_memvarHGeomSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet));
   { HGeomSet *p; p=(HGeomSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TList),-1,-1,2,"volumes=",0,"list of volumes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TList),-1,-1,2,"masterNodes=",0,"pointer to list of mother volumes from other detector parts");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxSectors=",0,"maximum number of sectors (-1 for detectors outside any sector)");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxKeepinVolumes=",0,"maximum number of keepin volumes per sector");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"maxModules=",0,"maximum number of modules per sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TArrayI),-1,-1,2,"modules=",0,"Module's array.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomShapes),-1,-1,2,"pShapes=",0,"pointer to the class HGeomShapes");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,2,"geoFile=",0,"name of geometry input file or Oracle");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit),-1,-1,2,"pHit=",0,"pointer to object for hit definition");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,2,"author=",0,"author of the media version");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,2,"description=",0,"description of the version");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMedia */
static void G__setup_memvarHGeomMedia(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia));
   { HGeomMedia *p; p=(HGeomMedia*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TList),-1,-1,4,"media=",0,"list of media");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,4,"inputFile=",0,"name of input file or Oracle");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,4,"author=",0,"author of the media version");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,4,"description=",0,"description of the version");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomBuilder */
static void G__setup_memvarHGeomBuilder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder));
   { HGeomBuilder *p; p=(HGeomBuilder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nRot=",0,"number of defined rotations");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nMed=",0,"number of defined media ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomInterface */
static void G__setup_memvarHGeomInterface(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface));
   { HGeomInterface *p; p=(HGeomInterface*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo),-1,-1,4,"fileInput=",0,"ASCII file I/O");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo),-1,-1,4,"oraInput=",0,"Oracle input");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo),-1,-1,4,"output=",0,"Oracle output");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nSets=",0,"number of geometry sets (detector parts) ");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nActualSets=",0,"number of set in actual geometry");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nFiles=",0,"number of geometry and hit files  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TObjArray),-1,-1,4,"sets=",0,"array of geometry  sets");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia),-1,-1,4,"media=",0,"list of media");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomShapes),-1,-1,4,"shapes=",0,"list of shapes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TList),-1,-1,4,"masterNodes=",0,"list of mother nodes used by several sets");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,4,"setupFile=",0,"file with detector setups (subsets)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder),-1,-1,4,"geoBuilder=",0,"actually used geometry builder");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,4,"paramFile=",0,"parameter file to create addition geometry (e.g. mdc wires)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomHit */
static void G__setup_memvarHGeomHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit));
   { HGeomHit *p; p=(HGeomHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TList),-1,-1,4,"copies=",0,"List of copy nodes");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,2,"hitFile=",0,"name of hit file");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet),-1,-1,2,"pSet=",0,"pointer to detector part");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode),-1,-1,2,"currentNode=",0,"pointer to current node");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"compName[5]=",0,"name of hit component");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nh=",0,"number of hit components");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"chnamh=",0,"names of the hit components");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"nbitsh=",0,"array for the number of bits in which to pack the components of a hit");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"orig=",0,"array for the scale factors applied before packing the hit values");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,2,"fact=",0,"array for the scale factors applied before packing the hit values");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nvmax=",0,"maximum number of levels in tree of module");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nv=",0,"number of volume descriptors (derived from tree)");
   G__memvar_setup((void*)0,67,0,0,-1,G__defined_typename("Char_t"),-1,2,"chnmsv=",0,"array of nv names to decribe the volume (derived from tree)   ");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,2,"nbitsv=",0,"array of bits in which to pack the copy number of the volume chnmsv");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomAsciiIo */
static void G__setup_memvarHGeomAsciiIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo));
   { HGeomAsciiIo *p; p=(HGeomAsciiIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,4,"filename=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,4,"filedir=",0,(char*)NULL);
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"writable=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR),G__defined_typename("fstream"),-1,4,"file=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomNode */
static void G__setup_memvarHGeomNode(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode));
   { HGeomNode *p; p=(HGeomNode*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomBasicShape),-1,-1,2,"pShape=",0,"pointer to the shape");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode),-1,-1,2,"pMother=",0,"pointer to the mother volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium),-1,-1,2,"medium=",0,"pointer to medium");
   G__memvar_setup((void*)0,105,0,0,G__get_linked_tagnum(&G__SimulationDictLN_EHGeomNodeType),-1,-1,2,"volumeType=",0,"type of volume");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"active=",0,"in/out flag for creation");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTransform),-1,-1,2,"center=",0,"position of the GEANT/ROOT center");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomTransform),-1,-1,2,"labTransform=",0,"Transformation to the LAB system  ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode),-1,-1,2,"copyNode=",0,"pointer to the reference volume for a copy");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,2,"created=",0,"Flag set kTRUE after creation of volume");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TGeoVolume),-1,-1,2,"rootVolume=",0,"pointer to the ROOT node");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMedium */
static void G__setup_memvarHGeomMedium(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium));
   { HGeomMedium *p; p=(HGeomMedium*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"medId=",0,"Unique number for the material and the medium");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"autoflag=",0,"Flag for default values of madfld .. minstep");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nComponents=",0,"Number of material components");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"weightFac=",0,"Factor for weights (1: relative w., -1: w. by number of atoms) ");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"ca=",0,"Atomic weights for the components");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"cz=",0,"Atomic numbers for the components");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"cw=",0,"Weights of the components in a mixture");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"density=",0,"Density in g cm(**-3)");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"radLen=",0,"Radiation lenght");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"sensFlag=",0,"Sensitivity flag");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fldFlag=",0,"Field flag");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"fld=",0,"Maximum field value in kilogauss");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"epsil=",0,"Boundary crossing precision");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"madfld=",0,"Maximum angular deviation due to field");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"maxstep=",0,"Maximum step permitted");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"maxde=",0,"Maximum fractional energy loss");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"minstep=",0,"Minimum value for step");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"npckov=",0,"Number of optical parameters for Cerenkov");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"ppckov=",0,"Photon momentum");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"absco=",0,"Absoption length");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"effic=",0,"Detection efficiency");
   G__memvar_setup((void*)0,68,0,0,-1,G__defined_typename("Double_t"),-1,4,"rindex=",0,"Refraction index");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMdcWire */
static void G__setup_memvarHGeomMdcWire(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire));
   { HGeomMdcWire *p; p=(HGeomMdcWire*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->wireNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"wireNumber=",0,"wire number (starting from 0)");
   G__memvar_setup((void*)((long)(&p->wireName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,1,"wireName=",0,"volume name");
   G__memvar_setup((void*)((long)(&p->copyNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"copyNumber=",0,"node copy number");
   G__memvar_setup((void*)((long)(&p->wireType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"wireType=",0,"wire type (0: cathode or field wire, 1: sens wire)");
   G__memvar_setup((void*)((long)(&p->gparams)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gparams[3]=",0,"Geant/ROOT parameters for a TUBE [cm]");
   G__memvar_setup((void*)((long)(&p->gpos)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"gpos[3]=",0,"Geant/ROOT position in mother [cm] (TUBE center in TRD1 center)");
   G__memvar_setup((void*)((long)(&p->pCopyNode)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire),-1,-1,1,"pCopyNode=",0,"pointer to corresponding wire with copyNumber = 1 ");
   G__memvar_setup((void*)((long)(&p->mediumInd)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"mediumInd=",0,"index of Geant/ROOT medium");
   G__memvar_setup((void*)((long)(&p->pRootVolume)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TGeoVolume),-1,-1,1,"pRootVolume=",0,"pointer to the ROOT volume");
   }
   G__tag_memvar_reset();
}


   /* HGeomRootBuilder */
static void G__setup_memvarHGeomRootBuilder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder));
   { HGeomRootBuilder *p; p=(HGeomRootBuilder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TGeoManager),-1,-1,2,"geoManager=",0,"ROOT geometry manager");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomCave */
static void G__setup_memvarHGeomCave(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave));
   { HGeomCave *p; p=(HGeomCave*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,2,"name=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomSectors */
static void G__setup_memvarHGeomSectors(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors));
   { HGeomSectors *p; p=(HGeomSectors*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[5]=",0,"name of sector");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomCoils */
static void G__setup_memvarHGeomCoils(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils));
   { HGeomCoils *p; p=(HGeomCoils*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[6]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomFrames */
static void G__setup_memvarHGeomFrames(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames));
   { HGeomFrames *p; p=(HGeomFrames*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[2]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTarget */
static void G__setup_memvarHGeomTarget(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget));
   { HGeomTarget *p; p=(HGeomTarget*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[2]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMdc */
static void G__setup_memvarHGeomMdc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc));
   { HGeomMdc *p; p=(HGeomMdc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[6]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[3]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"wnbuf[36]=",0,"character array to generate the wire names");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wn0=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wn1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wn2=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"wn3=",0,"indexes in character array");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgR),G__defined_typename("vector<HGeomMdcWire*>"),-1,2,"wireObjects=",0,"temporary working array for creation of cathode wires");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMdcHit */
static void G__setup_memvarHGeomMdcHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit));
   { HGeomMdcHit *p; p=(HGeomMdcHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTof */
static void G__setup_memvarHGeomTof(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof));
   { HGeomTof *p; p=(HGeomTof*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[6]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[4]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomTofHit */
static void G__setup_memvarHGeomTofHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit));
   { HGeomTofHit *p; p=(HGeomTofHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomRich */
static void G__setup_memvarHGeomRich(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich));
   { HGeomRich *p; p=(HGeomRich*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[5]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomRichHit */
static void G__setup_memvarHGeomRichHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit));
   { HGeomRichHit *p; p=(HGeomRichHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomShower */
static void G__setup_memvarHGeomShower(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower));
   { HGeomShower *p; p=(HGeomShower*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"keepinName[5]=",0,"name of Shower keepin volume");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[6]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[3]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomShowerHit */
static void G__setup_memvarHGeomShowerHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit));
   { HGeomShowerHit *p; p=(HGeomShowerHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomStart */
static void G__setup_memvarHGeomStart(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart));
   { HGeomStart *p; p=(HGeomStart*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[2]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomStartHit */
static void G__setup_memvarHGeomStartHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit));
   { HGeomStartHit *p; p=(HGeomStartHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomFWall */
static void G__setup_memvarHGeomFWall(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall));
   { HGeomFWall *p; p=(HGeomFWall*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[5]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomFWallHit */
static void G__setup_memvarHGeomFWallHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit));
   { HGeomFWallHit *p; p=(HGeomFWallHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomUser */
static void G__setup_memvarHGeomUser(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser));
   { HGeomUser *p; p=(HGeomUser*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[6]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[3]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomUserHit */
static void G__setup_memvarHGeomUserHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit));
   { HGeomUserHit *p; p=(HGeomUserHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomRpc */
static void G__setup_memvarHGeomRpc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc));
   { HGeomRpc *p; p=(HGeomRpc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[6]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomRpcHit */
static void G__setup_memvarHGeomRpcHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit));
   { HGeomRpcHit *p; p=(HGeomRpcHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomEmc */
static void G__setup_memvarHGeomEmc(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc));
   { HGeomEmc *p; p=(HGeomEmc*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"modName[6]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,-1,-1,2,"eleName[2]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomEmcHit */
static void G__setup_memvarHGeomEmcHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit));
   { HGeomEmcHit *p; p=(HGeomEmcHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomFwDet */
static void G__setup_memvarHGeomFwDet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet));
   { HGeomFwDet *p; p=(HGeomFwDet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"modName[5]=",0,"name of module");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"eleName[3]=",0,"substring for elements in module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomFwDetHit */
static void G__setup_memvarHGeomFwDetHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit));
   { HGeomFwDetHit *p; p=(HGeomFwDetHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMdcWirePlane */
static void G__setup_memvarHGeomMdcWirePlane(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane));
   { HGeomMdcWirePlane *p; p=(HGeomMdcWirePlane*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->planeName)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,1,"planeName=",0,"name of GEANT volume which contains the wires");
   G__memvar_setup((void*)((long)(&p->planeType)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"planeType=",0,"0: cathode plane, 1: sens wire plane, -1: undefined");
   G__memvar_setup((void*)((long)(&p->numWires)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"numWires=",0,"number of sens and field wires");
   G__memvar_setup((void*)((long)(&p->centralWireNr)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"centralWireNr=",0,"number of wire which goes through the geometrical center of MDC");
   G__memvar_setup((void*)((long)(&p->wireDist)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"wireDist=",0,"distance between wires");
   G__memvar_setup((void*)((long)(&p->wireOrient)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"wireOrient=",0,"inclination angle");
   G__memvar_setup((void*)((long)(&p->wireRadius)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"wireRadius[2]=",0,"radius of wires (0: cathode wires, 1: sens wires or cathode 4 wires)");
   G__memvar_setup((void*)((long)(&p->wireMedium)-(long)(p)),117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TString),-1,-1,1,"wireMedium[2]=",0,"medium name of wires (0: cathode wires, 1: sens wires)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomMdcWirePlanes */
static void G__setup_memvarHGeomMdcWirePlanes(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes));
   { HGeomMdcWirePlanes *p; p=(HGeomMdcWirePlanes*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR),G__defined_typename("vector<HGeomMdcWirePlane>"),-1,4,"fplanes=",0,"vector of all wire planes");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__SimulationDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarSimulationDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHGeomIo(void) {
   /* HGeomIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo));
   G__memfunc_setup("open",434,G__SimulationDict_194_0_1, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - C - 'Text_t' 10 '\"in\"' status", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("close",534,G__SimulationDict_194_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("print",557,G__SimulationDict_194_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("isOpen",622,G__SimulationDict_194_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("isWritable",1046,G__SimulationDict_194_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("read",412,G__SimulationDict_194_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("read",412,G__SimulationDict_194_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeomSet' - 0 - - U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("read",412,G__SimulationDict_194_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomHit' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("write",555,G__SimulationDict_194_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("write",555,G__SimulationDict_194_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomSet' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("write",555,G__SimulationDict_194_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomHit' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("readGeomConfig",1402,G__SimulationDict_194_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomInterface' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setSimulRefRun",1448,G__SimulationDict_194_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("setHistoryDate",1468,G__SimulationDict_194_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("Class",502,G__SimulationDict_194_0_15, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_194_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_194_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_194_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_194_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_194_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_194_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_194_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_194_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomIo::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeomIo", 774, G__SimulationDict_194_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_194_0_28, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo), -1, 1, 1, 1, 1, 0, "u 'HGeomIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomSet(void) {
   /* HGeomSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet));
   G__memfunc_setup("HGeomSet",764,(G__InterfaceMethod) NULL, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet), -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readInout",939,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readTransform",1368,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - u 'HGeomTransform' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readVolumeParams",1656,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'HGeomMedia' - 0 - - "
"U 'HGeomNode' - 0 - - U 'TList' - 0 '0' l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readKeepIn",984,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'HGeomMedia' - 0 - - "
"u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readModule",1026,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 2, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'HGeomMedia' - 0 - - "
"u 'TString' - 1 - - u 'TString' - 1 - - "
"g - 'Bool_t' 0 'kFALSE' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShapes",944,G__SimulationDict_195_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomShapes' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMasterNodes",1457,G__SimulationDict_195_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TList' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeomFile",1108,G__SimulationDict_195_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitFile",1009,G__SimulationDict_195_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeomFile",1096,G__SimulationDict_195_0_11, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHit",613,G__SimulationDict_195_0_12, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxSectors",1353,G__SimulationDict_195_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxModules",1343,G__SimulationDict_195_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMaxKeepinVolumes",1965,G__SimulationDict_195_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModules",1061,G__SimulationDict_195_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModules",1049,G__SimulationDict_195_0_17, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__SimulationDict_195_0_18, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolume",952,G__SimulationDict_195_0_19, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMasterNode",1330,G__SimulationDict_195_0_20, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListOfVolumes",1660,G__SimulationDict_195_0_21, 85, G__get_linked_tagnum(&G__SimulationDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapes",932,G__SimulationDict_195_0_22, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAuthor",959,G__SimulationDict_195_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDescription",1488,G__SimulationDict_195_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAuthor",947,G__SimulationDict_195_0_25, 117, G__get_linked_tagnum(&G__SimulationDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDescription",1476,G__SimulationDict_195_0_26, 117, G__get_linked_tagnum(&G__SimulationDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKeepinName",1309,G__SimulationDict_195_0_27, 67, -1, G__defined_typename("Char_t"), 0, 2, 1, 1, 1, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModuleName",1319,G__SimulationDict_195_0_28, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,G__SimulationDict_195_0_29, 67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,G__SimulationDict_195_0_30, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,G__SimulationDict_195_0_31, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,G__SimulationDict_195_0_32, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addRefNodes",1087,G__SimulationDict_195_0_33, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,G__SimulationDict_195_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,G__SimulationDict_195_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("create",628,G__SimulationDict_195_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HGeomBuilder' - 0 - - u 'TString' - 11 - - "
"U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createAdditionalGeometry",2489,G__SimulationDict_195_0_37, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HGeomBuilder' - 0 - - u 'TString' - 11 - - "
"U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("compare",743,G__SimulationDict_195_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomSet' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_195_0_39, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_195_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_195_0_41, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_195_0_42, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_195_0_46, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_195_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_195_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_195_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_195_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomSet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomSet", 764, G__SimulationDict_195_0_51, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet), -1, 0, 1, 1, 1, 0, "u 'HGeomSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomSet", 890, G__SimulationDict_195_0_52, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_195_0_53, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet), -1, 1, 1, 1, 1, 0, "u 'HGeomSet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMedia(void) {
   /* HGeomMedia */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia));
   G__memfunc_setup("HGeomMedia",944,G__SimulationDict_196_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInputFile",1244,G__SimulationDict_196_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - file", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInputFile",1232,G__SimulationDict_196_0_3, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addMedium",906,G__SimulationDict_196_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomMedium' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedium",929,G__SimulationDict_196_0_5, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getListOfMedia",1393,G__SimulationDict_196_0_6, 85, G__get_linked_tagnum(&G__SimulationDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__SimulationDict_196_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimulationDict_196_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("list",444,G__SimulationDict_196_0_9, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__SimulationDict_196_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAuthor",959,G__SimulationDict_196_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDescription",1488,G__SimulationDict_196_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAuthor",947,G__SimulationDict_196_0_13, 117, G__get_linked_tagnum(&G__SimulationDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDescription",1476,G__SimulationDict_196_0_14, 117, G__get_linked_tagnum(&G__SimulationDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_196_0_15, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomMedia::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_196_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMedia::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_196_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomMedia::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_196_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomMedia::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_196_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_196_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMedia::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_196_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMedia::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_196_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMedia::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_196_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMedia::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMedia", 944, G__SimulationDict_196_0_27, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia), -1, 0, 1, 1, 1, 0, "u 'HGeomMedia' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMedia", 1070, G__SimulationDict_196_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_196_0_29, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia), -1, 1, 1, 1, 1, 0, "u 'HGeomMedia' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomBuilder(void) {
   /* HGeomBuilder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder));
   G__memfunc_setup("createNode",1018,G__SimulationDict_198_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomNode' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("createMedium",1237,G__SimulationDict_198_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HGeomMedium' - 0 - -", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("createHit",921,G__SimulationDict_198_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomHit' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,G__SimulationDict_198_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createVolume",1260,G__SimulationDict_198_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeomMdcWire' - 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createRotation",1476,G__SimulationDict_198_0_8, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HGeomRotation' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("positionNode",1275,G__SimulationDict_198_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HGeomMdcWire' - 0 - - U 'HGeomNode' - 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillMdcCommonBlock",1807,G__SimulationDict_198_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomNode' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_198_0_11, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomBuilder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_198_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBuilder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_198_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomBuilder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_198_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomBuilder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_198_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_198_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBuilder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_198_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomBuilder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_198_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomBuilder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_198_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomBuilder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeomBuilder", 1301, G__SimulationDict_198_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_198_0_24, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomBuilder), -1, 1, 1, 1, 1, 0, "u 'HGeomBuilder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomInterface(void) {
   /* HGeomInterface */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface));
   G__memfunc_setup("HGeomInterface",1377,G__SimulationDict_202_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOracleInput",1458,G__SimulationDict_202_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomIo' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutput",989,G__SimulationDict_202_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomIo' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeomBuilder",1435,G__SimulationDict_202_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomBuilder' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFileInput",1232,G__SimulationDict_202_0_5, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOraInput",1138,G__SimulationDict_202_0_6, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutput",977,G__SimulationDict_202_0_7, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapes",932,G__SimulationDict_202_0_8, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomShapes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedia",800,G__SimulationDict_202_0_9, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedia), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addInputFile",1209,G__SimulationDict_202_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addAlignment",1224,G__SimulationDict_202_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HSpecGeomPar' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addAlignment",1224,G__SimulationDict_202_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HDetGeomPar' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findSet",717,G__SimulationDict_202_0_13, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomSet), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSet",712,G__SimulationDict_202_0_14, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeSet",855,G__SimulationDict_202_0_15, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeSet",855,G__SimulationDict_202_0_16, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeomSet' - 0 - - C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createSet",928,G__SimulationDict_202_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteSet",927,G__SimulationDict_202_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomSet' - 0 - pSet", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readMedia",892,G__SimulationDict_202_0_19, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeMedia",1035,G__SimulationDict_202_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeMedia",1035,G__SimulationDict_202_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readAll",693,G__SimulationDict_202_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeAll",836,G__SimulationDict_202_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createAll",909,G__SimulationDict_202_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' withCleanup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createGeometry",1472,G__SimulationDict_202_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kFALSE' withCleanup", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readGeomConfig",1402,G__SimulationDict_202_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addSetupFile",1210,G__SimulationDict_202_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("readSetupFile",1325,G__SimulationDict_202_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addParamFile",1178,G__SimulationDict_202_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimulationDict_202_0_30, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("connectInput",1274,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomIo), -1, 0, 1, 1, 4, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("connectOutput",1403,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 4, 0, 
"C - 'Char_t' 10 - - u 'TString' - 0 '\"geo\"' pType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_202_0_33, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomInterface::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_202_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomInterface::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_202_0_35, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomInterface::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_202_0_36, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomInterface::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_202_0_40, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_202_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomInterface::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_202_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomInterface::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_202_0_43, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomInterface::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_202_0_44, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomInterface::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomInterface", 1377, G__SimulationDict_202_0_45, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface), -1, 0, 1, 1, 1, 0, "u 'HGeomInterface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomInterface", 1503, G__SimulationDict_202_0_46, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_202_0_47, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomInterface), -1, 1, 1, 1, 1, 0, "u 'HGeomInterface' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomHit(void) {
   /* HGeomHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit));
   G__memfunc_setup("setHitFile",1009,G__SimulationDict_203_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitFile",997,G__SimulationDict_203_0_3, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__SimulationDict_203_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__SimulationDict_203_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimulationDict_203_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCurrentNode",1461,G__SimulationDict_203_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomNode' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDetectorName",1531,G__SimulationDict_203_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getComponentName",1652,G__SimulationDict_203_0_9, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRefPos",994,G__SimulationDict_203_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'HGeomVector' - 1 - - u 'TString' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,G__SimulationDict_203_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 3);
   G__memfunc_setup("getNh",502,G__SimulationDict_203_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChnamh",911,G__SimulationDict_203_0_13, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNbitsh",936,G__SimulationDict_203_0_14, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOrig",721,G__SimulationDict_203_0_15, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFact",702,G__SimulationDict_203_0_16, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNv",516,G__SimulationDict_203_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChnmsv",943,G__SimulationDict_203_0_18, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNbitsv",950,G__SimulationDict_203_0_19, 73, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNh",514,G__SimulationDict_203_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__SimulationDict_203_0_21, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - - C - 'Char_t' 10 - - "
"i - 'Int_t' 0 - - f - 'Float_t' 0 - - "
"f - 'Float_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_203_0_22, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_203_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_203_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_203_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_203_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_203_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_203_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_203_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_203_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomHit::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeomHit", 883, G__SimulationDict_203_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_203_0_35, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomHit), -1, 1, 1, 1, 1, 0, "u 'HGeomHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomAsciiIo(void) {
   /* HGeomAsciiIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo));
   G__memfunc_setup("HGeomAsciiIo",1137,G__SimulationDict_204_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDirectory",1281,G__SimulationDict_204_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - fDir", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDirectory",1269,G__SimulationDict_204_0_3, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFilename",1121,G__SimulationDict_204_0_4, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("open",434,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 - - C - 'Text_t' 10 '\"in\"' status", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isOpen",622,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("isWritable",1046,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("close",534,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeomSet' - 0 - - U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomHit' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomSet' - 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomHit' - 0 - hit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readGeomConfig",1402,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomInterface' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readDetectorSetup",1767,G__SimulationDict_204_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomInterface' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSimulRefRun",1448,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setHistoryDate",1468,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_204_0_20, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomAsciiIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_204_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomAsciiIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_204_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomAsciiIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_204_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomAsciiIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_204_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_204_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomAsciiIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_204_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomAsciiIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_204_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomAsciiIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_204_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomAsciiIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomAsciiIo", 1137, G__SimulationDict_204_0_32, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo), -1, 0, 1, 1, 1, 0, "u 'HGeomAsciiIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomAsciiIo", 1263, G__SimulationDict_204_0_33, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_204_0_34, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomAsciiIo), -1, 1, 1, 1, 1, 0, "u 'HGeomAsciiIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomNode(void) {
   /* HGeomNode */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode));
   G__memfunc_setup("HGeomNode",854,G__SimulationDict_205_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomNode",854,G__SimulationDict_205_0_2, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode), -1, 0, 1, 1, 1, 0, "u 'HGeomNode' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVolumeType",1370,G__SimulationDict_205_0_3, 105, G__get_linked_tagnum(&G__SimulationDictLN_EHGeomNodeType), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isTopNode",917,G__SimulationDict_205_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isRefNode",895,G__SimulationDict_205_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isKeepin",824,G__SimulationDict_205_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isModule",834,G__SimulationDict_205_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCopyNo",920,G__SimulationDict_205_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShapePointer",1554,G__SimulationDict_205_0_9, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomBasicShape), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMotherNode",1333,G__SimulationDict_205_0_10, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMedium",929,G__SimulationDict_205_0_11, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isActive",824,G__SimulationDict_205_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCenterPosition",1782,G__SimulationDict_205_0_13, 117, G__get_linked_tagnum(&G__SimulationDictLN_HGeomTransform), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParameters",1364,G__SimulationDict_205_0_14, 85, G__get_linked_tagnum(&G__SimulationDictLN_TArrayD), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosition",1173,G__SimulationDict_205_0_15, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabTransform",1547,G__SimulationDict_205_0_16, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCopyNode",1121,G__SimulationDict_205_0_17, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRootVolume",1372,G__SimulationDict_205_0_18, 85, G__get_linked_tagnum(&G__SimulationDictLN_TGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTree",720,G__SimulationDict_205_0_19, 85, G__get_linked_tagnum(&G__SimulationDictLN_TList), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSensitive",1174,G__SimulationDict_205_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isCreated",916,G__SimulationDict_205_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCreated",1028,G__SimulationDict_205_0_22, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setName",717,G__SimulationDict_205_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolumeType",1382,G__SimulationDict_205_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "i 'EHGeomNodeType' - 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVolumePar",1255,G__SimulationDict_205_0_25, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomNode' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShape",829,G__SimulationDict_205_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomBasicShape' - 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMother",955,G__SimulationDict_205_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomNode' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMedium",941,G__SimulationDict_205_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomMedium' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setActive",936,G__SimulationDict_205_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCenterPosition",1794,G__SimulationDict_205_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 11 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyNode",1133,G__SimulationDict_205_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomNode' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRootVolume",1384,G__SimulationDict_205_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLabTransform",1630,G__SimulationDict_205_0_33, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomTransform), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLabTransform",1559,G__SimulationDict_205_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HGeomTransform' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcModuleTransform",1973,G__SimulationDict_205_0_35, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HGeomTransform' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRefPos",994,G__SimulationDict_205_0_36, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HGeomVector' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,G__SimulationDict_205_0_39, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("compare",743,G__SimulationDict_205_0_40, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'HGeomNode' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_205_0_41, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomNode::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_205_0_42, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomNode::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_205_0_43, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomNode::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_205_0_44, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomNode::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_205_0_48, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_205_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomNode::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_205_0_50, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomNode::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_205_0_51, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomNode::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_205_0_52, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomNode::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HGeomNode", 980, G__SimulationDict_205_0_53, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_205_0_54, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomNode), -1, 1, 1, 1, 1, 0, "u 'HGeomNode' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMedium(void) {
   /* HGeomMedium */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium));
   G__memfunc_setup("HGeomMedium",1073,G__SimulationDict_206_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium), -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 '\"\"' name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMediumIndex",1445,G__SimulationDict_206_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMediumIndex",1433,G__SimulationDict_206_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAutoFlag",1119,G__SimulationDict_206_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAutoFlag",1107,G__SimulationDict_206_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNComponents",1472,G__SimulationDict_206_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNComponents",1460,G__SimulationDict_206_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setComponent",1279,G__SimulationDict_206_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 '1.' w", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getComponent",1267,G__SimulationDict_206_0_9, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWeightFac",1202,G__SimulationDict_206_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDensity",1068,G__SimulationDict_206_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - d", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDensity",1056,G__SimulationDict_206_0_12, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRadiationLength",1865,G__SimulationDict_206_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 - l", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRadiationLength",1853,G__SimulationDict_206_0_14, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNpckov",957,G__SimulationDict_206_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNpckov",945,G__SimulationDict_206_0_16, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCerenkovPar",1452,G__SimulationDict_206_0_17, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCerenkovPar",1440,G__SimulationDict_206_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - - D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMediumPar",1232,G__SimulationDict_206_0_19, 121, -1, -1, 0, 8, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 '0.' maxDeviation d - 'Double_t' 0 '0.' maxStep "
"d - 'Double_t' 0 '0.' maxDE d - 'Double_t' 0 '0.' minStepDouble_t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMediumPar",1220,G__SimulationDict_206_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "D - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isSensitive",1174,G__SimulationDict_206_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSensitivityFlag",1893,G__SimulationDict_206_0_22, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFieldFlag",1182,G__SimulationDict_206_0_23, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getField",804,G__SimulationDict_206_0_24, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEpsil",829,G__SimulationDict_206_0_25, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("read",412,G__SimulationDict_206_0_26, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - i - 'Int_t' 0 - autoflag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimulationDict_206_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__SimulationDict_206_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcRadiationLength",1936,G__SimulationDict_206_0_29, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_206_0_30, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomMedium::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_206_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMedium::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_206_0_32, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomMedium::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_206_0_33, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomMedium::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_206_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_206_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMedium::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_206_0_39, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMedium::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_206_0_40, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMedium::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_206_0_41, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMedium::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMedium", 1073, G__SimulationDict_206_0_42, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium), -1, 0, 1, 1, 1, 0, "u 'HGeomMedium' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMedium", 1199, G__SimulationDict_206_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_206_0_44, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMedium), -1, 1, 1, 1, 1, 0, "u 'HGeomMedium' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMdcWire(void) {
   /* HGeomMdcWire */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire));
   G__memfunc_setup("HGeomMdcWire",1147,G__SimulationDict_208_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire), -1, 0, 9, 1, 1, 0, 
"i - 'Int_t' 0 '-1' wn u 'TString' - 0 '\"\"' name "
"i - 'Int_t' 0 '0' cn i - 'Int_t' 0 '-1' wt "
"f - 'Float_t' 0 '0.f' radius d - 'Double_t' 0 '0.' hlen "
"d - 'Double_t' 0 '0.' xpos d - 'Double_t' 0 '0.' ypos "
"d - 'Double_t' 0 '0.' zpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMediumInd",1224,G__SimulationDict_208_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireNumber",1356,G__SimulationDict_208_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - wn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyNumber",1360,G__SimulationDict_208_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - cn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCopyNode",1133,G__SimulationDict_208_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HGeomMdcWire' - 0 - p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRootVolume",1384,G__SimulationDict_208_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoVolume' - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireName",1112,G__SimulationDict_208_0_7, 117, G__get_linked_tagnum(&G__SimulationDictLN_TString), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCopyNumber",1348,G__SimulationDict_208_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireType",1145,G__SimulationDict_208_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__SimulationDict_208_0_10, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNParams",1010,G__SimulationDict_208_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosition",1173,G__SimulationDict_208_0_12, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMediumInd",1212,G__SimulationDict_208_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCopyNode",1121,G__SimulationDict_208_0_14, 85, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRootVolume",1372,G__SimulationDict_208_0_15, 85, G__get_linked_tagnum(&G__SimulationDictLN_TGeoVolume), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPosition",1173,G__SimulationDict_208_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 1 - x d - 'Double_t' 1 - y "
"d - 'Double_t' 1 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimulationDict_208_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMdcWire", 1147, G__SimulationDict_208_0_18, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire), -1, 0, 1, 1, 1, 0, "u 'HGeomMdcWire' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMdcWire", 1273, G__SimulationDict_208_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_208_0_20, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWire), -1, 1, 1, 1, 1, 0, "u 'HGeomMdcWire' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomRootBuilder(void) {
   /* HGeomRootBuilder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder));
   G__memfunc_setup("HGeomRootBuilder",1595,G__SimulationDict_210_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomRootBuilder",1595,G__SimulationDict_210_0_2, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder), -1, 0, 2, 1, 1, 0, 
"C - - 10 - - C - - 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeoManager",1314,G__SimulationDict_210_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TGeoManager' - 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createNode",1018,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HGeomNode' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createMedium",1237,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HGeomMedium' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkOverlaps",1354,G__SimulationDict_210_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 0 '0.0001' ovlp", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createVolume",1260,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HGeomMdcWire' - 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createRotation",1476,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HGeomRotation' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("positionNode",1275,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"U 'HGeomMdcWire' - 0 - - U 'HGeomNode' - 0 - - "
"i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_210_0_11, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomRootBuilder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_210_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRootBuilder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_210_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomRootBuilder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_210_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomRootBuilder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_210_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_210_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRootBuilder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_210_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRootBuilder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_210_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRootBuilder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_210_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRootBuilder::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomRootBuilder", 1595, G__SimulationDict_210_0_23, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder), -1, 0, 1, 1, 1, 0, "u 'HGeomRootBuilder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomRootBuilder", 1721, G__SimulationDict_210_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_210_0_25, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRootBuilder), -1, 1, 1, 1, 1, 0, "u 'HGeomRootBuilder' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomCave(void) {
   /* HGeomCave */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave));
   G__memfunc_setup("HGeomCave",847,G__SimulationDict_235_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addRefNodes",1087,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("print",557,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_235_0_7, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomCave::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_235_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCave::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_235_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomCave::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_235_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomCave::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_235_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_235_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCave::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_235_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCave::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_235_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCave::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_235_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCave::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomCave", 847, G__SimulationDict_235_0_19, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave), -1, 0, 1, 1, 1, 0, "u 'HGeomCave' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomCave", 973, G__SimulationDict_235_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_235_0_21, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomCave), -1, 1, 1, 1, 1, 0, "u 'HGeomCave' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomSectors(void) {
   /* HGeomSectors */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors));
   G__memfunc_setup("HGeomSectors",1203,G__SimulationDict_236_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addRefNodes",1087,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_236_0_6, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomSectors::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_236_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSectors::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_236_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomSectors::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_236_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomSectors::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_236_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_236_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSectors::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_236_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomSectors::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_236_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomSectors::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_236_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomSectors::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomSectors", 1203, G__SimulationDict_236_0_18, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors), -1, 0, 1, 1, 1, 0, "u 'HGeomSectors' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomSectors", 1329, G__SimulationDict_236_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_236_0_20, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomSectors), -1, 1, 1, 1, 1, 0, "u 'HGeomSectors' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomCoils(void) {
   /* HGeomCoils */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils));
   G__memfunc_setup("HGeomCoils",970,G__SimulationDict_237_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_237_0_5, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomCoils::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_237_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCoils::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_237_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomCoils::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_237_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomCoils::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_237_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_237_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCoils::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_237_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCoils::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_237_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomCoils::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_237_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomCoils::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomCoils", 970, G__SimulationDict_237_0_17, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils), -1, 0, 1, 1, 1, 0, "u 'HGeomCoils' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomCoils", 1096, G__SimulationDict_237_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_237_0_19, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomCoils), -1, 1, 1, 1, 1, 0, "u 'HGeomCoils' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomFrames(void) {
   /* HGeomFrames */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames));
   G__memfunc_setup("HGeomFrames",1070,G__SimulationDict_238_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_238_0_4, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomFrames::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_238_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFrames::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_238_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomFrames::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_238_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomFrames::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_238_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_238_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFrames::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_238_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFrames::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_238_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFrames::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_238_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFrames::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomFrames", 1070, G__SimulationDict_238_0_16, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames), -1, 0, 1, 1, 1, 0, "u 'HGeomFrames' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomFrames", 1196, G__SimulationDict_238_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_238_0_18, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFrames), -1, 1, 1, 1, 1, 0, "u 'HGeomFrames' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTarget(void) {
   /* HGeomTarget */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget));
   G__memfunc_setup("HGeomTarget",1079,G__SimulationDict_239_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_239_0_4, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTarget::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_239_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTarget::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_239_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTarget::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_239_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTarget::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_239_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_239_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTarget::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_239_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTarget::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_239_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTarget::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_239_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTarget::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomTarget", 1079, G__SimulationDict_239_0_16, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget), -1, 0, 1, 1, 1, 0, "u 'HGeomTarget' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTarget", 1205, G__SimulationDict_239_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_239_0_18, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomTarget), -1, 1, 1, 1, 1, 0, "u 'HGeomTarget' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMdc(void) {
   /* HGeomMdc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc));
   G__memfunc_setup("HGeomMdc",740,G__SimulationDict_240_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("createAdditionalGeometry",2489,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 2, 0, 
"U 'HGeomBuilder' - 0 - - u 'TString' - 11 - - "
"U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("generateWireName",1635,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 2, 0, "u 'TString' - 1 - vName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearWireObjects",1640,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addWireObject",1303,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 9, 1, 2, 0, 
"i - 'Int_t' 0 - - u 'TString' - 1 - - "
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"f - 'Float_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - - d - 'Double_t' 0 - - "
"d - 'Double_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_240_0_10, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomMdc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_240_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_240_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomMdc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_240_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomMdc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_240_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_240_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_240_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_240_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_240_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMdc", 740, G__SimulationDict_240_0_22, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc), -1, 0, 1, 1, 1, 0, "u 'HGeomMdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMdc", 866, G__SimulationDict_240_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_240_0_24, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdc), -1, 1, 1, 1, 1, 0, "u 'HGeomMdc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMdcHit(void) {
   /* HGeomMdcHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit));
   G__memfunc_setup("HGeomMdcHit",1033,G__SimulationDict_245_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit), -1, 0, 1, 1, 1, 0, "U 'HGeomMdc' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_245_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomMdcHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_245_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_245_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomMdcHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_245_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomMdcHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_245_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_245_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_245_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdcHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_245_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_245_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdcHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMdcHit", 1033, G__SimulationDict_245_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit), -1, 0, 1, 1, 1, 0, "u 'HGeomMdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMdcHit", 1159, G__SimulationDict_245_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_245_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcHit), -1, 1, 1, 1, 1, 0, "u 'HGeomMdcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTof(void) {
   /* HGeomTof */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof));
   G__memfunc_setup("HGeomTof",761,G__SimulationDict_246_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_246_0_6, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTof::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_246_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTof::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_246_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTof::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_246_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTof::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_246_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_246_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTof::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_246_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTof::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_246_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTof::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_246_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTof::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomTof", 761, G__SimulationDict_246_0_18, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof), -1, 0, 1, 1, 1, 0, "u 'HGeomTof' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTof", 887, G__SimulationDict_246_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_246_0_20, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomTof), -1, 1, 1, 1, 1, 0, "u 'HGeomTof' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomTofHit(void) {
   /* HGeomTofHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit));
   G__memfunc_setup("HGeomTofHit",1054,G__SimulationDict_247_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit), -1, 0, 1, 1, 1, 0, "U 'HGeomTof' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_247_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomTofHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_247_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTofHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_247_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomTofHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_247_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomTofHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_247_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_247_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTofHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_247_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTofHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_247_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomTofHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_247_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomTofHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomTofHit", 1054, G__SimulationDict_247_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit), -1, 0, 1, 1, 1, 0, "u 'HGeomTofHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomTofHit", 1180, G__SimulationDict_247_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_247_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomTofHit), -1, 1, 1, 1, 1, 0, "u 'HGeomTofHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomRich(void) {
   /* HGeomRich */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich));
   G__memfunc_setup("HGeomRich",854,G__SimulationDict_248_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("read",412,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - - U 'HGeomMedia' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addRefNodes",1087,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_248_0_6, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomRich::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_248_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRich::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_248_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomRich::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_248_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomRich::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_248_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_248_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRich::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_248_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRich::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_248_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRich::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_248_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRich::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomRich", 854, G__SimulationDict_248_0_18, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich), -1, 0, 1, 1, 1, 0, "u 'HGeomRich' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomRich", 980, G__SimulationDict_248_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_248_0_20, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRich), -1, 1, 1, 1, 1, 0, "u 'HGeomRich' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomRichHit(void) {
   /* HGeomRichHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit));
   G__memfunc_setup("HGeomRichHit",1147,G__SimulationDict_249_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit), -1, 0, 1, 1, 1, 0, "U 'HGeomRich' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_249_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomRichHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_249_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRichHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_249_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomRichHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_249_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomRichHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_249_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_249_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRichHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_249_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRichHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_249_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRichHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_249_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRichHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomRichHit", 1147, G__SimulationDict_249_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit), -1, 0, 1, 1, 1, 0, "u 'HGeomRichHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomRichHit", 1273, G__SimulationDict_249_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_249_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRichHit), -1, 1, 1, 1, 1, 0, "u 'HGeomRichHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomShower(void) {
   /* HGeomShower */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower));
   G__memfunc_setup("HGeomShower",1096,G__SimulationDict_250_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getKeepinName",1309,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 2, 1, 1, 1, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_250_0_7, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomShower::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_250_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShower::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_250_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomShower::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_250_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomShower::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_250_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_250_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShower::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_250_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomShower::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_250_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShower::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_250_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomShower::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomShower", 1096, G__SimulationDict_250_0_19, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower), -1, 0, 1, 1, 1, 0, "u 'HGeomShower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomShower", 1222, G__SimulationDict_250_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_250_0_21, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomShower), -1, 1, 1, 1, 1, 0, "u 'HGeomShower' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomShowerHit(void) {
   /* HGeomShowerHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit));
   G__memfunc_setup("HGeomShowerHit",1389,G__SimulationDict_251_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit), -1, 0, 1, 1, 1, 0, "U 'HGeomShower' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_251_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomShowerHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_251_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShowerHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_251_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomShowerHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_251_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomShowerHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_251_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_251_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShowerHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_251_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomShowerHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_251_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomShowerHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_251_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomShowerHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomShowerHit", 1389, G__SimulationDict_251_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit), -1, 0, 1, 1, 1, 0, "u 'HGeomShowerHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomShowerHit", 1515, G__SimulationDict_251_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_251_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomShowerHit), -1, 1, 1, 1, 1, 0, "u 'HGeomShowerHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomStart(void) {
   /* HGeomStart */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart));
   G__memfunc_setup("HGeomStart",990,G__SimulationDict_252_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_252_0_4, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomStart::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_252_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomStart::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_252_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomStart::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_252_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomStart::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_252_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_252_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomStart::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_252_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomStart::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_252_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomStart::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_252_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomStart::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomStart", 990, G__SimulationDict_252_0_16, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart), -1, 0, 1, 1, 1, 0, "u 'HGeomStart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomStart", 1116, G__SimulationDict_252_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_252_0_18, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomStart), -1, 1, 1, 1, 1, 0, "u 'HGeomStart' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomStartHit(void) {
   /* HGeomStartHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit));
   G__memfunc_setup("HGeomStartHit",1283,G__SimulationDict_253_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit), -1, 0, 1, 1, 1, 0, "U 'HGeomStart' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_253_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomStartHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_253_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomStartHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_253_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomStartHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_253_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomStartHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_253_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_253_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomStartHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_253_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomStartHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_253_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomStartHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_253_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomStartHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomStartHit", 1283, G__SimulationDict_253_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit), -1, 0, 1, 1, 1, 0, "u 'HGeomStartHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomStartHit", 1409, G__SimulationDict_253_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_253_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomStartHit), -1, 1, 1, 1, 1, 0, "u 'HGeomStartHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomFWall(void) {
   /* HGeomFWall */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall));
   G__memfunc_setup("HGeomFWall",934,G__SimulationDict_254_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_254_0_4, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomFWall::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_254_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFWall::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_254_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomFWall::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_254_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomFWall::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_254_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_254_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFWall::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_254_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFWall::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_254_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFWall::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_254_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFWall::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomFWall", 934, G__SimulationDict_254_0_16, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall), -1, 0, 1, 1, 1, 0, "u 'HGeomFWall' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomFWall", 1060, G__SimulationDict_254_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_254_0_18, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWall), -1, 1, 1, 1, 1, 0, "u 'HGeomFWall' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomFWallHit(void) {
   /* HGeomFWallHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit));
   G__memfunc_setup("HGeomFWallHit",1227,G__SimulationDict_255_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit), -1, 0, 1, 1, 1, 0, "U 'HGeomFWall' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_255_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomFWallHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_255_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFWallHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_255_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomFWallHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_255_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomFWallHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_255_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_255_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFWallHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_255_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFWallHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_255_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFWallHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_255_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFWallHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomFWallHit", 1227, G__SimulationDict_255_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit), -1, 0, 1, 1, 1, 0, "u 'HGeomFWallHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomFWallHit", 1353, G__SimulationDict_255_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_255_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFWallHit), -1, 1, 1, 1, 1, 0, "u 'HGeomFWallHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomUser(void) {
   /* HGeomUser */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser));
   G__memfunc_setup("HGeomUser",879,G__SimulationDict_256_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_256_0_6, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomUser::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_256_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomUser::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_256_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomUser::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_256_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomUser::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_256_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_256_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomUser::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_256_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomUser::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_256_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomUser::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_256_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomUser::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomUser", 879, G__SimulationDict_256_0_18, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser), -1, 0, 1, 1, 1, 0, "u 'HGeomUser' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomUser", 1005, G__SimulationDict_256_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_256_0_20, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomUser), -1, 1, 1, 1, 1, 0, "u 'HGeomUser' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomUserHit(void) {
   /* HGeomUserHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit));
   G__memfunc_setup("HGeomUserHit",1172,G__SimulationDict_257_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit), -1, 0, 1, 1, 1, 0, "U 'HGeomUser' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_257_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomUserHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_257_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomUserHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_257_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomUserHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_257_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomUserHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_257_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_257_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomUserHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_257_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomUserHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_257_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomUserHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_257_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomUserHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomUserHit", 1172, G__SimulationDict_257_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit), -1, 0, 1, 1, 1, 0, "u 'HGeomUserHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomUserHit", 1298, G__SimulationDict_257_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_257_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomUserHit), -1, 1, 1, 1, 1, 0, "u 'HGeomUserHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomRpc(void) {
   /* HGeomRpc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc));
   G__memfunc_setup("HGeomRpc",757,G__SimulationDict_258_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_258_0_5, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomRpc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_258_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRpc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_258_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomRpc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_258_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomRpc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_258_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_258_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRpc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_258_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRpc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_258_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRpc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_258_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRpc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomRpc", 757, G__SimulationDict_258_0_17, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc), -1, 0, 1, 1, 1, 0, "u 'HGeomRpc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomRpc", 883, G__SimulationDict_258_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_258_0_19, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpc), -1, 1, 1, 1, 1, 0, "u 'HGeomRpc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomRpcHit(void) {
   /* HGeomRpcHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit));
   G__memfunc_setup("HGeomRpcHit",1050,G__SimulationDict_259_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit), -1, 0, 1, 1, 1, 0, "U 'HGeomRpc' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_259_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomRpcHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_259_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRpcHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_259_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomRpcHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_259_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomRpcHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_259_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_259_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRpcHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_259_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRpcHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_259_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomRpcHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_259_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomRpcHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomRpcHit", 1050, G__SimulationDict_259_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit), -1, 0, 1, 1, 1, 0, "u 'HGeomRpcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomRpcHit", 1176, G__SimulationDict_259_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_259_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomRpcHit), -1, 1, 1, 1, 1, 0, "u 'HGeomRpcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomEmc(void) {
   /* HGeomEmc */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc));
   G__memfunc_setup("HGeomEmc",741,G__SimulationDict_260_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, -1, 0, 1, 1, 1, 1, "i - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNumInMod",1378,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_260_0_5, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomEmc::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_260_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEmc::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_260_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomEmc::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_260_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomEmc::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_260_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_260_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEmc::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_260_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomEmc::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_260_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEmc::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_260_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomEmc::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomEmc", 741, G__SimulationDict_260_0_17, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc), -1, 0, 1, 1, 1, 0, "u 'HGeomEmc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomEmc", 867, G__SimulationDict_260_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_260_0_19, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmc), -1, 1, 1, 1, 1, 0, "u 'HGeomEmc' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomEmcHit(void) {
   /* HGeomEmcHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit));
   G__memfunc_setup("HGeomEmcHit",1034,G__SimulationDict_261_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit), -1, 0, 1, 1, 1, 0, "U 'HGeomEmc' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_261_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomEmcHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_261_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEmcHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_261_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomEmcHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_261_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomEmcHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_261_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_261_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEmcHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_261_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomEmcHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_261_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomEmcHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_261_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomEmcHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomEmcHit", 1034, G__SimulationDict_261_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit), -1, 0, 1, 1, 1, 0, "u 'HGeomEmcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomEmcHit", 1160, G__SimulationDict_261_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_261_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomEmcHit), -1, 1, 1, 1, 1, 0, "u 'HGeomEmcHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomFwDet(void) {
   /* HGeomFwDet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet));
   G__memfunc_setup("HGeomFwDet",938,G__SimulationDict_262_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleName",1319,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getEleName",983,(G__InterfaceMethod) NULL,67, -1, G__defined_typename("Char_t"), 0, 1, 1, 1, 1, "i - 'Int_t' 0 - m", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_262_0_5, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomFwDet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_262_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFwDet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_262_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomFwDet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_262_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomFwDet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_262_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_262_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFwDet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_262_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFwDet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_262_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFwDet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_262_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFwDet::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomFwDet", 938, G__SimulationDict_262_0_17, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet), -1, 0, 1, 1, 1, 0, "u 'HGeomFwDet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomFwDet", 1064, G__SimulationDict_262_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_262_0_19, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDet), -1, 1, 1, 1, 1, 0, "u 'HGeomFwDet' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomFwDetHit(void) {
   /* HGeomFwDetHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit));
   G__memfunc_setup("HGeomFwDetHit",1231,G__SimulationDict_263_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit), -1, 0, 1, 1, 1, 0, "U 'HGeomFwDet' - 0 '0' p", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIdType",911,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__SimulationDict_263_0_3, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomFwDetHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_263_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFwDetHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_263_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomFwDetHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_263_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomFwDetHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_263_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_263_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFwDetHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_263_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFwDetHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_263_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomFwDetHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_263_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomFwDetHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomFwDetHit", 1231, G__SimulationDict_263_0_15, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit), -1, 0, 1, 1, 1, 0, "u 'HGeomFwDetHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomFwDetHit", 1357, G__SimulationDict_263_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_263_0_17, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomFwDetHit), -1, 1, 1, 1, 1, 0, "u 'HGeomFwDetHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMdcWirePlane(void) {
   /* HGeomMdcWirePlane */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane));
   G__memfunc_setup("HGeomMdcWirePlane",1643,G__SimulationDict_264_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane), -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 '\"undefined\"' n i - 'Int_t' 0 '-1' t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__SimulationDict_264_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__SimulationDict_264_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_264_0_4, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomMdcWirePlane::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_264_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcWirePlane::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_264_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomMdcWirePlane::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_264_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomMdcWirePlane::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_264_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_264_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcWirePlane::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_264_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdcWirePlane::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_264_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcWirePlane::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_264_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdcWirePlane::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMdcWirePlane", 1643, G__SimulationDict_264_0_16, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane), -1, 0, 1, 1, 1, 0, "u 'HGeomMdcWirePlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMdcWirePlane", 1769, G__SimulationDict_264_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_264_0_18, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane), -1, 1, 1, 1, 1, 0, "u 'HGeomMdcWirePlane' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomMdcWirePlanes(void) {
   /* HGeomMdcWirePlanes */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes));
   G__memfunc_setup("HGeomMdcWirePlanes",1758,G__SimulationDict_265_0_1, 105, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWirePlanes",1338,G__SimulationDict_265_0_2, 117, G__get_linked_tagnum(&G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR), G__defined_typename("vector<HGeomMdcWirePlane>"), 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addWirePlane",1200,G__SimulationDict_265_0_3, 117, G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlane), -1, 1, 2, 1, 1, 0, 
"u 'TString' - 0 - planeName i - 'Int_t' 0 - planeType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printWirePlanes",1575,G__SimulationDict_265_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__SimulationDict_265_0_5, 85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomMdcWirePlanes::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__SimulationDict_265_0_6, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcWirePlanes::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__SimulationDict_265_0_7, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomMdcWirePlanes::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__SimulationDict_265_0_8, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomMdcWirePlanes::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__SimulationDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__SimulationDict_265_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__SimulationDict_265_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcWirePlanes::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__SimulationDict_265_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdcWirePlanes::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__SimulationDict_265_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomMdcWirePlanes::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__SimulationDict_265_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomMdcWirePlanes::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomMdcWirePlanes", 1758, G__SimulationDict_265_0_17, (int) ('i'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes), -1, 0, 1, 1, 1, 0, "u 'HGeomMdcWirePlanes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomMdcWirePlanes", 1884, G__SimulationDict_265_0_18, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__SimulationDict_265_0_19, (int) ('u'), G__get_linked_tagnum(&G__SimulationDictLN_HGeomMdcWirePlanes), -1, 1, 1, 1, 1, 0, "u 'HGeomMdcWirePlanes' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncSimulationDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalSimulationDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcSimulationDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__SimulationDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TList = { "TList" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomIo = { "HGeomIo" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomSet = { "HGeomSet" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomMedia = { "HGeomMedia" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomShapes = { "HGeomShapes" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomBuilder = { "HGeomBuilder" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomInterface = { "HGeomInterface" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomHit = { "HGeomHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomAsciiIo = { "HGeomAsciiIo" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomNode = { "HGeomNode" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomMedium = { "HGeomMedium" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomRotation = { "HGeomRotation" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomMdcWire = { "HGeomMdcWire" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TGeoManager = { "TGeoManager" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomRootBuilder = { "HGeomRootBuilder" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomVolume = { "HGeomVolume" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomBasicShape = { "HGeomBasicShape" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_EHGeomNodeType = { "EHGeomNodeType" , 101 , -1 };
G__linked_taginfo G__SimulationDictLN_TGeoVolume = { "TGeoVolume" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomCave = { "HGeomCave" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomSectors = { "HGeomSectors" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomCoils = { "HGeomCoils" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomFrames = { "HGeomFrames" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomTarget = { "HGeomTarget" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomMdc = { "HGeomMdc" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_vectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgR = { "vector<HGeomMdcWire*,allocator<HGeomMdcWire*> >" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeomMdcWire*,allocator<HGeomMdcWire*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomMdcHit = { "HGeomMdcHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomTof = { "HGeomTof" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomTofHit = { "HGeomTofHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomRich = { "HGeomRich" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomRichHit = { "HGeomRichHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomShower = { "HGeomShower" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomShowerHit = { "HGeomShowerHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomStart = { "HGeomStart" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomStartHit = { "HGeomStartHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomFWall = { "HGeomFWall" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomFWallHit = { "HGeomFWallHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomUser = { "HGeomUser" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomUserHit = { "HGeomUserHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomRpc = { "HGeomRpc" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomRpcHit = { "HGeomRpcHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomEmc = { "HGeomEmc" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomEmcHit = { "HGeomEmcHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomFwDet = { "HGeomFwDet" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomFwDetHit = { "HGeomFwDetHit" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomMdcWirePlane = { "HGeomMdcWirePlane" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_HGeomMdcWirePlanes = { "HGeomMdcWirePlanes" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR = { "vector<HGeomMdcWirePlane,allocator<HGeomMdcWirePlane> >" , 99 , -1 };
G__linked_taginfo G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<HGeomMdcWirePlane,allocator<HGeomMdcWirePlane> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableSimulationDict() {
  G__SimulationDictLN_TClass.tagnum = -1 ;
  G__SimulationDictLN_TBuffer.tagnum = -1 ;
  G__SimulationDictLN_TMemberInspector.tagnum = -1 ;
  G__SimulationDictLN_TObject.tagnum = -1 ;
  G__SimulationDictLN_TNamed.tagnum = -1 ;
  G__SimulationDictLN_TString.tagnum = -1 ;
  G__SimulationDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__SimulationDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__SimulationDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimulationDictLN_TList.tagnum = -1 ;
  G__SimulationDictLN_TObjArray.tagnum = -1 ;
  G__SimulationDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__SimulationDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__SimulationDictLN_HGeomIo.tagnum = -1 ;
  G__SimulationDictLN_HGeomSet.tagnum = -1 ;
  G__SimulationDictLN_HGeomMedia.tagnum = -1 ;
  G__SimulationDictLN_HGeomShapes.tagnum = -1 ;
  G__SimulationDictLN_HGeomBuilder.tagnum = -1 ;
  G__SimulationDictLN_HSpecGeomPar.tagnum = -1 ;
  G__SimulationDictLN_HDetGeomPar.tagnum = -1 ;
  G__SimulationDictLN_HGeomInterface.tagnum = -1 ;
  G__SimulationDictLN_HGeomHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomAsciiIo.tagnum = -1 ;
  G__SimulationDictLN_HGeomNode.tagnum = -1 ;
  G__SimulationDictLN_HGeomMedium.tagnum = -1 ;
  G__SimulationDictLN_HGeomRotation.tagnum = -1 ;
  G__SimulationDictLN_HGeomMdcWire.tagnum = -1 ;
  G__SimulationDictLN_TGeoManager.tagnum = -1 ;
  G__SimulationDictLN_HGeomRootBuilder.tagnum = -1 ;
  G__SimulationDictLN_HGeomVector.tagnum = -1 ;
  G__SimulationDictLN_HGeomTransform.tagnum = -1 ;
  G__SimulationDictLN_HGeomVolume.tagnum = -1 ;
  G__SimulationDictLN_TArrayD.tagnum = -1 ;
  G__SimulationDictLN_HGeomBasicShape.tagnum = -1 ;
  G__SimulationDictLN_EHGeomNodeType.tagnum = -1 ;
  G__SimulationDictLN_TGeoVolume.tagnum = -1 ;
  G__SimulationDictLN_TArrayI.tagnum = -1 ;
  G__SimulationDictLN_HGeomCave.tagnum = -1 ;
  G__SimulationDictLN_HGeomSectors.tagnum = -1 ;
  G__SimulationDictLN_HGeomCoils.tagnum = -1 ;
  G__SimulationDictLN_HGeomFrames.tagnum = -1 ;
  G__SimulationDictLN_HGeomTarget.tagnum = -1 ;
  G__SimulationDictLN_HGeomMdc.tagnum = -1 ;
  G__SimulationDictLN_vectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgR.tagnum = -1 ;
  G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__SimulationDictLN_HGeomMdcHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomTof.tagnum = -1 ;
  G__SimulationDictLN_HGeomTofHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomRich.tagnum = -1 ;
  G__SimulationDictLN_HGeomRichHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomShower.tagnum = -1 ;
  G__SimulationDictLN_HGeomShowerHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomStart.tagnum = -1 ;
  G__SimulationDictLN_HGeomStartHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomFWall.tagnum = -1 ;
  G__SimulationDictLN_HGeomFWallHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomUser.tagnum = -1 ;
  G__SimulationDictLN_HGeomUserHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomRpc.tagnum = -1 ;
  G__SimulationDictLN_HGeomRpcHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomEmc.tagnum = -1 ;
  G__SimulationDictLN_HGeomEmcHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomFwDet.tagnum = -1 ;
  G__SimulationDictLN_HGeomFwDetHit.tagnum = -1 ;
  G__SimulationDictLN_HGeomMdcWirePlane.tagnum = -1 ;
  G__SimulationDictLN_HGeomMdcWirePlanes.tagnum = -1 ;
  G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR.tagnum = -1 ;
  G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableSimulationDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TString);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TList);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomIo),sizeof(HGeomIo),-1,28686,"Abstract base class for geometry I/O",G__setup_memvarHGeomIo,G__setup_memfuncHGeomIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomSet),sizeof(HGeomSet),-1,62720,"Base class for geometry of detector parts",G__setup_memvarHGeomSet,G__setup_memfuncHGeomSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomMedia),sizeof(HGeomMedia),-1,62720,"Class for materials and media",G__setup_memvarHGeomMedia,G__setup_memfuncHGeomMedia);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomShapes);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomBuilder),sizeof(HGeomBuilder),-1,62722,"abstract base class for geometry builders",G__setup_memvarHGeomBuilder,G__setup_memfuncHGeomBuilder);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HSpecGeomPar);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HDetGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomInterface),sizeof(HGeomInterface),-1,29952,"Class to manage geometry for simulations",G__setup_memvarHGeomInterface,G__setup_memfuncHGeomInterface);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomHit),sizeof(HGeomHit),-1,62721,"Base class for hit definition in GEANT",G__setup_memvarHGeomHit,G__setup_memfuncHGeomHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomAsciiIo),sizeof(HGeomAsciiIo),-1,29952,"Class for geometry I/O from ASCII file",G__setup_memvarHGeomAsciiIo,G__setup_memfuncHGeomAsciiIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomNode),sizeof(HGeomNode),-1,63232,"basic geometry parameters of a volume",G__setup_memvarHGeomNode,G__setup_memfuncHGeomNode);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomMedium),sizeof(HGeomMedium),-1,62720,"Class for tracking medium ",G__setup_memvarHGeomMedium,G__setup_memfuncHGeomMedium);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomRotation);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomMdcWire),sizeof(HGeomMdcWire),-1,1280,(char*)NULL,G__setup_memvarHGeomMdcWire,G__setup_memfuncHGeomMdcWire);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TGeoManager);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomRootBuilder),sizeof(HGeomRootBuilder),-1,62720,"class to create geometry in ROOT",G__setup_memvarHGeomRootBuilder,G__setup_memfuncHGeomRootBuilder);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomVector);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomTransform);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomVolume);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomBasicShape);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_EHGeomNodeType);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TGeoVolume);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_TArrayI);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomCave),sizeof(HGeomCave),-1,62720,"Class for the geometry of CAVE",G__setup_memvarHGeomCave,G__setup_memfuncHGeomCave);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomSectors),sizeof(HGeomSectors),-1,62720,"Class for geometry of Sectors",G__setup_memvarHGeomSectors,G__setup_memfuncHGeomSectors);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomCoils),sizeof(HGeomCoils),-1,62720,"Class for the geometry of Magnet",G__setup_memvarHGeomCoils,G__setup_memfuncHGeomCoils);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomFrames),sizeof(HGeomFrames),-1,62720,"Class for geometry of support structure",G__setup_memvarHGeomFrames,G__setup_memfuncHGeomFrames);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomTarget),sizeof(HGeomTarget),-1,62720,"Class for geometry of Target",G__setup_memvarHGeomTarget,G__setup_memfuncHGeomTarget);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomMdc),sizeof(HGeomMdc),-1,62720,"Class for geometry of Mdc",G__setup_memvarHGeomMdc,G__setup_memfuncHGeomMdc);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_vectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgR);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWiremUcOallocatorlEHGeomMdcWiremUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomMdcHit),sizeof(HGeomMdcHit),-1,62720,"Class for MDC hit definition in GEANT",G__setup_memvarHGeomMdcHit,G__setup_memfuncHGeomMdcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomTof),sizeof(HGeomTof),-1,62720,"Class for geometry of TOF",G__setup_memvarHGeomTof,G__setup_memfuncHGeomTof);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomTofHit),sizeof(HGeomTofHit),-1,62720,"Class for TOF/TOFINO hit definition in GEANT",G__setup_memvarHGeomTofHit,G__setup_memfuncHGeomTofHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomRich),sizeof(HGeomRich),-1,62720,"Class for Rich",G__setup_memvarHGeomRich,G__setup_memfuncHGeomRich);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomRichHit),sizeof(HGeomRichHit),-1,62720,"Class for RICH hit definition in GEANT",G__setup_memvarHGeomRichHit,G__setup_memfuncHGeomRichHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomShower),sizeof(HGeomShower),-1,62720,"Class for geometry of Shower",G__setup_memvarHGeomShower,G__setup_memfuncHGeomShower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomShowerHit),sizeof(HGeomShowerHit),-1,62720,"Class for SHOWER hit definition in GEANT",G__setup_memvarHGeomShowerHit,G__setup_memfuncHGeomShowerHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomStart),sizeof(HGeomStart),-1,62720,"Class for geometry of Start/Veto detector",G__setup_memvarHGeomStart,G__setup_memfuncHGeomStart);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomStartHit),sizeof(HGeomStartHit),-1,62720,"Class for START hit definition in GEANT",G__setup_memvarHGeomStartHit,G__setup_memfuncHGeomStartHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomFWall),sizeof(HGeomFWall),-1,62720,"Class for Forward Wall",G__setup_memvarHGeomFWall,G__setup_memfuncHGeomFWall);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomFWallHit),sizeof(HGeomFWallHit),-1,62720,"Class for hit definition of Forward Wall in GEANT",G__setup_memvarHGeomFWallHit,G__setup_memfuncHGeomFWallHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomUser),sizeof(HGeomUser),-1,62720,"Class for user defined detector",G__setup_memvarHGeomUser,G__setup_memfuncHGeomUser);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomUserHit),sizeof(HGeomUserHit),-1,62720,"Class for hit definition in GEANT of user defined detector",G__setup_memvarHGeomUserHit,G__setup_memfuncHGeomUserHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomRpc),sizeof(HGeomRpc),-1,62720,"Class for RPC",G__setup_memvarHGeomRpc,G__setup_memfuncHGeomRpc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomRpcHit),sizeof(HGeomRpcHit),-1,62720,"Class for RPC hit definition in GEANT",G__setup_memvarHGeomRpcHit,G__setup_memfuncHGeomRpcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomEmc),sizeof(HGeomEmc),-1,62720,"Class for EMC",G__setup_memvarHGeomEmc,G__setup_memfuncHGeomEmc);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomEmcHit),sizeof(HGeomEmcHit),-1,62720,"Class for EMC hit definition in GEANT",G__setup_memvarHGeomEmcHit,G__setup_memfuncHGeomEmcHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomFwDet),sizeof(HGeomFwDet),-1,62720,"Class for geometry of the new forward detector",G__setup_memvarHGeomFwDet,G__setup_memfuncHGeomFwDet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomFwDetHit),sizeof(HGeomFwDetHit),-1,62720,"Class for the GEANT hit definition of the new forward detector",G__setup_memvarHGeomFwDetHit,G__setup_memfuncHGeomFwDetHit);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomMdcWirePlane),sizeof(HGeomMdcWirePlane),-1,29952,"Class for MDC wire plane in Geant",G__setup_memvarHGeomMdcWirePlane,G__setup_memfuncHGeomMdcWirePlane);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__SimulationDictLN_HGeomMdcWirePlanes),sizeof(HGeomMdcWirePlanes),-1,29952,"Class for all MDC wire planes in Geant",G__setup_memvarHGeomMdcWirePlanes,G__setup_memfuncHGeomMdcWirePlanes);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_vectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgR);
   G__get_linked_tagnum_fwd(&G__SimulationDictLN_reverse_iteratorlEvectorlEHGeomMdcWirePlanecOallocatorlEHGeomMdcWirePlanegRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupSimulationDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupSimulationDict()");
  G__set_cpp_environmentSimulationDict();
  G__cpp_setup_tagtableSimulationDict();

  G__cpp_setup_inheritanceSimulationDict();

  G__cpp_setup_typetableSimulationDict();

  G__cpp_setup_memvarSimulationDict();

  G__cpp_setup_memfuncSimulationDict();
  G__cpp_setup_globalSimulationDict();
  G__cpp_setup_funcSimulationDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncSimulationDict();
  return;
}
class G__cpp_setup_initSimulationDict {
  public:
    G__cpp_setup_initSimulationDict() { G__add_setup_func("SimulationDict",(G__incsetup)(&G__cpp_setupSimulationDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initSimulationDict() { G__remove_setup_func("SimulationDict"); }
};
G__cpp_setup_initSimulationDict G__cpp_setup_initializerSimulationDict;


//
// File generated by /cvmfs/hades.gsi.de/install/root-5.34.34/bin/rootcint at Mon Mar 27 16:52:01 2017

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME dOdOdIbuilddIpcdIShowerDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "ShowerDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// Direct notice to TROOT of the dictionary's loading.
namespace {
   static struct DictInit {
      DictInit() {
         ROOT::RegisterModule();
      }
   } __TheDictionaryInitializer;
}

// START OF SHADOWS

namespace ROOTShadow {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOTShadow
// END OF SHADOWS

namespace ROOTDict {
   void HShowerCal_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerCal(void *p = 0);
   static void *newArray_HShowerCal(Long_t size, void *p);
   static void delete_HShowerCal(void *p);
   static void deleteArray_HShowerCal(void *p);
   static void destruct_HShowerCal(void *p);
   static void streamer_HShowerCal(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCal*)
   {
      ::HShowerCal *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCal >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCal", ::HShowerCal::Class_Version(), "././hshowercal.h", 7,
                  typeid(::HShowerCal), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCal::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCal) );
      instance.SetNew(&new_HShowerCal);
      instance.SetNewArray(&newArray_HShowerCal);
      instance.SetDelete(&delete_HShowerCal);
      instance.SetDeleteArray(&deleteArray_HShowerCal);
      instance.SetDestructor(&destruct_HShowerCal);
      instance.SetStreamerFunc(&streamer_HShowerCal);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCal*)
   {
      return GenerateInitInstanceLocal((::HShowerCal*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCal*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerCalParCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerCalParCell(void *p = 0);
   static void *newArray_HShowerCalParCell(Long_t size, void *p);
   static void delete_HShowerCalParCell(void *p);
   static void deleteArray_HShowerCalParCell(void *p);
   static void destruct_HShowerCalParCell(void *p);
   static void streamer_HShowerCalParCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCalParCell*)
   {
      ::HShowerCalParCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCalParCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCalParCell", ::HShowerCalParCell::Class_Version(), "././hshowercalparcell.h", 8,
                  typeid(::HShowerCalParCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCalParCell::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCalParCell) );
      instance.SetNew(&new_HShowerCalParCell);
      instance.SetNewArray(&newArray_HShowerCalParCell);
      instance.SetDelete(&delete_HShowerCalParCell);
      instance.SetDeleteArray(&deleteArray_HShowerCalParCell);
      instance.SetDestructor(&destruct_HShowerCalParCell);
      instance.SetStreamerFunc(&streamer_HShowerCalParCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCalParCell*)
   {
      return GenerateInitInstanceLocal((::HShowerCalParCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCalParCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerCalPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerCalPar(void *p = 0);
   static void *newArray_HShowerCalPar(Long_t size, void *p);
   static void delete_HShowerCalPar(void *p);
   static void deleteArray_HShowerCalPar(void *p);
   static void destruct_HShowerCalPar(void *p);
   static void streamer_HShowerCalPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCalPar*)
   {
      ::HShowerCalPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCalPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCalPar", ::HShowerCalPar::Class_Version(), "././hshowercalpar.h", 37,
                  typeid(::HShowerCalPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCalPar::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCalPar) );
      instance.SetNew(&new_HShowerCalPar);
      instance.SetNewArray(&newArray_HShowerCalPar);
      instance.SetDelete(&delete_HShowerCalPar);
      instance.SetDeleteArray(&deleteArray_HShowerCalPar);
      instance.SetDestructor(&destruct_HShowerCalPar);
      instance.SetStreamerFunc(&streamer_HShowerCalPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCalPar*)
   {
      return GenerateInitInstanceLocal((::HShowerCalPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCalPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerRaw_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerRaw(void *p = 0);
   static void *newArray_HShowerRaw(Long_t size, void *p);
   static void delete_HShowerRaw(void *p);
   static void deleteArray_HShowerRaw(void *p);
   static void destruct_HShowerRaw(void *p);
   static void streamer_HShowerRaw(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerRaw*)
   {
      ::HShowerRaw *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerRaw >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerRaw", ::HShowerRaw::Class_Version(), "././hshowerraw.h", 8,
                  typeid(::HShowerRaw), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerRaw::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerRaw) );
      instance.SetNew(&new_HShowerRaw);
      instance.SetNewArray(&newArray_HShowerRaw);
      instance.SetDelete(&delete_HShowerRaw);
      instance.SetDeleteArray(&deleteArray_HShowerRaw);
      instance.SetDestructor(&destruct_HShowerRaw);
      instance.SetStreamerFunc(&streamer_HShowerRaw);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerRaw*)
   {
      return GenerateInitInstanceLocal((::HShowerRaw*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerRaw*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerRawMatr_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerRawMatr(void *p = 0);
   static void *newArray_HShowerRawMatr(Long_t size, void *p);
   static void delete_HShowerRawMatr(void *p);
   static void deleteArray_HShowerRawMatr(void *p);
   static void destruct_HShowerRawMatr(void *p);
   static void streamer_HShowerRawMatr(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerRawMatr*)
   {
      ::HShowerRawMatr *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerRawMatr >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerRawMatr", ::HShowerRawMatr::Class_Version(), "././hshowerraw.h", 57,
                  typeid(::HShowerRawMatr), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerRawMatr::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerRawMatr) );
      instance.SetNew(&new_HShowerRawMatr);
      instance.SetNewArray(&newArray_HShowerRawMatr);
      instance.SetDelete(&delete_HShowerRawMatr);
      instance.SetDeleteArray(&deleteArray_HShowerRawMatr);
      instance.SetDestructor(&destruct_HShowerRawMatr);
      instance.SetStreamerFunc(&streamer_HShowerRawMatr);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerRawMatr*)
   {
      return GenerateInitInstanceLocal((::HShowerRawMatr*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerRawMatr*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerCalibrater_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerCalibrater(void *p = 0);
   static void *newArray_HShowerCalibrater(Long_t size, void *p);
   static void delete_HShowerCalibrater(void *p);
   static void deleteArray_HShowerCalibrater(void *p);
   static void destruct_HShowerCalibrater(void *p);
   static void streamer_HShowerCalibrater(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCalibrater*)
   {
      ::HShowerCalibrater *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCalibrater >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCalibrater", ::HShowerCalibrater::Class_Version(), "././hshowercalibrater.h", 12,
                  typeid(::HShowerCalibrater), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCalibrater::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCalibrater) );
      instance.SetNew(&new_HShowerCalibrater);
      instance.SetNewArray(&newArray_HShowerCalibrater);
      instance.SetDelete(&delete_HShowerCalibrater);
      instance.SetDeleteArray(&deleteArray_HShowerCalibrater);
      instance.SetDestructor(&destruct_HShowerCalibrater);
      instance.SetStreamerFunc(&streamer_HShowerCalibrater);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCalibrater*)
   {
      return GenerateInitInstanceLocal((::HShowerCalibrater*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCalibrater*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerRawHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerRawHist(void *p = 0);
   static void *newArray_HShowerRawHist(Long_t size, void *p);
   static void delete_HShowerRawHist(void *p);
   static void deleteArray_HShowerRawHist(void *p);
   static void destruct_HShowerRawHist(void *p);
   static void streamer_HShowerRawHist(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerRawHist*)
   {
      ::HShowerRawHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerRawHist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerRawHist", ::HShowerRawHist::Class_Version(), "././hshowerrawhist.h", 14,
                  typeid(::HShowerRawHist), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerRawHist::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerRawHist) );
      instance.SetNew(&new_HShowerRawHist);
      instance.SetNewArray(&newArray_HShowerRawHist);
      instance.SetDelete(&delete_HShowerRawHist);
      instance.SetDeleteArray(&deleteArray_HShowerRawHist);
      instance.SetDestructor(&destruct_HShowerRawHist);
      instance.SetStreamerFunc(&streamer_HShowerRawHist);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerRawHist*)
   {
      return GenerateInitInstanceLocal((::HShowerRawHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerRawHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerUnpacker_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HShowerUnpacker(void *p);
   static void deleteArray_HShowerUnpacker(void *p);
   static void destruct_HShowerUnpacker(void *p);
   static void streamer_HShowerUnpacker(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerUnpacker*)
   {
      ::HShowerUnpacker *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerUnpacker >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerUnpacker", ::HShowerUnpacker::Class_Version(), "././hshowerunpacker.h", 20,
                  typeid(::HShowerUnpacker), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerUnpacker::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerUnpacker) );
      instance.SetDelete(&delete_HShowerUnpacker);
      instance.SetDeleteArray(&deleteArray_HShowerUnpacker);
      instance.SetDestructor(&destruct_HShowerUnpacker);
      instance.SetStreamerFunc(&streamer_HShowerUnpacker);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerUnpacker*)
   {
      return GenerateInitInstanceLocal((::HShowerUnpacker*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerUnpacker*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerGeantReader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerGeantReader(void *p = 0);
   static void *newArray_HShowerGeantReader(Long_t size, void *p);
   static void delete_HShowerGeantReader(void *p);
   static void deleteArray_HShowerGeantReader(void *p);
   static void destruct_HShowerGeantReader(void *p);
   static void streamer_HShowerGeantReader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerGeantReader*)
   {
      ::HShowerGeantReader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerGeantReader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerGeantReader", ::HShowerGeantReader::Class_Version(), "././hshowergeantreader.h", 10,
                  typeid(::HShowerGeantReader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerGeantReader::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerGeantReader) );
      instance.SetNew(&new_HShowerGeantReader);
      instance.SetNewArray(&newArray_HShowerGeantReader);
      instance.SetDelete(&delete_HShowerGeantReader);
      instance.SetDeleteArray(&deleteArray_HShowerGeantReader);
      instance.SetDestructor(&destruct_HShowerGeantReader);
      instance.SetStreamerFunc(&streamer_HShowerGeantReader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerGeantReader*)
   {
      return GenerateInitInstanceLocal((::HShowerGeantReader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerGeantReader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerGeantWire_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerGeantWire(void *p = 0);
   static void *newArray_HShowerGeantWire(Long_t size, void *p);
   static void delete_HShowerGeantWire(void *p);
   static void deleteArray_HShowerGeantWire(void *p);
   static void destruct_HShowerGeantWire(void *p);
   static void streamer_HShowerGeantWire(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerGeantWire*)
   {
      ::HShowerGeantWire *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerGeantWire >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerGeantWire", ::HShowerGeantWire::Class_Version(), "././hshowergeantwire.h", 8,
                  typeid(::HShowerGeantWire), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerGeantWire::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerGeantWire) );
      instance.SetNew(&new_HShowerGeantWire);
      instance.SetNewArray(&newArray_HShowerGeantWire);
      instance.SetDelete(&delete_HShowerGeantWire);
      instance.SetDeleteArray(&deleteArray_HShowerGeantWire);
      instance.SetDestructor(&destruct_HShowerGeantWire);
      instance.SetStreamerFunc(&streamer_HShowerGeantWire);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerGeantWire*)
   {
      return GenerateInitInstanceLocal((::HShowerGeantWire*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerGeantWire*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerFrameCorner_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerFrameCorner(void *p = 0);
   static void *newArray_HShowerFrameCorner(Long_t size, void *p);
   static void delete_HShowerFrameCorner(void *p);
   static void deleteArray_HShowerFrameCorner(void *p);
   static void destruct_HShowerFrameCorner(void *p);
   static void streamer_HShowerFrameCorner(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerFrameCorner*)
   {
      ::HShowerFrameCorner *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerFrameCorner >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerFrameCorner", ::HShowerFrameCorner::Class_Version(), "././hshowerframe.h", 8,
                  typeid(::HShowerFrameCorner), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerFrameCorner::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerFrameCorner) );
      instance.SetNew(&new_HShowerFrameCorner);
      instance.SetNewArray(&newArray_HShowerFrameCorner);
      instance.SetDelete(&delete_HShowerFrameCorner);
      instance.SetDeleteArray(&deleteArray_HShowerFrameCorner);
      instance.SetDestructor(&destruct_HShowerFrameCorner);
      instance.SetStreamerFunc(&streamer_HShowerFrameCorner);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerFrameCorner*)
   {
      return GenerateInitInstanceLocal((::HShowerFrameCorner*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerFrameCorner*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerFrame_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerFrame(void *p = 0);
   static void *newArray_HShowerFrame(Long_t size, void *p);
   static void delete_HShowerFrame(void *p);
   static void deleteArray_HShowerFrame(void *p);
   static void destruct_HShowerFrame(void *p);
   static void streamer_HShowerFrame(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerFrame*)
   {
      ::HShowerFrame *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerFrame >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerFrame", ::HShowerFrame::Class_Version(), "././hshowerframe.h", 28,
                  typeid(::HShowerFrame), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerFrame::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerFrame) );
      instance.SetNew(&new_HShowerFrame);
      instance.SetNewArray(&newArray_HShowerFrame);
      instance.SetDelete(&delete_HShowerFrame);
      instance.SetDeleteArray(&deleteArray_HShowerFrame);
      instance.SetDestructor(&destruct_HShowerFrame);
      instance.SetStreamerFunc(&streamer_HShowerFrame);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerFrame*)
   {
      return GenerateInitInstanceLocal((::HShowerFrame*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerFrame*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerWireTab_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerWireTab(void *p = 0);
   static void *newArray_HShowerWireTab(Long_t size, void *p);
   static void delete_HShowerWireTab(void *p);
   static void deleteArray_HShowerWireTab(void *p);
   static void destruct_HShowerWireTab(void *p);
   static void streamer_HShowerWireTab(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerWireTab*)
   {
      ::HShowerWireTab *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerWireTab >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerWireTab", ::HShowerWireTab::Class_Version(), "././hshowerwiretab.h", 9,
                  typeid(::HShowerWireTab), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerWireTab::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerWireTab) );
      instance.SetNew(&new_HShowerWireTab);
      instance.SetNewArray(&newArray_HShowerWireTab);
      instance.SetDelete(&delete_HShowerWireTab);
      instance.SetDeleteArray(&deleteArray_HShowerWireTab);
      instance.SetDestructor(&destruct_HShowerWireTab);
      instance.SetStreamerFunc(&streamer_HShowerWireTab);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerWireTab*)
   {
      return GenerateInitInstanceLocal((::HShowerWireTab*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerWireTab*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerPad_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerPad(void *p = 0);
   static void *newArray_HShowerPad(Long_t size, void *p);
   static void delete_HShowerPad(void *p);
   static void deleteArray_HShowerPad(void *p);
   static void destruct_HShowerPad(void *p);
   static void streamer_HShowerPad(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerPad*)
   {
      ::HShowerPad *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerPad >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerPad", ::HShowerPad::Class_Version(), "././hshowerpad.h", 11,
                  typeid(::HShowerPad), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerPad::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerPad) );
      instance.SetNew(&new_HShowerPad);
      instance.SetNewArray(&newArray_HShowerPad);
      instance.SetDelete(&delete_HShowerPad);
      instance.SetDeleteArray(&deleteArray_HShowerPad);
      instance.SetDestructor(&destruct_HShowerPad);
      instance.SetStreamerFunc(&streamer_HShowerPad);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerPad*)
   {
      return GenerateInitInstanceLocal((::HShowerPad*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerPad*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerPadTab_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerPadTab(void *p = 0);
   static void *newArray_HShowerPadTab(Long_t size, void *p);
   static void delete_HShowerPadTab(void *p);
   static void deleteArray_HShowerPadTab(void *p);
   static void destruct_HShowerPadTab(void *p);
   static void streamer_HShowerPadTab(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerPadTab*)
   {
      ::HShowerPadTab *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerPadTab >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerPadTab", ::HShowerPadTab::Class_Version(), "././hshowerpad.h", 64,
                  typeid(::HShowerPadTab), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerPadTab::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerPadTab) );
      instance.SetNew(&new_HShowerPadTab);
      instance.SetNewArray(&newArray_HShowerPadTab);
      instance.SetDelete(&delete_HShowerPadTab);
      instance.SetDeleteArray(&deleteArray_HShowerPadTab);
      instance.SetDestructor(&destruct_HShowerPadTab);
      instance.SetStreamerFunc(&streamer_HShowerPadTab);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerPadTab*)
   {
      return GenerateInitInstanceLocal((::HShowerPadTab*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerPadTab*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerDigiPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerDigiPar(void *p = 0);
   static void *newArray_HShowerDigiPar(Long_t size, void *p);
   static void delete_HShowerDigiPar(void *p);
   static void deleteArray_HShowerDigiPar(void *p);
   static void destruct_HShowerDigiPar(void *p);
   static void streamer_HShowerDigiPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerDigiPar*)
   {
      ::HShowerDigiPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerDigiPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerDigiPar", ::HShowerDigiPar::Class_Version(), "././hshowerdigipar.h", 11,
                  typeid(::HShowerDigiPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerDigiPar::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerDigiPar) );
      instance.SetNew(&new_HShowerDigiPar);
      instance.SetNewArray(&newArray_HShowerDigiPar);
      instance.SetDelete(&delete_HShowerDigiPar);
      instance.SetDeleteArray(&deleteArray_HShowerDigiPar);
      instance.SetDestructor(&destruct_HShowerDigiPar);
      instance.SetStreamerFunc(&streamer_HShowerDigiPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerDigiPar*)
   {
      return GenerateInitInstanceLocal((::HShowerDigiPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerDigiPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerGeometry_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerGeometry(void *p = 0);
   static void *newArray_HShowerGeometry(Long_t size, void *p);
   static void delete_HShowerGeometry(void *p);
   static void deleteArray_HShowerGeometry(void *p);
   static void destruct_HShowerGeometry(void *p);
   static void streamer_HShowerGeometry(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerGeometry*)
   {
      ::HShowerGeometry *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerGeometry >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerGeometry", ::HShowerGeometry::Class_Version(), "././hshowergeometry.h", 14,
                  typeid(::HShowerGeometry), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerGeometry::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerGeometry) );
      instance.SetNew(&new_HShowerGeometry);
      instance.SetNewArray(&newArray_HShowerGeometry);
      instance.SetDelete(&delete_HShowerGeometry);
      instance.SetDeleteArray(&deleteArray_HShowerGeometry);
      instance.SetDestructor(&destruct_HShowerGeometry);
      instance.SetStreamerFunc(&streamer_HShowerGeometry);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerGeometry*)
   {
      return GenerateInitInstanceLocal((::HShowerGeometry*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerGeometry*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HShowerDigitizer(void *p);
   static void deleteArray_HShowerDigitizer(void *p);
   static void destruct_HShowerDigitizer(void *p);
   static void streamer_HShowerDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerDigitizer*)
   {
      ::HShowerDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerDigitizer", ::HShowerDigitizer::Class_Version(), "././hshowerdigitizer.h", 11,
                  typeid(::HShowerDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerDigitizer) );
      instance.SetDelete(&delete_HShowerDigitizer);
      instance.SetDeleteArray(&deleteArray_HShowerDigitizer);
      instance.SetDestructor(&destruct_HShowerDigitizer);
      instance.SetStreamerFunc(&streamer_HShowerDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerDigitizer*)
   {
      return GenerateInitInstanceLocal((::HShowerDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHitDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHitDigitizer(void *p = 0);
   static void *newArray_HShowerHitDigitizer(Long_t size, void *p);
   static void delete_HShowerHitDigitizer(void *p);
   static void deleteArray_HShowerHitDigitizer(void *p);
   static void destruct_HShowerHitDigitizer(void *p);
   static void streamer_HShowerHitDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHitDigitizer*)
   {
      ::HShowerHitDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHitDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHitDigitizer", ::HShowerHitDigitizer::Class_Version(), "././hshowerhitdigitizer.h", 8,
                  typeid(::HShowerHitDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHitDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHitDigitizer) );
      instance.SetNew(&new_HShowerHitDigitizer);
      instance.SetNewArray(&newArray_HShowerHitDigitizer);
      instance.SetDelete(&delete_HShowerHitDigitizer);
      instance.SetDeleteArray(&deleteArray_HShowerHitDigitizer);
      instance.SetDestructor(&destruct_HShowerHitDigitizer);
      instance.SetStreamerFunc(&streamer_HShowerHitDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHitDigitizer*)
   {
      return GenerateInitInstanceLocal((::HShowerHitDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHitDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerPadDigitizer_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerPadDigitizer(void *p = 0);
   static void *newArray_HShowerPadDigitizer(Long_t size, void *p);
   static void delete_HShowerPadDigitizer(void *p);
   static void deleteArray_HShowerPadDigitizer(void *p);
   static void destruct_HShowerPadDigitizer(void *p);
   static void streamer_HShowerPadDigitizer(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerPadDigitizer*)
   {
      ::HShowerPadDigitizer *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerPadDigitizer >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerPadDigitizer", ::HShowerPadDigitizer::Class_Version(), "././hshowerpaddigitizer.h", 21,
                  typeid(::HShowerPadDigitizer), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerPadDigitizer::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerPadDigitizer) );
      instance.SetNew(&new_HShowerPadDigitizer);
      instance.SetNewArray(&newArray_HShowerPadDigitizer);
      instance.SetDelete(&delete_HShowerPadDigitizer);
      instance.SetDeleteArray(&deleteArray_HShowerPadDigitizer);
      instance.SetDestructor(&destruct_HShowerPadDigitizer);
      instance.SetStreamerFunc(&streamer_HShowerPadDigitizer);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerPadDigitizer*)
   {
      return GenerateInitInstanceLocal((::HShowerPadDigitizer*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerPadDigitizer*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHit_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHit(void *p = 0);
   static void *newArray_HShowerHit(Long_t size, void *p);
   static void delete_HShowerHit(void *p);
   static void deleteArray_HShowerHit(void *p);
   static void destruct_HShowerHit(void *p);
   static void streamer_HShowerHit(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHit*)
   {
      ::HShowerHit *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHit >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHit", ::HShowerHit::Class_Version(), "././hshowerhit.h", 11,
                  typeid(::HShowerHit), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHit::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHit) );
      instance.SetNew(&new_HShowerHit);
      instance.SetNewArray(&newArray_HShowerHit);
      instance.SetDelete(&delete_HShowerHit);
      instance.SetDeleteArray(&deleteArray_HShowerHit);
      instance.SetDestructor(&destruct_HShowerHit);
      instance.SetStreamerFunc(&streamer_HShowerHit);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHit*)
   {
      return GenerateInitInstanceLocal((::HShowerHit*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHit*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerPID_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerPID(void *p = 0);
   static void *newArray_HShowerPID(Long_t size, void *p);
   static void delete_HShowerPID(void *p);
   static void deleteArray_HShowerPID(void *p);
   static void destruct_HShowerPID(void *p);
   static void streamer_HShowerPID(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerPID*)
   {
      ::HShowerPID *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerPID >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerPID", ::HShowerPID::Class_Version(), "././hshowerpid.h", 7,
                  typeid(::HShowerPID), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerPID::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerPID) );
      instance.SetNew(&new_HShowerPID);
      instance.SetNewArray(&newArray_HShowerPID);
      instance.SetDelete(&delete_HShowerPID);
      instance.SetDeleteArray(&deleteArray_HShowerPID);
      instance.SetDestructor(&destruct_HShowerPID);
      instance.SetStreamerFunc(&streamer_HShowerPID);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerPID*)
   {
      return GenerateInitInstanceLocal((::HShowerPID*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerPID*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHitHeader_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHitHeader(void *p = 0);
   static void *newArray_HShowerHitHeader(Long_t size, void *p);
   static void delete_HShowerHitHeader(void *p);
   static void deleteArray_HShowerHitHeader(void *p);
   static void destruct_HShowerHitHeader(void *p);
   static void streamer_HShowerHitHeader(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHitHeader*)
   {
      ::HShowerHitHeader *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHitHeader >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHitHeader", ::HShowerHitHeader::Class_Version(), "././hshowerhitheader.h", 13,
                  typeid(::HShowerHitHeader), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHitHeader::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHitHeader) );
      instance.SetNew(&new_HShowerHitHeader);
      instance.SetNewArray(&newArray_HShowerHitHeader);
      instance.SetDelete(&delete_HShowerHitHeader);
      instance.SetDeleteArray(&deleteArray_HShowerHitHeader);
      instance.SetDestructor(&destruct_HShowerHitHeader);
      instance.SetStreamerFunc(&streamer_HShowerHitHeader);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHitHeader*)
   {
      return GenerateInitInstanceLocal((::HShowerHitHeader*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHitHeader*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerCriterium_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerCriterium(void *p = 0);
   static void *newArray_HShowerCriterium(Long_t size, void *p);
   static void delete_HShowerCriterium(void *p);
   static void deleteArray_HShowerCriterium(void *p);
   static void destruct_HShowerCriterium(void *p);
   static void streamer_HShowerCriterium(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCriterium*)
   {
      ::HShowerCriterium *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCriterium >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCriterium", ::HShowerCriterium::Class_Version(), "././hshowercriterium.h", 10,
                  typeid(::HShowerCriterium), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCriterium::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCriterium) );
      instance.SetNew(&new_HShowerCriterium);
      instance.SetNewArray(&newArray_HShowerCriterium);
      instance.SetDelete(&delete_HShowerCriterium);
      instance.SetDeleteArray(&deleteArray_HShowerCriterium);
      instance.SetDestructor(&destruct_HShowerCriterium);
      instance.SetStreamerFunc(&streamer_HShowerCriterium);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCriterium*)
   {
      return GenerateInitInstanceLocal((::HShowerCriterium*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCriterium*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHitFPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHitFPar(void *p = 0);
   static void *newArray_HShowerHitFPar(Long_t size, void *p);
   static void delete_HShowerHitFPar(void *p);
   static void deleteArray_HShowerHitFPar(void *p);
   static void destruct_HShowerHitFPar(void *p);
   static void streamer_HShowerHitFPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHitFPar*)
   {
      ::HShowerHitFPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHitFPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHitFPar", ::HShowerHitFPar::Class_Version(), "././hshowerhitfpar.h", 8,
                  typeid(::HShowerHitFPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHitFPar::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHitFPar) );
      instance.SetNew(&new_HShowerHitFPar);
      instance.SetNewArray(&newArray_HShowerHitFPar);
      instance.SetDelete(&delete_HShowerHitFPar);
      instance.SetDeleteArray(&deleteArray_HShowerHitFPar);
      instance.SetDestructor(&destruct_HShowerHitFPar);
      instance.SetStreamerFunc(&streamer_HShowerHitFPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHitFPar*)
   {
      return GenerateInitInstanceLocal((::HShowerHitFPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHitFPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHitFinder_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHitFinder(void *p = 0);
   static void *newArray_HShowerHitFinder(Long_t size, void *p);
   static void delete_HShowerHitFinder(void *p);
   static void deleteArray_HShowerHitFinder(void *p);
   static void destruct_HShowerHitFinder(void *p);
   static void streamer_HShowerHitFinder(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHitFinder*)
   {
      ::HShowerHitFinder *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHitFinder >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHitFinder", ::HShowerHitFinder::Class_Version(), "././hshowerhitfinder.h", 21,
                  typeid(::HShowerHitFinder), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHitFinder::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHitFinder) );
      instance.SetNew(&new_HShowerHitFinder);
      instance.SetNewArray(&newArray_HShowerHitFinder);
      instance.SetDelete(&delete_HShowerHitFinder);
      instance.SetDeleteArray(&deleteArray_HShowerHitFinder);
      instance.SetDestructor(&destruct_HShowerHitFinder);
      instance.SetStreamerFunc(&streamer_HShowerHitFinder);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHitFinder*)
   {
      return GenerateInitInstanceLocal((::HShowerHitFinder*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHitFinder*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerDetector_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerDetector(void *p = 0);
   static void *newArray_HShowerDetector(Long_t size, void *p);
   static void delete_HShowerDetector(void *p);
   static void deleteArray_HShowerDetector(void *p);
   static void destruct_HShowerDetector(void *p);
   static void streamer_HShowerDetector(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerDetector*)
   {
      ::HShowerDetector *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerDetector >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerDetector", ::HShowerDetector::Class_Version(), "././hshowerdetector.h", 14,
                  typeid(::HShowerDetector), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerDetector::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerDetector) );
      instance.SetNew(&new_HShowerDetector);
      instance.SetNewArray(&newArray_HShowerDetector);
      instance.SetDelete(&delete_HShowerDetector);
      instance.SetDeleteArray(&deleteArray_HShowerDetector);
      instance.SetDestructor(&destruct_HShowerDetector);
      instance.SetStreamerFunc(&streamer_HShowerDetector);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerDetector*)
   {
      return GenerateInitInstanceLocal((::HShowerDetector*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerDetector*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerGeomPar_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerGeomPar(void *p = 0);
   static void *newArray_HShowerGeomPar(Long_t size, void *p);
   static void delete_HShowerGeomPar(void *p);
   static void deleteArray_HShowerGeomPar(void *p);
   static void destruct_HShowerGeomPar(void *p);
   static void streamer_HShowerGeomPar(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerGeomPar*)
   {
      ::HShowerGeomPar *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerGeomPar >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerGeomPar", ::HShowerGeomPar::Class_Version(), "././hshowergeompar.h", 6,
                  typeid(::HShowerGeomPar), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerGeomPar::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerGeomPar) );
      instance.SetNew(&new_HShowerGeomPar);
      instance.SetNewArray(&newArray_HShowerGeomPar);
      instance.SetDelete(&delete_HShowerGeomPar);
      instance.SetDeleteArray(&deleteArray_HShowerGeomPar);
      instance.SetDestructor(&destruct_HShowerGeomPar);
      instance.SetStreamerFunc(&streamer_HShowerGeomPar);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerGeomPar*)
   {
      return GenerateInitInstanceLocal((::HShowerGeomPar*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerGeomPar*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HGeomVector2_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HGeomVector2(void *p = 0);
   static void *newArray_HGeomVector2(Long_t size, void *p);
   static void delete_HGeomVector2(void *p);
   static void deleteArray_HGeomVector2(void *p);
   static void destruct_HGeomVector2(void *p);
   static void streamer_HGeomVector2(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HGeomVector2*)
   {
      ::HGeomVector2 *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HGeomVector2 >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HGeomVector2", ::HGeomVector2::Class_Version(), "././hgeomvector2.h", 12,
                  typeid(::HGeomVector2), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HGeomVector2::Dictionary, isa_proxy, 0,
                  sizeof(::HGeomVector2) );
      instance.SetNew(&new_HGeomVector2);
      instance.SetNewArray(&newArray_HGeomVector2);
      instance.SetDelete(&delete_HGeomVector2);
      instance.SetDeleteArray(&deleteArray_HGeomVector2);
      instance.SetDestructor(&destruct_HGeomVector2);
      instance.SetStreamerFunc(&streamer_HGeomVector2);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HGeomVector2*)
   {
      return GenerateInitInstanceLocal((::HGeomVector2*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HGeomVector2*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerContFact_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerContFact(void *p = 0);
   static void *newArray_HShowerContFact(Long_t size, void *p);
   static void delete_HShowerContFact(void *p);
   static void deleteArray_HShowerContFact(void *p);
   static void destruct_HShowerContFact(void *p);
   static void streamer_HShowerContFact(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerContFact*)
   {
      ::HShowerContFact *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerContFact >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerContFact", ::HShowerContFact::Class_Version(), "././hshowercontfact.h", 9,
                  typeid(::HShowerContFact), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerContFact::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerContFact) );
      instance.SetNew(&new_HShowerContFact);
      instance.SetNewArray(&newArray_HShowerContFact);
      instance.SetDelete(&delete_HShowerContFact);
      instance.SetDeleteArray(&deleteArray_HShowerContFact);
      instance.SetDestructor(&destruct_HShowerContFact);
      instance.SetStreamerFunc(&streamer_HShowerContFact);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerContFact*)
   {
      return GenerateInitInstanceLocal((::HShowerContFact*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerContFact*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerParAsciiFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HShowerParAsciiFileIo(void *p);
   static void deleteArray_HShowerParAsciiFileIo(void *p);
   static void destruct_HShowerParAsciiFileIo(void *p);
   static void streamer_HShowerParAsciiFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerParAsciiFileIo*)
   {
      ::HShowerParAsciiFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerParAsciiFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerParAsciiFileIo", ::HShowerParAsciiFileIo::Class_Version(), "././hshowerparasciifileio.h", 10,
                  typeid(::HShowerParAsciiFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerParAsciiFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerParAsciiFileIo) );
      instance.SetDelete(&delete_HShowerParAsciiFileIo);
      instance.SetDeleteArray(&deleteArray_HShowerParAsciiFileIo);
      instance.SetDestructor(&destruct_HShowerParAsciiFileIo);
      instance.SetStreamerFunc(&streamer_HShowerParAsciiFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerParAsciiFileIo*)
   {
      return GenerateInitInstanceLocal((::HShowerParAsciiFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerParAsciiFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerParRootFileIo_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HShowerParRootFileIo(void *p);
   static void deleteArray_HShowerParRootFileIo(void *p);
   static void destruct_HShowerParRootFileIo(void *p);
   static void streamer_HShowerParRootFileIo(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerParRootFileIo*)
   {
      ::HShowerParRootFileIo *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerParRootFileIo >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerParRootFileIo", ::HShowerParRootFileIo::Class_Version(), "././hshowerparrootfileio.h", 6,
                  typeid(::HShowerParRootFileIo), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerParRootFileIo::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerParRootFileIo) );
      instance.SetDelete(&delete_HShowerParRootFileIo);
      instance.SetDeleteArray(&deleteArray_HShowerParRootFileIo);
      instance.SetDestructor(&destruct_HShowerParRootFileIo);
      instance.SetStreamerFunc(&streamer_HShowerParRootFileIo);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerParRootFileIo*)
   {
      return GenerateInitInstanceLocal((::HShowerParRootFileIo*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerParRootFileIo*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerTrack(void *p = 0);
   static void *newArray_HShowerTrack(Long_t size, void *p);
   static void delete_HShowerTrack(void *p);
   static void deleteArray_HShowerTrack(void *p);
   static void destruct_HShowerTrack(void *p);
   static void streamer_HShowerTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerTrack*)
   {
      ::HShowerTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerTrack", ::HShowerTrack::Class_Version(), "././hshowertrack.h", 7,
                  typeid(::HShowerTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerTrack::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerTrack) );
      instance.SetNew(&new_HShowerTrack);
      instance.SetNewArray(&newArray_HShowerTrack);
      instance.SetDelete(&delete_HShowerTrack);
      instance.SetDeleteArray(&deleteArray_HShowerTrack);
      instance.SetDestructor(&destruct_HShowerTrack);
      instance.SetStreamerFunc(&streamer_HShowerTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerTrack*)
   {
      return GenerateInitInstanceLocal((::HShowerTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerTaskSet_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerTaskSet(void *p = 0);
   static void *newArray_HShowerTaskSet(Long_t size, void *p);
   static void delete_HShowerTaskSet(void *p);
   static void deleteArray_HShowerTaskSet(void *p);
   static void destruct_HShowerTaskSet(void *p);
   static void streamer_HShowerTaskSet(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerTaskSet*)
   {
      ::HShowerTaskSet *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerTaskSet >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerTaskSet", ::HShowerTaskSet::Class_Version(), "././hshowertaskset.h", 7,
                  typeid(::HShowerTaskSet), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerTaskSet::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerTaskSet) );
      instance.SetNew(&new_HShowerTaskSet);
      instance.SetNewArray(&newArray_HShowerTaskSet);
      instance.SetDelete(&delete_HShowerTaskSet);
      instance.SetDeleteArray(&deleteArray_HShowerTaskSet);
      instance.SetDestructor(&destruct_HShowerTaskSet);
      instance.SetStreamerFunc(&streamer_HShowerTaskSet);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerTaskSet*)
   {
      return GenerateInitInstanceLocal((::HShowerTaskSet*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerTaskSet*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHistCell_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHistCell(void *p = 0);
   static void *newArray_HShowerHistCell(Long_t size, void *p);
   static void delete_HShowerHistCell(void *p);
   static void deleteArray_HShowerHistCell(void *p);
   static void destruct_HShowerHistCell(void *p);
   static void streamer_HShowerHistCell(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHistCell*)
   {
      ::HShowerHistCell *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHistCell >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHistCell", ::HShowerHistCell::Class_Version(), "././hshowerhistcell.h", 39,
                  typeid(::HShowerHistCell), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHistCell::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHistCell) );
      instance.SetNew(&new_HShowerHistCell);
      instance.SetNewArray(&newArray_HShowerHistCell);
      instance.SetDelete(&delete_HShowerHistCell);
      instance.SetDeleteArray(&deleteArray_HShowerHistCell);
      instance.SetDestructor(&destruct_HShowerHistCell);
      instance.SetStreamerFunc(&streamer_HShowerHistCell);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHistCell*)
   {
      return GenerateInitInstanceLocal((::HShowerHistCell*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHistCell*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHist(void *p = 0);
   static void *newArray_HShowerHist(Long_t size, void *p);
   static void delete_HShowerHist(void *p);
   static void deleteArray_HShowerHist(void *p);
   static void destruct_HShowerHist(void *p);
   static void streamer_HShowerHist(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHist*)
   {
      ::HShowerHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHist", ::HShowerHist::Class_Version(), "././hshowerhist.h", 15,
                  typeid(::HShowerHist), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHist::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHist) );
      instance.SetNew(&new_HShowerHist);
      instance.SetNewArray(&newArray_HShowerHist);
      instance.SetDelete(&delete_HShowerHist);
      instance.SetDeleteArray(&deleteArray_HShowerHist);
      instance.SetDestructor(&destruct_HShowerHist);
      instance.SetStreamerFunc(&streamer_HShowerHist);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHist*)
   {
      return GenerateInitInstanceLocal((::HShowerHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerCalParCalculator_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void delete_HShowerCalParCalculator(void *p);
   static void deleteArray_HShowerCalParCalculator(void *p);
   static void destruct_HShowerCalParCalculator(void *p);
   static void streamer_HShowerCalParCalculator(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCalParCalculator*)
   {
      ::HShowerCalParCalculator *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCalParCalculator >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCalParCalculator", ::HShowerCalParCalculator::Class_Version(), "././hshowercalparcalculator.h", 20,
                  typeid(::HShowerCalParCalculator), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCalParCalculator::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCalParCalculator) );
      instance.SetDelete(&delete_HShowerCalParCalculator);
      instance.SetDeleteArray(&deleteArray_HShowerCalParCalculator);
      instance.SetDestructor(&destruct_HShowerCalParCalculator);
      instance.SetStreamerFunc(&streamer_HShowerCalParCalculator);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCalParCalculator*)
   {
      return GenerateInitInstanceLocal((::HShowerCalParCalculator*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCalParCalculator*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerCalHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerCalHist(void *p = 0);
   static void *newArray_HShowerCalHist(Long_t size, void *p);
   static void delete_HShowerCalHist(void *p);
   static void deleteArray_HShowerCalHist(void *p);
   static void destruct_HShowerCalHist(void *p);
   static void streamer_HShowerCalHist(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCalHist*)
   {
      ::HShowerCalHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCalHist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCalHist", ::HShowerCalHist::Class_Version(), "././hshowercalhist.h", 15,
                  typeid(::HShowerCalHist), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCalHist::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCalHist) );
      instance.SetNew(&new_HShowerCalHist);
      instance.SetNewArray(&newArray_HShowerCalHist);
      instance.SetDelete(&delete_HShowerCalHist);
      instance.SetDeleteArray(&deleteArray_HShowerCalHist);
      instance.SetDestructor(&destruct_HShowerCalHist);
      instance.SetStreamerFunc(&streamer_HShowerCalHist);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCalHist*)
   {
      return GenerateInitInstanceLocal((::HShowerCalHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCalHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHitHist_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHitHist(void *p = 0);
   static void *newArray_HShowerHitHist(Long_t size, void *p);
   static void delete_HShowerHitHist(void *p);
   static void deleteArray_HShowerHitHist(void *p);
   static void destruct_HShowerHitHist(void *p);
   static void streamer_HShowerHitHist(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHitHist*)
   {
      ::HShowerHitHist *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHitHist >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHitHist", ::HShowerHitHist::Class_Version(), "././hshowerhithist.h", 16,
                  typeid(::HShowerHitHist), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHitHist::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHitHist) );
      instance.SetNew(&new_HShowerHitHist);
      instance.SetNewArray(&newArray_HShowerHitHist);
      instance.SetDelete(&delete_HShowerHitHist);
      instance.SetDeleteArray(&deleteArray_HShowerHitHist);
      instance.SetDestructor(&destruct_HShowerHitHist);
      instance.SetStreamerFunc(&streamer_HShowerHitHist);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHitHist*)
   {
      return GenerateInitInstanceLocal((::HShowerHitHist*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHitHist*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerCopy_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerCopy(void *p = 0);
   static void *newArray_HShowerCopy(Long_t size, void *p);
   static void delete_HShowerCopy(void *p);
   static void deleteArray_HShowerCopy(void *p);
   static void destruct_HShowerCopy(void *p);
   static void streamer_HShowerCopy(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerCopy*)
   {
      ::HShowerCopy *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerCopy >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerCopy", ::HShowerCopy::Class_Version(), "././hshowercopy.h", 13,
                  typeid(::HShowerCopy), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerCopy::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerCopy) );
      instance.SetNew(&new_HShowerCopy);
      instance.SetNewArray(&newArray_HShowerCopy);
      instance.SetDelete(&delete_HShowerCopy);
      instance.SetDeleteArray(&deleteArray_HShowerCopy);
      instance.SetDestructor(&destruct_HShowerCopy);
      instance.SetStreamerFunc(&streamer_HShowerCopy);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerCopy*)
   {
      return GenerateInitInstanceLocal((::HShowerCopy*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerCopy*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHitSim_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHitSim(void *p = 0);
   static void *newArray_HShowerHitSim(Long_t size, void *p);
   static void delete_HShowerHitSim(void *p);
   static void deleteArray_HShowerHitSim(void *p);
   static void destruct_HShowerHitSim(void *p);
   static void streamer_HShowerHitSim(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHitSim*)
   {
      ::HShowerHitSim *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHitSim >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHitSim", ::HShowerHitSim::Class_Version(), "././hshowerhitsim.h", 9,
                  typeid(::HShowerHitSim), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHitSim::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHitSim) );
      instance.SetNew(&new_HShowerHitSim);
      instance.SetNewArray(&newArray_HShowerHitSim);
      instance.SetDelete(&delete_HShowerHitSim);
      instance.SetDeleteArray(&deleteArray_HShowerHitSim);
      instance.SetDestructor(&destruct_HShowerHitSim);
      instance.SetStreamerFunc(&streamer_HShowerHitSim);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHitSim*)
   {
      return GenerateInitInstanceLocal((::HShowerHitSim*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHitSim*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerPIDTrack_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerPIDTrack(void *p = 0);
   static void *newArray_HShowerPIDTrack(Long_t size, void *p);
   static void delete_HShowerPIDTrack(void *p);
   static void deleteArray_HShowerPIDTrack(void *p);
   static void destruct_HShowerPIDTrack(void *p);
   static void streamer_HShowerPIDTrack(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerPIDTrack*)
   {
      ::HShowerPIDTrack *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerPIDTrack >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerPIDTrack", ::HShowerPIDTrack::Class_Version(), "././hshowerpidtrack.h", 8,
                  typeid(::HShowerPIDTrack), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerPIDTrack::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerPIDTrack) );
      instance.SetNew(&new_HShowerPIDTrack);
      instance.SetNewArray(&newArray_HShowerPIDTrack);
      instance.SetDelete(&delete_HShowerPIDTrack);
      instance.SetDeleteArray(&deleteArray_HShowerPIDTrack);
      instance.SetDestructor(&destruct_HShowerPIDTrack);
      instance.SetStreamerFunc(&streamer_HShowerPIDTrack);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerPIDTrack*)
   {
      return GenerateInitInstanceLocal((::HShowerPIDTrack*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerPIDTrack*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerHitTrackMatcher_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerHitTrackMatcher(void *p = 0);
   static void *newArray_HShowerHitTrackMatcher(Long_t size, void *p);
   static void delete_HShowerHitTrackMatcher(void *p);
   static void deleteArray_HShowerHitTrackMatcher(void *p);
   static void destruct_HShowerHitTrackMatcher(void *p);
   static void streamer_HShowerHitTrackMatcher(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerHitTrackMatcher*)
   {
      ::HShowerHitTrackMatcher *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerHitTrackMatcher >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerHitTrackMatcher", ::HShowerHitTrackMatcher::Class_Version(), "././hshowerhittrackmatcher.h", 14,
                  typeid(::HShowerHitTrackMatcher), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerHitTrackMatcher::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerHitTrackMatcher) );
      instance.SetNew(&new_HShowerHitTrackMatcher);
      instance.SetNewArray(&newArray_HShowerHitTrackMatcher);
      instance.SetDelete(&delete_HShowerHitTrackMatcher);
      instance.SetDeleteArray(&deleteArray_HShowerHitTrackMatcher);
      instance.SetDestructor(&destruct_HShowerHitTrackMatcher);
      instance.SetStreamerFunc(&streamer_HShowerHitTrackMatcher);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerHitTrackMatcher*)
   {
      return GenerateInitInstanceLocal((::HShowerHitTrackMatcher*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerHitTrackMatcher*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerPIDTrackMatcher_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerPIDTrackMatcher(void *p = 0);
   static void *newArray_HShowerPIDTrackMatcher(Long_t size, void *p);
   static void delete_HShowerPIDTrackMatcher(void *p);
   static void deleteArray_HShowerPIDTrackMatcher(void *p);
   static void destruct_HShowerPIDTrackMatcher(void *p);
   static void streamer_HShowerPIDTrackMatcher(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerPIDTrackMatcher*)
   {
      ::HShowerPIDTrackMatcher *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerPIDTrackMatcher >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerPIDTrackMatcher", ::HShowerPIDTrackMatcher::Class_Version(), "././hshowerpidtrackmatcher.h", 14,
                  typeid(::HShowerPIDTrackMatcher), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerPIDTrackMatcher::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerPIDTrackMatcher) );
      instance.SetNew(&new_HShowerPIDTrackMatcher);
      instance.SetNewArray(&newArray_HShowerPIDTrackMatcher);
      instance.SetDelete(&delete_HShowerPIDTrackMatcher);
      instance.SetDeleteArray(&deleteArray_HShowerPIDTrackMatcher);
      instance.SetDestructor(&destruct_HShowerPIDTrackMatcher);
      instance.SetStreamerFunc(&streamer_HShowerPIDTrackMatcher);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerPIDTrackMatcher*)
   {
      return GenerateInitInstanceLocal((::HShowerPIDTrackMatcher*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerPIDTrackMatcher*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

namespace ROOTDict {
   void HShowerParticleIdentifier_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_HShowerParticleIdentifier(void *p = 0);
   static void *newArray_HShowerParticleIdentifier(Long_t size, void *p);
   static void delete_HShowerParticleIdentifier(void *p);
   static void deleteArray_HShowerParticleIdentifier(void *p);
   static void destruct_HShowerParticleIdentifier(void *p);
   static void streamer_HShowerParticleIdentifier(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static ROOT::TGenericClassInfo *GenerateInitInstanceLocal(const ::HShowerParticleIdentifier*)
   {
      ::HShowerParticleIdentifier *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::HShowerParticleIdentifier >(0);
      static ::ROOT::TGenericClassInfo 
         instance("HShowerParticleIdentifier", ::HShowerParticleIdentifier::Class_Version(), "././hshowerparticleidentifier.h", 14,
                  typeid(::HShowerParticleIdentifier), ::ROOT::DefineBehavior(ptr, ptr),
                  &::HShowerParticleIdentifier::Dictionary, isa_proxy, 0,
                  sizeof(::HShowerParticleIdentifier) );
      instance.SetNew(&new_HShowerParticleIdentifier);
      instance.SetNewArray(&newArray_HShowerParticleIdentifier);
      instance.SetDelete(&delete_HShowerParticleIdentifier);
      instance.SetDeleteArray(&deleteArray_HShowerParticleIdentifier);
      instance.SetDestructor(&destruct_HShowerParticleIdentifier);
      instance.SetStreamerFunc(&streamer_HShowerParticleIdentifier);
      return &instance;
   }
   ROOT::TGenericClassInfo *GenerateInitInstance(const ::HShowerParticleIdentifier*)
   {
      return GenerateInitInstanceLocal((::HShowerParticleIdentifier*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::HShowerParticleIdentifier*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOTDict

//______________________________________________________________________________
atomic_TClass_ptr HShowerCal::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCal::Class_Name()
{
   return "HShowerCal";
}

//______________________________________________________________________________
const char *HShowerCal::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCal*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCal::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCal*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCal::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCal*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCal::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCal*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerCalParCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCalParCell::Class_Name()
{
   return "HShowerCalParCell";
}

//______________________________________________________________________________
const char *HShowerCalParCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCalParCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCalParCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCalParCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerCalPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCalPar::Class_Name()
{
   return "HShowerCalPar";
}

//______________________________________________________________________________
const char *HShowerCalPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCalPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCalPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCalPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerRaw::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerRaw::Class_Name()
{
   return "HShowerRaw";
}

//______________________________________________________________________________
const char *HShowerRaw::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRaw*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerRaw::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRaw*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerRaw::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRaw*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerRaw::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRaw*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerRawMatr::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerRawMatr::Class_Name()
{
   return "HShowerRawMatr";
}

//______________________________________________________________________________
const char *HShowerRawMatr::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawMatr*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerRawMatr::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawMatr*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerRawMatr::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawMatr*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerRawMatr::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawMatr*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerCalibrater::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCalibrater::Class_Name()
{
   return "HShowerCalibrater";
}

//______________________________________________________________________________
const char *HShowerCalibrater::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalibrater*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCalibrater::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalibrater*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCalibrater::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalibrater*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCalibrater::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalibrater*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerRawHist::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerRawHist::Class_Name()
{
   return "HShowerRawHist";
}

//______________________________________________________________________________
const char *HShowerRawHist::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawHist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerRawHist::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawHist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerRawHist::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawHist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerRawHist::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerRawHist*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerUnpacker::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerUnpacker::Class_Name()
{
   return "HShowerUnpacker";
}

//______________________________________________________________________________
const char *HShowerUnpacker::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerUnpacker*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerUnpacker::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerUnpacker*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerUnpacker::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerUnpacker*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerUnpacker::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerUnpacker*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerGeantReader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerGeantReader::Class_Name()
{
   return "HShowerGeantReader";
}

//______________________________________________________________________________
const char *HShowerGeantReader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantReader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerGeantReader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantReader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerGeantReader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantReader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerGeantReader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantReader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerGeantWire::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerGeantWire::Class_Name()
{
   return "HShowerGeantWire";
}

//______________________________________________________________________________
const char *HShowerGeantWire::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantWire*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerGeantWire::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantWire*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerGeantWire::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantWire*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerGeantWire::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeantWire*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerFrameCorner::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerFrameCorner::Class_Name()
{
   return "HShowerFrameCorner";
}

//______________________________________________________________________________
const char *HShowerFrameCorner::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrameCorner*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerFrameCorner::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrameCorner*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerFrameCorner::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrameCorner*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerFrameCorner::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrameCorner*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerFrame::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerFrame::Class_Name()
{
   return "HShowerFrame";
}

//______________________________________________________________________________
const char *HShowerFrame::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrame*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerFrame::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrame*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerFrame::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrame*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerFrame::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerFrame*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerWireTab::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerWireTab::Class_Name()
{
   return "HShowerWireTab";
}

//______________________________________________________________________________
const char *HShowerWireTab::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerWireTab*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerWireTab::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerWireTab*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerWireTab::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerWireTab*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerWireTab::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerWireTab*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerPad::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerPad::Class_Name()
{
   return "HShowerPad";
}

//______________________________________________________________________________
const char *HShowerPad::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPad*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerPad::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPad*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerPad::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPad*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerPad::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPad*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerPadTab::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerPadTab::Class_Name()
{
   return "HShowerPadTab";
}

//______________________________________________________________________________
const char *HShowerPadTab::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadTab*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerPadTab::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadTab*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerPadTab::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadTab*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerPadTab::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadTab*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerDigiPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerDigiPar::Class_Name()
{
   return "HShowerDigiPar";
}

//______________________________________________________________________________
const char *HShowerDigiPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigiPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerDigiPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigiPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerDigiPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigiPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerDigiPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigiPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerGeometry::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerGeometry::Class_Name()
{
   return "HShowerGeometry";
}

//______________________________________________________________________________
const char *HShowerGeometry::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeometry*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerGeometry::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeometry*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerGeometry::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeometry*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerGeometry::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeometry*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerDigitizer::Class_Name()
{
   return "HShowerDigitizer";
}

//______________________________________________________________________________
const char *HShowerDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHitDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHitDigitizer::Class_Name()
{
   return "HShowerHitDigitizer";
}

//______________________________________________________________________________
const char *HShowerHitDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHitDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHitDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHitDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerPadDigitizer::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerPadDigitizer::Class_Name()
{
   return "HShowerPadDigitizer";
}

//______________________________________________________________________________
const char *HShowerPadDigitizer::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadDigitizer*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerPadDigitizer::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadDigitizer*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerPadDigitizer::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadDigitizer*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerPadDigitizer::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPadDigitizer*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHit::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHit::Class_Name()
{
   return "HShowerHit";
}

//______________________________________________________________________________
const char *HShowerHit::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHit*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHit::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHit*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHit::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHit*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHit::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHit*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerPID::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerPID::Class_Name()
{
   return "HShowerPID";
}

//______________________________________________________________________________
const char *HShowerPID::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPID*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerPID::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPID*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerPID::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPID*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerPID::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPID*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHitHeader::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHitHeader::Class_Name()
{
   return "HShowerHitHeader";
}

//______________________________________________________________________________
const char *HShowerHitHeader::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHeader*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHitHeader::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHeader*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHitHeader::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHeader*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHitHeader::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHeader*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerCriterium::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCriterium::Class_Name()
{
   return "HShowerCriterium";
}

//______________________________________________________________________________
const char *HShowerCriterium::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCriterium*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCriterium::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCriterium*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCriterium::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCriterium*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCriterium::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCriterium*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHitFPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHitFPar::Class_Name()
{
   return "HShowerHitFPar";
}

//______________________________________________________________________________
const char *HShowerHitFPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHitFPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHitFPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHitFPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHitFinder::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHitFinder::Class_Name()
{
   return "HShowerHitFinder";
}

//______________________________________________________________________________
const char *HShowerHitFinder::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFinder*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHitFinder::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFinder*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHitFinder::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFinder*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHitFinder::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitFinder*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerDetector::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerDetector::Class_Name()
{
   return "HShowerDetector";
}

//______________________________________________________________________________
const char *HShowerDetector::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDetector*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerDetector::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDetector*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerDetector::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDetector*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerDetector::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerDetector*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerGeomPar::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerGeomPar::Class_Name()
{
   return "HShowerGeomPar";
}

//______________________________________________________________________________
const char *HShowerGeomPar::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeomPar*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerGeomPar::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeomPar*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerGeomPar::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeomPar*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerGeomPar::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerGeomPar*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HGeomVector2::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HGeomVector2::Class_Name()
{
   return "HGeomVector2";
}

//______________________________________________________________________________
const char *HGeomVector2::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector2*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HGeomVector2::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector2*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HGeomVector2::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector2*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HGeomVector2::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HGeomVector2*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerContFact::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerContFact::Class_Name()
{
   return "HShowerContFact";
}

//______________________________________________________________________________
const char *HShowerContFact::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerContFact*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerContFact::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerContFact*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerContFact::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerContFact*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerContFact::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerContFact*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerParAsciiFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerParAsciiFileIo::Class_Name()
{
   return "HShowerParAsciiFileIo";
}

//______________________________________________________________________________
const char *HShowerParAsciiFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParAsciiFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerParAsciiFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParAsciiFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerParAsciiFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParAsciiFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerParAsciiFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParAsciiFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerParRootFileIo::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerParRootFileIo::Class_Name()
{
   return "HShowerParRootFileIo";
}

//______________________________________________________________________________
const char *HShowerParRootFileIo::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParRootFileIo*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerParRootFileIo::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParRootFileIo*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerParRootFileIo::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParRootFileIo*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerParRootFileIo::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParRootFileIo*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerTrack::Class_Name()
{
   return "HShowerTrack";
}

//______________________________________________________________________________
const char *HShowerTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerTaskSet::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerTaskSet::Class_Name()
{
   return "HShowerTaskSet";
}

//______________________________________________________________________________
const char *HShowerTaskSet::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTaskSet*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerTaskSet::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTaskSet*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerTaskSet::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTaskSet*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerTaskSet::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerTaskSet*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHistCell::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHistCell::Class_Name()
{
   return "HShowerHistCell";
}

//______________________________________________________________________________
const char *HShowerHistCell::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHistCell*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHistCell::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHistCell*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHistCell::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHistCell*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHistCell::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHistCell*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHist::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHist::Class_Name()
{
   return "HShowerHist";
}

//______________________________________________________________________________
const char *HShowerHist::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHist::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHist::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHist::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHist*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerCalParCalculator::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCalParCalculator::Class_Name()
{
   return "HShowerCalParCalculator";
}

//______________________________________________________________________________
const char *HShowerCalParCalculator::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCalculator*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCalParCalculator::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCalculator*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCalParCalculator::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCalculator*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCalParCalculator::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalParCalculator*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerCalHist::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCalHist::Class_Name()
{
   return "HShowerCalHist";
}

//______________________________________________________________________________
const char *HShowerCalHist::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalHist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCalHist::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalHist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCalHist::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalHist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCalHist::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCalHist*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHitHist::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHitHist::Class_Name()
{
   return "HShowerHitHist";
}

//______________________________________________________________________________
const char *HShowerHitHist::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHist*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHitHist::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHist*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHitHist::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHist*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHitHist::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitHist*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerCopy::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerCopy::Class_Name()
{
   return "HShowerCopy";
}

//______________________________________________________________________________
const char *HShowerCopy::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCopy*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerCopy::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCopy*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerCopy::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCopy*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerCopy::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerCopy*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHitSim::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHitSim::Class_Name()
{
   return "HShowerHitSim";
}

//______________________________________________________________________________
const char *HShowerHitSim::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitSim*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHitSim::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitSim*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHitSim::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitSim*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHitSim::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitSim*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerPIDTrack::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerPIDTrack::Class_Name()
{
   return "HShowerPIDTrack";
}

//______________________________________________________________________________
const char *HShowerPIDTrack::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrack*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerPIDTrack::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrack*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerPIDTrack::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrack*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerPIDTrack::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrack*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerHitTrackMatcher::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerHitTrackMatcher::Class_Name()
{
   return "HShowerHitTrackMatcher";
}

//______________________________________________________________________________
const char *HShowerHitTrackMatcher::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitTrackMatcher*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerHitTrackMatcher::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitTrackMatcher*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerHitTrackMatcher::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitTrackMatcher*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerHitTrackMatcher::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerHitTrackMatcher*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerPIDTrackMatcher::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerPIDTrackMatcher::Class_Name()
{
   return "HShowerPIDTrackMatcher";
}

//______________________________________________________________________________
const char *HShowerPIDTrackMatcher::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrackMatcher*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerPIDTrackMatcher::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrackMatcher*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerPIDTrackMatcher::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrackMatcher*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerPIDTrackMatcher::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerPIDTrackMatcher*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
atomic_TClass_ptr HShowerParticleIdentifier::fgIsA(0);  // static to hold class pointer

//______________________________________________________________________________
const char *HShowerParticleIdentifier::Class_Name()
{
   return "HShowerParticleIdentifier";
}

//______________________________________________________________________________
const char *HShowerParticleIdentifier::ImplFileName()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParticleIdentifier*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int HShowerParticleIdentifier::ImplFileLine()
{
   return ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParticleIdentifier*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void HShowerParticleIdentifier::Dictionary()
{
   fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParticleIdentifier*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *HShowerParticleIdentifier::Class()
{
   if (!fgIsA) { R__LOCKGUARD2(gCINTMutex); if(!fgIsA) {fgIsA = ::ROOTDict::GenerateInitInstanceLocal((const ::HShowerParticleIdentifier*)0x0)->GetClass();} }
   return fgIsA;
}

//______________________________________________________________________________
void HShowerDetector::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerDetector.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetector::Streamer(R__b);
      R__b >> maxRows;
      R__b >> maxColumns;
      R__b.CheckByteCount(R__s, R__c, HShowerDetector::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerDetector::IsA(), kTRUE);
      HDetector::Streamer(R__b);
      R__b << maxRows;
      R__b << maxColumns;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerDetector::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerDetector.
      TClass *R__cl = ::HShowerDetector::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxRows", &maxRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "maxColumns", &maxColumns);
      HDetector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerDetector(void *p) {
      return  p ? new(p) ::HShowerDetector : new ::HShowerDetector;
   }
   static void *newArray_HShowerDetector(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerDetector[nElements] : new ::HShowerDetector[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerDetector(void *p) {
      delete ((::HShowerDetector*)p);
   }
   static void deleteArray_HShowerDetector(void *p) {
      delete [] ((::HShowerDetector*)p);
   }
   static void destruct_HShowerDetector(void *p) {
      typedef ::HShowerDetector current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerDetector(TBuffer &buf, void *obj) {
      ((::HShowerDetector*)obj)->::HShowerDetector::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerDetector

//______________________________________________________________________________
void HShowerContFact::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerContFact.

   HContFact::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerContFact::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerContFact.
      TClass *R__cl = ::HShowerContFact::IsA();
      if (R__cl || R__insp.IsA()) { }
      HContFact::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerContFact(void *p) {
      return  p ? new(p) ::HShowerContFact : new ::HShowerContFact;
   }
   static void *newArray_HShowerContFact(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerContFact[nElements] : new ::HShowerContFact[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerContFact(void *p) {
      delete ((::HShowerContFact*)p);
   }
   static void deleteArray_HShowerContFact(void *p) {
      delete [] ((::HShowerContFact*)p);
   }
   static void destruct_HShowerContFact(void *p) {
      typedef ::HShowerContFact current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerContFact(TBuffer &buf, void *obj) {
      ((::HShowerContFact*)obj)->::HShowerContFact::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerContFact

//______________________________________________________________________________
void HShowerParRootFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerParRootFileIo.

   HDetParRootFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerParRootFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerParRootFileIo.
      TClass *R__cl = ::HShowerParRootFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParRootFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HShowerParRootFileIo(void *p) {
      delete ((::HShowerParRootFileIo*)p);
   }
   static void deleteArray_HShowerParRootFileIo(void *p) {
      delete [] ((::HShowerParRootFileIo*)p);
   }
   static void destruct_HShowerParRootFileIo(void *p) {
      typedef ::HShowerParRootFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerParRootFileIo(TBuffer &buf, void *obj) {
      ((::HShowerParRootFileIo*)obj)->::HShowerParRootFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerParRootFileIo

//______________________________________________________________________________
void HShowerParAsciiFileIo::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerParAsciiFileIo.

   HDetParAsciiFileIo::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerParAsciiFileIo::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerParAsciiFileIo.
      TClass *R__cl = ::HShowerParAsciiFileIo::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetParAsciiFileIo::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HShowerParAsciiFileIo(void *p) {
      delete ((::HShowerParAsciiFileIo*)p);
   }
   static void deleteArray_HShowerParAsciiFileIo(void *p) {
      delete [] ((::HShowerParAsciiFileIo*)p);
   }
   static void destruct_HShowerParAsciiFileIo(void *p) {
      typedef ::HShowerParAsciiFileIo current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerParAsciiFileIo(TBuffer &buf, void *obj) {
      ((::HShowerParAsciiFileIo*)obj)->::HShowerParAsciiFileIo::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerParAsciiFileIo

//______________________________________________________________________________
void HShowerRaw::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerRaw.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> m_nEventType;
      R__b >> m_nSector;
      R__b >> m_nModule;
      R__b >> m_nRow;
      R__b >> m_nCol;
      R__b >> evtNr;
      R__b >> m_fCharge;
      R__b.CheckByteCount(R__s, R__c, HShowerRaw::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerRaw::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << m_nEventType;
      R__b << m_nSector;
      R__b << m_nModule;
      R__b << m_nRow;
      R__b << m_nCol;
      R__b << evtNr;
      R__b << m_fCharge;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerRaw::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerRaw.
      TClass *R__cl = ::HShowerRaw::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nEventType", &m_nEventType);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSector", &m_nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModule", &m_nModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nRow", &m_nRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nCol", &m_nCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "evtNr", &evtNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fCharge", &m_fCharge);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerRaw(void *p) {
      return  p ? new(p) ::HShowerRaw : new ::HShowerRaw;
   }
   static void *newArray_HShowerRaw(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerRaw[nElements] : new ::HShowerRaw[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerRaw(void *p) {
      delete ((::HShowerRaw*)p);
   }
   static void deleteArray_HShowerRaw(void *p) {
      delete [] ((::HShowerRaw*)p);
   }
   static void destruct_HShowerRaw(void *p) {
      typedef ::HShowerRaw current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerRaw(TBuffer &buf, void *obj) {
      ((::HShowerRaw*)obj)->::HShowerRaw::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerRaw

//______________________________________________________________________________
void HShowerRawMatr::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerRawMatr.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HShowerRaw::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HShowerRawMatr::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerRawMatr::IsA(), kTRUE);
      HShowerRaw::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerRawMatr::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerRawMatr.
      TClass *R__cl = ::HShowerRawMatr::IsA();
      if (R__cl || R__insp.IsA()) { }
      HShowerRaw::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerRawMatr(void *p) {
      return  p ? new(p) ::HShowerRawMatr : new ::HShowerRawMatr;
   }
   static void *newArray_HShowerRawMatr(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerRawMatr[nElements] : new ::HShowerRawMatr[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerRawMatr(void *p) {
      delete ((::HShowerRawMatr*)p);
   }
   static void deleteArray_HShowerRawMatr(void *p) {
      delete [] ((::HShowerRawMatr*)p);
   }
   static void destruct_HShowerRawMatr(void *p) {
      typedef ::HShowerRawMatr current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerRawMatr(TBuffer &buf, void *obj) {
      ((::HShowerRawMatr*)obj)->::HShowerRawMatr::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerRawMatr

//______________________________________________________________________________
void HShowerCal::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCal.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HLocatedDataObject::Streamer(R__b);
      R__b >> m_nSector;
      R__b >> m_nModule;
      R__b >> m_nRow;
      R__b >> m_nCol;
      R__b >> m_fCharge;
      R__b.CheckByteCount(R__s, R__c, HShowerCal::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerCal::IsA(), kTRUE);
      HLocatedDataObject::Streamer(R__b);
      R__b << m_nSector;
      R__b << m_nModule;
      R__b << m_nRow;
      R__b << m_nCol;
      R__b << m_fCharge;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerCal::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCal.
      TClass *R__cl = ::HShowerCal::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSector", &m_nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModule", &m_nModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nRow", &m_nRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nCol", &m_nCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fCharge", &m_fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nIsLocalMax", &m_nIsLocalMax);
      HLocatedDataObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerCal(void *p) {
      return  p ? new(p) ::HShowerCal : new ::HShowerCal;
   }
   static void *newArray_HShowerCal(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerCal[nElements] : new ::HShowerCal[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerCal(void *p) {
      delete ((::HShowerCal*)p);
   }
   static void deleteArray_HShowerCal(void *p) {
      delete [] ((::HShowerCal*)p);
   }
   static void destruct_HShowerCal(void *p) {
      typedef ::HShowerCal current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCal(TBuffer &buf, void *obj) {
      ((::HShowerCal*)obj)->::HShowerCal::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCal

//______________________________________________________________________________
void HShowerCalPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCalPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> m_nSectors;
      R__b >> m_nModules;
      R__b >> m_nRows;
      R__b >> m_nColumns;
      R__b.ReadStaticArray((char*)m_szClassName);
      m_ParamsTable.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HShowerCalPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerCalPar::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << m_nSectors;
      R__b << m_nModules;
      R__b << m_nRows;
      R__b << m_nColumns;
      R__b.WriteArray(m_szClassName, 40);
      m_ParamsTable.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerCalPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCalPar.
      TClass *R__cl = ::HShowerCalPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSectors", &m_nSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModules", &m_nModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nRows", &m_nRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nColumns", &m_nColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_szClassName[40]", m_szClassName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_ParamsTable", &m_ParamsTable);
      R__insp.InspectMember(m_ParamsTable, "m_ParamsTable.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_loc", &m_loc);
      R__insp.InspectMember(m_loc, "m_loc.");
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerCalPar(void *p) {
      return  p ? new(p) ::HShowerCalPar : new ::HShowerCalPar;
   }
   static void *newArray_HShowerCalPar(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerCalPar[nElements] : new ::HShowerCalPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerCalPar(void *p) {
      delete ((::HShowerCalPar*)p);
   }
   static void deleteArray_HShowerCalPar(void *p) {
      delete [] ((::HShowerCalPar*)p);
   }
   static void destruct_HShowerCalPar(void *p) {
      typedef ::HShowerCalPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCalPar(TBuffer &buf, void *obj) {
      ((::HShowerCalPar*)obj)->::HShowerCalPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCalPar

//______________________________________________________________________________
void HShowerCalParCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCalParCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_fOffset;
      R__b >> m_fSlope;
      R__b >> m_fThreshold;
      R__b >> m_fGain;
      R__b.CheckByteCount(R__s, R__c, HShowerCalParCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerCalParCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_fOffset;
      R__b << m_fSlope;
      R__b << m_fThreshold;
      R__b << m_fGain;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerCalParCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCalParCell.
      TClass *R__cl = ::HShowerCalParCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fOffset", &m_fOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSlope", &m_fSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fThreshold", &m_fThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fGain", &m_fGain);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerCalParCell(void *p) {
      return  p ? new(p) ::HShowerCalParCell : new ::HShowerCalParCell;
   }
   static void *newArray_HShowerCalParCell(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerCalParCell[nElements] : new ::HShowerCalParCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerCalParCell(void *p) {
      delete ((::HShowerCalParCell*)p);
   }
   static void deleteArray_HShowerCalParCell(void *p) {
      delete [] ((::HShowerCalParCell*)p);
   }
   static void destruct_HShowerCalParCell(void *p) {
      typedef ::HShowerCalParCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCalParCell(TBuffer &buf, void *obj) {
      ((::HShowerCalParCell*)obj)->::HShowerCalParCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCalParCell

//______________________________________________________________________________
void HShowerHist::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHist.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParSet::Streamer(R__b);
      R__b >> m_nSectors;
      R__b >> m_nModules;
      R__b >> m_nRows;
      R__b >> m_nColumns;
      R__b >> m_fChannel10pC;
      R__b.ReadStaticArray((char*)m_szClassName);
      m_ParamsTable.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HShowerHist::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerHist::IsA(), kTRUE);
      HParSet::Streamer(R__b);
      R__b << m_nSectors;
      R__b << m_nModules;
      R__b << m_nRows;
      R__b << m_nColumns;
      R__b << m_fChannel10pC;
      R__b.WriteArray(m_szClassName, 40);
      m_ParamsTable.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerHist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHist.
      TClass *R__cl = ::HShowerHist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSectors", &m_nSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModules", &m_nModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nRows", &m_nRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nColumns", &m_nColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fChannel10pC", &m_fChannel10pC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_szClassName[40]", m_szClassName);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_ParamsTable", &m_ParamsTable);
      R__insp.InspectMember(m_ParamsTable, "m_ParamsTable.");
      HParSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHist(void *p) {
      return  p ? new(p) ::HShowerHist : new ::HShowerHist;
   }
   static void *newArray_HShowerHist(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHist[nElements] : new ::HShowerHist[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHist(void *p) {
      delete ((::HShowerHist*)p);
   }
   static void deleteArray_HShowerHist(void *p) {
      delete [] ((::HShowerHist*)p);
   }
   static void destruct_HShowerHist(void *p) {
      typedef ::HShowerHist current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHist(TBuffer &buf, void *obj) {
      ((::HShowerHist*)obj)->::HShowerHist::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHist

//______________________________________________________________________________
void HShowerHistCell::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHistCell.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_nSector;
      R__b >> m_nModule;
      R__b >> m_nRows;
      R__b >> m_nCols;
      R__b >> m_fChannel10pC;
      R__b.CheckByteCount(R__s, R__c, HShowerHistCell::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerHistCell::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_nSector;
      R__b << m_nModule;
      R__b << m_nRows;
      R__b << m_nCols;
      R__b << m_fChannel10pC;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerHistCell::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHistCell.
      TClass *R__cl = ::HShowerHistCell::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHist", &m_pHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pSlopeHist", &m_pSlopeHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pOffsetHist", &m_pOffsetHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSector", &m_nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModule", &m_nModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nRows", &m_nRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nCols", &m_nCols);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nDataSize", &m_nDataSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pData", &m_pData);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iEvents", &m_iEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fChannel10pC", &m_fChannel10pC);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pGeom", &m_pGeom);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHistCell(void *p) {
      return  p ? new(p) ::HShowerHistCell : new ::HShowerHistCell;
   }
   static void *newArray_HShowerHistCell(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHistCell[nElements] : new ::HShowerHistCell[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHistCell(void *p) {
      delete ((::HShowerHistCell*)p);
   }
   static void deleteArray_HShowerHistCell(void *p) {
      delete [] ((::HShowerHistCell*)p);
   }
   static void destruct_HShowerHistCell(void *p) {
      typedef ::HShowerHistCell current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHistCell(TBuffer &buf, void *obj) {
      ((::HShowerHistCell*)obj)->::HShowerHistCell::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHistCell

//______________________________________________________________________________
void HShowerHit::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHit.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_fX;
      R__b >> m_fY;
      R__b >> m_fSigmaX;
      R__b >> m_fSigmaY;
      R__b >> m_fLabX;
      R__b >> m_fLabY;
      R__b >> m_fLabZ;
      R__b >> m_fRad;
      R__b >> m_fPhi;
      R__b >> m_fTheta;
      R__b >> m_fSum0;
      R__b >> m_fSum1;
      R__b >> m_fSum2;
      R__b >> m_fSum2_25;
      R__b >> m_fSum2_N;
      R__b >> m_fVar0;
      R__b >> m_fVar1;
      R__b >> m_fVar2;
      R__b >> m_fLocalMax;
      R__b >> m_fSumDiff01;
      R__b >> m_fSumDiff02;
      R__b >> m_fSumDiff12;
      R__b >> m_fShower;
      R__b >> m_nClusterSize0;
      R__b >> m_nClusterSize1;
      R__b >> m_nClusterSize2;
      R__b >> m_nSector;
      R__b >> m_nModule;
      R__b >> m_nRow;
      R__b >> m_nCol;
      R__b >> m_fCharge;
      R__b >> m_nAddress;
      R__b.CheckByteCount(R__s, R__c, HShowerHit::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerHit::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_fX;
      R__b << m_fY;
      R__b << m_fSigmaX;
      R__b << m_fSigmaY;
      R__b << m_fLabX;
      R__b << m_fLabY;
      R__b << m_fLabZ;
      R__b << m_fRad;
      R__b << m_fPhi;
      R__b << m_fTheta;
      R__b << m_fSum0;
      R__b << m_fSum1;
      R__b << m_fSum2;
      R__b << m_fSum2_25;
      R__b << m_fSum2_N;
      R__b << m_fVar0;
      R__b << m_fVar1;
      R__b << m_fVar2;
      R__b << m_fLocalMax;
      R__b << m_fSumDiff01;
      R__b << m_fSumDiff02;
      R__b << m_fSumDiff12;
      R__b << m_fShower;
      R__b << m_nClusterSize0;
      R__b << m_nClusterSize1;
      R__b << m_nClusterSize2;
      R__b << m_nSector;
      R__b << m_nModule;
      R__b << m_nRow;
      R__b << m_nCol;
      R__b << m_fCharge;
      R__b << m_nAddress;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerHit::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHit.
      TClass *R__cl = ::HShowerHit::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fX", &m_fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fY", &m_fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSigmaX", &m_fSigmaX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSigmaY", &m_fSigmaY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fLabX", &m_fLabX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fLabY", &m_fLabY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fLabZ", &m_fLabZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fRad", &m_fRad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fPhi", &m_fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fTheta", &m_fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSum0", &m_fSum0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSum1", &m_fSum1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSum2", &m_fSum2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSum2_25", &m_fSum2_25);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSum2_N", &m_fSum2_N);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fVar0", &m_fVar0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fVar1", &m_fVar1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fVar2", &m_fVar2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fLocalMax", &m_fLocalMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSumDiff01", &m_fSumDiff01);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSumDiff02", &m_fSumDiff02);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fSumDiff12", &m_fSumDiff12);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fShower", &m_fShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nClusterSize0", &m_nClusterSize0);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nClusterSize1", &m_nClusterSize1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nClusterSize2", &m_nClusterSize2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSector", &m_nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModule", &m_nModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nRow", &m_nRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nCol", &m_nCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fCharge", &m_fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nAddress", &m_nAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHit(void *p) {
      return  p ? new(p) ::HShowerHit : new ::HShowerHit;
   }
   static void *newArray_HShowerHit(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHit[nElements] : new ::HShowerHit[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHit(void *p) {
      delete ((::HShowerHit*)p);
   }
   static void deleteArray_HShowerHit(void *p) {
      delete [] ((::HShowerHit*)p);
   }
   static void destruct_HShowerHit(void *p) {
      typedef ::HShowerHit current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHit(TBuffer &buf, void *obj) {
      ((::HShowerHit*)obj)->::HShowerHit::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHit

//______________________________________________________________________________
void HShowerPID::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerPID.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_fX;
      R__b >> m_fY;
      R__b >> m_fZ;
      R__b >> m_fRad;
      R__b >> m_fPhi;
      R__b >> m_fTheta;
      R__b >> m_fShower;
      R__b >> m_nSector;
      R__b >> m_nModule;
      R__b >> m_nRow;
      R__b >> m_nCol;
      R__b >> m_fCharge;
      R__b >> m_nAddress;
      R__b.CheckByteCount(R__s, R__c, HShowerPID::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerPID::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_fX;
      R__b << m_fY;
      R__b << m_fZ;
      R__b << m_fRad;
      R__b << m_fPhi;
      R__b << m_fTheta;
      R__b << m_fShower;
      R__b << m_nSector;
      R__b << m_nModule;
      R__b << m_nRow;
      R__b << m_nCol;
      R__b << m_fCharge;
      R__b << m_nAddress;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerPID::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerPID.
      TClass *R__cl = ::HShowerPID::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fX", &m_fX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fY", &m_fY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fZ", &m_fZ);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fRad", &m_fRad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fPhi", &m_fPhi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fTheta", &m_fTheta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fShower", &m_fShower);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSector", &m_nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModule", &m_nModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nRow", &m_nRow);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nCol", &m_nCol);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fCharge", &m_fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nAddress", &m_nAddress);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerPID(void *p) {
      return  p ? new(p) ::HShowerPID : new ::HShowerPID;
   }
   static void *newArray_HShowerPID(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerPID[nElements] : new ::HShowerPID[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerPID(void *p) {
      delete ((::HShowerPID*)p);
   }
   static void deleteArray_HShowerPID(void *p) {
      delete [] ((::HShowerPID*)p);
   }
   static void destruct_HShowerPID(void *p) {
      typedef ::HShowerPID current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerPID(TBuffer &buf, void *obj) {
      ((::HShowerPID*)obj)->::HShowerPID::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerPID

//______________________________________________________________________________
void HShowerTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerTrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_nAddress;
      R__b >> m_nTrack;
      R__b.CheckByteCount(R__s, R__c, HShowerTrack::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerTrack::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_nAddress;
      R__b << m_nTrack;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerTrack.
      TClass *R__cl = ::HShowerTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nAddress", &m_nAddress);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nTrack", &m_nTrack);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerTrack(void *p) {
      return  p ? new(p) ::HShowerTrack : new ::HShowerTrack;
   }
   static void *newArray_HShowerTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerTrack[nElements] : new ::HShowerTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerTrack(void *p) {
      delete ((::HShowerTrack*)p);
   }
   static void deleteArray_HShowerTrack(void *p) {
      delete [] ((::HShowerTrack*)p);
   }
   static void destruct_HShowerTrack(void *p) {
      typedef ::HShowerTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerTrack(TBuffer &buf, void *obj) {
      ((::HShowerTrack*)obj)->::HShowerTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerTrack

//______________________________________________________________________________
void HShowerHitHeader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHitHeader.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_nFiredCells;
      R__b >> m_nLocalMax;
      R__b >> m_nClusters;
      R__b >> m_nSector;
      R__b >> m_nModule;
      R__b.CheckByteCount(R__s, R__c, HShowerHitHeader::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerHitHeader::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_nFiredCells;
      R__b << m_nLocalMax;
      R__b << m_nClusters;
      R__b << m_nSector;
      R__b << m_nModule;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerHitHeader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHitHeader.
      TClass *R__cl = ::HShowerHitHeader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nFiredCells", &m_nFiredCells);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nLocalMax", &m_nLocalMax);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nClusters", &m_nClusters);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSector", &m_nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModule", &m_nModule);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHitHeader(void *p) {
      return  p ? new(p) ::HShowerHitHeader : new ::HShowerHitHeader;
   }
   static void *newArray_HShowerHitHeader(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHitHeader[nElements] : new ::HShowerHitHeader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHitHeader(void *p) {
      delete ((::HShowerHitHeader*)p);
   }
   static void deleteArray_HShowerHitHeader(void *p) {
      delete [] ((::HShowerHitHeader*)p);
   }
   static void destruct_HShowerHitHeader(void *p) {
      typedef ::HShowerHitHeader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHitHeader(TBuffer &buf, void *obj) {
      ((::HShowerHitHeader*)obj)->::HShowerHitHeader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHitHeader

//______________________________________________________________________________
void HShowerHitSim::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHitSim.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HShowerHit::Streamer(R__b);
      R__b >> nTrack;
      R__b.ReadStaticArray((int*)nTracks);
      R__b.CheckByteCount(R__s, R__c, HShowerHitSim::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerHitSim::IsA(), kTRUE);
      HShowerHit::Streamer(R__b);
      R__b << nTrack;
      R__b.WriteArray(nTracks, 8);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerHitSim::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHitSim.
      TClass *R__cl = ::HShowerHitSim::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack", &nTrack);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTracks[8]", nTracks);
      HShowerHit::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHitSim(void *p) {
      return  p ? new(p) ::HShowerHitSim : new ::HShowerHitSim;
   }
   static void *newArray_HShowerHitSim(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHitSim[nElements] : new ::HShowerHitSim[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHitSim(void *p) {
      delete ((::HShowerHitSim*)p);
   }
   static void deleteArray_HShowerHitSim(void *p) {
      delete [] ((::HShowerHitSim*)p);
   }
   static void destruct_HShowerHitSim(void *p) {
      typedef ::HShowerHitSim current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHitSim(TBuffer &buf, void *obj) {
      ((::HShowerHitSim*)obj)->::HShowerHitSim::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHitSim

//______________________________________________________________________________
void HShowerPIDTrack::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerPIDTrack.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HShowerPID::Streamer(R__b);
      R__b >> nTrack;
      R__b.CheckByteCount(R__s, R__c, HShowerPIDTrack::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerPIDTrack::IsA(), kTRUE);
      HShowerPID::Streamer(R__b);
      R__b << nTrack;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerPIDTrack::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerPIDTrack.
      TClass *R__cl = ::HShowerPIDTrack::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack", &nTrack);
      HShowerPID::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerPIDTrack(void *p) {
      return  p ? new(p) ::HShowerPIDTrack : new ::HShowerPIDTrack;
   }
   static void *newArray_HShowerPIDTrack(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerPIDTrack[nElements] : new ::HShowerPIDTrack[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerPIDTrack(void *p) {
      delete ((::HShowerPIDTrack*)p);
   }
   static void deleteArray_HShowerPIDTrack(void *p) {
      delete [] ((::HShowerPIDTrack*)p);
   }
   static void destruct_HShowerPIDTrack(void *p) {
      typedef ::HShowerPIDTrack current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerPIDTrack(TBuffer &buf, void *obj) {
      ((::HShowerPIDTrack*)obj)->::HShowerPIDTrack::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerPIDTrack

//______________________________________________________________________________
void HShowerGeantWire::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerGeantWire.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fCharge;
      R__b >> fXWire;
      R__b >> fYWire;
      R__b >> nWireNr;
      R__b >> nModule;
      R__b >> nSector;
      R__b >> nTrack;
      R__b.CheckByteCount(R__s, R__c, HShowerGeantWire::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerGeantWire::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fCharge;
      R__b << fXWire;
      R__b << fYWire;
      R__b << nWireNr;
      R__b << nModule;
      R__b << nSector;
      R__b << nTrack;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerGeantWire::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerGeantWire.
      TClass *R__cl = ::HShowerGeantWire::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fCharge", &fCharge);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXWire", &fXWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYWire", &fYWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWireNr", &nWireNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModule", &nModule);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSector", &nSector);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nTrack", &nTrack);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerGeantWire(void *p) {
      return  p ? new(p) ::HShowerGeantWire : new ::HShowerGeantWire;
   }
   static void *newArray_HShowerGeantWire(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerGeantWire[nElements] : new ::HShowerGeantWire[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerGeantWire(void *p) {
      delete ((::HShowerGeantWire*)p);
   }
   static void deleteArray_HShowerGeantWire(void *p) {
      delete [] ((::HShowerGeantWire*)p);
   }
   static void destruct_HShowerGeantWire(void *p) {
      typedef ::HShowerGeantWire current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerGeantWire(TBuffer &buf, void *obj) {
      ((::HShowerGeantWire*)obj)->::HShowerGeantWire::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerGeantWire

//______________________________________________________________________________
void HShowerDigiPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerDigiPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      gain.Streamer(R__b);
      threshold.Streamer(R__b);
      effScaleMap.Streamer(R__b);
      globalEff.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 18; R__i++)
         chargeVsBeta[0][R__i].Streamer(R__b);
      R__b >> fThickDet;
      R__b >> nMatrixRange;
      R__b >> fBoxSize;
      R__b >> fChargeSlope;
      R__b >> fPlaneDist;
      R__b >> fPadThreshold;
      R__b >> fUpdatePadThreshold;
      R__b.CheckByteCount(R__s, R__c, HShowerDigiPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerDigiPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      gain.Streamer(R__b);
      threshold.Streamer(R__b);
      effScaleMap.Streamer(R__b);
      globalEff.Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 18; R__i++)
         chargeVsBeta[0][R__i].Streamer(R__b);
      R__b << fThickDet;
      R__b << nMatrixRange;
      R__b << fBoxSize;
      R__b << fChargeSlope;
      R__b << fPlaneDist;
      R__b << fPadThreshold;
      R__b << fUpdatePadThreshold;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerDigiPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerDigiPar.
      TClass *R__cl = ::HShowerDigiPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "gain", &gain);
      R__insp.InspectMember(gain, "gain.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "threshold", &threshold);
      R__insp.InspectMember(threshold, "threshold.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "effScaleMap", &effScaleMap);
      R__insp.InspectMember(effScaleMap, "effScaleMap.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "globalEff", &globalEff);
      R__insp.InspectMember(globalEff, "globalEff.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeVsBeta[6][3]", chargeVsBeta);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThickDet", &fThickDet);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nMatrixRange", &nMatrixRange);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fBoxSize", &fBoxSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChargeSlope", &fChargeSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPlaneDist", &fPlaneDist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fPadThreshold", &fPadThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUpdatePadThreshold", &fUpdatePadThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "chargeMatrixSize", &chargeMatrixSize);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pfChargeMatrix", &pfChargeMatrix);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nGlobalEffBins", &nGlobalEffBins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nQvBxbins[6][3]", nQvBxbins);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*phEff", &phEff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*ph2QvB[6][3]", &ph2QvB);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pArrayQvB[6][3]", &pArrayQvB);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerDigiPar(void *p) {
      return  p ? new(p) ::HShowerDigiPar : new ::HShowerDigiPar;
   }
   static void *newArray_HShowerDigiPar(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerDigiPar[nElements] : new ::HShowerDigiPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerDigiPar(void *p) {
      delete ((::HShowerDigiPar*)p);
   }
   static void deleteArray_HShowerDigiPar(void *p) {
      delete [] ((::HShowerDigiPar*)p);
   }
   static void destruct_HShowerDigiPar(void *p) {
      typedef ::HShowerDigiPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerDigiPar(TBuffer &buf, void *obj) {
      ((::HShowerDigiPar*)obj)->::HShowerDigiPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerDigiPar

//______________________________________________________________________________
void HShowerHitFPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHitFPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      pRowBorder.Streamer(R__b);
      pColBorder.Streamer(R__b);
      R__b >> nThreshold;
      R__b >> fGainPost1;
      R__b >> fThresholdPost1;
      R__b >> fGainPost2;
      R__b >> fThresholdPost2;
      R__b.CheckByteCount(R__s, R__c, HShowerHitFPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerHitFPar::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      pRowBorder.Streamer(R__b);
      pColBorder.Streamer(R__b);
      R__b << nThreshold;
      R__b << fGainPost1;
      R__b << fThresholdPost1;
      R__b << fGainPost2;
      R__b << fThresholdPost2;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerHitFPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHitFPar.
      TClass *R__cl = ::HShowerHitFPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSectors", &nSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModules", &nModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pRowBorder", &pRowBorder);
      R__insp.InspectMember(pRowBorder, "pRowBorder.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pColBorder", &pColBorder);
      R__insp.InspectMember(pColBorder, "pColBorder.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nThreshold", &nThreshold);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGainPost1", &fGainPost1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThresholdPost1", &fThresholdPost1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fGainPost2", &fGainPost2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fThresholdPost2", &fThresholdPost2);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHitFPar(void *p) {
      return  p ? new(p) ::HShowerHitFPar : new ::HShowerHitFPar;
   }
   static void *newArray_HShowerHitFPar(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHitFPar[nElements] : new ::HShowerHitFPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHitFPar(void *p) {
      delete ((::HShowerHitFPar*)p);
   }
   static void deleteArray_HShowerHitFPar(void *p) {
      delete [] ((::HShowerHitFPar*)p);
   }
   static void destruct_HShowerHitFPar(void *p) {
      typedef ::HShowerHitFPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHitFPar(TBuffer &buf, void *obj) {
      ((::HShowerHitFPar*)obj)->::HShowerHitFPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHitFPar

//______________________________________________________________________________
void HShowerGeometry::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerGeometry.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HParCond::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         wires[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 3; R__i++)
         pads[R__i].Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HShowerGeometry::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerGeometry::IsA(), kTRUE);
      HParCond::Streamer(R__b);
      int R__i;
      for (R__i = 0; R__i < 3; R__i++)
         wires[R__i].Streamer(R__b);
      for (R__i = 0; R__i < 3; R__i++)
         pads[R__i].Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerGeometry::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerGeometry.
      TClass *R__cl = ::HShowerGeometry::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nSectors", &nSectors);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nModules", &nModules);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nRows", &nRows);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nColumns", &nColumns);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sectorTransform[6]", sectorTransform);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "moduleTransform[18]", moduleTransform);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "frames[3]", frames);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wires[3]", wires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "pads[3]", pads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeomPar", &pGeomPar);
      HParCond::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerGeometry(void *p) {
      return  p ? new(p) ::HShowerGeometry : new ::HShowerGeometry;
   }
   static void *newArray_HShowerGeometry(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerGeometry[nElements] : new ::HShowerGeometry[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerGeometry(void *p) {
      delete ((::HShowerGeometry*)p);
   }
   static void deleteArray_HShowerGeometry(void *p) {
      delete [] ((::HShowerGeometry*)p);
   }
   static void destruct_HShowerGeometry(void *p) {
      typedef ::HShowerGeometry current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerGeometry(TBuffer &buf, void *obj) {
      ((::HShowerGeometry*)obj)->::HShowerGeometry::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerGeometry

//______________________________________________________________________________
void HShowerGeomPar::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerGeomPar.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HDetGeomPar::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HShowerGeomPar::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerGeomPar::IsA(), kTRUE);
      HDetGeomPar::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerGeomPar::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerGeomPar.
      TClass *R__cl = ::HShowerGeomPar::IsA();
      if (R__cl || R__insp.IsA()) { }
      HDetGeomPar::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerGeomPar(void *p) {
      return  p ? new(p) ::HShowerGeomPar : new ::HShowerGeomPar;
   }
   static void *newArray_HShowerGeomPar(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerGeomPar[nElements] : new ::HShowerGeomPar[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerGeomPar(void *p) {
      delete ((::HShowerGeomPar*)p);
   }
   static void deleteArray_HShowerGeomPar(void *p) {
      delete [] ((::HShowerGeomPar*)p);
   }
   static void destruct_HShowerGeomPar(void *p) {
      typedef ::HShowerGeomPar current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerGeomPar(TBuffer &buf, void *obj) {
      ((::HShowerGeomPar*)obj)->::HShowerGeomPar::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerGeomPar

//______________________________________________________________________________
void HShowerDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerDigitizer.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerDigitizer.
      TClass *R__cl = ::HShowerDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "lNrEvent", &lNrEvent);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pInCat", &m_pInCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pOutCat", &m_pOutCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pDigiPar", &pDigiPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*pGeometry", &pGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HShowerDigitizer(void *p) {
      delete ((::HShowerDigitizer*)p);
   }
   static void deleteArray_HShowerDigitizer(void *p) {
      delete [] ((::HShowerDigitizer*)p);
   }
   static void destruct_HShowerDigitizer(void *p) {
      typedef ::HShowerDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerDigitizer(TBuffer &buf, void *obj) {
      ((::HShowerDigitizer*)obj)->::HShowerDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerDigitizer

//______________________________________________________________________________
void HShowerHitDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHitDigitizer.

   HShowerDigitizer::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerHitDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHitDigitizer.
      TClass *R__cl = ::HShowerHitDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fUnit", &fUnit);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "piconst", &piconst);
      HShowerDigitizer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHitDigitizer(void *p) {
      return  p ? new(p) ::HShowerHitDigitizer : new ::HShowerHitDigitizer;
   }
   static void *newArray_HShowerHitDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHitDigitizer[nElements] : new ::HShowerHitDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHitDigitizer(void *p) {
      delete ((::HShowerHitDigitizer*)p);
   }
   static void deleteArray_HShowerHitDigitizer(void *p) {
      delete [] ((::HShowerHitDigitizer*)p);
   }
   static void destruct_HShowerHitDigitizer(void *p) {
      typedef ::HShowerHitDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHitDigitizer(TBuffer &buf, void *obj) {
      ((::HShowerHitDigitizer*)obj)->::HShowerHitDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHitDigitizer

//______________________________________________________________________________
void HShowerPadDigitizer::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerPadDigitizer.

   HShowerDigitizer::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerPadDigitizer::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerPadDigitizer.
      TClass *R__cl = ::HShowerPadDigitizer::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fChannelCoeff", &fChannelCoeff);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pTrackCat", &m_pTrackCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackIter", &fTrackIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShowerCalIter", &fShowerCalIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fShowerRawMatrIter", &fShowerRawMatrIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantKineCat", &fGeantKineCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantShowerCat", &fGeantShowerCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantTofCat", &fGeantTofCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantRpcCat", &fGeantRpcCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isRpc", &isRpc);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "trackMap", (void*)&trackMap);
      R__insp.InspectMember("map<Int_t,std::vector<Int_t> >", (void*)&trackMap, "trackMap.", true);
      HShowerDigitizer::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerPadDigitizer(void *p) {
      return  p ? new(p) ::HShowerPadDigitizer : new ::HShowerPadDigitizer;
   }
   static void *newArray_HShowerPadDigitizer(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerPadDigitizer[nElements] : new ::HShowerPadDigitizer[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerPadDigitizer(void *p) {
      delete ((::HShowerPadDigitizer*)p);
   }
   static void deleteArray_HShowerPadDigitizer(void *p) {
      delete [] ((::HShowerPadDigitizer*)p);
   }
   static void destruct_HShowerPadDigitizer(void *p) {
      typedef ::HShowerPadDigitizer current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerPadDigitizer(TBuffer &buf, void *obj) {
      ((::HShowerPadDigitizer*)obj)->::HShowerPadDigitizer::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerPadDigitizer

//______________________________________________________________________________
void HShowerCalibrater::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCalibrater.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerCalibrater::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCalibrater.
      TClass *R__cl = ::HShowerCalibrater::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_zeroLoc", &m_zeroLoc);
      R__insp.InspectMember(m_zeroLoc, "m_zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_loc", &m_loc);
      R__insp.InspectMember(m_loc, "m_loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pRawCat", &m_pRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCalCat", &m_pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCalPar", &m_pCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerCalibrater(void *p) {
      return  p ? new(p) ::HShowerCalibrater : new ::HShowerCalibrater;
   }
   static void *newArray_HShowerCalibrater(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerCalibrater[nElements] : new ::HShowerCalibrater[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerCalibrater(void *p) {
      delete ((::HShowerCalibrater*)p);
   }
   static void deleteArray_HShowerCalibrater(void *p) {
      delete [] ((::HShowerCalibrater*)p);
   }
   static void destruct_HShowerCalibrater(void *p) {
      typedef ::HShowerCalibrater current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCalibrater(TBuffer &buf, void *obj) {
      ((::HShowerCalibrater*)obj)->::HShowerCalibrater::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCalibrater

//______________________________________________________________________________
void HShowerHitFinder::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHitFinder.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerHitFinder::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHitFinder.
      TClass *R__cl = ::HShowerHitFinder::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_Loc", &m_Loc);
      R__insp.InspectMember(m_Loc, "m_Loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCellArr", &m_pCellArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCalCat", &m_pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitCat", &m_pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pPIDCat", &m_pPIDCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitHdrCat", &m_pHitHdrCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitFPar", &m_pHitFPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pGeometry", &m_pGeometry);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHSpecGeomPar", &m_pHSpecGeomPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bIsFillPID", &m_bIsFillPID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_bIsSort", &m_bIsSort);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCriterium", &m_pCriterium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "isSim", &isSim);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHitFinder(void *p) {
      return  p ? new(p) ::HShowerHitFinder : new ::HShowerHitFinder;
   }
   static void *newArray_HShowerHitFinder(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHitFinder[nElements] : new ::HShowerHitFinder[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHitFinder(void *p) {
      delete ((::HShowerHitFinder*)p);
   }
   static void deleteArray_HShowerHitFinder(void *p) {
      delete [] ((::HShowerHitFinder*)p);
   }
   static void destruct_HShowerHitFinder(void *p) {
      typedef ::HShowerHitFinder current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHitFinder(TBuffer &buf, void *obj) {
      ((::HShowerHitFinder*)obj)->::HShowerHitFinder::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHitFinder

//______________________________________________________________________________
void HShowerCalParCalculator::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCalParCalculator.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerCalParCalculator::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCalParCalculator.
      TClass *R__cl = ::HShowerCalParCalculator::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nExecutes", &m_nExecutes);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nPeaksNumber", &m_nPeaksNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_iMethod", &m_iMethod);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fParam1", &m_fParam1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_fParam2", &m_fParam2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_zeroLoc", &m_zeroLoc);
      R__insp.InspectMember(m_zeroLoc, "m_zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_loc", &m_loc);
      R__insp.InspectMember(m_loc, "m_loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pRawCat", &m_pRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCalPar", &m_pCalPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCalParHist", &m_pCalParHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HShowerCalParCalculator(void *p) {
      delete ((::HShowerCalParCalculator*)p);
   }
   static void deleteArray_HShowerCalParCalculator(void *p) {
      delete [] ((::HShowerCalParCalculator*)p);
   }
   static void destruct_HShowerCalParCalculator(void *p) {
      typedef ::HShowerCalParCalculator current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCalParCalculator(TBuffer &buf, void *obj) {
      ((::HShowerCalParCalculator*)obj)->::HShowerCalParCalculator::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCalParCalculator

//______________________________________________________________________________
void HShowerRawHist::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerRawHist.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HReconstructor::Streamer(R__b);
      R__b >> m_nEvents;
      R__b.CheckByteCount(R__s, R__c, HShowerRawHist::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerRawHist::IsA(), kTRUE);
      HReconstructor::Streamer(R__b);
      R__b << m_nEvents;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerRawHist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerRawHist.
      TClass *R__cl = ::HShowerRawHist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nEvents", &m_nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pRawCat", &m_pRawCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeHist", &m_pChargeHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeModHist[3]", &m_pChargeModHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeFreqHist[3]", &m_pChargeFreqHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeAvgHist[3]", &m_pChargeAvgHist);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerRawHist(void *p) {
      return  p ? new(p) ::HShowerRawHist : new ::HShowerRawHist;
   }
   static void *newArray_HShowerRawHist(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerRawHist[nElements] : new ::HShowerRawHist[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerRawHist(void *p) {
      delete ((::HShowerRawHist*)p);
   }
   static void deleteArray_HShowerRawHist(void *p) {
      delete [] ((::HShowerRawHist*)p);
   }
   static void destruct_HShowerRawHist(void *p) {
      typedef ::HShowerRawHist current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerRawHist(TBuffer &buf, void *obj) {
      ((::HShowerRawHist*)obj)->::HShowerRawHist::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerRawHist

//______________________________________________________________________________
void HShowerCalHist::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCalHist.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerCalHist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCalHist.
      TClass *R__cl = ::HShowerCalHist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nEvents", &m_nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCalCat", &m_pCalCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeCalHist", &m_pChargeCalHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeCalModHist[3]", &m_pChargeCalModHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeCalFreqHist[3]", &m_pChargeCalFreqHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeCalAvgHist[3]", &m_pChargeCalAvgHist);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerCalHist(void *p) {
      return  p ? new(p) ::HShowerCalHist : new ::HShowerCalHist;
   }
   static void *newArray_HShowerCalHist(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerCalHist[nElements] : new ::HShowerCalHist[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerCalHist(void *p) {
      delete ((::HShowerCalHist*)p);
   }
   static void deleteArray_HShowerCalHist(void *p) {
      delete [] ((::HShowerCalHist*)p);
   }
   static void destruct_HShowerCalHist(void *p) {
      typedef ::HShowerCalHist current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCalHist(TBuffer &buf, void *obj) {
      ((::HShowerCalHist*)obj)->::HShowerCalHist::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCalHist

//______________________________________________________________________________
void HShowerHitHist::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHitHist.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HReconstructor::Streamer(R__b);
      R__b >> m_nEvents;
      R__b.CheckByteCount(R__s, R__c, HShowerHitHist::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerHitHist::IsA(), kTRUE);
      HReconstructor::Streamer(R__b);
      R__b << m_nEvents;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerHitHist::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHitHist.
      TClass *R__cl = ::HShowerHitHist::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nEvents", &m_nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitCat", &m_pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeHitHist", &m_pChargeHitHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeHitModHist[3]", &m_pChargeHitModHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeHitFreqHist[3]", &m_pChargeHitFreqHist);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pChargeHitAvgHist[3]", &m_pChargeHitAvgHist);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHitHist(void *p) {
      return  p ? new(p) ::HShowerHitHist : new ::HShowerHitHist;
   }
   static void *newArray_HShowerHitHist(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHitHist[nElements] : new ::HShowerHitHist[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHitHist(void *p) {
      delete ((::HShowerHitHist*)p);
   }
   static void deleteArray_HShowerHitHist(void *p) {
      delete [] ((::HShowerHitHist*)p);
   }
   static void destruct_HShowerHitHist(void *p) {
      typedef ::HShowerHitHist current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHitHist(TBuffer &buf, void *obj) {
      ((::HShowerHitHist*)obj)->::HShowerHitHist::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHitHist

//______________________________________________________________________________
void HShowerCopy::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCopy.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerCopy::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCopy.
      TClass *R__cl = ::HShowerCopy::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nEvents", &m_nEvents);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_zeroLoc", &m_zeroLoc);
      R__insp.InspectMember(m_zeroLoc, "m_zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pInCat", &m_pInCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pOutCat", &m_pOutCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fCalIter", &fCalIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "mOffset", &mOffset);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerCopy(void *p) {
      return  p ? new(p) ::HShowerCopy : new ::HShowerCopy;
   }
   static void *newArray_HShowerCopy(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerCopy[nElements] : new ::HShowerCopy[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerCopy(void *p) {
      delete ((::HShowerCopy*)p);
   }
   static void deleteArray_HShowerCopy(void *p) {
      delete [] ((::HShowerCopy*)p);
   }
   static void destruct_HShowerCopy(void *p) {
      typedef ::HShowerCopy current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCopy(TBuffer &buf, void *obj) {
      ((::HShowerCopy*)obj)->::HShowerCopy::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCopy

//______________________________________________________________________________
void HShowerHitTrackMatcher::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerHitTrackMatcher.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerHitTrackMatcher::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerHitTrackMatcher.
      TClass *R__cl = ::HShowerHitTrackMatcher::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_zeroLoc", &m_zeroLoc);
      R__insp.InspectMember(m_zeroLoc, "m_zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pTrackCat", &m_pTrackCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitCat", &m_pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fHitIter", &fHitIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackIter", &fTrackIter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerHitTrackMatcher(void *p) {
      return  p ? new(p) ::HShowerHitTrackMatcher : new ::HShowerHitTrackMatcher;
   }
   static void *newArray_HShowerHitTrackMatcher(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerHitTrackMatcher[nElements] : new ::HShowerHitTrackMatcher[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerHitTrackMatcher(void *p) {
      delete ((::HShowerHitTrackMatcher*)p);
   }
   static void deleteArray_HShowerHitTrackMatcher(void *p) {
      delete [] ((::HShowerHitTrackMatcher*)p);
   }
   static void destruct_HShowerHitTrackMatcher(void *p) {
      typedef ::HShowerHitTrackMatcher current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerHitTrackMatcher(TBuffer &buf, void *obj) {
      ((::HShowerHitTrackMatcher*)obj)->::HShowerHitTrackMatcher::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerHitTrackMatcher

//______________________________________________________________________________
void HShowerPIDTrackMatcher::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerPIDTrackMatcher.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerPIDTrackMatcher::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerPIDTrackMatcher.
      TClass *R__cl = ::HShowerPIDTrackMatcher::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_zeroLoc", &m_zeroLoc);
      R__insp.InspectMember(m_zeroLoc, "m_zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pTrackCat", &m_pTrackCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pPIDCat", &m_pPIDCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pPIDTrackCat", &m_pPIDTrackCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fPIDIter", &fPIDIter);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fTrackIter", &fTrackIter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerPIDTrackMatcher(void *p) {
      return  p ? new(p) ::HShowerPIDTrackMatcher : new ::HShowerPIDTrackMatcher;
   }
   static void *newArray_HShowerPIDTrackMatcher(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerPIDTrackMatcher[nElements] : new ::HShowerPIDTrackMatcher[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerPIDTrackMatcher(void *p) {
      delete ((::HShowerPIDTrackMatcher*)p);
   }
   static void deleteArray_HShowerPIDTrackMatcher(void *p) {
      delete [] ((::HShowerPIDTrackMatcher*)p);
   }
   static void destruct_HShowerPIDTrackMatcher(void *p) {
      typedef ::HShowerPIDTrackMatcher current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerPIDTrackMatcher(TBuffer &buf, void *obj) {
      ((::HShowerPIDTrackMatcher*)obj)->::HShowerPIDTrackMatcher::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerPIDTrackMatcher

//______________________________________________________________________________
void HShowerParticleIdentifier::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerParticleIdentifier.

   HReconstructor::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerParticleIdentifier::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerParticleIdentifier.
      TClass *R__cl = ::HShowerParticleIdentifier::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_zeroLoc", &m_zeroLoc);
      R__insp.InspectMember(m_zeroLoc, "m_zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitCat", &m_pHitCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pPIDCat", &m_pPIDCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHitFPar", &m_pHitFPar);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pCriterium", &m_pCriterium);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fIter", &fIter);
      HReconstructor::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerParticleIdentifier(void *p) {
      return  p ? new(p) ::HShowerParticleIdentifier : new ::HShowerParticleIdentifier;
   }
   static void *newArray_HShowerParticleIdentifier(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerParticleIdentifier[nElements] : new ::HShowerParticleIdentifier[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerParticleIdentifier(void *p) {
      delete ((::HShowerParticleIdentifier*)p);
   }
   static void deleteArray_HShowerParticleIdentifier(void *p) {
      delete [] ((::HShowerParticleIdentifier*)p);
   }
   static void destruct_HShowerParticleIdentifier(void *p) {
      typedef ::HShowerParticleIdentifier current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerParticleIdentifier(TBuffer &buf, void *obj) {
      ((::HShowerParticleIdentifier*)obj)->::HShowerParticleIdentifier::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerParticleIdentifier

//______________________________________________________________________________
void HShowerCriterium::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerCriterium.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_fHitFPar;
      R__b.CheckByteCount(R__s, R__c, HShowerCriterium::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerCriterium::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_fHitFPar;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerCriterium::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerCriterium.
      TClass *R__cl = ::HShowerCriterium::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_fHitFPar", &m_fHitFPar);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerCriterium(void *p) {
      return  p ? new(p) ::HShowerCriterium : new ::HShowerCriterium;
   }
   static void *newArray_HShowerCriterium(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerCriterium[nElements] : new ::HShowerCriterium[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerCriterium(void *p) {
      delete ((::HShowerCriterium*)p);
   }
   static void deleteArray_HShowerCriterium(void *p) {
      delete [] ((::HShowerCriterium*)p);
   }
   static void destruct_HShowerCriterium(void *p) {
      typedef ::HShowerCriterium current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerCriterium(TBuffer &buf, void *obj) {
      ((::HShowerCriterium*)obj)->::HShowerCriterium::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerCriterium

//______________________________________________________________________________
void HShowerUnpacker::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerUnpacker.

   HldUnpack::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerUnpacker::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerUnpacker.
      TClass *R__cl = ::HShowerUnpacker::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_loc", &m_loc);
      R__insp.InspectMember(m_loc, "m_loc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_zeroLoc", &m_zeroLoc);
      R__insp.InspectMember(m_zeroLoc, "m_zeroLoc.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDataWord", (void*)&fDataWord);
      R__insp.InspectMember("HShowerUnpacker::DataWord", (void*)&fDataWord, "fDataWord.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nSubId", &m_nSubId);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventNr", &fEventNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pHist", &m_pHist);
      HldUnpack::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrapper around operator delete
   static void delete_HShowerUnpacker(void *p) {
      delete ((::HShowerUnpacker*)p);
   }
   static void deleteArray_HShowerUnpacker(void *p) {
      delete [] ((::HShowerUnpacker*)p);
   }
   static void destruct_HShowerUnpacker(void *p) {
      typedef ::HShowerUnpacker current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerUnpacker(TBuffer &buf, void *obj) {
      ((::HShowerUnpacker*)obj)->::HShowerUnpacker::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerUnpacker

//______________________________________________________________________________
void HShowerTaskSet::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerTaskSet.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HTaskSet::Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HShowerTaskSet::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerTaskSet::IsA(), kTRUE);
      HTaskSet::Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerTaskSet::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerTaskSet.
      TClass *R__cl = ::HShowerTaskSet::IsA();
      if (R__cl || R__insp.IsA()) { }
      HTaskSet::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerTaskSet(void *p) {
      return  p ? new(p) ::HShowerTaskSet : new ::HShowerTaskSet;
   }
   static void *newArray_HShowerTaskSet(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerTaskSet[nElements] : new ::HShowerTaskSet[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerTaskSet(void *p) {
      delete ((::HShowerTaskSet*)p);
   }
   static void deleteArray_HShowerTaskSet(void *p) {
      delete [] ((::HShowerTaskSet*)p);
   }
   static void destruct_HShowerTaskSet(void *p) {
      typedef ::HShowerTaskSet current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerTaskSet(TBuffer &buf, void *obj) {
      ((::HShowerTaskSet*)obj)->::HShowerTaskSet::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerTaskSet

//______________________________________________________________________________
void HShowerGeantReader::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerGeantReader.

   HGeantReader::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerGeantReader::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerGeantReader.
      TClass *R__cl = ::HShowerGeantReader::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*t", &t);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*fGeantShowCat", &fGeantShowCat);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fEventId", &fEventId);
      HGeantReader::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerGeantReader(void *p) {
      return  p ? new(p) ::HShowerGeantReader : new ::HShowerGeantReader;
   }
   static void *newArray_HShowerGeantReader(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerGeantReader[nElements] : new ::HShowerGeantReader[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerGeantReader(void *p) {
      delete ((::HShowerGeantReader*)p);
   }
   static void deleteArray_HShowerGeantReader(void *p) {
      delete [] ((::HShowerGeantReader*)p);
   }
   static void destruct_HShowerGeantReader(void *p) {
      typedef ::HShowerGeantReader current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerGeantReader(TBuffer &buf, void *obj) {
      ((::HShowerGeantReader*)obj)->::HShowerGeantReader::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerGeantReader

//______________________________________________________________________________
void HShowerFrame::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerFrame.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerFrame::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerFrame.
      TClass *R__cl = ::HShowerFrame::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nCorners", &nCorners);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModuleID", &m_nModuleID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_FrameArr", &m_FrameArr);
      R__insp.InspectMember(m_FrameArr, "m_FrameArr.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerFrame(void *p) {
      return  p ? new(p) ::HShowerFrame : new ::HShowerFrame;
   }
   static void *newArray_HShowerFrame(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerFrame[nElements] : new ::HShowerFrame[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerFrame(void *p) {
      delete ((::HShowerFrame*)p);
   }
   static void deleteArray_HShowerFrame(void *p) {
      delete [] ((::HShowerFrame*)p);
   }
   static void destruct_HShowerFrame(void *p) {
      typedef ::HShowerFrame current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerFrame(TBuffer &buf, void *obj) {
      ((::HShowerFrame*)obj)->::HShowerFrame::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerFrame

//______________________________________________________________________________
void HShowerFrameCorner::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerFrameCorner.

   TObject::Streamer(R__b);
}

//______________________________________________________________________________
void HShowerFrameCorner::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerFrameCorner.
      TClass *R__cl = ::HShowerFrameCorner::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXcor", &fXcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYcor", &fYcor);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nFlagArea", &nFlagArea);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerFrameCorner(void *p) {
      return  p ? new(p) ::HShowerFrameCorner : new ::HShowerFrameCorner;
   }
   static void *newArray_HShowerFrameCorner(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerFrameCorner[nElements] : new ::HShowerFrameCorner[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerFrameCorner(void *p) {
      delete ((::HShowerFrameCorner*)p);
   }
   static void deleteArray_HShowerFrameCorner(void *p) {
      delete [] ((::HShowerFrameCorner*)p);
   }
   static void destruct_HShowerFrameCorner(void *p) {
      typedef ::HShowerFrameCorner current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerFrameCorner(TBuffer &buf, void *obj) {
      ((::HShowerFrameCorner*)obj)->::HShowerFrameCorner::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerFrameCorner

//______________________________________________________________________________
void HShowerPad::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerPad.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nPadNr;
      R__b >> nPadFlag;
      R__b >> nPadsX;
      R__b >> fXld;
      R__b >> fYld;
      R__b >> fXlu;
      R__b >> fYlu;
      R__b >> fXrd;
      R__b >> fYrd;
      R__b >> fXru;
      R__b >> fYru;
      R__b.CheckByteCount(R__s, R__c, HShowerPad::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerPad::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nPadNr;
      R__b << nPadFlag;
      R__b << nPadsX;
      R__b << fXld;
      R__b << fYld;
      R__b << fXlu;
      R__b << fYlu;
      R__b << fXrd;
      R__b << fYrd;
      R__b << fXru;
      R__b << fYru;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerPad::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerPad.
      TClass *R__cl = ::HShowerPad::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPadNr", &nPadNr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPadFlag", &nPadFlag);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPadsX", &nPadsX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXld", &fXld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYld", &fYld);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXlu", &fXlu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYlu", &fYlu);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXrd", &fXrd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYrd", &fYrd);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fXru", &fXru);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fYru", &fYru);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerPad(void *p) {
      return  p ? new(p) ::HShowerPad : new ::HShowerPad;
   }
   static void *newArray_HShowerPad(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerPad[nElements] : new ::HShowerPad[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerPad(void *p) {
      delete ((::HShowerPad*)p);
   }
   static void deleteArray_HShowerPad(void *p) {
      delete [] ((::HShowerPad*)p);
   }
   static void destruct_HShowerPad(void *p) {
      typedef ::HShowerPad current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerPad(TBuffer &buf, void *obj) {
      ((::HShowerPad*)obj)->::HShowerPad::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerPad

//______________________________________________________________________________
void HShowerPadTab::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerPadTab.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> nPads;
      R__b >> nPadsX;
      R__b >> nPadsY;
      R__b >> m_nModuleID;
      R__b >> m_pPadArr;
      R__b >> m_pFrame;
      R__b.CheckByteCount(R__s, R__c, HShowerPadTab::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerPadTab::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << nPads;
      R__b << nPadsX;
      R__b << nPadsY;
      R__b << m_nModuleID;
      R__b << m_pPadArr;
      R__b << m_pFrame;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerPadTab::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerPadTab.
      TClass *R__cl = ::HShowerPadTab::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPads", &nPads);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPadsX", &nPadsX);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nPadsY", &nPadsY);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModuleID", &m_nModuleID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pPadArr", &m_pPadArr);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*m_pFrame", &m_pFrame);
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerPadTab(void *p) {
      return  p ? new(p) ::HShowerPadTab : new ::HShowerPadTab;
   }
   static void *newArray_HShowerPadTab(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerPadTab[nElements] : new ::HShowerPadTab[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerPadTab(void *p) {
      delete ((::HShowerPadTab*)p);
   }
   static void deleteArray_HShowerPadTab(void *p) {
      delete [] ((::HShowerPadTab*)p);
   }
   static void destruct_HShowerPadTab(void *p) {
      typedef ::HShowerPadTab current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerPadTab(TBuffer &buf, void *obj) {
      ((::HShowerPadTab*)obj)->::HShowerPadTab::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerPadTab

//______________________________________________________________________________
void HShowerWireTab::Streamer(TBuffer &R__b)
{
   // Stream an object of class HShowerWireTab.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> m_nModuleID;
      R__b >> fDistWire;
      R__b >> nWires;
      wiresArr.Streamer(R__b);
      R__b.CheckByteCount(R__s, R__c, HShowerWireTab::IsA());
   } else {
      R__c = R__b.WriteVersion(HShowerWireTab::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << m_nModuleID;
      R__b << fDistWire;
      R__b << nWires;
      wiresArr.Streamer(R__b);
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HShowerWireTab::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HShowerWireTab.
      TClass *R__cl = ::HShowerWireTab::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "m_nModuleID", &m_nModuleID);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "fDistWire", &fDistWire);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "nWires", &nWires);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "wiresArr", &wiresArr);
      R__insp.InspectMember(wiresArr, "wiresArr.");
      TObject::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HShowerWireTab(void *p) {
      return  p ? new(p) ::HShowerWireTab : new ::HShowerWireTab;
   }
   static void *newArray_HShowerWireTab(Long_t nElements, void *p) {
      return p ? new(p) ::HShowerWireTab[nElements] : new ::HShowerWireTab[nElements];
   }
   // Wrapper around operator delete
   static void delete_HShowerWireTab(void *p) {
      delete ((::HShowerWireTab*)p);
   }
   static void deleteArray_HShowerWireTab(void *p) {
      delete [] ((::HShowerWireTab*)p);
   }
   static void destruct_HShowerWireTab(void *p) {
      typedef ::HShowerWireTab current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HShowerWireTab(TBuffer &buf, void *obj) {
      ((::HShowerWireTab*)obj)->::HShowerWireTab::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HShowerWireTab

//______________________________________________________________________________
void HGeomVector2::Streamer(TBuffer &R__b)
{
   // Stream an object of class HGeomVector2.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      HGeomVector::Streamer(R__b);
      R__b >> Rad;
      R__b >> Phi;
      R__b >> Theta;
      R__b.CheckByteCount(R__s, R__c, HGeomVector2::IsA());
   } else {
      R__c = R__b.WriteVersion(HGeomVector2::IsA(), kTRUE);
      HGeomVector::Streamer(R__b);
      R__b << Rad;
      R__b << Phi;
      R__b << Theta;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void HGeomVector2::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class HGeomVector2.
      TClass *R__cl = ::HGeomVector2::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Rad", &Rad);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Phi", &Phi);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Theta", &Theta);
      HGeomVector::ShowMembers(R__insp);
}

namespace ROOTDict {
   // Wrappers around operator new
   static void *new_HGeomVector2(void *p) {
      return  p ? new(p) ::HGeomVector2 : new ::HGeomVector2;
   }
   static void *newArray_HGeomVector2(Long_t nElements, void *p) {
      return p ? new(p) ::HGeomVector2[nElements] : new ::HGeomVector2[nElements];
   }
   // Wrapper around operator delete
   static void delete_HGeomVector2(void *p) {
      delete ((::HGeomVector2*)p);
   }
   static void deleteArray_HGeomVector2(void *p) {
      delete [] ((::HGeomVector2*)p);
   }
   static void destruct_HGeomVector2(void *p) {
      typedef ::HGeomVector2 current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_HGeomVector2(TBuffer &buf, void *obj) {
      ((::HGeomVector2*)obj)->::HGeomVector2::Streamer(buf);
   }
} // end of namespace ROOTDict for class ::HGeomVector2

/********************************************************
* ../build/pc/ShowerDict.cc
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableShowerDict();

extern "C" void G__set_cpp_environmentShowerDict() {
  G__cpp_reset_tagtableShowerDict();
}
#include <new>
extern "C" int G__cpp_dllrevShowerDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* HShowerCal */
static int G__ShowerDict_172_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCal[n];
     } else {
       p = new((void*) gvp) HShowerCal[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCal;
     } else {
       p = new((void*) gvp) HShowerCal;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCal* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerCal((const Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerCal((const Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCal*) G__getstructoffset())->clear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerCal*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCal*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerCal*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerCal*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerCal*) G__getstructoffset())->getRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerCal*) G__getstructoffset())->getCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->setRow((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->setCol((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCal*) G__getstructoffset())->isLocalMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->setLocalMax();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->resetLocalMax();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCal::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCal::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCal::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCal::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCal*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCal::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCal::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCal::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_172_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCal::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_172_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerCal* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerCal(*(HShowerCal*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCal G__THShowerCal;
static int G__ShowerDict_172_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCal*) (soff+(sizeof(HShowerCal)*i)))->~G__THShowerCal();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCal*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCal*) (soff))->~G__THShowerCal();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_172_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCal* dest = (HShowerCal*) G__getstructoffset();
   *dest = *(HShowerCal*) libp->para[0].ref;
   const HShowerCal& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerCalParCell */
static int G__ShowerDict_200_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCell[n];
     } else {
       p = new((void*) gvp) HShowerCalParCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCell;
     } else {
       p = new((void*) gvp) HShowerCalParCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerCalParCell((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerCalParCell((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalParCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerCalParCell(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
   } else {
     p = new((void*) gvp) HShowerCalParCell(
(Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCalParCell*) G__getstructoffset())->reset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->setOffset((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalParCell*) G__getstructoffset())->getOffset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->setSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalParCell*) G__getstructoffset())->getSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->setThreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalParCell*) G__getstructoffset())->getThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->setGain((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalParCell*) G__getstructoffset())->getGain());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->setParams((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->setParams((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->print();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCalParCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalParCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCalParCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCalParCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalParCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalParCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalParCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_200_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalParCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_200_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerCalParCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerCalParCell(*(HShowerCalParCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCalParCell G__THShowerCalParCell;
static int G__ShowerDict_200_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCalParCell*) (soff+(sizeof(HShowerCalParCell)*i)))->~G__THShowerCalParCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCalParCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCalParCell*) (soff))->~G__THShowerCalParCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_200_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalParCell* dest = (HShowerCalParCell*) G__getstructoffset();
   *dest = *(HShowerCalParCell*) libp->para[0].ref;
   const HShowerCalParCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerCalPar */
static int G__ShowerDict_204_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerCalPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerCalPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HShowerCalPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerCalPar[n];
       } else {
         p = new((void*) gvp) HShowerCalPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerCalPar;
       } else {
         p = new((void*) gvp) HShowerCalPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setSetup((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCalPar*) G__getstructoffset())->getNSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCalPar*) G__getstructoffset())->getNModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCalPar*) G__getstructoffset())->getNRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCalPar*) G__getstructoffset())->getNColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setCellClassName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HShowerCalPar*) G__getstructoffset())->getCellClassName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         HShowerCalParCell*& obj = ((HShowerCalPar*) G__getstructoffset())->getSlot(*(HLocation*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         G__letint(result7, 'U', (long)obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalPar*) G__getstructoffset())->getObject(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalPar*) G__getstructoffset())->getOffset(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalPar*) G__getstructoffset())->getSlope(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalPar*) G__getstructoffset())->getThreshold(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalPar*) G__getstructoffset())->getGain(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setOffset(*(HLocation*) libp->para[0].ref, (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setSlope(*(HLocation*) libp->para[0].ref, (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setThreshold(*(HLocation*) libp->para[0].ref, (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setGain(*(HLocation*) libp->para[0].ref, (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalPar*) G__getstructoffset())->readline((const Char_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->putAsciiHeader(*(TString*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->write(*(fstream*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalPar*) G__getstructoffset())->defaultInit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setSlopesToValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->addValueToSlopes((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->multiplySlopesByValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setOffsetsToValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->addValueToOffsets((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->multiplyOffsetsByValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setThresholdsToValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->addValueToThresholds((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->multiplyThresholdsByValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->setGainsToValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->addValueToGains((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->multiplyGainsByValue((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalPar*) G__getstructoffset())->getOffsetsHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalPar*) G__getstructoffset())->getSlopesHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalPar*) G__getstructoffset())->getThresholdsHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalPar*) G__getstructoffset())->getGainsHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCalPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCalPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCalPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_204_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_204_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerCalPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerCalPar(*(HShowerCalPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCalPar G__THShowerCalPar;
static int G__ShowerDict_204_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCalPar*) (soff+(sizeof(HShowerCalPar)*i)))->~G__THShowerCalPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCalPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCalPar*) (soff))->~G__THShowerCalPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_204_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalPar* dest = (HShowerCalPar*) G__getstructoffset();
   *dest = *(HShowerCalPar*) libp->para[0].ref;
   const HShowerCalPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerRaw */
static int G__ShowerDict_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerRaw[n];
     } else {
       p = new((void*) gvp) HShowerRaw[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerRaw;
     } else {
       p = new((void*) gvp) HShowerRaw;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerRaw* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerRaw((const Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerRaw((const Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerRaw*) G__getstructoffset())->clear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerRaw*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerRaw*) G__getstructoffset())->addCharge((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerRaw*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerRaw*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerRaw*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerRaw*) G__getstructoffset())->getRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerRaw*) G__getstructoffset())->getCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerRaw*) G__getstructoffset())->getEventType());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((HShowerRaw*) G__getstructoffset())->getEventNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->setRow((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->setCol((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->setEventType((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->setEventNr((Long_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->getLocation(*(HLocation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerRaw::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRaw::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerRaw::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerRaw::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRaw*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRaw::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerRaw::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRaw::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_214_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerRaw::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_214_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerRaw* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerRaw(*(HShowerRaw*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerRaw G__THShowerRaw;
static int G__ShowerDict_214_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerRaw*) (soff+(sizeof(HShowerRaw)*i)))->~G__THShowerRaw();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerRaw*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerRaw*) (soff))->~G__THShowerRaw();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_214_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerRaw* dest = (HShowerRaw*) G__getstructoffset();
   *dest = *(HShowerRaw*) libp->para[0].ref;
   const HShowerRaw& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerRawMatr */
static int G__ShowerDict_215_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerRawMatr* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerRawMatr[n];
     } else {
       p = new((void*) gvp) HShowerRawMatr[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerRawMatr;
     } else {
       p = new((void*) gvp) HShowerRawMatr;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerRawMatr::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRawMatr::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerRawMatr::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerRawMatr::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRawMatr*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRawMatr::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerRawMatr::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRawMatr::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_215_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerRawMatr::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_215_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerRawMatr* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerRawMatr(*(HShowerRawMatr*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerRawMatr G__THShowerRawMatr;
static int G__ShowerDict_215_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerRawMatr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerRawMatr*) (soff+(sizeof(HShowerRawMatr)*i)))->~G__THShowerRawMatr();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerRawMatr*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerRawMatr*) (soff))->~G__THShowerRawMatr();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_215_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerRawMatr* dest = (HShowerRawMatr*) G__getstructoffset();
   *dest = *(HShowerRawMatr*) libp->para[0].ref;
   const HShowerRawMatr& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerCalibrater */
static int G__ShowerDict_218_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalibrater[n];
     } else {
       p = new((void*) gvp) HShowerCalibrater[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalibrater;
     } else {
       p = new((void*) gvp) HShowerCalibrater;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalibrater* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerCalibrater((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalibrater*) G__getstructoffset())->calibrate((HShowerRaw*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerCalibrater& obj = ((HShowerCalibrater*) G__getstructoffset())->operator=(*(HShowerCalibrater*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalibrater*) G__getstructoffset())->getRawCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalibrater*) G__getstructoffset())->getCalCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalibrater*) G__getstructoffset())->getCalPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalibrater*) G__getstructoffset())->setRawCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalibrater*) G__getstructoffset())->setCalCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalibrater*) G__getstructoffset())->setCalPar((HParSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalibrater*) G__getstructoffset())->initCalPar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCalibrater::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalibrater::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCalibrater::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCalibrater::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalibrater*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalibrater::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalibrater::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalibrater::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_218_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalibrater::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCalibrater G__THShowerCalibrater;
static int G__ShowerDict_218_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCalibrater*) (soff+(sizeof(HShowerCalibrater)*i)))->~G__THShowerCalibrater();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCalibrater*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCalibrater*) (soff))->~G__THShowerCalibrater();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerRawHist */
static int G__ShowerDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerRawHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerRawHist[n];
     } else {
       p = new((void*) gvp) HShowerRawHist[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerRawHist;
     } else {
       p = new((void*) gvp) HShowerRawHist;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerRawHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerRawHist((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerRawHist((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerRawHist*) G__getstructoffset())->getRawCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRawHist*) G__getstructoffset())->setRawCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerRawHist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRawHist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerRawHist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerRawHist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerRawHist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRawHist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerRawHist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerRawHist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerRawHist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerRawHist*) G__getstructoffset())->bookHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerRawHist*) G__getstructoffset())->fillHist((HShowerRaw*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerRawHist*) G__getstructoffset())->fillHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerRawHist*) G__getstructoffset())->writeHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerRawHist*) G__getstructoffset())->finalizeHist());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerRawHist G__THShowerRawHist;
static int G__ShowerDict_225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerRawHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerRawHist*) (soff+(sizeof(HShowerRawHist)*i)))->~G__THShowerRawHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerRawHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerRawHist*) (soff))->~G__THShowerRawHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerUnpacker */
static int G__ShowerDict_226_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerUnpacker* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerUnpacker((Int_t) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerUnpacker((Int_t) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerUnpacker::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerUnpacker::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerUnpacker::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerUnpacker::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerUnpacker*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerUnpacker::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerUnpacker::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerUnpacker::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_226_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerUnpacker::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_226_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerUnpacker* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerUnpacker(*(HShowerUnpacker*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerUnpacker G__THShowerUnpacker;
static int G__ShowerDict_226_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerUnpacker*) (soff+(sizeof(HShowerUnpacker)*i)))->~G__THShowerUnpacker();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerUnpacker*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerUnpacker*) (soff))->~G__THShowerUnpacker();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_226_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerUnpacker* dest = (HShowerUnpacker*) G__getstructoffset();
   *dest = *(HShowerUnpacker*) libp->para[0].ref;
   const HShowerUnpacker& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerGeantReader */
static int G__ShowerDict_575_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerGeantReader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeantReader[n];
     } else {
       p = new((void*) gvp) HShowerGeantReader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeantReader;
     } else {
       p = new((void*) gvp) HShowerGeantReader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerGeantReader*) G__getstructoffset())->getGeantShowerCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerGeantReader*) G__getstructoffset())->getGeantShower(*((HLocation*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerGeantReader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeantReader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerGeantReader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerGeantReader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantReader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeantReader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeantReader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeantReader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_575_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeantReader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_575_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerGeantReader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerGeantReader(*(HShowerGeantReader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerGeantReader G__THShowerGeantReader;
static int G__ShowerDict_575_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerGeantReader*) (soff+(sizeof(HShowerGeantReader)*i)))->~G__THShowerGeantReader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerGeantReader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerGeantReader*) (soff))->~G__THShowerGeantReader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_575_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerGeantReader* dest = (HShowerGeantReader*) G__getstructoffset();
   *dest = *(HShowerGeantReader*) libp->para[0].ref;
   const HShowerGeantReader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerGeantWire */
static int G__ShowerDict_576_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerGeantWire* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeantWire[n];
     } else {
       p = new((void*) gvp) HShowerGeantWire[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeantWire;
     } else {
       p = new((void*) gvp) HShowerGeantWire;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->Clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerGeantWire*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->getXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeantWire*) G__getstructoffset())->getWireNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeantWire*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeantWire*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeantWire*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->setXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->setWireNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->setModule((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->setSector((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->setTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerGeantWire::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeantWire::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerGeantWire::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerGeantWire::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeantWire*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeantWire::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeantWire::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeantWire::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_576_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeantWire::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_576_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerGeantWire* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerGeantWire(*(HShowerGeantWire*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerGeantWire G__THShowerGeantWire;
static int G__ShowerDict_576_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerGeantWire*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerGeantWire*) (soff+(sizeof(HShowerGeantWire)*i)))->~G__THShowerGeantWire();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerGeantWire*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerGeantWire*) (soff))->~G__THShowerGeantWire();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_576_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerGeantWire* dest = (HShowerGeantWire*) G__getstructoffset();
   *dest = *(HShowerGeantWire*) libp->para[0].ref;
   const HShowerGeantWire& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerFrameCorner */
static int G__ShowerDict_577_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerFrameCorner* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerFrameCorner[n];
     } else {
       p = new((void*) gvp) HShowerFrameCorner[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerFrameCorner;
     } else {
       p = new((void*) gvp) HShowerFrameCorner;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerFrameCorner*) G__getstructoffset())->getX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerFrameCorner*) G__getstructoffset())->getY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerFrameCorner*) G__getstructoffset())->getFlagArea());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrameCorner*) G__getstructoffset())->setX((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrameCorner*) G__getstructoffset())->setY((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrameCorner*) G__getstructoffset())->setFlagArea((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerFrameCorner::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerFrameCorner::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerFrameCorner::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerFrameCorner::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrameCorner*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerFrameCorner::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerFrameCorner::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerFrameCorner::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_577_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerFrameCorner::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_577_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerFrameCorner* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerFrameCorner(*(HShowerFrameCorner*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerFrameCorner G__THShowerFrameCorner;
static int G__ShowerDict_577_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerFrameCorner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerFrameCorner*) (soff+(sizeof(HShowerFrameCorner)*i)))->~G__THShowerFrameCorner();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerFrameCorner*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerFrameCorner*) (soff))->~G__THShowerFrameCorner();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_577_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerFrameCorner* dest = (HShowerFrameCorner*) G__getstructoffset();
   *dest = *(HShowerFrameCorner*) libp->para[0].ref;
   const HShowerFrameCorner& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerFrame */
static int G__ShowerDict_578_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerFrame* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerFrame[n];
     } else {
       p = new((void*) gvp) HShowerFrame[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerFrame;
     } else {
       p = new((void*) gvp) HShowerFrame;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrame*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrame*) G__getstructoffset())->printParams();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerFrame*) G__getstructoffset())->isOut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerFrame*) G__getstructoffset())->getCorner((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerFrame*) G__getstructoffset())->addCorner((HShowerFrameCorner*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerFrame*) G__getstructoffset())->setCorner((HShowerFrameCorner*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrame*) G__getstructoffset())->setNCorners((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerFrame*) G__getstructoffset())->getNCorners());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrame*) G__getstructoffset())->setModuleID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerFrame*) G__getstructoffset())->getModuleID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerFrame::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerFrame::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerFrame::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerFrame::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerFrame*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerFrame::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerFrame::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerFrame::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_578_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerFrame::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerFrame G__THShowerFrame;
static int G__ShowerDict_578_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerFrame*) (soff+(sizeof(HShowerFrame)*i)))->~G__THShowerFrame();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerFrame*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerFrame*) (soff))->~G__THShowerFrame();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerWireTab */
static int G__ShowerDict_581_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerWireTab* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerWireTab[n];
     } else {
       p = new((void*) gvp) HShowerWireTab[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerWireTab;
     } else {
       p = new((void*) gvp) HShowerWireTab;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerWireTab*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerWireTab*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerWireTab*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerWireTab*) G__getstructoffset())->setDistWire((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerWireTab*) G__getstructoffset())->getDistWire());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerWireTab*) G__getstructoffset())->getWirePos((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerWireTab*) G__getstructoffset())->setWirePos((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerWireTab*) G__getstructoffset())->getNWires());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerWireTab*) G__getstructoffset())->lookupWire((Float_t) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerWireTab*) G__getstructoffset())->setModuleID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerWireTab*) G__getstructoffset())->getModuleID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerWireTab::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerWireTab::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerWireTab::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerWireTab::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerWireTab*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerWireTab::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerWireTab::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerWireTab::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_581_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerWireTab::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_581_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerWireTab* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerWireTab(*(HShowerWireTab*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerWireTab G__THShowerWireTab;
static int G__ShowerDict_581_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerWireTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerWireTab*) (soff+(sizeof(HShowerWireTab)*i)))->~G__THShowerWireTab();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerWireTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerWireTab*) (soff))->~G__THShowerWireTab();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_581_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerWireTab* dest = (HShowerWireTab*) G__getstructoffset();
   *dest = *(HShowerWireTab*) libp->para[0].ref;
   const HShowerWireTab& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerPad */
static int G__ShowerDict_582_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPad* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPad[n];
     } else {
       p = new((void*) gvp) HShowerPad[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPad;
     } else {
       p = new((void*) gvp) HShowerPad;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPad* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerPad(*(HShowerPad*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HShowerPad(*(HShowerPad*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPad*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPad*) G__getstructoffset())->isOut((HShowerGeantWire*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPad*) G__getstructoffset())->isOut((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPad*) G__getstructoffset())->isOutX((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPad*) G__getstructoffset())->isOutY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPad*) G__getstructoffset())->getPadCenter((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPad*) G__getstructoffset())->getPadNr());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPad*) G__getstructoffset())->getPadPos((Int_t*) G__int(libp->para[0]), (Int_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPad*) G__getstructoffset())->getPadFlag());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPad*) G__getstructoffset())->setPadFlag((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPad*) G__getstructoffset())->setPadNr((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXld());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYld());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXlu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYlu());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXrd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYrd());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXru());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYru());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXld_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYld_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXlu_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYlu_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXrd_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYrd_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getXru_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((const HShowerPad*) G__getstructoffset())->getYru_mm());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerPad& obj = ((HShowerPad*) G__getstructoffset())->operator=(*(HShowerPad*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerPad::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPad::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerPad::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerPad::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPad*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPad::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPad::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPad::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_582_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPad::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerPad G__THShowerPad;
static int G__ShowerDict_582_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerPad*) (soff+(sizeof(HShowerPad)*i)))->~G__THShowerPad();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerPad*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerPad*) (soff))->~G__THShowerPad();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerPadTab */
static int G__ShowerDict_583_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPadTab* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPadTab[n];
     } else {
       p = new((void*) gvp) HShowerPadTab[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPadTab;
     } else {
       p = new((void*) gvp) HShowerPadTab;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadTab*) G__getstructoffset())->reset();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadTab*) G__getstructoffset())->putParams((HParamList*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerPadTab*) G__getstructoffset())->getParams((HParamList*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadTab*) G__getstructoffset())->setPad((HShowerPad*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadTab*) G__getstructoffset())->setPad((HShowerPad*) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPadTab*) G__getstructoffset())->getPad((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPadTab*) G__getstructoffset())->getPad((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPadTab*) G__getstructoffset())->getPad((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPadTab*) G__getstructoffset())->getNPad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPadTab*) G__getstructoffset())->getNPadX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPadTab*) G__getstructoffset())->getNPadY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerPadTab*) G__getstructoffset())->isOut((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadTab*) G__getstructoffset())->setFrame((HShowerFrame*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPadTab*) G__getstructoffset())->getFrame());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadTab*) G__getstructoffset())->setModuleID((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPadTab*) G__getstructoffset())->getModuleID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerPadTab::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPadTab::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerPadTab::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerPadTab::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadTab*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPadTab::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPadTab::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPadTab::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_583_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPadTab::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_583_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerPadTab* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerPadTab(*(HShowerPadTab*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerPadTab G__THShowerPadTab;
static int G__ShowerDict_583_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerPadTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerPadTab*) (soff+(sizeof(HShowerPadTab)*i)))->~G__THShowerPadTab();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerPadTab*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerPadTab*) (soff))->~G__THShowerPadTab();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_583_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPadTab* dest = (HShowerPadTab*) G__getstructoffset();
   *dest = *(HShowerPadTab*) libp->para[0].ref;
   const HShowerPadTab& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerDigiPar */
static int G__ShowerDict_612_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerDigiPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerDigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerDigiPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerDigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerDigiPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerDigiPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HShowerDigiPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerDigiPar[n];
       } else {
         p = new((void*) gvp) HShowerDigiPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerDigiPar;
       } else {
         p = new((void*) gvp) HShowerDigiPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getGain((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getThreshold((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getThickDet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerDigiPar*) G__getstructoffset())->getMatrixRange());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getBoxSize());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getChargeSlope());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getPlaneDist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getPadThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getUpdatePadThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setGain((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setThreshold((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setThickDet((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setMatrixRange((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setBoxSize((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setChargeSlope((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setPlaneDist((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setPadThreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setUpdatePadThreshold((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setEffScaleMap(*(TArrayF*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const TArrayF& obj = ((HShowerDigiPar*) G__getstructoffset())->getEffScaleMap();
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setGlobalEff(*(TArrayD*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->setChargeVsBeta((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, *(TArrayD*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerDigiPar*) G__getstructoffset())->recreateHistograms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 70, (long) ((HShowerDigiPar*) G__getstructoffset())->getChargeMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerDigiPar*) G__getstructoffset())->getEfficiencyHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerDigiPar*) G__getstructoffset())->getQvBHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getEfficiency((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerDigiPar*) G__getstructoffset())->checkEfficiency((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Float_t) G__double(libp->para[4])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->getCharge((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->removeHistograms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->removeChargeHistograms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->removeEfficiencyHistograms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->removeQvBHistograms();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerDigiPar*) G__getstructoffset())->calcCharge((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]), (Float_t) G__double(libp->para[5])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HShowerDigiPar*) G__getstructoffset())->setChargeMatrix((Int_t) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HShowerDigiPar*) G__getstructoffset())->setChargeMatrix((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerDigiPar*) G__getstructoffset())->initChargeMatrix());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerDigiPar*) G__getstructoffset())->initEffHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerDigiPar*) G__getstructoffset())->initSumVersBetaHistograms());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerDigiPar*) G__getstructoffset())->padIndex((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerDigiPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDigiPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerDigiPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerDigiPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_52(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigiPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_53(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDigiPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_54(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerDigiPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDigiPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_612_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerDigiPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_612_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerDigiPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerDigiPar(*(HShowerDigiPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerDigiPar G__THShowerDigiPar;
static int G__ShowerDict_612_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerDigiPar*) (soff+(sizeof(HShowerDigiPar)*i)))->~G__THShowerDigiPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerDigiPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerDigiPar*) (soff))->~G__THShowerDigiPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_612_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerDigiPar* dest = (HShowerDigiPar*) G__getstructoffset();
   *dest = *(HShowerDigiPar*) libp->para[0].ref;
   const HShowerDigiPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerGeometry */
static int G__ShowerDict_613_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerGeometry* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeometry(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerGeometry(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeometry((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerGeometry((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeometry((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HShowerGeometry((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerGeometry[n];
       } else {
         p = new((void*) gvp) HShowerGeometry[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerGeometry;
       } else {
         p = new((void*) gvp) HShowerGeometry;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerGeometry*) G__getstructoffset())->fillFromGeomPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeometry*) G__getstructoffset())->getSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeometry*) G__getstructoffset())->getModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeometry*) G__getstructoffset())->getRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerGeometry*) G__getstructoffset())->getColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerGeometry*) G__getstructoffset())->getFrame((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerGeometry*) G__getstructoffset())->getWireTab((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerGeometry*) G__getstructoffset())->getPadParam((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeometry*) G__getstructoffset())->getLocalCoord(*(HLocation*) libp->para[0].ref, *(HGeomVector*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeometry*) G__getstructoffset())->getLabCoord(*(HLocation*) libp->para[0].ref, *(HGeomVector2*) libp->para[1].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      ((HShowerGeometry*) G__getstructoffset())->getSphereCoord(*(HLocation*) libp->para[0].ref, *(HGeomVector2*) libp->para[1].ref
, (HGeomVector*) G__int(libp->para[2]));
      G__setnull(result7);
      break;
   case 2:
      ((HShowerGeometry*) G__getstructoffset())->getSphereCoord(*(HLocation*) libp->para[0].ref, *(HGeomVector2*) libp->para[1].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeometry*) G__getstructoffset())->transLabToSphereCoord(*(HGeomVector2*) libp->para[0].ref, *(HGeomVector2*) libp->para[1].ref
, (HGeomVector*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeometry*) G__getstructoffset())->transVectToLab(*(HLocation*) libp->para[0].ref, *((HGeomVector*) G__int(libp->para[1]))
, *(HGeomVector2*) libp->para[2].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HShowerGeometry*) G__getstructoffset())->getTransform((Int_t) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HGeomTransform& obj = ((HShowerGeometry*) G__getstructoffset())->getTransform((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerGeometry*) G__getstructoffset())->transPadToLab());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerGeometry::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeometry::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerGeometry::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerGeometry::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeometry*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeometry::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeometry::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeometry::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_613_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeometry::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerGeometry G__THShowerGeometry;
static int G__ShowerDict_613_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerGeometry*) (soff+(sizeof(HShowerGeometry)*i)))->~G__THShowerGeometry();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerGeometry*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerGeometry*) (soff))->~G__THShowerGeometry();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerDigitizer */
static int G__ShowerDict_614_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerDigitizer*) G__getstructoffset())->digitize((TObject*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerDigitizer& obj = ((HShowerDigitizer*) G__getstructoffset())->operator=(*(HShowerDigitizer*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerDigitizer*) G__getstructoffset())->getInCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerDigitizer*) G__getstructoffset())->getOutCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigitizer*) G__getstructoffset())->setInCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigitizer*) G__getstructoffset())->setOutCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerDigitizer*) G__getstructoffset())->initParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_614_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerDigitizer G__THShowerDigitizer;
static int G__ShowerDict_614_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerDigitizer*) (soff+(sizeof(HShowerDigitizer)*i)))->~G__THShowerDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerDigitizer*) (soff))->~G__THShowerDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHitDigitizer */
static int G__ShowerDict_615_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitDigitizer[n];
     } else {
       p = new((void*) gvp) HShowerHitDigitizer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitDigitizer;
     } else {
       p = new((void*) gvp) HShowerHitDigitizer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerHitDigitizer(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerHitDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerHitDigitizer& obj = ((HShowerHitDigitizer*) G__getstructoffset())->operator=(*(HShowerHitDigitizer*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHitDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHitDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHitDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_615_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHitDigitizer G__THShowerHitDigitizer;
static int G__ShowerDict_615_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHitDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHitDigitizer*) (soff+(sizeof(HShowerHitDigitizer)*i)))->~G__THShowerHitDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHitDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHitDigitizer*) (soff))->~G__THShowerHitDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerPadDigitizer */
static int G__ShowerDict_617_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPadDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPadDigitizer[n];
     } else {
       p = new((void*) gvp) HShowerPadDigitizer[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPadDigitizer;
     } else {
       p = new((void*) gvp) HShowerPadDigitizer;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPadDigitizer* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerPadDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerPadDigitizer((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerPadDigitizer& obj = ((HShowerPadDigitizer*) G__getstructoffset())->operator=(*(HShowerPadDigitizer*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPadDigitizer*) G__getstructoffset())->getTrackCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadDigitizer*) G__getstructoffset())->setTrackCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerPadDigitizer*) G__getstructoffset())->checkEfficiency((HShowerRawMatr*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((HShowerPadDigitizer*) G__getstructoffset())->gainCharge((HShowerRawMatr*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerPadDigitizer::setModeTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerPadDigitizer::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPadDigitizer::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerPadDigitizer::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerPadDigitizer::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPadDigitizer*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPadDigitizer::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPadDigitizer::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPadDigitizer::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_617_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPadDigitizer::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerPadDigitizer G__THShowerPadDigitizer;
static int G__ShowerDict_617_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerPadDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerPadDigitizer*) (soff+(sizeof(HShowerPadDigitizer)*i)))->~G__THShowerPadDigitizer();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerPadDigitizer*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerPadDigitizer*) (soff))->~G__THShowerPadDigitizer();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHit */
static int G__ShowerDict_629_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHit[n];
     } else {
       p = new((void*) gvp) HShowerHit[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHit;
     } else {
       p = new((void*) gvp) HShowerHit;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHit* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerHit((const Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerHit((const Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHit*) G__getstructoffset())->clear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HShowerHit*) G__getstructoffset())->calcAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHit*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHit*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHit*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHit*) G__getstructoffset())->getRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHit*) G__getstructoffset())->getCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getSum((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getSum25());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getSumN());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getVar((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHit*) G__getstructoffset())->getClusterSize((Int_t) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getLocalMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->getXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getZ());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->getSigmaXY((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getSigmaX());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getSigmaY());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->getLabXYZ((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->getSphereCoord((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getSumDiff01());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHit*) G__getstructoffset())->getSumDiff02());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->copyToTrueAddress();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setTrueAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHit*) G__getstructoffset())->getTrueAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setRow((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setCol((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setSum((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setVar((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setClusterSize((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setSum25((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setLocalMax((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setSigmaXY((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setLabXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setSphereCoord((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->setShower((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->updateCalc();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHit::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHit::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHit::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_51(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHit::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_55(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHit*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_56(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHit::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_57(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHit::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_58(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHit::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_629_0_59(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHit::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_629_0_60(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerHit* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerHit(*(HShowerHit*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHit G__THShowerHit;
static int G__ShowerDict_629_0_61(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHit*) (soff+(sizeof(HShowerHit)*i)))->~G__THShowerHit();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHit*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHit*) (soff))->~G__THShowerHit();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_629_0_62(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHit* dest = (HShowerHit*) G__getstructoffset();
   *dest = *(HShowerHit*) libp->para[0].ref;
   const HShowerHit& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerPID */
static int G__ShowerDict_637_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPID[n];
     } else {
       p = new((void*) gvp) HShowerPID[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPID;
     } else {
       p = new((void*) gvp) HShowerPID;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPID* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerPID((const Float_t) G__double(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerPID((const Float_t) G__double(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPID*) G__getstructoffset())->clear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerPID*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerPID*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerPID*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerPID*) G__getstructoffset())->getRow());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerPID*) G__getstructoffset())->getCol());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->getXYZ((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->getSphereCoord((Float_t*) G__int(libp->para[0]), (Float_t*) G__int(libp->para[1])
, (Float_t*) G__int(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerPID*) G__getstructoffset())->getCharge());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerPID*) G__getstructoffset())->getShower());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setRow((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setCol((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setXYZ((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setSphereCoord((Float_t) G__double(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setCharge((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->setShower((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerPID::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPID::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerPID::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerPID::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPID*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPID::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPID::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPID::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_637_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPID::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_637_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerPID* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerPID(*(HShowerPID*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerPID G__THShowerPID;
static int G__ShowerDict_637_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerPID*) (soff+(sizeof(HShowerPID)*i)))->~G__THShowerPID();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerPID*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerPID*) (soff))->~G__THShowerPID();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_637_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPID* dest = (HShowerPID*) G__getstructoffset();
   *dest = *(HShowerPID*) libp->para[0].ref;
   const HShowerPID& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHitHeader */
static int G__ShowerDict_638_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitHeader* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitHeader[n];
     } else {
       p = new((void*) gvp) HShowerHitHeader[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitHeader;
     } else {
       p = new((void*) gvp) HShowerHitHeader;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHeader*) G__getstructoffset())->setFiredCells((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->getFiredCells());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->incFiredCells((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->incFiredCells());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHeader*) G__getstructoffset())->setLocalMax((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->getLocalMax());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->incLocalMax((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->incLocalMax());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHeader*) G__getstructoffset())->setClusters((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->getClusters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->incClusters((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((HShowerHitHeader*) G__getstructoffset())->incClusters());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHitHeader*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHitHeader*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHeader*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHeader*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHitHeader::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitHeader::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHitHeader::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHitHeader::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHeader*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitHeader::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitHeader::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitHeader::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_638_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitHeader::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_638_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerHitHeader* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerHitHeader(*(HShowerHitHeader*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHitHeader G__THShowerHitHeader;
static int G__ShowerDict_638_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHitHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHitHeader*) (soff+(sizeof(HShowerHitHeader)*i)))->~G__THShowerHitHeader();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHitHeader*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHitHeader*) (soff))->~G__THShowerHitHeader();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_638_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitHeader* dest = (HShowerHitHeader*) G__getstructoffset();
   *dest = *(HShowerHitHeader*) libp->para[0].ref;
   const HShowerHitHeader& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerCriterium */
static int G__ShowerDict_639_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCriterium* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCriterium[n];
     } else {
       p = new((void*) gvp) HShowerCriterium[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCriterium;
     } else {
       p = new((void*) gvp) HShowerCriterium;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCriterium* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerCriterium((HShowerHitFPar*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerCriterium((HShowerHitFPar*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCriterium*) G__getstructoffset())->showerCriterium((HShowerHit*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCriterium*) G__getstructoffset())->showerCriterium((HShowerHit*) G__int(libp->para[0]), *(Int_t*) G__Intref(&libp->para[1])
, (HShowerHitFPar*) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCriterium*) G__getstructoffset())->setParams((HShowerHitFPar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCriterium*) G__getstructoffset())->getParams());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCriterium::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCriterium::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCriterium::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCriterium::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCriterium*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCriterium::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCriterium::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCriterium::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_639_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCriterium::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_639_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerCriterium* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerCriterium(*(HShowerCriterium*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCriterium G__THShowerCriterium;
static int G__ShowerDict_639_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCriterium*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCriterium*) (soff+(sizeof(HShowerCriterium)*i)))->~G__THShowerCriterium();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCriterium*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCriterium*) (soff))->~G__THShowerCriterium();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_639_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCriterium* dest = (HShowerCriterium*) G__getstructoffset();
   *dest = *(HShowerCriterium*) libp->para[0].ref;
   const HShowerCriterium& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHitFPar */
static int G__ShowerDict_640_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitFPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerHitFPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerHitFPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitFPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HShowerHitFPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerHitFPar[n];
       } else {
         p = new((void*) gvp) HShowerHitFPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerHitFPar;
       } else {
         p = new((void*) gvp) HShowerHitFPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFPar*) G__getstructoffset())->defaultInit();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitFPar*) G__getstructoffset())->getColBord((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitFPar*) G__getstructoffset())->getRowBord((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2]), (Int_t*) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitFPar*) G__getstructoffset())->getModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitFPar*) G__getstructoffset())->getSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitFPar*) G__getstructoffset())->getThreshold());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHitFPar*) G__getstructoffset())->getGainPost1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHitFPar*) G__getstructoffset())->getThresholdPost1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHitFPar*) G__getstructoffset())->getGainPost2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHitFPar*) G__getstructoffset())->getThresholdPost2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitFPar*) G__getstructoffset())->setColBord((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitFPar*) G__getstructoffset())->setRowBord((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFPar*) G__getstructoffset())->setThreshold((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFPar*) G__getstructoffset())->setGainPost1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFPar*) G__getstructoffset())->setThresholdPost1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFPar*) G__getstructoffset())->setGainPost2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFPar*) G__getstructoffset())->setThresholdPost2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHitFPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitFPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHitFPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHitFPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitFPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitFPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitFPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_640_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitFPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_640_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerHitFPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerHitFPar(*(HShowerHitFPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHitFPar G__THShowerHitFPar;
static int G__ShowerDict_640_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHitFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHitFPar*) (soff+(sizeof(HShowerHitFPar)*i)))->~G__THShowerHitFPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHitFPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHitFPar*) (soff))->~G__THShowerHitFPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_640_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitFPar* dest = (HShowerHitFPar*) G__getstructoffset();
   *dest = *(HShowerHitFPar*) libp->para[0].ref;
   const HShowerHitFPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHitFinder */
static int G__ShowerDict_641_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitFinder[n];
     } else {
       p = new((void*) gvp) HShowerHitFinder[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitFinder;
     } else {
       p = new((void*) gvp) HShowerHitFinder;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitFinder* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerHitFinder((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerHitFinder((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitFinder*) G__getstructoffset())->initParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitFinder*) G__getstructoffset())->lookForHit((HShowerCal*) G__int(libp->para[0]), *(HLocation*) libp->para[1].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letdouble(result7, 102, (double) ((HShowerHitFinder*) G__getstructoffset())->calculateSum(*(HLocation*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Int_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letdouble(result7, 102, (double) ((HShowerHitFinder*) G__getstructoffset())->calculateSum(*(HLocation*) libp->para[0].ref, (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHitFinder*) G__getstructoffset())->calculateVar(*(HLocation*) libp->para[0].ref, (Int_t) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitFinder*) G__getstructoffset())->isLocalMax(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerHitFinder& obj = ((HShowerHitFinder*) G__getstructoffset())->operator=(*(HShowerHitFinder*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitFinder*) G__getstructoffset())->getCalCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitFinder*) G__getstructoffset())->getHitCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitFinder*) G__getstructoffset())->getPIDCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitFinder*) G__getstructoffset())->getHitFPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitFinder*) G__getstructoffset())->getGeometry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitFinder*) G__getstructoffset())->getHSpecGeomPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->setCalCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->setHitCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->setPIDCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->setHitFPar((HShowerHitFPar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->setGeometry((HShowerGeometry*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->setCriterium((HShowerCriterium*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->setHSpecGeomPar((HSpecGeomPar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitFinder*) G__getstructoffset())->IsSortFlagSet());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitFinder*) G__getstructoffset())->IsFillPID());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HShowerHitFinder*) G__getstructoffset())->setSortFlag((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HShowerHitFinder*) G__getstructoffset())->setSortFlag();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HShowerHitFinder*) G__getstructoffset())->setFillPID((Bool_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HShowerHitFinder*) G__getstructoffset())->setFillPID();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHitFinder::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitFinder::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHitFinder::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHitFinder::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitFinder*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitFinder::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitFinder::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitFinder::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_641_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitFinder::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHitFinder G__THShowerHitFinder;
static int G__ShowerDict_641_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHitFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHitFinder*) (soff+(sizeof(HShowerHitFinder)*i)))->~G__THShowerHitFinder();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHitFinder*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHitFinder*) (soff))->~G__THShowerHitFinder();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerDetector */
static int G__ShowerDict_644_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerDetector* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerDetector[n];
     } else {
       p = new((void*) gvp) HShowerDetector[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerDetector;
     } else {
       p = new((void*) gvp) HShowerDetector;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HShowerDetector*) G__getstructoffset())->buildTask((const Text_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HShowerDetector*) G__getstructoffset())->buildTask((const Text_t*) G__int(libp->para[0])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerDetector*) G__getstructoffset())->buildLinearCat((const Text_t*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 103, (long) ((HShowerDetector*) G__getstructoffset())->init((const Text_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 103, (long) ((HShowerDetector*) G__getstructoffset())->init());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerDetector*) G__getstructoffset())->getShowerSectors());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerDetector*) G__getstructoffset())->getShowerModules());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerDetector*) G__getstructoffset())->getRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerDetector*) G__getstructoffset())->getColumns());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerDetector::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDetector::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerDetector::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerDetector::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerDetector*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDetector::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerDetector::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerDetector::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_644_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerDetector::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_644_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerDetector* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerDetector(*(HShowerDetector*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerDetector G__THShowerDetector;
static int G__ShowerDict_644_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerDetector*) (soff+(sizeof(HShowerDetector)*i)))->~G__THShowerDetector();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerDetector*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerDetector*) (soff))->~G__THShowerDetector();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_644_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerDetector* dest = (HShowerDetector*) G__getstructoffset();
   *dest = *(HShowerDetector*) libp->para[0].ref;
   const HShowerDetector& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerGeomPar */
static int G__ShowerDict_652_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerGeomPar* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerGeomPar(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerGeomPar((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerGeomPar((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HShowerGeomPar((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerGeomPar[n];
       } else {
         p = new((void*) gvp) HShowerGeomPar[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerGeomPar;
       } else {
         p = new((void*) gvp) HShowerGeomPar;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerGeomPar::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeomPar::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerGeomPar::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerGeomPar::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerGeomPar*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeomPar::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeomPar::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerGeomPar::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_652_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerGeomPar::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_652_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerGeomPar* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerGeomPar(*(HShowerGeomPar*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerGeomPar G__THShowerGeomPar;
static int G__ShowerDict_652_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerGeomPar*) (soff+(sizeof(HShowerGeomPar)*i)))->~G__THShowerGeomPar();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerGeomPar*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerGeomPar*) (soff))->~G__THShowerGeomPar();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_652_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerGeomPar* dest = (HShowerGeomPar*) G__getstructoffset();
   *dest = *(HShowerGeomPar*) libp->para[0].ref;
   const HShowerGeomPar& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HGeomVector2 */
static int G__ShowerDict_653_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVector2* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVector2(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) HGeomVector2(
(Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1])
, (Double_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVector2((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) HGeomVector2((Double_t) G__double(libp->para[0]), (Double_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HGeomVector2((Double_t) G__double(libp->para[0]));
     } else {
       p = new((void*) gvp) HGeomVector2((Double_t) G__double(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomVector2[n];
       } else {
         p = new((void*) gvp) HGeomVector2[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HGeomVector2;
       } else {
         p = new((void*) gvp) HGeomVector2;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVector2* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HGeomVector2(*(HGeomVector*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) HGeomVector2(*(HGeomVector*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector2*) G__getstructoffset())->getRad());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector2*) G__getstructoffset())->getPhi());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((const HGeomVector2*) G__getstructoffset())->getTheta());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector2*) G__getstructoffset())->setRad((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector2*) G__getstructoffset())->setPhi((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector2*) G__getstructoffset())->setTheta((const Double_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector2*) G__getstructoffset())->sphereCoord(*(Float_t*) G__Floatref(&libp->para[0]), *(Float_t*) G__Floatref(&libp->para[1])
, *(Float_t*) G__Floatref(&libp->para[2]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HGeomVector2::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVector2::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HGeomVector2::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HGeomVector2::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HGeomVector2*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVector2::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVector2::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HGeomVector2::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_653_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HGeomVector2::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_653_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HGeomVector2* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HGeomVector2(*(HGeomVector2*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HGeomVector2 G__THGeomVector2;
static int G__ShowerDict_653_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HGeomVector2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HGeomVector2*) (soff+(sizeof(HGeomVector2)*i)))->~G__THGeomVector2();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HGeomVector2*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HGeomVector2*) (soff))->~G__THGeomVector2();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_653_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HGeomVector2* dest = (HGeomVector2*) G__getstructoffset();
   *dest = *(HGeomVector2*) libp->para[0].ref;
   const HGeomVector2& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerContFact */
static int G__ShowerDict_656_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerContFact* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerContFact[n];
     } else {
       p = new((void*) gvp) HShowerContFact[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerContFact;
     } else {
       p = new((void*) gvp) HShowerContFact;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerContFact::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerContFact::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerContFact::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerContFact::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerContFact*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerContFact::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerContFact::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerContFact::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_656_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerContFact::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_656_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerContFact* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerContFact(*(HShowerContFact*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerContFact G__THShowerContFact;
static int G__ShowerDict_656_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerContFact*) (soff+(sizeof(HShowerContFact)*i)))->~G__THShowerContFact();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerContFact*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerContFact*) (soff))->~G__THShowerContFact();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_656_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerContFact* dest = (HShowerContFact*) G__getstructoffset();
   *dest = *(HShowerContFact*) libp->para[0].ref;
   const HShowerContFact& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerParAsciiFileIo */
static int G__ShowerDict_660_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerParAsciiFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerParAsciiFileIo((fstream*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerParAsciiFileIo((fstream*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerParAsciiFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParAsciiFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerParAsciiFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerParAsciiFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerParAsciiFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParAsciiFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerParAsciiFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParAsciiFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_660_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerParAsciiFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_660_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerParAsciiFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerParAsciiFileIo(*(HShowerParAsciiFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerParAsciiFileIo G__THShowerParAsciiFileIo;
static int G__ShowerDict_660_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerParAsciiFileIo*) (soff+(sizeof(HShowerParAsciiFileIo)*i)))->~G__THShowerParAsciiFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerParAsciiFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerParAsciiFileIo*) (soff))->~G__THShowerParAsciiFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_660_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerParAsciiFileIo* dest = (HShowerParAsciiFileIo*) G__getstructoffset();
   *dest = *(HShowerParAsciiFileIo*) libp->para[0].ref;
   const HShowerParAsciiFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerParRootFileIo */
static int G__ShowerDict_663_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerParRootFileIo* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) HShowerParRootFileIo((HParRootFile*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerParRootFileIo::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParRootFileIo::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerParRootFileIo::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerParRootFileIo::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerParRootFileIo*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParRootFileIo::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerParRootFileIo::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParRootFileIo::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_663_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerParRootFileIo::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_663_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerParRootFileIo* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerParRootFileIo(*(HShowerParRootFileIo*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerParRootFileIo G__THShowerParRootFileIo;
static int G__ShowerDict_663_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerParRootFileIo*) (soff+(sizeof(HShowerParRootFileIo)*i)))->~G__THShowerParRootFileIo();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerParRootFileIo*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerParRootFileIo*) (soff))->~G__THShowerParRootFileIo();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_663_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerParRootFileIo* dest = (HShowerParRootFileIo*) G__getstructoffset();
   *dest = *(HShowerParRootFileIo*) libp->para[0].ref;
   const HShowerParRootFileIo& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerTrack */
static int G__ShowerDict_664_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerTrack[n];
     } else {
       p = new((void*) gvp) HShowerTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerTrack;
     } else {
       p = new((void*) gvp) HShowerTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerTrack*) G__getstructoffset())->clear());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerTrack*) G__getstructoffset())->getAddress());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerTrack*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTrack*) G__getstructoffset())->setAddress((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTrack*) G__getstructoffset())->setTrack((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_664_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_664_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerTrack(*(HShowerTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerTrack G__THShowerTrack;
static int G__ShowerDict_664_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerTrack*) (soff+(sizeof(HShowerTrack)*i)))->~G__THShowerTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerTrack*) (soff))->~G__THShowerTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_664_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerTrack* dest = (HShowerTrack*) G__getstructoffset();
   *dest = *(HShowerTrack*) libp->para[0].ref;
   const HShowerTrack& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerTaskSet */
static int G__ShowerDict_668_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerTaskSet[n];
     } else {
       p = new((void*) gvp) HShowerTaskSet[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerTaskSet;
     } else {
       p = new((void*) gvp) HShowerTaskSet;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerTaskSet* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerTaskSet((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTaskSet*) G__getstructoffset())->setAnalysisSimOrReal((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTaskSet*) G__getstructoffset())->setAnalysisLevel((Option_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTaskSet*) G__getstructoffset())->passArguments(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTaskSet*) G__getstructoffset())->printOptions();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      G__letint(result7, 85, (long) ((HShowerTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0]), (Option_t*) G__int(libp->para[1])));
      break;
   case 1:
      G__letint(result7, 85, (long) ((HShowerTaskSet*) G__getstructoffset())->make((const Char_t*) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 85, (long) ((HShowerTaskSet*) G__getstructoffset())->make());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerTaskSet::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerTaskSet::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerTaskSet::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerTaskSet::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerTaskSet*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerTaskSet::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerTaskSet::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerTaskSet::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_668_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerTaskSet::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerTaskSet G__THShowerTaskSet;
static int G__ShowerDict_668_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerTaskSet*) (soff+(sizeof(HShowerTaskSet)*i)))->~G__THShowerTaskSet();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerTaskSet*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerTaskSet*) (soff))->~G__THShowerTaskSet();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHistCell */
static int G__ShowerDict_671_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHistCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHistCell[n];
     } else {
       p = new((void*) gvp) HShowerHistCell[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHistCell;
     } else {
       p = new((void*) gvp) HShowerHistCell;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHistCell* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 4
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerHistCell(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) HShowerHistCell(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHistCell*) G__getstructoffset())->reset());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHistCell*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 3:
      G__letint(result7, 103, (long) ((HShowerHistCell*) G__getstructoffset())->draw((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Option_t*) G__int(libp->para[2])));
      break;
   case 2:
      G__letint(result7, 103, (long) ((HShowerHistCell*) G__getstructoffset())->draw((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHistCell*) G__getstructoffset())->book());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHistCell*) G__getstructoffset())->book((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->deleteHist();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->calculate((Int_t) G__int(libp->para[0]), (HShowerCalPar*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHistCell*) G__getstructoffset())->getHistogram());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->writeHistogram();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHistCell*) G__getstructoffset())->getSector());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHistCell*) G__getstructoffset())->getModule());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHistCell*) G__getstructoffset())->getRows());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 99, (long) ((HShowerHistCell*) G__getstructoffset())->getCols());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->setSector((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->setModule((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->setRows((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->setCols((Char_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->setChannel10pC((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerHistCell*) G__getstructoffset())->getChannel10pC());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->setGeometry((HShowerGeometry*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHistCell*) G__getstructoffset())->getGeometry());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHistCell::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHistCell::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHistCell::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHistCell::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHistCell::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_40(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHistCell::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_41(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHistCell::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_42(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHistCell::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_43(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->calTest(*(HLocation*) libp->para[0].ref, (HShowerCalParCell*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_44(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->calElect(*(HLocation*) libp->para[0].ref, (HShowerCalParCell*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_45(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->runSigma(*(HLocation*) libp->para[0].ref, (HShowerCalParCell*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_46(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->runThreshold(*(HLocation*) libp->para[0].ref, (HShowerCalParCell*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_671_0_47(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHistCell*) G__getstructoffset())->runIntegrate(*(HLocation*) libp->para[0].ref, (HShowerCalParCell*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]), (Float_t) G__double(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_671_0_48(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerHistCell* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerHistCell(*(HShowerHistCell*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHistCell G__THShowerHistCell;
static int G__ShowerDict_671_0_49(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHistCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHistCell*) (soff+(sizeof(HShowerHistCell)*i)))->~G__THShowerHistCell();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHistCell*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHistCell*) (soff))->~G__THShowerHistCell();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_671_0_50(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHistCell* dest = (HShowerHistCell*) G__getstructoffset();
   *dest = *(HShowerHistCell*) libp->para[0].ref;
   const HShowerHistCell& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHist */
static int G__ShowerDict_672_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHist(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerHist(
(const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1])
, (const Char_t*) G__int(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHist((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerHist((const Char_t*) G__int(libp->para[0]), (const Char_t*) G__int(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHist((const Char_t*) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HShowerHist((const Char_t*) G__int(libp->para[0]));
     }
     break;
   case 0:
     int n = G__getaryconstruct();
     if (n) {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerHist[n];
       } else {
         p = new((void*) gvp) HShowerHist[n];
       }
     } else {
       if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
         p = new HShowerHist;
       } else {
         p = new((void*) gvp) HShowerHist;
       }
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->setSetup((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->setCellClassName((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HShowerHist*) G__getstructoffset())->getCellClassName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHist*) G__getstructoffset())->getSlot(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHist*) G__getstructoffset())->getObject(*(HLocation*) libp->para[0].ref));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHist*) G__getstructoffset())->defaultInit());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->bookAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->book(*(HLocation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->book((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->resetAll();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->reset(*(HLocation*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->reset((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->fill(*(HLocation*) libp->para[0].ref, (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->fill((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Int_t) G__int(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((HShowerHist*) G__getstructoffset())->draw(*(HLocation*) libp->para[0].ref, (Option_t*) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((HShowerHist*) G__getstructoffset())->draw(*(HLocation*) libp->para[0].ref);
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 5:
      ((HShowerHist*) G__getstructoffset())->draw((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3])
, (Option_t*) G__int(libp->para[4]));
      G__setnull(result7);
      break;
   case 4:
      ((HShowerHist*) G__getstructoffset())->draw((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->calculate((Int_t) G__int(libp->para[0]), (HShowerCalPar*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_672_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_672_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerHist* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerHist(*(HShowerHist*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHist G__THShowerHist;
static int G__ShowerDict_672_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHist*) (soff+(sizeof(HShowerHist)*i)))->~G__THShowerHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHist*) (soff))->~G__THShowerHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__ShowerDict_672_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHist* dest = (HShowerHist*) G__getstructoffset();
   *dest = *(HShowerHist*) libp->para[0].ref;
   const HShowerHist& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerCalParCalculator */
static int G__ShowerDict_673_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalParCalculator* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator(
(Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator((Int_t) G__int(libp->para[0]), (Float_t) G__double(libp->para[1]));
     }
     break;
   case 1:
     //m: 1
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator((Int_t) G__int(libp->para[0]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator((Int_t) G__int(libp->para[0]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalParCalculator* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalParCalculator* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 5:
     //m: 5
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])
, (Float_t) G__double(libp->para[4]));
     }
     break;
   case 4:
     //m: 4
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]), (Float_t) G__double(libp->para[3]));
     }
     break;
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerCalParCalculator(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (const Text_t*) G__int(libp->para[2]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalParCalculator*) G__getstructoffset())->getCalPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalParCalculator*) G__getstructoffset())->getCalParHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->setCalPar((HParSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->setCalParHist((HParSet*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->initCalPar();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->setMethod((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->setMethod((const Char_t*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerCalParCalculator*) G__getstructoffset())->getMethod());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((HShowerCalParCalculator*) G__getstructoffset())->getMethodName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->setParam1((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalParCalculator*) G__getstructoffset())->getParam1());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->setParam2((Float_t) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 102, (double) ((HShowerCalParCalculator*) G__getstructoffset())->getParam2());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCalParCalculator::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalParCalculator::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCalParCalculator::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCalParCalculator::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalParCalculator*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalParCalculator::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalParCalculator::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalParCalculator::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_673_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalParCalculator::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCalParCalculator G__THShowerCalParCalculator;
static int G__ShowerDict_673_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCalParCalculator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCalParCalculator*) (soff+(sizeof(HShowerCalParCalculator)*i)))->~G__THShowerCalParCalculator();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCalParCalculator*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCalParCalculator*) (soff))->~G__THShowerCalParCalculator();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerCalHist */
static int G__ShowerDict_674_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalHist[n];
     } else {
       p = new((void*) gvp) HShowerCalHist[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCalHist;
     } else {
       p = new((void*) gvp) HShowerCalHist;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCalHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerCalHist((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerCalHist((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerCalHist*) G__getstructoffset())->getCalCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalHist*) G__getstructoffset())->setCalCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalHist*) G__getstructoffset())->bookHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalHist*) G__getstructoffset())->fillHist((HShowerCal*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalHist*) G__getstructoffset())->fillHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalHist*) G__getstructoffset())->writeHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCalHist*) G__getstructoffset())->finalizeHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCalHist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalHist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCalHist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCalHist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCalHist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalHist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalHist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCalHist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_674_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCalHist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCalHist G__THShowerCalHist;
static int G__ShowerDict_674_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCalHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCalHist*) (soff+(sizeof(HShowerCalHist)*i)))->~G__THShowerCalHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCalHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCalHist*) (soff))->~G__THShowerCalHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHitHist */
static int G__ShowerDict_675_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitHist[n];
     } else {
       p = new((void*) gvp) HShowerHitHist[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitHist;
     } else {
       p = new((void*) gvp) HShowerHitHist;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitHist* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerHitHist((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerHitHist((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitHist*) G__getstructoffset())->getHitCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHist*) G__getstructoffset())->setHitCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHitHist::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitHist::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHitHist::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHitHist::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitHist*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitHist::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitHist::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitHist::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitHist::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitHist*) G__getstructoffset())->bookHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitHist*) G__getstructoffset())->fillHist((HShowerHit*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitHist*) G__getstructoffset())->fillHist((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Float_t) G__double(libp->para[3])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitHist*) G__getstructoffset())->writeHist());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_675_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerHitHist*) G__getstructoffset())->finalizeHist());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHitHist G__THShowerHitHist;
static int G__ShowerDict_675_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHitHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHitHist*) (soff+(sizeof(HShowerHitHist)*i)))->~G__THShowerHitHist();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHitHist*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHitHist*) (soff))->~G__THShowerHitHist();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerCopy */
static int G__ShowerDict_676_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCopy* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCopy[n];
     } else {
       p = new((void*) gvp) HShowerCopy[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCopy;
     } else {
       p = new((void*) gvp) HShowerCopy;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerCopy* p = NULL;
   char* gvp = (char*) G__getgvp();
   switch (libp->paran) {
   case 3:
     //m: 3
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCopy(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     } else {
       p = new((void*) gvp) HShowerCopy(
(const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1])
, (Float_t) G__double(libp->para[2]));
     }
     break;
   case 2:
     //m: 2
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerCopy((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     } else {
       p = new((void*) gvp) HShowerCopy((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
     }
     break;
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCopy*) G__getstructoffset())->setInCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCopy*) G__getstructoffset())->setOutCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerCopy*) G__getstructoffset())->copy((HShowerRawMatr*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerCopy::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCopy::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerCopy::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerCopy::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerCopy*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCopy::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCopy::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerCopy::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_676_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerCopy::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerCopy G__THShowerCopy;
static int G__ShowerDict_676_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerCopy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerCopy*) (soff+(sizeof(HShowerCopy)*i)))->~G__THShowerCopy();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerCopy*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerCopy*) (soff))->~G__THShowerCopy();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHitSim */
static int G__ShowerDict_677_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitSim* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitSim[n];
     } else {
       p = new((void*) gvp) HShowerHitSim[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitSim;
     } else {
       p = new((void*) gvp) HShowerHitSim;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitSim*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitSim*) G__getstructoffset())->setTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      G__letint(result7, 105, (long) ((const HShowerHitSim*) G__getstructoffset())->getTrack((Int_t) G__int(libp->para[0])));
      break;
   case 0:
      G__letint(result7, 105, (long) ((const HShowerHitSim*) G__getstructoffset())->getTrack());
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((HShowerHitSim*) G__getstructoffset())->getNTracks());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 1:
      ((HShowerHitSim*) G__getstructoffset())->setNTracks((Int_t) G__int(libp->para[0]));
      G__setnull(result7);
      break;
   case 0:
      ((HShowerHitSim*) G__getstructoffset())->setNTracks();
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerHitSim& obj = ((HShowerHitSim*) G__getstructoffset())->operator=(*(HShowerHitSim*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerHitSim& obj = ((HShowerHitSim*) G__getstructoffset())->operator=(*(HShowerHit*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHitSim::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitSim::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHitSim::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHitSim::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitSim*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitSim::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitSim::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitSim::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_677_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitSim::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_677_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerHitSim* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerHitSim(*(HShowerHitSim*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHitSim G__THShowerHitSim;
static int G__ShowerDict_677_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHitSim*) (soff+(sizeof(HShowerHitSim)*i)))->~G__THShowerHitSim();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHitSim*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHitSim*) (soff))->~G__THShowerHitSim();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerPIDTrack */
static int G__ShowerDict_678_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPIDTrack* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPIDTrack[n];
     } else {
       p = new((void*) gvp) HShowerPIDTrack[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPIDTrack;
     } else {
       p = new((void*) gvp) HShowerPIDTrack;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrack*) G__getstructoffset())->clear();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrack*) G__getstructoffset())->setTrack((const Int_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((const HShowerPIDTrack*) G__getstructoffset())->getTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerPIDTrack& obj = ((HShowerPIDTrack*) G__getstructoffset())->operator=(*(HShowerPIDTrack*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const HShowerPIDTrack& obj = ((HShowerPIDTrack*) G__getstructoffset())->operator=(*(HShowerPID*) libp->para[0].ref);
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerPIDTrack::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPIDTrack::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerPIDTrack::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerPIDTrack::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrack*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPIDTrack::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPIDTrack::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPIDTrack::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_678_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPIDTrack::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__ShowerDict_678_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   HShowerPIDTrack* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new HShowerPIDTrack(*(HShowerPIDTrack*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerPIDTrack G__THShowerPIDTrack;
static int G__ShowerDict_678_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerPIDTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerPIDTrack*) (soff+(sizeof(HShowerPIDTrack)*i)))->~G__THShowerPIDTrack();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerPIDTrack*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerPIDTrack*) (soff))->~G__THShowerPIDTrack();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerHitTrackMatcher */
static int G__ShowerDict_679_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitTrackMatcher* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitTrackMatcher[n];
     } else {
       p = new((void*) gvp) HShowerHitTrackMatcher[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerHitTrackMatcher;
     } else {
       p = new((void*) gvp) HShowerHitTrackMatcher;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerHitTrackMatcher* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerHitTrackMatcher((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerHitTrackMatcher((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitTrackMatcher*) G__getstructoffset())->getTrackCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerHitTrackMatcher*) G__getstructoffset())->getHitCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitTrackMatcher*) G__getstructoffset())->setTrackCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitTrackMatcher*) G__getstructoffset())->setHitCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerHitTrackMatcher::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitTrackMatcher::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerHitTrackMatcher::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerHitTrackMatcher::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerHitTrackMatcher*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitTrackMatcher::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitTrackMatcher::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerHitTrackMatcher::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_679_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerHitTrackMatcher::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerHitTrackMatcher G__THShowerHitTrackMatcher;
static int G__ShowerDict_679_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerHitTrackMatcher*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerHitTrackMatcher*) (soff+(sizeof(HShowerHitTrackMatcher)*i)))->~G__THShowerHitTrackMatcher();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerHitTrackMatcher*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerHitTrackMatcher*) (soff))->~G__THShowerHitTrackMatcher();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerPIDTrackMatcher */
static int G__ShowerDict_680_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPIDTrackMatcher* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPIDTrackMatcher[n];
     } else {
       p = new((void*) gvp) HShowerPIDTrackMatcher[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerPIDTrackMatcher;
     } else {
       p = new((void*) gvp) HShowerPIDTrackMatcher;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerPIDTrackMatcher* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerPIDTrackMatcher((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerPIDTrackMatcher((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrackMatcher*) G__getstructoffset())->addPIDTrack((HShowerPID*) G__int(libp->para[0]), (HShowerTrack*) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPIDTrackMatcher*) G__getstructoffset())->getTrackCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPIDTrackMatcher*) G__getstructoffset())->getPIDCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerPIDTrackMatcher*) G__getstructoffset())->getPIDTrack());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrackMatcher*) G__getstructoffset())->setTrackCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrackMatcher*) G__getstructoffset())->setPIDCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrackMatcher*) G__getstructoffset())->setPIDTrack((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerPIDTrackMatcher::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPIDTrackMatcher::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerPIDTrackMatcher::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerPIDTrackMatcher::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerPIDTrackMatcher*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPIDTrackMatcher::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPIDTrackMatcher::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerPIDTrackMatcher::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_680_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerPIDTrackMatcher::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerPIDTrackMatcher G__THShowerPIDTrackMatcher;
static int G__ShowerDict_680_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerPIDTrackMatcher*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerPIDTrackMatcher*) (soff+(sizeof(HShowerPIDTrackMatcher)*i)))->~G__THShowerPIDTrackMatcher();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerPIDTrackMatcher*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerPIDTrackMatcher*) (soff))->~G__THShowerPIDTrackMatcher();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* HShowerParticleIdentifier */
static int G__ShowerDict_681_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerParticleIdentifier* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerParticleIdentifier[n];
     } else {
       p = new((void*) gvp) HShowerParticleIdentifier[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new HShowerParticleIdentifier;
     } else {
       p = new((void*) gvp) HShowerParticleIdentifier;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   HShowerParticleIdentifier* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 2
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new HShowerParticleIdentifier((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   } else {
     p = new((void*) gvp) HShowerParticleIdentifier((const Text_t*) G__int(libp->para[0]), (const Text_t*) G__int(libp->para[1]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 103, (long) ((HShowerParticleIdentifier*) G__getstructoffset())->initParameters());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerParticleIdentifier*) G__getstructoffset())->getHitCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerParticleIdentifier*) G__getstructoffset())->getPIDCat());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((HShowerParticleIdentifier*) G__getstructoffset())->getHitFPar());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerParticleIdentifier*) G__getstructoffset())->setHitCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerParticleIdentifier*) G__getstructoffset())->setPIDCat((HCategory*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerParticleIdentifier*) G__getstructoffset())->setHitFPar((HShowerHitFPar*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerParticleIdentifier*) G__getstructoffset())->setCriterium((HShowerCriterium*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) HShowerParticleIdentifier::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParticleIdentifier::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) HShowerParticleIdentifier::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      HShowerParticleIdentifier::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((HShowerParticleIdentifier*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParticleIdentifier::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerParticleIdentifier::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) HShowerParticleIdentifier::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__ShowerDict_681_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) HShowerParticleIdentifier::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef HShowerParticleIdentifier G__THShowerParticleIdentifier;
static int G__ShowerDict_681_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (HShowerParticleIdentifier*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((HShowerParticleIdentifier*) (soff+(sizeof(HShowerParticleIdentifier)*i)))->~G__THShowerParticleIdentifier();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (HShowerParticleIdentifier*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((HShowerParticleIdentifier*) (soff))->~G__THShowerParticleIdentifier();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* HShowerCal */

/* HShowerCalParCell */

/* HShowerCalPar */

/* HShowerRaw */

/* HShowerRawMatr */

/* HShowerCalibrater */

/* HShowerRawHist */

/* HShowerUnpacker */

/* HShowerGeantReader */

/* HShowerGeantWire */

/* HShowerFrameCorner */

/* HShowerFrame */

/* HShowerWireTab */

/* HShowerPad */

/* HShowerPadTab */

/* HShowerDigiPar */

/* HShowerGeometry */

/* HShowerDigitizer */

/* HShowerHitDigitizer */

/* HShowerPadDigitizer */

/* HShowerHit */

/* HShowerPID */

/* HShowerHitHeader */

/* HShowerCriterium */

/* HShowerHitFPar */

/* HShowerHitFinder */

/* HShowerDetector */

/* HShowerGeomPar */

/* HGeomVector2 */

/* HShowerContFact */

/* HShowerParAsciiFileIo */

/* HShowerParRootFileIo */

/* HShowerTrack */

/* HShowerTaskSet */

/* HShowerHistCell */

/* HShowerHist */

/* HShowerCalParCalculator */

/* HShowerCalHist */

/* HShowerHitHist */

/* HShowerCopy */

/* HShowerHitSim */

/* HShowerPIDTrack */

/* HShowerHitTrackMatcher */

/* HShowerPIDTrackMatcher */

/* HShowerParticleIdentifier */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncShowerDict {
 public:
  G__Sizep2memfuncShowerDict(): p(&G__Sizep2memfuncShowerDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncShowerDict::*p)();
};

size_t G__get_sizep2memfuncShowerDict()
{
  G__Sizep2memfuncShowerDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceShowerDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal))) {
     HShowerCal *G__Lderived;
     G__Lderived=(HShowerCal*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal),G__get_linked_tagnum(&G__ShowerDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell))) {
     HShowerCalParCell *G__Lderived;
     G__Lderived=(HShowerCalParCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar))) {
     HShowerCalPar *G__Lderived;
     G__Lderived=(HShowerCalPar*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar),G__get_linked_tagnum(&G__ShowerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw))) {
     HShowerRaw *G__Lderived;
     G__Lderived=(HShowerRaw*)0x1000;
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw),G__get_linked_tagnum(&G__ShowerDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr))) {
     HShowerRawMatr *G__Lderived;
     G__Lderived=(HShowerRawMatr*)0x1000;
     {
       HShowerRaw *G__Lpbase=(HShowerRaw*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr),G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HLocatedDataObject *G__Lpbase=(HLocatedDataObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr),G__get_linked_tagnum(&G__ShowerDictLN_HLocatedDataObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater))) {
     HShowerCalibrater *G__Lderived;
     G__Lderived=(HShowerCalibrater*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist))) {
     HShowerRawHist *G__Lderived;
     G__Lderived=(HShowerRawHist*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker))) {
     HShowerUnpacker *G__Lderived;
     G__Lderived=(HShowerUnpacker*)0x1000;
     {
       HldUnpack *G__Lpbase=(HldUnpack*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker),G__get_linked_tagnum(&G__ShowerDictLN_HldUnpack),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader))) {
     HShowerGeantReader *G__Lderived;
     G__Lderived=(HShowerGeantReader*)0x1000;
     {
       HGeantReader *G__Lpbase=(HGeantReader*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader),G__get_linked_tagnum(&G__ShowerDictLN_HGeantReader),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire))) {
     HShowerGeantWire *G__Lderived;
     G__Lderived=(HShowerGeantWire*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner))) {
     HShowerFrameCorner *G__Lderived;
     G__Lderived=(HShowerFrameCorner*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame))) {
     HShowerFrame *G__Lderived;
     G__Lderived=(HShowerFrame*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab))) {
     HShowerWireTab *G__Lderived;
     G__Lderived=(HShowerWireTab*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad))) {
     HShowerPad *G__Lderived;
     G__Lderived=(HShowerPad*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab))) {
     HShowerPadTab *G__Lderived;
     G__Lderived=(HShowerPadTab*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar))) {
     HShowerDigiPar *G__Lderived;
     G__Lderived=(HShowerDigiPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar),G__get_linked_tagnum(&G__ShowerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar),G__get_linked_tagnum(&G__ShowerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry))) {
     HShowerGeometry *G__Lderived;
     G__Lderived=(HShowerGeometry*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry),G__get_linked_tagnum(&G__ShowerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry),G__get_linked_tagnum(&G__ShowerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer))) {
     HShowerDigitizer *G__Lderived;
     G__Lderived=(HShowerDigitizer*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer))) {
     HShowerHitDigitizer *G__Lderived;
     G__Lderived=(HShowerHitDigitizer*)0x1000;
     {
       HShowerDigitizer *G__Lpbase=(HShowerDigitizer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer))) {
     HShowerPadDigitizer *G__Lderived;
     G__Lderived=(HShowerPadDigitizer*)0x1000;
     {
       HShowerDigitizer *G__Lpbase=(HShowerDigitizer*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit))) {
     HShowerHit *G__Lderived;
     G__Lderived=(HShowerHit*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID))) {
     HShowerPID *G__Lderived;
     G__Lderived=(HShowerPID*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader))) {
     HShowerHitHeader *G__Lderived;
     G__Lderived=(HShowerHitHeader*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium))) {
     HShowerCriterium *G__Lderived;
     G__Lderived=(HShowerCriterium*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar))) {
     HShowerHitFPar *G__Lderived;
     G__Lderived=(HShowerHitFPar*)0x1000;
     {
       HParCond *G__Lpbase=(HParCond*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar),G__get_linked_tagnum(&G__ShowerDictLN_HParCond),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar),G__get_linked_tagnum(&G__ShowerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder))) {
     HShowerHitFinder *G__Lderived;
     G__Lderived=(HShowerHitFinder*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector))) {
     HShowerDetector *G__Lderived;
     G__Lderived=(HShowerDetector*)0x1000;
     {
       HDetector *G__Lpbase=(HDetector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector),G__get_linked_tagnum(&G__ShowerDictLN_HDetector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar))) {
     HShowerGeomPar *G__Lderived;
     G__Lderived=(HShowerGeomPar*)0x1000;
     {
       HDetGeomPar *G__Lpbase=(HDetGeomPar*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar),G__get_linked_tagnum(&G__ShowerDictLN_HDetGeomPar),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar),G__get_linked_tagnum(&G__ShowerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2))) {
     HGeomVector2 *G__Lderived;
     G__Lderived=(HGeomVector2*)0x1000;
     {
       HGeomVector *G__Lpbase=(HGeomVector*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2),G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact))) {
     HShowerContFact *G__Lderived;
     G__Lderived=(HShowerContFact*)0x1000;
     {
       HContFact *G__Lpbase=(HContFact*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact),G__get_linked_tagnum(&G__ShowerDictLN_HContFact),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo))) {
     HShowerParAsciiFileIo *G__Lderived;
     G__Lderived=(HShowerParAsciiFileIo*)0x1000;
     {
       HDetParAsciiFileIo *G__Lpbase=(HDetParAsciiFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo),G__get_linked_tagnum(&G__ShowerDictLN_HDetParAsciiFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo),G__get_linked_tagnum(&G__ShowerDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo))) {
     HShowerParRootFileIo *G__Lderived;
     G__Lderived=(HShowerParRootFileIo*)0x1000;
     {
       HDetParRootFileIo *G__Lpbase=(HDetParRootFileIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo),G__get_linked_tagnum(&G__ShowerDictLN_HDetParRootFileIo),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HDetParIo *G__Lpbase=(HDetParIo*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo),G__get_linked_tagnum(&G__ShowerDictLN_HDetParIo),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack))) {
     HShowerTrack *G__Lderived;
     G__Lderived=(HShowerTrack*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet))) {
     HShowerTaskSet *G__Lderived;
     G__Lderived=(HShowerTaskSet*)0x1000;
     {
       HTaskSet *G__Lpbase=(HTaskSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet),G__get_linked_tagnum(&G__ShowerDictLN_HTaskSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell))) {
     HShowerHistCell *G__Lderived;
     G__Lderived=(HShowerHistCell*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist))) {
     HShowerHist *G__Lderived;
     G__Lderived=(HShowerHist*)0x1000;
     {
       HParSet *G__Lpbase=(HParSet*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist),G__get_linked_tagnum(&G__ShowerDictLN_HParSet),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator))) {
     HShowerCalParCalculator *G__Lderived;
     G__Lderived=(HShowerCalParCalculator*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist))) {
     HShowerCalHist *G__Lderived;
     G__Lderived=(HShowerCalHist*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist))) {
     HShowerHitHist *G__Lderived;
     G__Lderived=(HShowerHitHist*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy))) {
     HShowerCopy *G__Lderived;
     G__Lderived=(HShowerCopy*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim))) {
     HShowerHitSim *G__Lderived;
     G__Lderived=(HShowerHitSim*)0x1000;
     {
       HShowerHit *G__Lpbase=(HShowerHit*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim),G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack))) {
     HShowerPIDTrack *G__Lderived;
     G__Lderived=(HShowerPIDTrack*)0x1000;
     {
       HShowerPID *G__Lpbase=(HShowerPID*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack),G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher))) {
     HShowerHitTrackMatcher *G__Lderived;
     G__Lderived=(HShowerHitTrackMatcher*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher))) {
     HShowerPIDTrackMatcher *G__Lderived;
     G__Lderived=(HShowerPIDTrackMatcher*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier))) {
     HShowerParticleIdentifier *G__Lderived;
     G__Lderived=(HShowerParticleIdentifier*)0x1000;
     {
       HReconstructor *G__Lpbase=(HReconstructor*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier),G__get_linked_tagnum(&G__ShowerDictLN_HReconstructor),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       HTask *G__Lpbase=(HTask*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier),G__get_linked_tagnum(&G__ShowerDictLN_HTask),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier),G__get_linked_tagnum(&G__ShowerDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier),G__get_linked_tagnum(&G__ShowerDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableShowerDict() {

   /* Setting up typedef entry */
   G__search_typename2("Char_t",99,-1,0,-1);
   G__setnewtype(-1,"Signed Character 1 byte (char)",0);
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Long_t",108,-1,0,-1);
   G__setnewtype(-1,"Signed long integer 8 bytes (long)",0);
   G__search_typename2("Float_t",102,-1,0,-1);
   G__setnewtype(-1,"Float 4 bytes (float)",0);
   G__search_typename2("Double_t",100,-1,0,-1);
   G__setnewtype(-1,"Double 8 bytes",0);
   G__search_typename2("Text_t",99,-1,0,-1);
   G__setnewtype(-1,"General string (char)",0);
   G__search_typename2("Bool_t",103,-1,0,-1);
   G__setnewtype(-1,"Boolean (0=false, 1=true) (bool)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("Option_t",99,-1,256,-1);
   G__setnewtype(-1,"Option string (const char)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__ShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__ShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<std::bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,std::ptrdiff_t,const TObject**,const TObject*&>",117,G__get_linked_tagnum(&G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*>",117,G__get_linked_tagnum(&G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long>",117,G__get_linked_tagnum(&G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("iterator<bidirectional_iterator_tag,TObject*,long,const TObject**>",117,G__get_linked_tagnum(&G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<std::string,TObjArray*>",117,G__get_linked_tagnum(&G__ShowerDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ShowerDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*>",117,G__get_linked_tagnum(&G__ShowerDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<string,TObjArray*,less<string> >",117,G__get_linked_tagnum(&G__ShowerDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__ShowerDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__ShowerDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Float_t>",117,G__get_linked_tagnum(&G__ShowerDictLN_TMatrixTBaselEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TMatrixTBase<Double_t>",117,G__get_linked_tagnum(&G__ShowerDictLN_TMatrixTBaselEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Int_t>",117,G__get_linked_tagnum(&G__ShowerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__ShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ShowerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__ShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__ShowerDictLN_vectorlEintcOallocatorlEintgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<int>",117,G__get_linked_tagnum(&G__ShowerDictLN_vectorlEintcOallocatorlEintgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<Int_t,std::vector<Int_t> >",117,G__get_linked_tagnum(&G__ShowerDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<int,allocator<int> > >",117,G__get_linked_tagnum(&G__ShowerDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("map<int,vector<int,allocator<int> >,less<int> >",117,G__get_linked_tagnum(&G__ShowerDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* HShowerCal */
static void G__setup_memvarHShowerCal(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal));
   { HShowerCal *p; p=(HShowerCal*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nSector=",0,"position of the pad");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nModule=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fCharge=",0,"calibrated charge in the pad");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nIsLocalMax=",0,"! flag is set if it has been found");
   }
   G__tag_memvar_reset();
}


   /* HShowerCalParCell */
static void G__setup_memvarHShowerCalParCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell));
   { HShowerCalParCell *p; p=(HShowerCalParCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fOffset=",0,"offset parameter for calibration of the pad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSlope=",0,"slope parameter for  calibration of the pad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fThreshold=",0,"threshold for the electronics");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fGain=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerCalPar */
static void G__setup_memvarHShowerCalPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar));
   { HShowerCalPar *p; p=(HShowerCalPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nSectors=",0,"sizes of calibration structure");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nModules=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nColumns=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_szClassName[40]=",0,"name of class used for keeping data for");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HObjTable),-1,-1,4,"m_ParamsTable=",0,"structure which contains all object");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_loc=",0,"! location in m_ParamsTable");
   }
   G__tag_memvar_reset();
}


   /* HShowerRaw */
static void G__setup_memvarHShowerRaw(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw));
   { HShowerRaw *p; p=(HShowerRaw*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,98,0,0,-1,G__defined_typename("Byte_t"),-1,2,"m_nEventType=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"m_nSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"m_nModule=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"m_nRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,2,"m_nCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("Long_t"),-1,2,"evtNr=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"m_fCharge=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerRawMatr */
static void G__setup_memvarHShowerRawMatr(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr));
   { HShowerRawMatr *p; p=(HShowerRawMatr*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerCalibrater */
static void G__setup_memvarHShowerCalibrater(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater));
   { HShowerCalibrater *p; p=(HShowerCalibrater*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_zeroLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_loc=",0,"Location of object being calibrated");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pRawCat=",0,"!Pointer to the raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pCalCat=",0,"!Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HParSet),-1,-1,4,"m_pCalPar=",0,"!Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,"!Iterator for fired pads");
   }
   G__tag_memvar_reset();
}


   /* HShowerRawHist */
static void G__setup_memvarHShowerRawHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist));
   { HShowerRawHist *p; p=(HShowerRawHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pRawCat=",0,"!Pointer to the raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH1F),-1,-1,4,"m_pChargeHist=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH1F),-1,-1,4,"m_pChargeModHist[3]=",0,"!        ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pChargeFreqHist[3]=",0,"!        ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pChargeAvgHist[3]=",0,"!        ");
   }
   G__tag_memvar_reset();
}


   /* HShowerUnpacker */
static void G__setup_memvarHShowerUnpacker(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker));
   { HShowerUnpacker *p; p=(HShowerUnpacker*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_loc=",0,"!Location of object to be unpacked.");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_zeroLoc=",0,"!");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpackercLcLDataWord),-1,-1,4,"fDataWord=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nSubId=",0,(char*)NULL);
   G__memvar_setup((void*)0,104,0,0,-1,G__defined_typename("UInt_t"),-1,4,"fEventNr=",0,"! current event #");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist),-1,-1,4,"m_pHist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerGeantReader */
static void G__setup_memvarHShowerGeantReader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader));
   { HShowerGeantReader *p; p=(HShowerGeantReader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TTree),-1,-1,4,"t=",0,"Pointer to the root tree");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HMatrixCategory),-1,-1,4,"fGeantShowCat=",0,"! SHOWER HGeant input data");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"fEventId=",0,"! event counter");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerGeantWire */
static void G__setup_memvarHShowerGeantWire(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire));
   { HShowerGeantWire *p; p=(HShowerGeantWire*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fCharge=",0,"Charge for each hit on the wire");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fXWire=",0,"X position of hit on the wire");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,2,"fYWire=",0,"Y position of hit on the wire");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nWireNr=",0,"number of the fired wire");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nModule=",0,"module number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nSector=",0,"sector number");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack=",0,"track number from Kine");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerFrameCorner */
static void G__setup_memvarHShowerFrameCorner(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner));
   { HShowerFrameCorner *p; p=(HShowerFrameCorner*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXcor=",0,"X coordinate of frame ");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYcor=",0,"Y coordinate of frame");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nFlagArea=",0,"sensitive area flag");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerFrame */
static void G__setup_memvarHShowerFrame(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame));
   { HShowerFrame *p; p=(HShowerFrame*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nCorners=",0,"number of corners");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nModuleID=",0,"module identification");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TObjArray),-1,-1,4,"m_FrameArr=",0,"table of corners coordinates");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerWireTab */
static void G__setup_memvarHShowerWireTab(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab));
   { HShowerWireTab *p; p=(HShowerWireTab*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nModuleID=",0,"module identifiction");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fDistWire=",0,"distance between wires");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nWires=",0,"number of wires");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayF),-1,-1,4,"wiresArr=",0,"wire positions");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerPad */
static void G__setup_memvarHShowerPad(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad));
   { HShowerPad *p; p=(HShowerPad*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nPadNr=",0,"pad identification");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nPadFlag=",0,"0-total outside, 1-inside, 2-partial inside");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nPadsX=",0,"number of pads in one raw");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXld=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYld=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXlu=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYlu=",0,"d - down, u - up");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXrd=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYrd=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fXru=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fYru=",0,"l - left, r - right");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerPadTab */
static void G__setup_memvarHShowerPadTab(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab));
   { HShowerPadTab *p; p=(HShowerPadTab*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nPads=",0,"total number of pads");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nPadsX=",0,"number of rows");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nPadsY=",0,"number of columns");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nModuleID=",0,"module identification");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TObjArray),-1,-1,4,"m_pPadArr=",0,"table of pads");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame),-1,-1,4,"m_pFrame=",0,"reference to frame for this module");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerDigiPar */
static void G__setup_memvarHShowerDigiPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar));
   { HShowerDigiPar *p; p=(HShowerDigiPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayF),-1,-1,4,"gain=",0,"gain of the 18 chambers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayF),-1,-1,4,"threshold=",0,"charge threshold for efficiency determination for 18 chambers");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayF),-1,-1,4,"effScaleMap=",0,"efficiency mapping sector, module, row, col [6*3*32*32]");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayD),-1,-1,4,"globalEff=",0,"global function - Efficiency (Beta) scaled up & down");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayD),-1,-1,4,"chargeVsBeta[6][3]=",0,"charge arrays per Beta");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThickDet=",0,"thickness of gas chamber");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nMatrixRange=",0,"size of pfChargeMatrix = 2*nMatrixRange+1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fBoxSize=",0,"size of element of charge density matrix");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChargeSlope=",0,"charge distribution slope parameter");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPlaneDist=",0,"plane cathod to sense wires plane distance");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fPadThreshold=",0,"charge threshold for a pad");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUpdatePadThreshold=",0,"charge threshold for track updating");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"chargeMatrixSize=",0,"! size of pfChargeMatrix = 2*nMatrixRange+1");
   G__memvar_setup((void*)0,70,0,0,-1,G__defined_typename("Float_t"),-1,4,"pfChargeMatrix=",0,"! charge density matrix");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nGlobalEffBins=",0,"! number of bins in efficiency histograms");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nQvBxbins[6][3]=",0,"! number of Q bins in Q(beta) propability histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH1D),-1,-1,4,"phEff=",0,"! efficiency(beta) histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2D),-1,-1,4,"ph2QvB[6][3]=",0,"! Q(beta) propability histogram");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TObjArray),-1,-1,4,"pArrayQvB[6][3]=",0,"! array of 1-dim Q histograms");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerGeometry */
static void G__setup_memvarHShowerGeometry(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry));
   { HShowerGeometry *p; p=(HShowerGeometry*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nSectors=",0,"! number of sectors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nModules=",0,"! number of modules");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nRows=",0,"! number of rows");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nColumns=",0,"! number of columns");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HGeomTransform),-1,-1,4,"sectorTransform[6]=",0,"! lab coordinates of module 0 wire planes");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HGeomTransform),-1,-1,4,"moduleTransform[18]=",0,"! lab coordinates of pad planes");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame),-1,-1,4,"frames[3]=",0,"! definitions of local coordinates of frames");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab),-1,-1,4,"wires[3]=",0,"definitions of local coordinates of wires");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab),-1,-1,4,"pads[3]=",0,"definitions of local coordinates of pads");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar),-1,-1,4,"pGeomPar=",0,"! pointer to ShowerGeomPar parameter container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerDigitizer */
static void G__setup_memvarHShowerDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer));
   { HShowerDigitizer *p; p=(HShowerDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->lNrEvent)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"lNrEvent=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,2,"m_pInCat=",0,"!Pointer to the raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,2,"m_pOutCat=",0,"!Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar),-1,-1,2,"pDigiPar=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry),-1,-1,2,"pGeometry=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,2,"fIter=",0,"!");
   }
   G__tag_memvar_reset();
}


   /* HShowerHitDigitizer */
static void G__setup_memvarHShowerHitDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer));
   { HShowerHitDigitizer *p; p=(HShowerHitDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fUnit=",0,"Length unit conversion for HGeant");
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,4,"piconst=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerPadDigitizer */
static void G__setup_memvarHShowerPadDigitizer(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer));
   { HShowerPadDigitizer *p; p=(HShowerPadDigitizer*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fChannelCoeff=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pTrackCat=",0,"!Pointer to the raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fTrackIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fShowerCalIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fShowerRawMatrIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLinearCategory),-1,-1,4,"fGeantKineCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLinearCategory),-1,-1,4,"fGeantShowerCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLinearCategory),-1,-1,4,"fGeantTofCat=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLinearCategory),-1,-1,4,"fGeantRpcCat=",0,"!");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isRpc=",0,"! is rpc used ?");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"modeTrack=",0,"mode select for storing the track numbers :");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR),G__defined_typename("map<Int_t,std::vector<Int_t> >"),-1,4,"trackMap=",0,"!");
   }
   G__tag_memvar_reset();
}


   /* HShowerHit */
static void G__setup_memvarHShowerHit(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit));
   { HShowerHit *p; p=(HShowerHit*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fX=",0,"local coord");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSigmaX=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSigmaY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fLabX=",0,"spatial coord in lab");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fLabY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fLabZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fRad=",0,"sphere coord in lab");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSum0=",0,"sum of charge of nine pads in pre");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSum1=",0,"sum of charge of nine pads in post");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSum2=",0,"sum of charge  of nine pads in post2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSum2_25=",0,"sum of charge of 25 pads in post2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSum2_N=",0,"normalized sum of charge of 25 pads to 9 pads");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fVar0=",0,"var. of sum of charge in pre");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fVar1=",0,"var. of sum of charge in post");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fVar2=",0,"var. of sum of charge in post2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fLocalMax=",0,"charge in local max - not used");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSumDiff01=",0,":= m_fSum1 - m_fSum0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSumDiff02=",0,":= m_fSum2 - m_fSum0");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fSumDiff12=",0,":= m_fSum2 - m_fSum1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fShower=",0,"value of shower definition. it's defined");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nClusterSize0=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nClusterSize1=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nClusterSize2=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nSector=",0,"position of pad");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nModule=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fCharge=",0,"charge in local max");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nAddress=",0,"combined address of position pads");
   }
   G__tag_memvar_reset();
}


   /* HShowerPID */
static void G__setup_memvarHShowerPID(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID));
   { HShowerPID *p; p=(HShowerPID*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fX=",0,"spatial coord");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fY=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fZ=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fRad=",0,"sphere coord");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fPhi=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fTheta=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fShower=",0,"shower - diff m_fSum2 - m_fSum1 if > 0");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nModule=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nRow=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nCol=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fCharge=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nAddress=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHitHeader */
static void G__setup_memvarHShowerHitHeader(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader));
   { HShowerHitHeader *p; p=(HShowerHitHeader*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nFiredCells=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nLocalMax=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nClusters=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nModule=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerCriterium */
static void G__setup_memvarHShowerCriterium(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium));
   { HShowerCriterium *p; p=(HShowerCriterium*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar),-1,-1,4,"m_fHitFPar=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHitFPar */
static void G__setup_memvarHShowerHitFPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar));
   { HShowerHitFPar *p; p=(HShowerHitFPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nSectors=",0,"! number of sectors");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nModules=",0,"! number of modules");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayI),-1,-1,4,"pRowBorder=",0,"It defines active area for local maxima searching");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TArrayI),-1,-1,4,"pColBorder=",0,"It defines active area for local maxima searching");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"nThreshold=",0,"Local maxima searching threshold");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGainPost1=",0,"Gain parameter in shower criterium for post1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThresholdPost1=",0,"Threshold parameter in shower criterium for post1");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fGainPost2=",0,"Gain parameter in shower criterium for post2");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"fThresholdPost2=",0,"Threshold parameter in shower criterium for post2");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHitFinder */
static void G__setup_memvarHShowerHitFinder(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder));
   { HShowerHitFinder *p; p=(HShowerHitFinder*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_Loc=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HRaTree),-1,-1,4,"m_pCellArr=",0,"! random access table for searching local maxima");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pCalCat=",0,"! Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pHitCat=",0,"! Pointer to the hit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pPIDCat=",0,"! Pointer to the hit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pHitHdrCat=",0,"! Pointer to the hit header data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar),-1,-1,4,"m_pHitFPar=",0,"! Pointer to the hit finder parameters container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry),-1,-1,4,"m_pGeometry=",0,"! Pointer to geometry parameters container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HSpecGeomPar),-1,-1,4,"m_pHSpecGeomPar=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,"! Iterator for calibrated fired pads");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bIsFillPID=",0,"! flag for filling PID level - default TRUE");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"m_bIsSort=",0,"! flag for sorting data by m_nAddress - default FALSE");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium),-1,-1,4,"m_pCriterium=",0,"! definition of shower criterium");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-1,4,"isSim=",0,"! is simulation ?");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerDetector */
static void G__setup_memvarHShowerDetector(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector));
   { HShowerDetector *p; p=(HShowerDetector*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"maxColumns=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerGeomPar */
static void G__setup_memvarHShowerGeomPar(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar));
   { HShowerGeomPar *p; p=(HShowerGeomPar*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HGeomVector2 */
static void G__setup_memvarHGeomVector2(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2));
   { HGeomVector2 *p; p=(HGeomVector2*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"Rad=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"Phi=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,G__defined_typename("Double_t"),-1,2,"Theta=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerContFact */
static void G__setup_memvarHShowerContFact(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact));
   { HShowerContFact *p; p=(HShowerContFact*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerParAsciiFileIo */
static void G__setup_memvarHShowerParAsciiFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo));
   { HShowerParAsciiFileIo *p; p=(HShowerParAsciiFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerParRootFileIo */
static void G__setup_memvarHShowerParRootFileIo(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo));
   { HShowerParRootFileIo *p; p=(HShowerParRootFileIo*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerTrack */
static void G__setup_memvarHShowerTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack));
   { HShowerTrack *p; p=(HShowerTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nAddress=",0,"address of pad in SMRRCC convention");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nTrack=",0,"track number");
   }
   G__tag_memvar_reset();
}


   /* HShowerTaskSet */
static void G__setup_memvarHShowerTaskSet(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet));
   { HShowerTaskSet *p; p=(HShowerTaskSet*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"ianalysisSimOrReal=",0,"counter for arguments of sim/real 	");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"ianalysisLevel=",0,"counter for arguments of analysis level 	");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"imagnet=",0,"counter for arguments of magnet 	");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"analysisSimOrReal=",0,"analysis sim/real	");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-2,4,"analysisLevel=",0,"analysis level leprecogn=1 ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isCoilOff=",0,"kTRUE=magnet off, kFALSE=magnet on ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isSimulation=",0,"kTRUE=simulation , kFALSE=real ");
   G__memvar_setup((void*)0,103,0,0,-1,G__defined_typename("Bool_t"),-2,4,"isLowShowerEfficiency=",0,"kTRUE=low , kFALSE=high ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHistCell */
static void G__setup_memvarHShowerHistCell(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell));
   { HShowerHistCell *p; p=(HShowerHistCell*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH3S),-1,-1,4,"m_pHist=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pSlopeHist=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pOffsetHist=",0,"!");
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nSector=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nModule=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_nCols=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nDataSize=",0,"!");
   G__memvar_setup((void*)0,73,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_pData=",0,"!");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_iEvents=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fChannel10pC=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry),-1,-1,4,"m_pGeom=",0,"!Pointer to geometry parameters container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHist */
static void G__setup_memvarHShowerHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist));
   { HShowerHist *p; p=(HShowerHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nSectors=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nModules=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nRows=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nColumns=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fChannel10pC=",0,(char*)NULL);
   G__memvar_setup((void*)0,99,0,0,-1,G__defined_typename("Char_t"),-1,4,"m_szClassName[40]=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HObjTable),-1,-1,4,"m_ParamsTable=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerCalParCalculator */
static void G__setup_memvarHShowerCalParCalculator(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator));
   { HShowerCalParCalculator *p; p=(HShowerCalParCalculator*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nExecutes=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nPeaksNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_iMethod=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fParam1=",0,(char*)NULL);
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"m_fParam2=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_zeroLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_loc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pRawCat=",0,"!Pointer to the raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HParSet),-1,-1,4,"m_pCalPar=",0,"!Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HParSet),-1,-1,4,"m_pCalParHist=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerCalHist */
static void G__setup_memvarHShowerCalHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist));
   { HShowerCalHist *p; p=(HShowerCalHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pCalCat=",0,"!Pointer to the calib data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH1F),-1,-1,4,"m_pChargeCalHist=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH1F),-1,-1,4,"m_pChargeCalModHist[3]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pChargeCalFreqHist[3]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pChargeCalAvgHist[3]=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHitHist */
static void G__setup_memvarHShowerHitHist(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist));
   { HShowerHitHist *p; p=(HShowerHitHist*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,4,"m_nEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pHitCat=",0,"!Pointer to the calib data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH1F),-1,-1,4,"m_pChargeHitHist=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH1F),-1,-1,4,"m_pChargeHitModHist[3]=",0,"!        ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pChargeHitFreqHist[3]=",0,"!        ");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TH2F),-1,-1,4,"m_pChargeHitAvgHist[3]=",0,"!        ");
   }
   G__tag_memvar_reset();
}


   /* HShowerCopy */
static void G__setup_memvarHShowerCopy(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy));
   { HShowerCopy *p; p=(HShowerCopy*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->m_nEvents)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"m_nEvents=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_zeroLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pInCat=",0,"!Pointer to the rawMatr data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pOutCat=",0,"!Pointer to the raw  data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,"!");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fCalIter=",0,"!");
   G__memvar_setup((void*)0,102,0,0,-1,G__defined_typename("Float_t"),-1,4,"mOffset=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHitSim */
static void G__setup_memvarHShowerHitSim(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim));
   { HShowerHitSim *p; p=(HShowerHitSim*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack=",0,"number of Tracks");
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTracks[8]=",0,"array of tracks (default val == -1)");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerPIDTrack */
static void G__setup_memvarHShowerPIDTrack(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack));
   { HShowerPIDTrack *p; p=(HShowerPIDTrack*)0x1000; if (p) { }
   G__memvar_setup((void*)0,105,0,0,-1,G__defined_typename("Int_t"),-1,2,"nTrack=",0,"Track number");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* HShowerHitTrackMatcher */
static void G__setup_memvarHShowerHitTrackMatcher(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher));
   { HShowerHitTrackMatcher *p; p=(HShowerHitTrackMatcher*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_zeroLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pTrackCat=",0,"! Pointer to the track data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pHitCat=",0,"! Pointer to the hit data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fHitIter=",0,"! Iterator for local maxima");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fTrackIter=",0,"! Iterator for tracks");
   }
   G__tag_memvar_reset();
}


   /* HShowerPIDTrackMatcher */
static void G__setup_memvarHShowerPIDTrackMatcher(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher));
   { HShowerPIDTrackMatcher *p; p=(HShowerPIDTrackMatcher*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_zeroLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pTrackCat=",0,"!Pointer to the track data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pPIDCat=",0,"!Pointer to the PID data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pPIDTrackCat=",0,"!Pointer to the PIDtrack data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fPIDIter=",0,"!Iterator for local maxima in PID");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fTrackIter=",0,"!Iterator for tracks");
   }
   G__tag_memvar_reset();
}


   /* HShowerParticleIdentifier */
static void G__setup_memvarHShowerParticleIdentifier(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier));
   { HShowerParticleIdentifier *p; p=(HShowerParticleIdentifier*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_TClass),G__defined_typename("atomic_TClass_ptr"),-2,4,"fgIsA=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HLocation),-1,-1,4,"m_zeroLoc=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pHitCat=",0,"!Pointer to the raw data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HCategory),-1,-1,4,"m_pPIDCat=",0,"!Pointer to the cal data category");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar),-1,-1,4,"m_pHitFPar=",0,"Pointer to the analysis parameters container");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium),-1,-1,4,"m_pCriterium=",0,"!definition of shower criterium");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__ShowerDictLN_HIterator),-1,-1,4,"fIter=",0,"!Iterator for hits");
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarShowerDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncHShowerCal(void) {
   /* HShowerCal */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal));
   G__memfunc_setup("HShowerCal",976,G__ShowerDict_172_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCal",976,G__ShowerDict_172_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ShowerDict_172_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__ShowerDict_172_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__ShowerDict_172_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__ShowerDict_172_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ShowerDict_172_0_7, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__ShowerDict_172_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRow",632,G__ShowerDict_172_0_9, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__ShowerDict_172_0_10, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ShowerDict_172_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__ShowerDict_172_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRow",644,G__ShowerDict_172_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCol",618,G__ShowerDict_172_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLocalMax",1005,G__ShowerDict_172_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLocalMax",1117,G__ShowerDict_172_0_16, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetLocalMax",1332,G__ShowerDict_172_0_17, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocationIndex",1649,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_172_0_20, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCal::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_172_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCal::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_172_0_22, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCal::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_172_0_23, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCal::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_172_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_172_0_28, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCal::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_172_0_29, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCal::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_172_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCal::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_172_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCal::DeclFileLine) ), 0);
   G__memfunc_setup("calcAddress",1113,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerCal", 976, G__ShowerDict_172_0_33, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal), -1, 0, 1, 1, 1, 0, "u 'HShowerCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCal", 1102, G__ShowerDict_172_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_172_0_35, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCal), -1, 1, 1, 1, 1, 0, "u 'HShowerCal' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerCalParCell(void) {
   /* HShowerCalParCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell));
   G__memfunc_setup("HShowerCalParCell",1651,G__ShowerDict_200_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCalParCell",1651,G__ShowerDict_200_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fSlope f - 'Float_t' 0 - fOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCalParCell",1651,G__ShowerDict_200_0_3, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell), -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - fSlope f - 'Float_t' 0 - fOffset "
"f - 'Float_t' 0 - fThreshold f - 'Float_t' 0 - fGain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_200_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffset",947,G__ShowerDict_200_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__ShowerDict_200_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSlope",847,G__ShowerDict_200_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fSlope", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlope",835,G__ShowerDict_200_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__ShowerDict_200_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fThreshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThreshold",1261,G__ShowerDict_200_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGain",715,G__ShowerDict_200_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fGain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGain",703,G__ShowerDict_200_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParams",944,G__ShowerDict_200_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fSlope f - 'Float_t' 0 - fOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParams",944,G__ShowerDict_200_0_14, 121, -1, -1, 0, 4, 1, 1, 0, 
"f - 'Float_t' 0 - fSlope f - 'Float_t' 0 - fOffset "
"f - 'Float_t' 0 - fThreshold f - 'Float_t' 0 - fGain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("print",557,G__ShowerDict_200_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_200_0_16, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCalParCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_200_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalParCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_200_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCalParCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_200_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCalParCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_200_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_200_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalParCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_200_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalParCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_200_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalParCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_200_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalParCell::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerCalParCell", 1651, G__ShowerDict_200_0_28, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell), -1, 0, 1, 1, 1, 0, "u 'HShowerCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCalParCell", 1777, G__ShowerDict_200_0_29, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_200_0_30, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell), -1, 1, 1, 1, 1, 0, "u 'HShowerCalParCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerCalPar(void) {
   /* HShowerCalPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar));
   G__memfunc_setup("HShowerCalPar",1267,G__ShowerDict_204_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ShowerCalPar\"' name C - 'Char_t' 10 '\"Calibration parameters for Shower\"' title "
"C - 'Char_t' 10 '\"ShowerStandardCalib\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSetup",861,G__ShowerDict_204_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nSectors i - 'Int_t' 0 - nModules "
"i - 'Int_t' 0 - nRows i - 'Int_t' 0 - nColumns", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNSectors",1137,G__ShowerDict_204_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNModules",1127,G__ShowerDict_204_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNRows",825,G__ShowerDict_204_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNColumns",1135,G__ShowerDict_204_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellClassName",1603,G__ShowerDict_204_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pszName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellClassName",1591,G__ShowerDict_204_0_8, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlot",738,G__ShowerDict_204_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell), -1, 1, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,G__ShowerDict_204_0_10, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCell), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffset",935,G__ShowerDict_204_0_11, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlope",835,G__ShowerDict_204_0_12, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThreshold",1261,G__ShowerDict_204_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGain",703,G__ShowerDict_204_0_14, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffset",947,G__ShowerDict_204_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc f - 'Float_t' 0 - fOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSlope",847,G__ShowerDict_204_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc f - 'Float_t' 0 - fSlope", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__ShowerDict_204_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc f - 'Float_t' 0 - fThreshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGain",715,G__ShowerDict_204_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc f - 'Float_t' 0 - fGain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - inp I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("readline",836,G__ShowerDict_204_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Char_t' 10 - buf", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putAsciiHeader",1419,G__ShowerDict_204_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 1 - header", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("write",555,G__ShowerDict_204_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'basic_fstream<char,char_traits<char> >' 'fstream' 1 - fout", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("defaultInit",1145,G__ShowerDict_204_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__ShowerDict_204_0_25, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSlopesToValue",1666,G__ShowerDict_204_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fSlope", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addValueToSlopes",1631,G__ShowerDict_204_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fAdd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiplySlopesByValue",2222,G__ShowerDict_204_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOffsetsToValue",1766,G__ShowerDict_204_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addValueToOffsets",1731,G__ShowerDict_204_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fAdd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiplyOffsetsByValue",2322,G__ShowerDict_204_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThresholdsToValue",2092,G__ShowerDict_204_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fThreshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addValueToThresholds",2057,G__ShowerDict_204_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fAdd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiplyThresholdsByValue",2648,G__ShowerDict_204_0_34, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGainsToValue",1534,G__ShowerDict_204_0_35, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fGain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addValueToGains",1499,G__ShowerDict_204_0_36, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fAdd", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("multiplyGainsByValue",2090,G__ShowerDict_204_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fM", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOffsetsHist",1458,G__ShowerDict_204_0_38, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH2F), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iSector i - 'Int_t' 0 - iModule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlopesHist",1358,G__ShowerDict_204_0_39, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH2F), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iSector i - 'Int_t' 0 - iModule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThresholdsHist",1784,G__ShowerDict_204_0_40, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH2F), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iSector i - 'Int_t' 0 - iModule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainsHist",1226,G__ShowerDict_204_0_41, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH2F), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - iSector i - 'Int_t' 0 - iModule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("changeValues",1238,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - iVar i - 'Int_t' 0 - iOpr "
"f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHist",728,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH2F), -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - iSector i - 'Int_t' 0 - iModule "
"i 'enum_HSCPM_Var' - 0 - enType", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_204_0_44, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCalPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_204_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_204_0_46, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCalPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_204_0_47, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCalPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_204_0_51, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_204_0_52, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_204_0_53, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_204_0_54, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_204_0_55, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerCalPar", 1267, G__ShowerDict_204_0_56, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar), -1, 0, 1, 1, 1, 0, "u 'HShowerCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCalPar", 1393, G__ShowerDict_204_0_57, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_204_0_58, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalPar), -1, 1, 1, 1, 1, 0, "u 'HShowerCalPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerRaw(void) {
   /* HShowerRaw */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw));
   G__memfunc_setup("HShowerRaw",1002,G__ShowerDict_214_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerRaw",1002,G__ShowerDict_214_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ShowerDict_214_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__ShowerDict_214_0_4, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCharge",883,G__ShowerDict_214_0_5, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__ShowerDict_214_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__ShowerDict_214_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ShowerDict_214_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__ShowerDict_214_0_9, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRow",632,G__ShowerDict_214_0_10, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__ShowerDict_214_0_11, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventType",1252,G__ShowerDict_214_0_12, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEventNr",1026,G__ShowerDict_214_0_13, 108, -1, G__defined_typename("Long_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ShowerDict_214_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__ShowerDict_214_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRow",644,G__ShowerDict_214_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCol",618,G__ShowerDict_214_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventType",1264,G__ShowerDict_214_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - nEvtT", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEventNr",1038,G__ShowerDict_214_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'Long_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNLocationIndex",1727,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocationIndex",1649,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getLocation",1145,G__ShowerDict_214_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_214_0_23, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerRaw::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_214_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRaw::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_214_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerRaw::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_214_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerRaw::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_214_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_214_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRaw::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_214_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerRaw::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_214_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRaw::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_214_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerRaw::DeclFileLine) ), 0);
   G__memfunc_setup("calcAddress",1113,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerRaw", 1002, G__ShowerDict_214_0_36, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw), -1, 0, 1, 1, 1, 0, "u 'HShowerRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerRaw", 1128, G__ShowerDict_214_0_37, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_214_0_38, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerRaw), -1, 1, 1, 1, 1, 0, "u 'HShowerRaw' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerRawMatr(void) {
   /* HShowerRawMatr */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr));
   G__memfunc_setup("HShowerRawMatr",1406,G__ShowerDict_215_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_215_0_2, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerRawMatr::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_215_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRawMatr::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_215_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerRawMatr::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_215_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerRawMatr::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_215_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_215_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRawMatr::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_215_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerRawMatr::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_215_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRawMatr::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_215_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerRawMatr::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerRawMatr", 1406, G__ShowerDict_215_0_14, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr), -1, 0, 1, 1, 1, 0, "u 'HShowerRawMatr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerRawMatr", 1532, G__ShowerDict_215_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_215_0_16, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawMatr), -1, 1, 1, 1, 1, 0, "u 'HShowerRawMatr' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerCalibrater(void) {
   /* HShowerCalibrater */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater));
   G__memfunc_setup("HShowerCalibrater",1721,G__ShowerDict_218_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCalibrater",1721,G__ShowerDict_218_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calibrate",935,G__ShowerDict_218_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HShowerRaw' - 0 - raw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__ShowerDict_218_0_8, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalibrater), -1, 1, 1, 1, 1, 0, "u 'HShowerCalibrater' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRawCat",898,G__ShowerDict_218_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalCat",872,G__ShowerDict_218_0_10, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalPar",883,G__ShowerDict_218_0_11, 85, G__get_linked_tagnum(&G__ShowerDictLN_HParSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRawCat",910,G__ShowerDict_218_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pRawCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalCat",884,G__ShowerDict_218_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pCalCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalPar",895,G__ShowerDict_218_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCalPar",999,G__ShowerDict_218_0_15, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_218_0_16, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCalibrater::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_218_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalibrater::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_218_0_18, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCalibrater::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_218_0_19, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCalibrater::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_218_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_218_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalibrater::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_218_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalibrater::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_218_0_26, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalibrater::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_218_0_27, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalibrater::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCalibrater", 1847, G__ShowerDict_218_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerRawHist(void) {
   /* HShowerRawHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist));
   G__memfunc_setup("HShowerRawHist",1410,G__ShowerDict_225_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerRawHist",1410,G__ShowerDict_225_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerRawHist), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getRawCat",898,G__ShowerDict_225_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRawCat",910,G__ShowerDict_225_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pRawCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_225_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerRawHist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_225_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRawHist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_225_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerRawHist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_225_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerRawHist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_225_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_225_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRawHist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_225_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerRawHist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_225_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerRawHist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_225_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerRawHist::DeclFileLine) ), 0);
   G__memfunc_setup("bookHist",835,G__ShowerDict_225_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,G__ShowerDict_225_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HShowerRaw' - 0 - pRaw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,G__ShowerDict_225_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nModule i - 'Int_t' 0 - nRow "
"i - 'Int_t' 0 - nColumn f - 'Float_t' 0 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHist",963,G__ShowerDict_225_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalizeHist",1258,G__ShowerDict_225_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerRawHist", 1536, G__ShowerDict_225_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerUnpacker(void) {
   /* HShowerUnpacker */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker));
   G__memfunc_setup("HShowerUnpacker",1529,G__ShowerDict_226_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nSubId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSubEvtId",1094,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillData",801,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"u 'HLocation' - 1 - loc i - 'Int_t' 0 - nCharge "
"i - 'Int_t' 0 - nEvtId", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("dump",438,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_226_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerUnpacker::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_226_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerUnpacker::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_226_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerUnpacker::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_226_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerUnpacker::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_226_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_226_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerUnpacker::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_226_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerUnpacker::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_226_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerUnpacker::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_226_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerUnpacker::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerUnpacker", 1529, G__ShowerDict_226_0_21, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker), -1, 0, 1, 1, 1, 0, "u 'HShowerUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerUnpacker", 1655, G__ShowerDict_226_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_226_0_23, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerUnpacker), -1, 1, 1, 1, 1, 0, "u 'HShowerUnpacker' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerGeantReader(void) {
   /* HShowerGeantReader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader));
   G__memfunc_setup("HShowerGeantReader",1794,G__ShowerDict_575_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getGeantShowerCat",1727,G__ShowerDict_575_0_4, 85, G__get_linked_tagnum(&G__ShowerDictLN_HMatrixCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeantShower",1447,G__ShowerDict_575_0_5, 85, G__get_linked_tagnum(&G__ShowerDictLN_HGeantShower), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 0 - locate", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_575_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerGeantReader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_575_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeantReader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_575_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerGeantReader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_575_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerGeantReader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_575_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_575_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeantReader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_575_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeantReader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_575_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeantReader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_575_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeantReader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerGeantReader", 1794, G__ShowerDict_575_0_18, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader), -1, 0, 1, 1, 1, 0, "u 'HShowerGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerGeantReader", 1920, G__ShowerDict_575_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_575_0_20, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantReader), -1, 1, 1, 1, 1, 0, "u 'HShowerGeantReader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerGeantWire(void) {
   /* HShowerGeantWire */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire));
   G__memfunc_setup("HShowerGeantWire",1606,G__ShowerDict_576_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Clear",487,G__ShowerDict_576_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__ShowerDict_576_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__ShowerDict_576_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - pfX F - 'Float_t' 0 - pfY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireNr",919,G__ShowerDict_576_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__ShowerDict_576_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ShowerDict_576_0_7, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__ShowerDict_576_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__ShowerDict_576_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - q", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__ShowerDict_576_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fX f - 'Float_t' 0 - fY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWireNr",931,G__ShowerDict_576_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__ShowerDict_576_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ShowerDict_576_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nSect", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__ShowerDict_576_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nTrk", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_576_0_15, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerGeantWire::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_576_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeantWire::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_576_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerGeantWire::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_576_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerGeantWire::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_576_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_576_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeantWire::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_576_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeantWire::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_576_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeantWire::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_576_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeantWire::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerGeantWire", 1606, G__ShowerDict_576_0_27, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire), -1, 0, 1, 1, 1, 0, "u 'HShowerGeantWire' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerGeantWire", 1732, G__ShowerDict_576_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_576_0_29, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeantWire), -1, 1, 1, 1, 1, 0, "u 'HShowerGeantWire' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerFrameCorner(void) {
   /* HShowerFrameCorner */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner));
   G__memfunc_setup("HShowerFrameCorner",1812,G__ShowerDict_577_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getX",408,G__ShowerDict_577_0_2, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getY",409,G__ShowerDict_577_0_3, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFlagArea",1075,G__ShowerDict_577_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setX",420,G__ShowerDict_577_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fX", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setY",421,G__ShowerDict_577_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFlagArea",1087,G__ShowerDict_577_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_577_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerFrameCorner::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_577_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerFrameCorner::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_577_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerFrameCorner::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_577_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerFrameCorner::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_577_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_577_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerFrameCorner::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_577_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerFrameCorner::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_577_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerFrameCorner::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_577_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerFrameCorner::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerFrameCorner", 1812, G__ShowerDict_577_0_20, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner), -1, 0, 1, 1, 1, 0, "u 'HShowerFrameCorner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerFrameCorner", 1938, G__ShowerDict_577_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_577_0_22, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner), -1, 1, 1, 1, 1, 0, "u 'HShowerFrameCorner' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerFrame(void) {
   /* HShowerFrame */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame));
   G__memfunc_setup("HShowerFrame",1195,G__ShowerDict_578_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_578_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,G__ShowerDict_578_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__ShowerDict_578_0_4, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCorner",937,G__ShowerDict_578_0_5, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrameCorner), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("addCorner",914,G__ShowerDict_578_0_6, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HShowerFrameCorner' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCorner",949,G__ShowerDict_578_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"U 'HShowerFrameCorner' - 0 - pCorner i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNCorners",1142,G__ShowerDict_578_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNCorners",1130,G__ShowerDict_578_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModuleID",1087,G__ShowerDict_578_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleID",1075,G__ShowerDict_578_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_578_0_12, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerFrame::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_578_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerFrame::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_578_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerFrame::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_578_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerFrame::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_578_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_578_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerFrame::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_578_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerFrame::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_578_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerFrame::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_578_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerFrame::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerFrame", 1321, G__ShowerDict_578_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerWireTab(void) {
   /* HShowerWireTab */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab));
   G__memfunc_setup("HShowerWireTab",1390,G__ShowerDict_581_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_581_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__ShowerDict_581_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__ShowerDict_581_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setDistWire",1143,G__ShowerDict_581_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getDistWire",1131,G__ShowerDict_581_0_6, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWirePos",1033,G__ShowerDict_581_0_7, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setWirePos",1045,G__ShowerDict_581_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - n f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNWires",920,G__ShowerDict_581_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lookupWire",1073,G__ShowerDict_581_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModuleID",1087,G__ShowerDict_581_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleID",1075,G__ShowerDict_581_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_581_0_13, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerWireTab::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_581_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerWireTab::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_581_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerWireTab::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_581_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerWireTab::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_581_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_581_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerWireTab::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_581_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerWireTab::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_581_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerWireTab::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_581_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerWireTab::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerWireTab", 1390, G__ShowerDict_581_0_25, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab), -1, 0, 1, 1, 1, 0, "u 'HShowerWireTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerWireTab", 1516, G__ShowerDict_581_0_26, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_581_0_27, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab), -1, 1, 1, 1, 1, 0, "u 'HShowerWireTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerPad(void) {
   /* HShowerPad */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad));
   G__memfunc_setup("HShowerPad",981,G__ShowerDict_582_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerPad",981,G__ShowerDict_582_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad), -1, 0, 1, 1, 1, 0, "u 'HShowerPad' - 11 - srcPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_582_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__ShowerDict_582_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HShowerGeantWire' - 0 - qhit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__ShowerDict_582_0_5, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOutX",620,G__ShowerDict_582_0_6, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOutY",621,G__ShowerDict_582_0_7, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadCenter",1206,G__ShowerDict_582_0_8, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - pfX F - 'Float_t' 0 - pfY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadNr",789,G__ShowerDict_582_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadPos",903,G__ShowerDict_582_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"I - 'Int_t' 0 - pRow I - 'Int_t' 0 - pCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadFlag",975,G__ShowerDict_582_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadFlag",987,G__ShowerDict_582_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nFlag", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadNr",801,G__ShowerDict_582_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nPad", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXld",616,G__ShowerDict_582_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYld",617,G__ShowerDict_582_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXlu",633,G__ShowerDict_582_0_16, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYlu",634,G__ShowerDict_582_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXrd",622,G__ShowerDict_582_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYrd",623,G__ShowerDict_582_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXru",639,G__ShowerDict_582_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYru",640,G__ShowerDict_582_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXld_mm",929,G__ShowerDict_582_0_22, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYld_mm",930,G__ShowerDict_582_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXlu_mm",946,G__ShowerDict_582_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYlu_mm",947,G__ShowerDict_582_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXrd_mm",935,G__ShowerDict_582_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYrd_mm",936,G__ShowerDict_582_0_27, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXru_mm",952,G__ShowerDict_582_0_28, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getYru_mm",953,G__ShowerDict_582_0_29, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__ShowerDict_582_0_30, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad), -1, 1, 1, 1, 1, 0, "u 'HShowerPad' - 11 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_582_0_31, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerPad::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_582_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPad::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_582_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerPad::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_582_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerPad::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_582_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_582_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPad::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_582_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPad::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_582_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPad::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_582_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPad::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerPad", 1107, G__ShowerDict_582_0_43, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerPadTab(void) {
   /* HShowerPadTab */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab));
   G__memfunc_setup("HShowerPadTab",1260,G__ShowerDict_583_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_583_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,G__ShowerDict_583_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__ShowerDict_583_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPad",609,G__ShowerDict_583_0_5, 121, -1, -1, 0, 3, 1, 1, 0, 
"U 'HShowerPad' - 0 - pPad i - 'Int_t' 0 - nRow "
"i - 'Int_t' 0 - nCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPad",609,G__ShowerDict_583_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HShowerPad' - 0 - pPad i - 'Int_t' 0 - nPadNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__ShowerDict_583_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nPadNr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__ShowerDict_583_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad), -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPad",597,G__ShowerDict_583_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPad), -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - fXpos f - 'Float_t' 0 - fYpos", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPad",675,G__ShowerDict_583_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPadX",763,G__ShowerDict_583_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getNPadY",764,G__ShowerDict_583_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isOut",532,G__ShowerDict_583_0_13, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nX i - 'Int_t' 0 - nY", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFrame",823,G__ShowerDict_583_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerFrame' - 0 - pFrame", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFrame",811,G__ShowerDict_583_0_15, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModuleID",1087,G__ShowerDict_583_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - id", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModuleID",1075,G__ShowerDict_583_0_17, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAddr",782,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_583_0_19, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerPadTab::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_583_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPadTab::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_583_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerPadTab::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_583_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerPadTab::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_583_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_583_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPadTab::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_583_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPadTab::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_583_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPadTab::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_583_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPadTab::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerPadTab", 1260, G__ShowerDict_583_0_31, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab), -1, 0, 1, 1, 1, 0, "u 'HShowerPadTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerPadTab", 1386, G__ShowerDict_583_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_583_0_33, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab), -1, 1, 1, 1, 1, 0, "u 'HShowerPadTab' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerDigiPar(void) {
   /* HShowerDigiPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar));
   G__memfunc_setup("HShowerDigiPar",1376,G__ShowerDict_612_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ShowerDigiPar\"' name C - 'Char_t' 10 '\"Digitisation parameters for Shower\"' title "
"C - 'Char_t' 10 '\"ShowerStandardDigiPar\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getGain",703,G__ShowerDict_612_0_6, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThreshold",1261,G__ShowerDict_612_0_7, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThickDet",1104,G__ShowerDict_612_0_8, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMatrixRange",1442,G__ShowerDict_612_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getBoxSize",1028,G__ShowerDict_612_0_10, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeSlope",1421,G__ShowerDict_612_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPlaneDist",1220,G__ShowerDict_612_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadThreshold",1538,G__ShowerDict_612_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getUpdatePadThreshold",2149,G__ShowerDict_612_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGain",715,G__ShowerDict_612_0_15, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"f - 'Float_t' 0 - fGain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__ShowerDict_612_0_16, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"f - 'Float_t' 0 - fThres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThickDet",1116,G__ShowerDict_612_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fThick", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMatrixRange",1454,G__ShowerDict_612_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iRange", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setBoxSize",1040,G__ShowerDict_612_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeSlope",1433,G__ShowerDict_612_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fSlope", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPlaneDist",1232,G__ShowerDict_612_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fDist", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPadThreshold",1550,G__ShowerDict_612_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fThres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setUpdatePadThreshold",2161,G__ShowerDict_612_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fThres", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setEffScaleMap",1379,G__ShowerDict_612_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayF' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEffScaleMap",1367,G__ShowerDict_612_0_25, 117, G__get_linked_tagnum(&G__ShowerDictLN_TArrayF), -1, 1, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGlobalEff",1198,G__ShowerDict_612_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TArrayD' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeVsBeta",1499,G__ShowerDict_612_0_27, 121, -1, -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - - i - 'Int_t' 0 - - "
"u 'TArrayD' - 1 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("recreateHistograms",1900,G__ShowerDict_612_0_28, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChargeMatrix",1535,G__ShowerDict_612_0_29, 70, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiencyHist",1741,G__ShowerDict_612_0_30, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH1D), -1, 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getQvBHist",993,G__ShowerDict_612_0_31, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH2D), -1, 0, 2, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getEfficiency",1333,G__ShowerDict_612_0_32, 102, -1, G__defined_typename("Float_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col "
"f - 'Float_t' 0 - fBeta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("checkEfficiency",1523,G__ShowerDict_612_0_33, 103, -1, G__defined_typename("Bool_t"), 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col "
"f - 'Float_t' 0 - fBeta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__ShowerDict_612_0_34, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"f - 'Float_t' 0 - fBeta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeHistograms",1711,G__ShowerDict_612_0_35, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeChargeHistograms",2297,G__ShowerDict_612_0_36, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeEfficiencyHistograms",2724,G__ShowerDict_612_0_37, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("removeQvBHistograms",1976,G__ShowerDict_612_0_38, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCharge",989,G__ShowerDict_612_0_39, 102, -1, G__defined_typename("Float_t"), 0, 6, 1, 1, 0, 
"f - 'Float_t' 0 - fCharge f - 'Float_t' 0 - fDist "
"f - 'Float_t' 0 - fXd f - 'Float_t' 0 - fYd "
"f - 'Float_t' 0 - fXu f - 'Float_t' 0 - fYu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChargeMatrix",1547,G__ShowerDict_612_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nRange F - 'Float_t' 10 '0' pMatrix", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initChargeMatrix",1651,G__ShowerDict_612_0_41, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initEffHistogram",1651,G__ShowerDict_612_0_42, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initSumVersBetaHistograms",2598,G__ShowerDict_612_0_43, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("padIndex",813,G__ShowerDict_612_0_44, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod "
"i - 'Int_t' 0 - row i - 'Int_t' 0 - col", "3*32*32=3072, 32*32=1024", (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_612_0_45, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerDigiPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_612_0_46, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDigiPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_612_0_47, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerDigiPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_612_0_48, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerDigiPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_612_0_52, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_612_0_53, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDigiPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_612_0_54, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerDigiPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_612_0_55, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDigiPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_612_0_56, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerDigiPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerDigiPar", 1376, G__ShowerDict_612_0_57, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar), -1, 0, 1, 1, 1, 0, "u 'HShowerDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerDigiPar", 1502, G__ShowerDict_612_0_58, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_612_0_59, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigiPar), -1, 1, 1, 1, 1, 0, "u 'HShowerDigiPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerGeometry(void) {
   /* HShowerGeometry */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry));
   G__memfunc_setup("HShowerGeometry",1548,G__ShowerDict_613_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ShowerGeometry\"' name C - 'Char_t' 10 '\"Shower geometry parameters\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillFromGeomPar",1510,G__ShowerDict_613_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printParams",1169,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSectors",1059,G__ShowerDict_613_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModules",1049,G__ShowerDict_613_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRows",747,G__ShowerDict_613_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumns",1057,G__ShowerDict_613_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFrame",811,G__ShowerDict_613_0_12, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerFrame), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getWireTab",1006,G__ShowerDict_613_0_13, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerWireTab), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPadParam",1094,G__ShowerDict_613_0_14, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadTab), -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLocalCoord",1314,G__ShowerDict_613_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc u 'HGeomVector' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabCoord",1094,G__ShowerDict_613_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc u 'HGeomVector2' - 1 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSphereCoord",1438,G__ShowerDict_613_0_17, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HLocation' - 1 - loc u 'HGeomVector2' - 1 - v "
"U 'HGeomVector' - 0 '0' pvTarget", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transLabToSphereCoord",2136,G__ShowerDict_613_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HGeomVector2' - 1 - labIn u 'HGeomVector2' - 1 - sphereOut "
"U 'HGeomVector' - 0 - pvTarget", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transVectToLab",1420,G__ShowerDict_613_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"u 'HLocation' - 1 - loc u 'HGeomVector' - 0 - vLocal "
"u 'HGeomVector2' - 1 - vLab", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransform",1276,G__ShowerDict_613_0_20, 117, G__get_linked_tagnum(&G__ShowerDictLN_HGeomTransform), -1, 1, 1, 1, 1, 1, "i - 'Int_t' 0 - sec", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTransform",1276,G__ShowerDict_613_0_21, 117, G__get_linked_tagnum(&G__ShowerDictLN_HGeomTransform), -1, 1, 2, 1, 1, 1, 
"i - 'Int_t' 0 - sec i - 'Int_t' 0 - mod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("transPadToLab",1295,G__ShowerDict_613_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_613_0_23, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerGeometry::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_613_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeometry::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_613_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerGeometry::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_613_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerGeometry::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_613_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_613_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeometry::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_613_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeometry::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_613_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeometry::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_613_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeometry::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerGeometry", 1674, G__ShowerDict_613_0_35, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerDigitizer(void) {
   /* HShowerDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer));
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("digitize",857,G__ShowerDict_614_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__ShowerDict_614_0_5, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerDigitizer), -1, 1, 1, 1, 1, 0, "u 'HShowerDigitizer' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getInCat",783,G__ShowerDict_614_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getOutCat",912,G__ShowerDict_614_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setInCat",795,G__ShowerDict_614_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pInCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutCat",924,G__ShowerDict_614_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pOutCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParameters",1480,G__ShowerDict_614_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_614_0_12, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_614_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_614_0_14, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_614_0_15, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_614_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_614_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_614_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_614_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_614_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerDigitizer::DeclFileLine) ), 0);
   G__memfunc_setup("sort",456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 2, 0, "", (char*)NULL, (void*) NULL, 1);
   // automatic destructor
   G__memfunc_setup("~HShowerDigitizer", 1769, G__ShowerDict_614_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHitDigitizer(void) {
   /* HShowerHitDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer));
   G__memfunc_setup("HShowerHitDigitizer",1936,G__ShowerDict_615_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerHitDigitizer",1936,G__ShowerDict_615_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"f - 'Float_t' 0 '10.' unit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("digitize",857,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - pHit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__ShowerDict_615_0_4, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitDigitizer), -1, 1, 1, 1, 1, 0, "u 'HShowerHitDigitizer' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("digiHits",821,(G__InterfaceMethod) NULL, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 4, 0, "U 'HGeantShower' - 0 - simhit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_615_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHitDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_615_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_615_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHitDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_615_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHitDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_615_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_615_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_615_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_615_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_615_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitDigitizer::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHitDigitizer", 2062, G__ShowerDict_615_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerPadDigitizer(void) {
   /* HShowerPadDigitizer */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer));
   G__memfunc_setup("HShowerPadDigitizer",1920,G__ShowerDict_617_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerPadDigitizer",1920,G__ShowerDict_617_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("digitize",857,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'TObject' - 0 - pHit", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__ShowerDict_617_0_5, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPadDigitizer), -1, 1, 1, 1, 1, 0, "u 'HShowerPadDigitizer' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackCat",1101,G__ShowerDict_617_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackCat",1113,G__ShowerDict_617_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pTrackCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("checkEfficiency",1523,G__ShowerDict_617_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HShowerRawMatr' - 0 - pRaw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("gainCharge",1001,G__ShowerDict_617_0_11, 100, -1, G__defined_typename("Double_t"), 0, 1, 1, 1, 0, "U 'HShowerRawMatr' - 0 - pRaw", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModeTrack",1222,G__ShowerDict_617_0_12, 121, -1, -1, 0, 1, 3, 1, 0, "i - 'Int_t' 0 - mode", (char*)NULL, (void*) G__func2void( (void (*)(Int_t))(&HShowerPadDigitizer::setModeTrack) ), 0);
   G__memfunc_setup("Class",502,G__ShowerDict_617_0_13, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerPadDigitizer::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_617_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPadDigitizer::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_617_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerPadDigitizer::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_617_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerPadDigitizer::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_617_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_617_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPadDigitizer::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_617_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPadDigitizer::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_617_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPadDigitizer::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_617_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPadDigitizer::DeclFileLine) ), 0);
   G__memfunc_setup("sort",456,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcCharge",989,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 6, 1, 4, 0, 
"f - 'Float_t' 0 - charge f - 'Float_t' 0 - dist "
"f - 'Float_t' 0 - Xd f - 'Float_t' 0 - Yd "
"f - 'Float_t' 0 - Xu f - 'Float_t' 0 - Yu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("digiPads",805,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HShowerGeantWire' - 0 - pWireHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcLimit",914,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"f - 'Float_t' 0 - fCor i - 'Int_t' 0 - nMatrixRange "
"f - 'Float_t' 0 - fBoxSize", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("moveCoord",942,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 12, 1, 4, 0, 
"U 'HShowerPad' - 0 - pPad f - 'Float_t' 0 - distWire "
"f - 'Float_t' 0 - fDx f - 'Float_t' 0 - fDy "
"F - 'Float_t' 0 - corXld F - 'Float_t' 0 - corYld "
"F - 'Float_t' 0 - corXlu F - 'Float_t' 0 - corYlu "
"F - 'Float_t' 0 - corXrd F - 'Float_t' 0 - corYrd "
"F - 'Float_t' 0 - corXru F - 'Float_t' 0 - corYru", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("analyticCalc",1224,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HShowerPad' - 0 - pPad U 'HShowerGeantWire' - 0 - pWireHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("numericalCalc",1331,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 3, 1, 4, 0, 
"U 'HShowerPad' - 0 - pPad U 'HShowerGeantWire' - 0 - pWireHit "
"F - 'Float_t' 0 - pfValues", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updatePad",920,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 5, 1, 4, 0, 
"U 'HShowerPad' - 0 - pPad f - 'Float_t' 0 - fIndQ "
"i - 'Int_t' 0 - nSect i - 'Int_t' 0 - nMod "
"i - 'Int_t' 0 - nTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findFirstHitInShower",2045,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - trackID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findFirstHitInRpc",1706,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - trackID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("findFirstHit",1230,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 4, 0, "i - 'Int_t' 0 - trackID", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerPadDigitizer", 2046, G__ShowerDict_617_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHit(void) {
   /* HShowerHit */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit));
   G__memfunc_setup("HShowerHit",997,G__ShowerDict_629_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerHit",997,G__ShowerDict_629_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ShowerDict_629_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcAddress",1113,G__ShowerDict_629_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__ShowerDict_629_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ShowerDict_629_0_6, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__ShowerDict_629_0_7, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRow",632,G__ShowerDict_629_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__ShowerDict_629_0_9, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSum",629,G__ShowerDict_629_0_10, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSum25",732,G__ShowerDict_629_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumN",707,G__ShowerDict_629_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getVar",617,G__ShowerDict_629_0_13, 102, -1, G__defined_typename("Float_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusterSize",1469,G__ShowerDict_629_0_14, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 - i", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLocalMax",1105,G__ShowerDict_629_0_15, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXY",497,G__ShowerDict_629_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - px F - 'Float_t' 0 - py", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getZ",410,G__ShowerDict_629_0_17, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaXY",994,G__ShowerDict_629_0_18, 121, -1, -1, 0, 2, 1, 1, 0, 
"F - 'Float_t' 0 - px F - 'Float_t' 0 - py", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaX",905,G__ShowerDict_629_0_19, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigmaY",906,G__ShowerDict_629_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLabXYZ",858,G__ShowerDict_629_0_21, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - px F - 'Float_t' 0 - py "
"F - 'Float_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSphereCoord",1438,G__ShowerDict_629_0_22, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - pr F - 'Float_t' 0 - pphi "
"F - 'Float_t' 0 - ptheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__ShowerDict_629_0_23, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShower",952,G__ShowerDict_629_0_24, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumDiff01",1103,G__ShowerDict_629_0_25, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSumDiff02",1104,G__ShowerDict_629_0_26, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copyToTrueAddress",1764,G__ShowerDict_629_0_27, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrueAddress",1458,G__ShowerDict_629_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - address", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrueAddress",1446,G__ShowerDict_629_0_29, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ShowerDict_629_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__ShowerDict_629_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRow",644,G__ShowerDict_629_0_32, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCol",618,G__ShowerDict_629_0_33, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSum",641,G__ShowerDict_629_0_34, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - fSum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setVar",629,G__ShowerDict_629_0_35, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i f - 'Float_t' 0 - fVar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusterSize",1481,G__ShowerDict_629_0_36, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - i i - 'Int_t' 0 - cs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSum25",744,G__ShowerDict_629_0_37, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fSum", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLocalMax",1117,G__ShowerDict_629_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - lmax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXY",509,G__ShowerDict_629_0_39, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSigmaXY",1006,G__ShowerDict_629_0_40, 121, -1, -1, 0, 2, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLabXYZ",870,G__ShowerDict_629_0_41, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSphereCoord",1450,G__ShowerDict_629_0_42, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - r f - 'Float_t' 0 - phi "
"f - 'Float_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__ShowerDict_629_0_43, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShower",964,G__ShowerDict_629_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fShower", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateCalc",1014,G__ShowerDict_629_0_45, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_629_0_48, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHit::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_629_0_49, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHit::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_629_0_50, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHit::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_629_0_51, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHit::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_629_0_55, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_629_0_56, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHit::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_629_0_57, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHit::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_629_0_58, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHit::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_629_0_59, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHit::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerHit", 997, G__ShowerDict_629_0_60, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit), -1, 0, 1, 1, 1, 0, "u 'HShowerHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHit", 1123, G__ShowerDict_629_0_61, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_629_0_62, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHit), -1, 1, 1, 1, 1, 0, "u 'HShowerHit' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerPID(void) {
   /* HShowerPID */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID));
   G__memfunc_setup("HShowerPID",925,G__ShowerDict_637_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerPID",925,G__ShowerDict_637_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID), -1, 0, 1, 1, 1, 0, "f - 'Float_t' 10 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ShowerDict_637_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__ShowerDict_637_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ShowerDict_637_0_5, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__ShowerDict_637_0_6, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRow",632,G__ShowerDict_637_0_7, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCol",606,G__ShowerDict_637_0_8, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getXYZ",587,G__ShowerDict_637_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - px F - 'Float_t' 0 - py "
"F - 'Float_t' 0 - pz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSphereCoord",1438,G__ShowerDict_637_0_10, 121, -1, -1, 0, 3, 1, 1, 0, 
"F - 'Float_t' 0 - pr F - 'Float_t' 0 - pphi "
"F - 'Float_t' 0 - ptheta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCharge",906,G__ShowerDict_637_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShower",952,G__ShowerDict_637_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__ShowerDict_637_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nAddress", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ShowerDict_637_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__ShowerDict_637_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRow",644,G__ShowerDict_637_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCol",618,G__ShowerDict_637_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setXYZ",599,G__ShowerDict_637_0_18, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - x f - 'Float_t' 0 - y "
"f - 'Float_t' 0 - z", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSphereCoord",1450,G__ShowerDict_637_0_19, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 0 - r f - 'Float_t' 0 - phi "
"f - 'Float_t' 0 - theta", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCharge",918,G__ShowerDict_637_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setShower",964,G__ShowerDict_637_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fShower", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_637_0_24, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerPID::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_637_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPID::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_637_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerPID::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_637_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerPID::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_637_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_637_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPID::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_637_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPID::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_637_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPID::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_637_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPID::DeclFileLine) ), 0);
   G__memfunc_setup("calcAddress",1113,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerPID", 925, G__ShowerDict_637_0_37, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID), -1, 0, 1, 1, 1, 0, "u 'HShowerPID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerPID", 1051, G__ShowerDict_637_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_637_0_39, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerPID), -1, 1, 1, 1, 1, 0, "u 'HShowerPID' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHitHeader(void) {
   /* HShowerHitHeader */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader));
   G__memfunc_setup("HShowerHitHeader",1582,G__ShowerDict_638_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFiredCells",1321,G__ShowerDict_638_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nFiredCells", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getFiredCells",1309,G__ShowerDict_638_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incFiredCells",1303,G__ShowerDict_638_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' nStep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setLocalMax",1117,G__ShowerDict_638_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nLocalMax", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getLocalMax",1105,G__ShowerDict_638_0_6, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incLocalMax",1099,G__ShowerDict_638_0_7, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' nStep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setClusters",1185,G__ShowerDict_638_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nClusters", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getClusters",1173,G__ShowerDict_638_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("incClusters",1167,G__ShowerDict_638_0_10, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "i - 'Int_t' 0 '1' nStep", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ShowerDict_638_0_11, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__ShowerDict_638_0_12, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ShowerDict_638_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__ShowerDict_638_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_638_0_15, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHitHeader::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_638_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitHeader::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_638_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHitHeader::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_638_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHitHeader::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_638_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_638_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitHeader::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_638_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitHeader::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_638_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitHeader::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_638_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitHeader::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerHitHeader", 1582, G__ShowerDict_638_0_27, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader), -1, 0, 1, 1, 1, 0, "u 'HShowerHitHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHitHeader", 1708, G__ShowerDict_638_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_638_0_29, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader), -1, 1, 1, 1, 1, 0, "u 'HShowerHitHeader' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerCriterium(void) {
   /* HShowerCriterium */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium));
   G__memfunc_setup("HShowerCriterium",1652,G__ShowerDict_639_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCriterium",1652,G__ShowerDict_639_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium), -1, 0, 1, 1, 1, 0, "U 'HShowerHitFPar' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("showerCriterium",1612,G__ShowerDict_639_0_3, 102, -1, G__defined_typename("Float_t"), 0, 2, 1, 1, 0, 
"U 'HShowerHit' - 0 - pHit i - 'Int_t' 1 - ret", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("showerCriterium",1612,G__ShowerDict_639_0_4, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"U 'HShowerHit' - 0 - pHit i - 'Int_t' 1 - ret "
"U 'HShowerHitFPar' - 0 - pParams", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParams",944,G__ShowerDict_639_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerHitFPar' - 0 - par", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParams",932,G__ShowerDict_639_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_639_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCriterium::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_639_0_8, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCriterium::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_639_0_9, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCriterium::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_639_0_10, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCriterium::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_639_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_639_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCriterium::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_639_0_16, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCriterium::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_639_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCriterium::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_639_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCriterium::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerCriterium", 1652, G__ShowerDict_639_0_19, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium), -1, 0, 1, 1, 1, 0, "u 'HShowerCriterium' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCriterium", 1778, G__ShowerDict_639_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_639_0_21, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerCriterium), -1, 1, 1, 1, 1, 0, "u 'HShowerCriterium' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHitFPar(void) {
   /* HShowerHitFPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar));
   G__memfunc_setup("HShowerHitFPar",1358,G__ShowerDict_640_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ShowerHitFPar\"' name C - 'Char_t' 10 '\"Parameter for Shower hit finder\"' title "
"C - 'Char_t' 10 '\"ShowerStandardHitFinder\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,(G__InterfaceMethod) NULL,121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("defaultInit",1145,G__ShowerDict_640_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("putParams",957,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getParams",932,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParamList' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getColBord",997,G__ShowerDict_640_0_6, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nSect i - 'Int_t' 0 - nMod "
"I - 'Int_t' 0 - nLowerCol I - 'Int_t' 0 - nUpperCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRowBord",1023,G__ShowerDict_640_0_7, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nSect i - 'Int_t' 0 - nMod "
"I - 'Int_t' 0 - nLowerRow I - 'Int_t' 0 - nUpperRow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModules",1049,G__ShowerDict_640_0_8, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSectors",1059,G__ShowerDict_640_0_9, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThreshold",1261,G__ShowerDict_640_0_10, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainPost1",1174,G__ShowerDict_640_0_11, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThresholdPost1",1732,G__ShowerDict_640_0_12, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGainPost2",1175,G__ShowerDict_640_0_13, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getThresholdPost2",1733,G__ShowerDict_640_0_14, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setColBord",1009,G__ShowerDict_640_0_15, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nSect i - 'Int_t' 0 - nMod "
"i - 'Int_t' 0 - nLowerCol i - 'Int_t' 0 - nUpperCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRowBord",1035,G__ShowerDict_640_0_16, 105, -1, G__defined_typename("Int_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nSect i - 'Int_t' 0 - nMod "
"i - 'Int_t' 0 - nLowerRow i - 'Int_t' 0 - nUpperRow", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThreshold",1273,G__ShowerDict_640_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGainPost1",1186,G__ShowerDict_640_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - gain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThresholdPost1",1744,G__ShowerDict_640_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGainPost2",1187,G__ShowerDict_640_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - gain", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setThresholdPost2",1745,G__ShowerDict_640_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - threshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getIndex",824,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 2, 1, 4, 0, 
"i - 'Int_t' 0 - nSect i - 'Int_t' 0 - nMod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_640_0_23, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHitFPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_640_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitFPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_640_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHitFPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_640_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHitFPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_640_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_640_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitFPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_640_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitFPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_640_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitFPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_640_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitFPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerHitFPar", 1358, G__ShowerDict_640_0_35, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar), -1, 0, 1, 1, 1, 0, "u 'HShowerHitFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHitFPar", 1484, G__ShowerDict_640_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_640_0_37, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar), -1, 1, 1, 1, 1, 0, "u 'HShowerHitFPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHitFinder(void) {
   /* HShowerHitFinder */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder));
   G__memfunc_setup("HShowerHitFinder",1597,G__ShowerDict_641_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerHitFinder",1597,G__ShowerDict_641_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParameters",1480,G__ShowerDict_641_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("lookForHit",1025,G__ShowerDict_641_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HShowerCal' - 0 - cal u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateSum",1251,G__ShowerDict_641_0_8, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HLocation' - 1 - fLoc i - 'Int_t' 0 - nRange "
"I - 'Int_t' 0 '0' pncs", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculateVar",1239,G__ShowerDict_641_0_9, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 1, 0, 
"u 'HLocation' - 1 - fLoc i - 'Int_t' 0 - nRange "
"f - 'Float_t' 0 - avg", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("isLocalMax",1005,G__ShowerDict_641_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__ShowerDict_641_0_11, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFinder), -1, 1, 1, 1, 1, 0, "u 'HShowerHitFinder' - 1 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalCat",872,G__ShowerDict_641_0_12, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitCat",893,G__ShowerDict_641_0_13, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPIDCat",821,G__ShowerDict_641_0_14, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitFPar",974,G__ShowerDict_641_0_15, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeometry",1164,G__ShowerDict_641_0_16, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHSpecGeomPar",1470,G__ShowerDict_641_0_17, 85, G__get_linked_tagnum(&G__ShowerDictLN_HSpecGeomPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalCat",884,G__ShowerDict_641_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pCalCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitCat",905,G__ShowerDict_641_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pHitCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPIDCat",833,G__ShowerDict_641_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pPIDCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitFPar",986,G__ShowerDict_641_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerHitFPar' - 0 - pPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeometry",1176,G__ShowerDict_641_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerGeometry' - 0 - pGeometry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCriterium",1280,G__ShowerDict_641_0_23, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerCriterium' - 0 - pCrit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHSpecGeomPar",1482,G__ShowerDict_641_0_24, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HSpecGeomPar' - 0 - pSpecGeometry", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortFlagSet",1290,G__ShowerDict_641_0_25, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFillPID",800,G__ShowerDict_641_0_26, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSortFlag",1134,G__ShowerDict_641_0_27, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' bSort", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setFillPID",944,G__ShowerDict_641_0_28, 121, -1, -1, 0, 1, 1, 1, 0, "g - 'Bool_t' 0 'kTRUE' bIsFillPID", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillSums",847,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HShowerHit' - 0 - hit u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calcCoord",906,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HShowerHit' - 0 - hit u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("calcCoordWithSigma",1815,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HShowerHit' - 0 - hit u 'HLocation' - 1 - fLoc "
"i - 'Int_t' 0 - nRange", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("fillPID",644,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"U 'HShowerHit' - 0 - hit U 'HShowerPID' - 0 - pid", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitHeader",1198,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHeader), -1, 0, 1, 1, 4, 0, "u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateClusters",1496,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateLocalMax",1428,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("updateFiredCells",1632,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "u 'HLocation' - 1 - fLoc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_641_0_37, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHitFinder::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_641_0_38, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitFinder::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_641_0_39, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHitFinder::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_641_0_40, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHitFinder::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_641_0_44, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_641_0_45, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitFinder::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_641_0_46, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitFinder::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_641_0_47, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitFinder::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_641_0_48, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitFinder::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHitFinder", 1723, G__ShowerDict_641_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerDetector(void) {
   /* HShowerDetector */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector));
   G__memfunc_setup("getMaxValues",1238,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"I - 'Int_t' 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildMatrixCat",1437,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 3, 1, 2, 0, 
"C - 'Text_t' 10 - classname f - 'Float_t' 0 - fillRate "
"i - 'Int_t' 0 - nLevels", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("buildMatrixCat",1437,(G__InterfaceMethod) NULL, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 4, 1, 2, 0, 
"C - 'Text_t' 10 - classname f - 'Float_t' 0 - fillRate "
"i - 'Int_t' 0 - nLevels I - 'Int_t' 0 - sizes", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerDetector",1530,G__ShowerDict_644_0_4, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("activateParIo",1324,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - io", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildTask",931,G__ShowerDict_644_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildCategory",1358,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 1, 1, 1, 0, "s - 'Cat_t' 0 - cat", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("buildLinearCat",1411,G__ShowerDict_644_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 1, 1, 1, 0, "C - 'Text_t' 10 - classname", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,G__ShowerDict_644_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "C - 'Text_t' 10 '\"raw\"' level", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerSectors",1691,G__ShowerDict_644_0_11, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getShowerModules",1681,G__ShowerDict_644_0_12, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRows",747,G__ShowerDict_644_0_13, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getColumns",1057,G__ShowerDict_644_0_14, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_644_0_15, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerDetector::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_644_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDetector::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_644_0_17, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerDetector::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_644_0_18, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerDetector::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_644_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_644_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDetector::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_644_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerDetector::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_644_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerDetector::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_644_0_26, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerDetector::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerDetector", 1530, G__ShowerDict_644_0_27, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector), -1, 0, 1, 1, 1, 0, "u 'HShowerDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerDetector", 1656, G__ShowerDict_644_0_28, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_644_0_29, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerDetector), -1, 1, 1, 1, 1, 0, "u 'HShowerDetector' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerGeomPar(void) {
   /* HShowerGeomPar */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar));
   G__memfunc_setup("HShowerGeomPar",1387,G__ShowerDict_652_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ShowerGeomPar\"' name C - 'Char_t' 10 '\"Shower (GEANT) geometry parameters and alignment\"' title "
"C - 'Char_t' 10 '\"GeomProduction\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - output", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getSecNum",907,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInMod",1383,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getModNumInComp",1494,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - name", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCompNum",1023,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "u 'TString' - 11 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_652_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerGeomPar::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_652_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeomPar::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_652_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerGeomPar::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_652_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerGeomPar::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_652_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_652_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeomPar::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_652_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeomPar::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_652_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerGeomPar::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_652_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerGeomPar::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerGeomPar", 1387, G__ShowerDict_652_0_20, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar), -1, 0, 1, 1, 1, 0, "u 'HShowerGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerGeomPar", 1513, G__ShowerDict_652_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_652_0_22, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeomPar), -1, 1, 1, 1, 1, 0, "u 'HShowerGeomPar' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHGeomVector2(void) {
   /* HGeomVector2 */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2));
   G__memfunc_setup("HGeomVector2",1141,G__ShowerDict_653_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2), -1, 0, 3, 1, 1, 0, 
"d - 'Double_t' 0 '0' dx d - 'Double_t' 0 '0' dy "
"d - 'Double_t' 0 '0' dz", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HGeomVector2",1141,G__ShowerDict_653_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2), -1, 0, 1, 1, 1, 0, "u 'HGeomVector' - 11 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRad",599,G__ShowerDict_653_0_3, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPhi",609,G__ShowerDict_653_0_4, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTheta",822,G__ShowerDict_653_0_5, 100, -1, G__defined_typename("Double_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRad",611,G__ShowerDict_653_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPhi",621,G__ShowerDict_653_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTheta",834,G__ShowerDict_653_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "d - 'Double_t' 10 - a", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("sphereCoord",1150,G__ShowerDict_653_0_9, 121, -1, -1, 0, 3, 1, 1, 0, 
"f - 'Float_t' 1 - rad f - 'Float_t' 1 - theta "
"f - 'Float_t' 1 - phi", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_653_0_10, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HGeomVector2::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_653_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVector2::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_653_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HGeomVector2::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_653_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HGeomVector2::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_653_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_653_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVector2::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_653_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVector2::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_653_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HGeomVector2::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_653_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HGeomVector2::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HGeomVector2", 1141, G__ShowerDict_653_0_22, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2), -1, 0, 1, 1, 1, 0, "u 'HGeomVector2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HGeomVector2", 1267, G__ShowerDict_653_0_23, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_653_0_24, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HGeomVector2), -1, 1, 1, 1, 1, 0, "u 'HGeomVector2' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerContFact(void) {
   /* HShowerContFact */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact));
   G__memfunc_setup("setAllContainers",1659,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerContFact",1490,G__ShowerDict_656_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("createContainer",1559,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_HParSet), -1, 0, 1, 1, 1, 0, "U 'HContainer' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_656_0_4, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerContFact::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_656_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerContFact::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_656_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerContFact::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_656_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerContFact::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_656_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_656_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerContFact::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_656_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerContFact::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_656_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerContFact::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_656_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerContFact::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerContFact", 1490, G__ShowerDict_656_0_16, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact), -1, 0, 1, 1, 1, 0, "u 'HShowerContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerContFact", 1616, G__ShowerDict_656_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_656_0_18, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerContFact), -1, 1, 1, 1, 1, 0, "u 'HShowerContFact' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerParAsciiFileIo(void) {
   /* HShowerParAsciiFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo));
   G__memfunc_setup("HShowerParAsciiFileIo",2052,G__ShowerDict_660_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo), -1, 0, 1, 1, 1, 0, "U 'basic_fstream<char,char_traits<char> >' 'fstream' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_660_0_4, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerParAsciiFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_660_0_5, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParAsciiFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_660_0_6, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerParAsciiFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_660_0_7, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerParAsciiFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_660_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_660_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParAsciiFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_660_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerParAsciiFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_660_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParAsciiFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_660_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerParAsciiFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerParAsciiFileIo", 2052, G__ShowerDict_660_0_16, (int) ('i'), 
G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo), -1, 0, 1, 1, 1, 0, "u 'HShowerParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerParAsciiFileIo", 2178, G__ShowerDict_660_0_17, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_660_0_18, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerParAsciiFileIo), -1, 1, 1, 1, 1, 0, "u 'HShowerParAsciiFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerParRootFileIo(void) {
   /* HShowerParRootFileIo */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo));
   G__memfunc_setup("HShowerParRootFileIo",1983,G__ShowerDict_663_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo), -1, 0, 1, 1, 1, 0, "U 'HParRootFile' - 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParSet' - 0 - - I - 'Int_t' 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_663_0_3, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerParRootFileIo::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_663_0_4, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParRootFileIo::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_663_0_5, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerParRootFileIo::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_663_0_6, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerParRootFileIo::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_663_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_663_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParRootFileIo::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_663_0_12, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerParRootFileIo::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_663_0_13, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParRootFileIo::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_663_0_14, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerParRootFileIo::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerParRootFileIo", 1983, G__ShowerDict_663_0_15, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo), -1, 0, 1, 1, 1, 0, "u 'HShowerParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerParRootFileIo", 2109, G__ShowerDict_663_0_16, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_663_0_17, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerParRootFileIo), -1, 1, 1, 1, 1, 0, "u 'HShowerParRootFileIo' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerTrack(void) {
   /* HShowerTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack));
   G__memfunc_setup("HShowerTrack",1205,G__ShowerDict_664_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ShowerDict_664_0_2, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getAddress",1030,G__ShowerDict_664_0_3, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__ShowerDict_664_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAddress",1042,G__ShowerDict_664_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nAddr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__ShowerDict_664_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - nTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__ShowerDict_664_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_664_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_664_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_664_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_664_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_664_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_664_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_664_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_664_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerTrack", 1205, G__ShowerDict_664_0_21, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack), -1, 0, 1, 1, 1, 0, "u 'HShowerTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerTrack", 1331, G__ShowerDict_664_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_664_0_23, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerTrack), -1, 1, 1, 1, 1, 0, "u 'HShowerTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerTaskSet(void) {
   /* HShowerTaskSet */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet));
   G__memfunc_setup("HShowerTaskSet",1407,G__ShowerDict_668_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerTaskSet",1407,G__ShowerDict_668_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerTaskSet), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAnalysisSimOrReal",2046,G__ShowerDict_668_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setAnalysisLevel",1672,G__ShowerDict_668_0_4, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Option_t' 10 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("passArguments",1389,G__ShowerDict_668_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - s1", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("printOptions",1305,G__ShowerDict_668_0_6, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("make",414,G__ShowerDict_668_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_HTask), -1, 0, 2, 1, 1, 0, 
"C - 'Char_t' 10 '\"\"' select C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_668_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerTaskSet::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_668_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerTaskSet::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_668_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerTaskSet::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_668_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerTaskSet::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_668_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_668_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerTaskSet::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_668_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerTaskSet::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_668_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerTaskSet::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_668_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerTaskSet::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerTaskSet", 1533, G__ShowerDict_668_0_20, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHistCell(void) {
   /* HShowerHistCell */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell));
   G__memfunc_setup("HShowerHistCell",1496,G__ShowerDict_671_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerHistCell",1496,G__ShowerDict_671_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nSect i - 'Int_t' 0 - nMod "
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_671_0_3, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ShowerDict_671_0_4, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol "
"i - 'Int_t' 0 - nVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("draw",430,G__ShowerDict_671_0_5, 103, -1, G__defined_typename("Bool_t"), 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol "
"C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("book",427,G__ShowerDict_671_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("book",427,G__ShowerDict_671_0_7, 103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nRows i - 'Int_t' 0 - nCols", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("deleteHist",1035,G__ShowerDict_671_0_8, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculate",942,G__ShowerDict_671_0_9, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - iEvents U 'HShowerCalPar' - 0 - pCalPar "
"i - 'Int_t' 0 - iMethod f - 'Float_t' 0 - fParam1 "
"f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHistogram",1262,G__ShowerDict_671_0_10, 85, G__get_linked_tagnum(&G__ShowerDictLN_TH3S), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHistogram",1497,G__ShowerDict_671_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSector",944,G__ShowerDict_671_0_12, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getModule",934,G__ShowerDict_671_0_13, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getRows",747,G__ShowerDict_671_0_14, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCols",721,G__ShowerDict_671_0_15, 99, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSector",956,G__ShowerDict_671_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - s", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setModule",946,G__ShowerDict_671_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - m", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setRows",759,G__ShowerDict_671_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - r", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCols",733,G__ShowerDict_671_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "c - 'Char_t' 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setChannel10pC",1305,G__ShowerDict_671_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - f", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getChannel10pC",1293,G__ShowerDict_671_0_21, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setGeometry",1176,G__ShowerDict_671_0_22, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerGeometry' - 0 - pGeom", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getGeometry",1164,G__ShowerDict_671_0_23, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerGeometry), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getName",705,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - 'Char_t' 0 - name i - 'Int_t' 0 - nInt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTitle",834,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 2, 1, 4, 0, 
"C - 'Char_t' 0 - title i - 'Int_t' 0 - nInt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillData",801,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 4, 1, 4, 0, 
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol "
"i - 'Int_t' 0 - nBins I - 'Int_t' 0 - pData", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMax",614,(G__InterfaceMethod) NULL, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMean",705,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - nMin i - 'Int_t' 0 - nMax "
"i - 'Int_t' 0 - nThreshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSigma",817,(G__InterfaceMethod) NULL, 102, -1, G__defined_typename("Float_t"), 0, 4, 1, 4, 0, 
"f - 'Float_t' 0 - fMean i - 'Int_t' 0 - nMin "
"i - 'Int_t' 0 - nMax i - 'Int_t' 0 - nThreshold", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("makeRunFromCal",1399,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 1, 1, 4, 0, "U 'HShowerCalParCell' - 0 - pCell", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_671_0_31, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHistCell::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_671_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHistCell::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_671_0_33, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHistCell::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_671_0_34, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHistCell::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_671_0_38, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_671_0_39, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHistCell::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_671_0_40, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHistCell::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_671_0_41, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHistCell::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_671_0_42, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHistCell::DeclFileLine) ), 0);
   G__memfunc_setup("calTest",720,G__ShowerDict_671_0_43, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HLocation' - 1 - loc U 'HShowerCalParCell' - 0 - pCell "
"f - 'Float_t' 0 - fParam1 f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calElect",797,G__ShowerDict_671_0_44, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HLocation' - 1 - loc U 'HShowerCalParCell' - 0 - pCell "
"f - 'Float_t' 0 - fParam1 f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("runSigma",838,G__ShowerDict_671_0_45, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HLocation' - 1 - loc U 'HShowerCalParCell' - 0 - pCell "
"f - 'Float_t' 0 - fParam1 f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("runThreshold",1282,G__ShowerDict_671_0_46, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HLocation' - 1 - loc U 'HShowerCalParCell' - 0 - pCell "
"f - 'Float_t' 0 - fParam1 f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("runIntegrate",1272,G__ShowerDict_671_0_47, 121, -1, -1, 0, 4, 1, 1, 0, 
"u 'HLocation' - 1 - loc U 'HShowerCalParCell' - 0 - pCell "
"f - 'Float_t' 0 - fParam1 f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerHistCell", 1496, G__ShowerDict_671_0_48, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell), -1, 0, 1, 1, 1, 0, "u 'HShowerHistCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHistCell", 1622, G__ShowerDict_671_0_49, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_671_0_50, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell), -1, 1, 1, 1, 1, 0, "u 'HShowerHistCell' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHist(void) {
   /* HShowerHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist));
   G__memfunc_setup("HShowerHist",1112,G__ShowerDict_672_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist), -1, 0, 3, 1, 1, 0, 
"C - 'Char_t' 10 '\"ShowerHist\"' name C - 'Char_t' 10 '\"Histograms of offsets and slopes for Shower\"' title "
"C - 'Char_t' 10 '\"\"' context", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setSetup",861,G__ShowerDict_672_0_2, 121, -1, -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nSectors i - 'Int_t' 0 - nModules "
"i - 'Int_t' 0 - nRows i - 'Int_t' 0 - nCol", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCellClassName",1603,G__ShowerDict_672_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pszName", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCellClassName",1591,G__ShowerDict_672_0_4, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getSlot",738,G__ShowerDict_672_0_5, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getObject",919,G__ShowerDict_672_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHistCell), -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 2, 1, 1, 0, 
"U 'HParIo' - 0 - inp I - 'Int_t' 0 - set", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("write",555,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 0, "U 'HParIo' - 0 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("defaultInit",1145,G__ShowerDict_672_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Write",523,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 '0' name i - 'Int_t' 0 '0' option "
"i - 'Int_t' 0 '0' bufsize", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("bookAll",708,G__ShowerDict_672_0_11, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("book",427,G__ShowerDict_672_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("book",427,G__ShowerDict_672_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nSector i - 'Int_t' 0 - nModule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("resetAll",828,G__ShowerDict_672_0_14, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_672_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'HLocation' - 1 - loc", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("reset",547,G__ShowerDict_672_0_16, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nSector i - 'Int_t' 0 - nModule", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ShowerDict_672_0_17, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc i - 'Int_t' 0 - nVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fill",423,G__ShowerDict_672_0_18, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - nSector i - 'Int_t' 0 - nModule "
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol "
"i - 'Int_t' 0 - nVal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("draw",430,G__ShowerDict_672_0_19, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'HLocation' - 1 - loc C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("draw",430,G__ShowerDict_672_0_20, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - nSector i - 'Int_t' 0 - nModule "
"i - 'Int_t' 0 - nRow i - 'Int_t' 0 - nCol "
"C - 'Option_t' 10 '\"\"' opt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("calculate",942,G__ShowerDict_672_0_21, 121, -1, -1, 0, 5, 1, 1, 0, 
"i - 'Int_t' 0 - iEvents U 'HShowerCalPar' - 0 - pCalPar "
"i - 'Int_t' 0 - iMethod f - 'Float_t' 0 - fParam1 "
"f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("allocateHist",1245,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_672_0_23, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_672_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_672_0_25, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_672_0_26, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_672_0_30, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_672_0_31, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_672_0_32, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_672_0_33, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_672_0_34, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHist::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerHist", 1112, G__ShowerDict_672_0_35, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist), -1, 0, 1, 1, 1, 0, "u 'HShowerHist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHist", 1238, G__ShowerDict_672_0_36, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__ShowerDict_672_0_37, (int) ('u'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHist), -1, 1, 1, 1, 1, 0, "u 'HShowerHist' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerCalParCalculator(void) {
   /* HShowerCalParCalculator */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator));
   G__memfunc_setup("HShowerCalParCalculator",2301,G__ShowerDict_673_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator), -1, 0, 3, 1, 1, 0, 
"i - 'Int_t' 0 - iMethod f - 'Float_t' 0 '0.0f' fParam1 "
"f - 'Float_t' 0 '0.0f' fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCalParCalculator",2301,G__ShowerDict_673_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator), -1, 0, 5, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"i - 'Int_t' 0 - iMethod f - 'Float_t' 0 '0.0f' fParam1 "
"f - 'Float_t' 0 '0.0f' fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCalParCalculator",2301,G__ShowerDict_673_0_3, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalParCalculator), -1, 0, 5, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"C - 'Text_t' 10 - nameOfMethod f - 'Float_t' 0 '0.0f' fParam1 "
"f - 'Float_t' 0 '0.0f' fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("reinit",651,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCalPar",883,G__ShowerDict_673_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_HParSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getCalParHist",1291,G__ShowerDict_673_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_HParSet), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalPar",895,G__ShowerDict_673_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalParHist",1303,G__ShowerDict_673_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HParSet' - 0 - -", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("initCalPar",999,G__ShowerDict_673_0_12, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMethod",941,G__ShowerDict_673_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 - iMethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setMethod",941,G__ShowerDict_673_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "C - 'Char_t' 10 - pMethod", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMethod",929,G__ShowerDict_673_0_15, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getMethodName",1314,G__ShowerDict_673_0_16, 67, -1, G__defined_typename("Char_t"), 0, 0, 1, 1, 1, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParam1",878,G__ShowerDict_673_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParam1",866,G__ShowerDict_673_0_18, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setParam2",879,G__ShowerDict_673_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "f - 'Float_t' 0 - fP", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getParam2",867,G__ShowerDict_673_0_20, 102, -1, G__defined_typename("Float_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clearAtBegin",1185,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"i - 'Int_t' 0 - iMethod f - 'Float_t' 0 - fParam1 "
"f - 'Float_t' 0 - fParam2", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_673_0_22, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCalParCalculator::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_673_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalParCalculator::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_673_0_24, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCalParCalculator::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_673_0_25, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCalParCalculator::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_673_0_29, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_673_0_30, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalParCalculator::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_673_0_31, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalParCalculator::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_673_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalParCalculator::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_673_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalParCalculator::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCalParCalculator", 2427, G__ShowerDict_673_0_34, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerCalHist(void) {
   /* HShowerCalHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist));
   G__memfunc_setup("HShowerCalHist",1384,G__ShowerDict_674_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCalHist",1384,G__ShowerDict_674_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCalHist), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getCalCat",872,G__ShowerDict_674_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCalCat",884,G__ShowerDict_674_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pCalCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("bookHist",835,G__ShowerDict_674_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,G__ShowerDict_674_0_9, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HShowerCal' - 0 - pCal", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,G__ShowerDict_674_0_10, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nModule i - 'Int_t' 0 - nRow "
"i - 'Int_t' 0 - nColumn f - 'Float_t' 0 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHist",963,G__ShowerDict_674_0_11, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalizeHist",1258,G__ShowerDict_674_0_12, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_674_0_13, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCalHist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_674_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalHist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_674_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCalHist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_674_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCalHist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_674_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_674_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalHist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_674_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalHist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_674_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCalHist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_674_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCalHist::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCalHist", 1510, G__ShowerDict_674_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHitHist(void) {
   /* HShowerHitHist */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist));
   G__memfunc_setup("HShowerHitHist",1405,G__ShowerDict_675_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerHitHist",1405,G__ShowerDict_675_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitHist), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getHitCat",893,G__ShowerDict_675_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitCat",905,G__ShowerDict_675_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pHitCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_675_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHitHist::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_675_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitHist::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_675_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHitHist::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_675_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHitHist::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_675_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_675_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitHist::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_675_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitHist::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_675_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitHist::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_675_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitHist::DeclFileLine) ), 0);
   G__memfunc_setup("bookHist",835,G__ShowerDict_675_0_20, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,G__ShowerDict_675_0_21, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HShowerHit' - 0 - pHit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("fillHist",831,G__ShowerDict_675_0_22, 103, -1, G__defined_typename("Bool_t"), 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - nModule i - 'Int_t' 0 - nRow "
"i - 'Int_t' 0 - nColumn f - 'Float_t' 0 - fCharge", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("writeHist",963,G__ShowerDict_675_0_23, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("finalizeHist",1258,G__ShowerDict_675_0_24, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHitHist", 1531, G__ShowerDict_675_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerCopy(void) {
   /* HShowerCopy */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy));
   G__memfunc_setup("HShowerCopy",1115,G__ShowerDict_676_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerCopy",1115,G__ShowerDict_676_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerCopy), -1, 0, 3, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title "
"f - 'Float_t' 0 '1.0' masterOffset", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("setInCat",795,G__ShowerDict_676_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pInCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setOutCat",924,G__ShowerDict_676_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pOutCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("copy",443,G__ShowerDict_676_0_8, 103, -1, G__defined_typename("Bool_t"), 0, 1, 1, 1, 0, "U 'HShowerRawMatr' - 0 - pMatr", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_676_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerCopy::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_676_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCopy::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_676_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerCopy::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_676_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerCopy::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_676_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_676_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCopy::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_676_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCopy::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_676_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerCopy::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_676_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerCopy::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerCopy", 1241, G__ShowerDict_676_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHitSim(void) {
   /* HShowerHitSim */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim));
   G__memfunc_setup("HShowerHitSim",1294,G__ShowerDict_677_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ShowerDict_677_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__ShowerDict_677_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - track", "set track number", (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__ShowerDict_677_0_4, 105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "i - 'Int_t' 0 '0' n", "get track number", (void*) NULL, 0);
   G__memfunc_setup("getNTracks",1014,G__ShowerDict_677_0_5, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setNTracks",1026,G__ShowerDict_677_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 0 '0' n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__ShowerDict_677_0_7, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim), -1, 1, 1, 1, 1, 0, "u 'HShowerHitSim' - 1 - ht", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__ShowerDict_677_0_8, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim), -1, 1, 1, 1, 1, 0, "u 'HShowerHit' - 1 - ht", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_677_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHitSim::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_677_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitSim::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_677_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHitSim::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_677_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHitSim::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_677_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_677_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitSim::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_677_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitSim::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_677_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitSim::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_677_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitSim::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerHitSim", 1294, G__ShowerDict_677_0_21, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitSim), -1, 0, 1, 1, 1, 0, "u 'HShowerHitSim' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHitSim", 1420, G__ShowerDict_677_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerPIDTrack(void) {
   /* HShowerPIDTrack */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack));
   G__memfunc_setup("HShowerPIDTrack",1426,G__ShowerDict_678_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("clear",519,G__ShowerDict_678_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrack",833,G__ShowerDict_678_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "i - 'Int_t' 10 - track", "set track number", (void*) NULL, 0);
   G__memfunc_setup("getTrack",821,G__ShowerDict_678_0_4, 105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 8, "", "get track number", (void*) NULL, 0);
   G__memfunc_setup("IsSortable",1016,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Compare",711,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 1, 1, 1, 8, "U 'TObject' - 10 - obj", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("operator=",937,G__ShowerDict_678_0_7, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack), -1, 1, 1, 1, 1, 0, "u 'HShowerPIDTrack' - 1 - pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("operator=",937,G__ShowerDict_678_0_8, 117, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack), -1, 1, 1, 1, 1, 0, "u 'HShowerPID' - 1 - pt", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_678_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerPIDTrack::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_678_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPIDTrack::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_678_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerPIDTrack::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_678_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerPIDTrack::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_678_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_678_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPIDTrack::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_678_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPIDTrack::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_678_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPIDTrack::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_678_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPIDTrack::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("HShowerPIDTrack", 1426, G__ShowerDict_678_0_21, (int) ('i'), G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrack), -1, 0, 1, 1, 1, 0, "u 'HShowerPIDTrack' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerPIDTrack", 1552, G__ShowerDict_678_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerHitTrackMatcher(void) {
   /* HShowerHitTrackMatcher */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher));
   G__memfunc_setup("HShowerHitTrackMatcher",2206,G__ShowerDict_679_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerHitTrackMatcher",2206,G__ShowerDict_679_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitTrackMatcher), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("getTrackCat",1101,G__ShowerDict_679_0_6, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitCat",893,G__ShowerDict_679_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackCat",1113,G__ShowerDict_679_0_8, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pTrackCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitCat",905,G__ShowerDict_679_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pHitCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_679_0_10, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerHitTrackMatcher::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_679_0_11, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitTrackMatcher::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_679_0_12, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerHitTrackMatcher::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_679_0_13, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerHitTrackMatcher::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_679_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_679_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitTrackMatcher::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_679_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitTrackMatcher::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_679_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerHitTrackMatcher::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_679_0_21, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerHitTrackMatcher::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerHitTrackMatcher", 2332, G__ShowerDict_679_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerPIDTrackMatcher(void) {
   /* HShowerPIDTrackMatcher */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher));
   G__memfunc_setup("HShowerPIDTrackMatcher",2134,G__ShowerDict_680_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerPIDTrackMatcher",2134,G__ShowerDict_680_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerPIDTrackMatcher), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("addPIDTrack",1019,G__ShowerDict_680_0_6, 121, -1, -1, 0, 2, 1, 1, 0, 
"U 'HShowerPID' - 0 - pPID U 'HShowerTrack' - 0 - pTrack", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getTrackCat",1101,G__ShowerDict_680_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPIDCat",821,G__ShowerDict_680_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPIDTrack",1042,G__ShowerDict_680_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setTrackCat",1113,G__ShowerDict_680_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pTrackCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPIDCat",833,G__ShowerDict_680_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pPIDCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPIDTrack",1054,G__ShowerDict_680_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pPIDTrackCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_680_0_13, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerPIDTrackMatcher::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_680_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPIDTrackMatcher::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_680_0_15, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerPIDTrackMatcher::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_680_0_16, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerPIDTrackMatcher::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_680_0_20, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_680_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPIDTrackMatcher::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_680_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPIDTrackMatcher::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_680_0_23, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerPIDTrackMatcher::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_680_0_24, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerPIDTrackMatcher::DeclFileLine) ), 0);
   // automatic destructor
   G__memfunc_setup("~HShowerPIDTrackMatcher", 2260, G__ShowerDict_680_0_25, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncHShowerParticleIdentifier(void) {
   /* HShowerParticleIdentifier */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier));
   G__memfunc_setup("HShowerParticleIdentifier",2551,G__ShowerDict_681_0_1, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("HShowerParticleIdentifier",2551,G__ShowerDict_681_0_2, 105, G__get_linked_tagnum(&G__ShowerDictLN_HShowerParticleIdentifier), -1, 0, 2, 1, 1, 0, 
"C - 'Text_t' 10 - name C - 'Text_t' 10 - title", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("init",436,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("finalize",850,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("execute",755,(G__InterfaceMethod) NULL,105, -1, G__defined_typename("Int_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("initParameters",1480,G__ShowerDict_681_0_6, 103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitCat",893,G__ShowerDict_681_0_7, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getPIDCat",821,G__ShowerDict_681_0_8, 85, G__get_linked_tagnum(&G__ShowerDictLN_HCategory), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("getHitFPar",974,G__ShowerDict_681_0_9, 85, G__get_linked_tagnum(&G__ShowerDictLN_HShowerHitFPar), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitCat",905,G__ShowerDict_681_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pHitCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setPIDCat",833,G__ShowerDict_681_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HCategory' - 0 - pPIDCat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setHitFPar",986,G__ShowerDict_681_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerHitFPar' - 0 - pPar", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("setCriterium",1280,G__ShowerDict_681_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'HShowerCriterium' - 0 - pCrit", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__ShowerDict_681_0_14, 85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&HShowerParticleIdentifier::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__ShowerDict_681_0_15, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParticleIdentifier::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__ShowerDict_681_0_16, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&HShowerParticleIdentifier::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__ShowerDict_681_0_17, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&HShowerParticleIdentifier::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__ShowerDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - -", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__ShowerDict_681_0_21, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - ClassDef_StreamerNVirtual_b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__ShowerDict_681_0_22, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParticleIdentifier::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__ShowerDict_681_0_23, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerParticleIdentifier::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__ShowerDict_681_0_24, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&HShowerParticleIdentifier::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__ShowerDict_681_0_25, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&HShowerParticleIdentifier::DeclFileLine) ), 0);
   G__memfunc_setup("fillPID",644,(G__InterfaceMethod) NULL, 121, -1, -1, 0, 3, 1, 4, 0, 
"U 'HShowerHit' - 0 - hit U 'HShowerPID' - 0 - pid "
"f - 'Float_t' 0 - fShower", (char*)NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~HShowerParticleIdentifier", 2677, G__ShowerDict_681_0_27, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncShowerDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
   G__memvar_setup((void*)(&catShowerRaw),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerRaw=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerHit),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerHit=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerCal),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerCal=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerGeantWire),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerGeantWire=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerPID),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerPID=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerTrack=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerRawMatr),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerRawMatr=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerHitHdr),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerHitHdr=",0,(char*)NULL);
   G__memvar_setup((void*)(&catShowerPIDTrack),115,0,1,-1,G__defined_typename("Cat_t"),-1,1,"catShowerPIDTrack=",0,(char*)NULL);
}

static void G__cpp_setup_global2() {
}

static void G__cpp_setup_global3() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalShowerDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
  G__cpp_setup_global3();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {
}

static void G__cpp_setup_func16() {
}

static void G__cpp_setup_func17() {
}

static void G__cpp_setup_func18() {
}

static void G__cpp_setup_func19() {
}

static void G__cpp_setup_func20() {
}

static void G__cpp_setup_func21() {
}

static void G__cpp_setup_func22() {
}

static void G__cpp_setup_func23() {
}

static void G__cpp_setup_func24() {
}

static void G__cpp_setup_func25() {
}

static void G__cpp_setup_func26() {
}

static void G__cpp_setup_func27() {
}

static void G__cpp_setup_func28() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcShowerDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
  G__cpp_setup_func16();
  G__cpp_setup_func17();
  G__cpp_setup_func18();
  G__cpp_setup_func19();
  G__cpp_setup_func20();
  G__cpp_setup_func21();
  G__cpp_setup_func22();
  G__cpp_setup_func23();
  G__cpp_setup_func24();
  G__cpp_setup_func25();
  G__cpp_setup_func26();
  G__cpp_setup_func27();
  G__cpp_setup_func28();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__ShowerDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR = { "basic_fstream<char,char_traits<char> >" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TObjArray = { "TObjArray" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TArrayI = { "TArrayI" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HLocation = { "HLocation" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HLocatedDataObject = { "HLocatedDataObject" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCal = { "HShowerCal" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HParIo = { "HParIo" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HParSet = { "HParSet" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR = { "iterator<bidirectional_iterator_tag,TObject*,long,const TObject**,const TObject*&>" , 115 , -1 };
G__linked_taginfo G__ShowerDictLN_HObjTable = { "HObjTable" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCalParCell = { "HShowerCalParCell" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TH2F = { "TH2F" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_enum_HSCPM_Var = { "enum_HSCPM_Var" , 101 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCalPar = { "HShowerCalPar" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HTask = { "HTask" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HReconstructor = { "HReconstructor" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerRaw = { "HShowerRaw" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerRawMatr = { "HShowerRawMatr" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HCategory = { "HCategory" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HIterator = { "HIterator" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCalibrater = { "HShowerCalibrater" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HldUnpack = { "HldUnpack" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerRawHist = { "HShowerRawHist" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerUnpacker = { "HShowerUnpacker" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerUnpackercLcLDataWord = { "HShowerUnpacker::DataWord" , 115 , -1 };
G__linked_taginfo G__ShowerDictLN_TTree = { "TTree" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TArrayD = { "TArrayD" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR = { "map<string,TObjArray*,less<string>,allocator<pair<const string,TObjArray*> > >" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HGeantReader = { "HGeantReader" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HMatrixCategory = { "HMatrixCategory" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HGeantShower = { "HGeantShower" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerGeantReader = { "HShowerGeantReader" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerGeantWire = { "HShowerGeantWire" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerFrameCorner = { "HShowerFrameCorner" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerFrame = { "HShowerFrame" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TArrayF = { "TArrayF" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HParamList = { "HParamList" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerWireTab = { "HShowerWireTab" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerPad = { "HShowerPad" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerPadTab = { "HShowerPadTab" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HParCond = { "HParCond" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TH1F = { "TH1F" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TMatrixTBaselEfloatgR = { "TMatrixTBase<float>" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TMatrixTBaselEdoublegR = { "TMatrixTBase<double>" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TH2D = { "TH2D" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerDigiPar = { "HShowerDigiPar" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerGeometry = { "HShowerGeometry" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerDigitizer = { "HShowerDigitizer" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHitDigitizer = { "HShowerHitDigitizer" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HLinearCategory = { "HLinearCategory" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerPadDigitizer = { "HShowerPadDigitizer" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_vectorlEintcOallocatorlEintgRsPgR = { "vector<int,allocator<int> >" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<int,allocator<int> >::iterator>" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR = { "map<int,vector<int,allocator<int> >,less<int>,allocator<pair<const int,vector<int,allocator<int> > > > >" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHit = { "HShowerHit" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HRaTree = { "HRaTree" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HSpecGeomPar = { "HSpecGeomPar" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HGeomVector = { "HGeomVector" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerPID = { "HShowerPID" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHitHeader = { "HShowerHitHeader" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCriterium = { "HShowerCriterium" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHitFPar = { "HShowerHitFPar" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHitFinder = { "HShowerHitFinder" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HDetector = { "HDetector" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HTaskSet = { "HTaskSet" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerDetector = { "HShowerDetector" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HGeomTransform = { "HGeomTransform" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HDetGeomPar = { "HDetGeomPar" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerGeomPar = { "HShowerGeomPar" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HGeomVector2 = { "HGeomVector2" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HContainer = { "HContainer" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HContFact = { "HContFact" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerContFact = { "HShowerContFact" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HDetParIo = { "HDetParIo" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HDetParAsciiFileIo = { "HDetParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerParAsciiFileIo = { "HShowerParAsciiFileIo" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HParRootFile = { "HParRootFile" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HDetParRootFileIo = { "HDetParRootFileIo" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerParRootFileIo = { "HShowerParRootFileIo" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerTrack = { "HShowerTrack" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerTaskSet = { "HShowerTaskSet" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_TH3S = { "TH3S" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHistCell = { "HShowerHistCell" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHist = { "HShowerHist" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCalParCalculator = { "HShowerCalParCalculator" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCalHist = { "HShowerCalHist" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHitHist = { "HShowerHitHist" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerCopy = { "HShowerCopy" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHitSim = { "HShowerHitSim" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerPIDTrack = { "HShowerPIDTrack" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerHitTrackMatcher = { "HShowerHitTrackMatcher" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerPIDTrackMatcher = { "HShowerPIDTrackMatcher" , 99 , -1 };
G__linked_taginfo G__ShowerDictLN_HShowerParticleIdentifier = { "HShowerParticleIdentifier" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableShowerDict() {
  G__ShowerDictLN_TClass.tagnum = -1 ;
  G__ShowerDictLN_TBuffer.tagnum = -1 ;
  G__ShowerDictLN_TMemberInspector.tagnum = -1 ;
  G__ShowerDictLN_TObject.tagnum = -1 ;
  G__ShowerDictLN_TNamed.tagnum = -1 ;
  G__ShowerDictLN_TString.tagnum = -1 ;
  G__ShowerDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR.tagnum = -1 ;
  G__ShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__ShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ShowerDictLN_TObjArray.tagnum = -1 ;
  G__ShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__ShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ShowerDictLN_TArrayI.tagnum = -1 ;
  G__ShowerDictLN_HLocation.tagnum = -1 ;
  G__ShowerDictLN_HLocatedDataObject.tagnum = -1 ;
  G__ShowerDictLN_HShowerCal.tagnum = -1 ;
  G__ShowerDictLN_HParIo.tagnum = -1 ;
  G__ShowerDictLN_HParSet.tagnum = -1 ;
  G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR.tagnum = -1 ;
  G__ShowerDictLN_HObjTable.tagnum = -1 ;
  G__ShowerDictLN_HShowerCalParCell.tagnum = -1 ;
  G__ShowerDictLN_TH2F.tagnum = -1 ;
  G__ShowerDictLN_enum_HSCPM_Var.tagnum = -1 ;
  G__ShowerDictLN_HShowerCalPar.tagnum = -1 ;
  G__ShowerDictLN_HTask.tagnum = -1 ;
  G__ShowerDictLN_HReconstructor.tagnum = -1 ;
  G__ShowerDictLN_HShowerRaw.tagnum = -1 ;
  G__ShowerDictLN_HShowerRawMatr.tagnum = -1 ;
  G__ShowerDictLN_HCategory.tagnum = -1 ;
  G__ShowerDictLN_HIterator.tagnum = -1 ;
  G__ShowerDictLN_HShowerCalibrater.tagnum = -1 ;
  G__ShowerDictLN_HldUnpack.tagnum = -1 ;
  G__ShowerDictLN_HShowerRawHist.tagnum = -1 ;
  G__ShowerDictLN_HShowerUnpacker.tagnum = -1 ;
  G__ShowerDictLN_HShowerUnpackercLcLDataWord.tagnum = -1 ;
  G__ShowerDictLN_TTree.tagnum = -1 ;
  G__ShowerDictLN_TArrayD.tagnum = -1 ;
  G__ShowerDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR.tagnum = -1 ;
  G__ShowerDictLN_HGeantReader.tagnum = -1 ;
  G__ShowerDictLN_HMatrixCategory.tagnum = -1 ;
  G__ShowerDictLN_HGeantShower.tagnum = -1 ;
  G__ShowerDictLN_HShowerGeantReader.tagnum = -1 ;
  G__ShowerDictLN_HShowerGeantWire.tagnum = -1 ;
  G__ShowerDictLN_HShowerFrameCorner.tagnum = -1 ;
  G__ShowerDictLN_HShowerFrame.tagnum = -1 ;
  G__ShowerDictLN_TArrayF.tagnum = -1 ;
  G__ShowerDictLN_HParamList.tagnum = -1 ;
  G__ShowerDictLN_HShowerWireTab.tagnum = -1 ;
  G__ShowerDictLN_HShowerPad.tagnum = -1 ;
  G__ShowerDictLN_HShowerPadTab.tagnum = -1 ;
  G__ShowerDictLN_HParCond.tagnum = -1 ;
  G__ShowerDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__ShowerDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__ShowerDictLN_TH1D.tagnum = -1 ;
  G__ShowerDictLN_TH1F.tagnum = -1 ;
  G__ShowerDictLN_TMatrixTBaselEfloatgR.tagnum = -1 ;
  G__ShowerDictLN_TMatrixTBaselEdoublegR.tagnum = -1 ;
  G__ShowerDictLN_TH2D.tagnum = -1 ;
  G__ShowerDictLN_HShowerDigiPar.tagnum = -1 ;
  G__ShowerDictLN_HShowerGeometry.tagnum = -1 ;
  G__ShowerDictLN_HShowerDigitizer.tagnum = -1 ;
  G__ShowerDictLN_HShowerHitDigitizer.tagnum = -1 ;
  G__ShowerDictLN_HLinearCategory.tagnum = -1 ;
  G__ShowerDictLN_HShowerPadDigitizer.tagnum = -1 ;
  G__ShowerDictLN_vectorlEintcOallocatorlEintgRsPgR.tagnum = -1 ;
  G__ShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__ShowerDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR.tagnum = -1 ;
  G__ShowerDictLN_HShowerHit.tagnum = -1 ;
  G__ShowerDictLN_HRaTree.tagnum = -1 ;
  G__ShowerDictLN_HSpecGeomPar.tagnum = -1 ;
  G__ShowerDictLN_HGeomVector.tagnum = -1 ;
  G__ShowerDictLN_HShowerPID.tagnum = -1 ;
  G__ShowerDictLN_HShowerHitHeader.tagnum = -1 ;
  G__ShowerDictLN_HShowerCriterium.tagnum = -1 ;
  G__ShowerDictLN_HShowerHitFPar.tagnum = -1 ;
  G__ShowerDictLN_HShowerHitFinder.tagnum = -1 ;
  G__ShowerDictLN_HDetector.tagnum = -1 ;
  G__ShowerDictLN_HTaskSet.tagnum = -1 ;
  G__ShowerDictLN_HShowerDetector.tagnum = -1 ;
  G__ShowerDictLN_HGeomTransform.tagnum = -1 ;
  G__ShowerDictLN_HDetGeomPar.tagnum = -1 ;
  G__ShowerDictLN_HShowerGeomPar.tagnum = -1 ;
  G__ShowerDictLN_HGeomVector2.tagnum = -1 ;
  G__ShowerDictLN_HContainer.tagnum = -1 ;
  G__ShowerDictLN_HContFact.tagnum = -1 ;
  G__ShowerDictLN_HShowerContFact.tagnum = -1 ;
  G__ShowerDictLN_HDetParIo.tagnum = -1 ;
  G__ShowerDictLN_HDetParAsciiFileIo.tagnum = -1 ;
  G__ShowerDictLN_HShowerParAsciiFileIo.tagnum = -1 ;
  G__ShowerDictLN_HParRootFile.tagnum = -1 ;
  G__ShowerDictLN_HDetParRootFileIo.tagnum = -1 ;
  G__ShowerDictLN_HShowerParRootFileIo.tagnum = -1 ;
  G__ShowerDictLN_HShowerTrack.tagnum = -1 ;
  G__ShowerDictLN_HShowerTaskSet.tagnum = -1 ;
  G__ShowerDictLN_TH3S.tagnum = -1 ;
  G__ShowerDictLN_HShowerHistCell.tagnum = -1 ;
  G__ShowerDictLN_HShowerHist.tagnum = -1 ;
  G__ShowerDictLN_HShowerCalParCalculator.tagnum = -1 ;
  G__ShowerDictLN_HShowerCalHist.tagnum = -1 ;
  G__ShowerDictLN_HShowerHitHist.tagnum = -1 ;
  G__ShowerDictLN_HShowerCopy.tagnum = -1 ;
  G__ShowerDictLN_HShowerHitSim.tagnum = -1 ;
  G__ShowerDictLN_HShowerPIDTrack.tagnum = -1 ;
  G__ShowerDictLN_HShowerHitTrackMatcher.tagnum = -1 ;
  G__ShowerDictLN_HShowerPIDTrackMatcher.tagnum = -1 ;
  G__ShowerDictLN_HShowerParticleIdentifier.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableShowerDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TString);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_basic_fstreamlEcharcOchar_traitslEchargRsPgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TObjArray);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TArrayI);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HLocation);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HLocatedDataObject);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCal),sizeof(HShowerCal),-1,61696,"ROOT extension",G__setup_memvarHShowerCal,G__setup_memfuncHShowerCal);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HParIo);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HParSet);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_iteratorlEbidirectional_iterator_tagcOTObjectmUcOlongcOconstsPTObjectmUmUcOconstsPTObjectmUaNgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HObjTable);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCalParCell),sizeof(HShowerCalParCell),-1,62720,"ROOT extension",G__setup_memvarHShowerCalParCell,G__setup_memfuncHShowerCalParCell);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TH2F);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_enum_HSCPM_Var);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCalPar),sizeof(HShowerCalPar),-1,62720,"ROOT extension",G__setup_memvarHShowerCalPar,G__setup_memfuncHShowerCalPar);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HTask);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HReconstructor);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerRaw),sizeof(HShowerRaw),-1,62720,"SHOWER RAW data",G__setup_memvarHShowerRaw,G__setup_memfuncHShowerRaw);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerRawMatr),sizeof(HShowerRawMatr),-1,61696,"SHOWER RAW data",G__setup_memvarHShowerRawMatr,G__setup_memfuncHShowerRawMatr);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HCategory);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HIterator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCalibrater),sizeof(HShowerCalibrater),-1,64768,"ROOT extension",G__setup_memvarHShowerCalibrater,G__setup_memfuncHShowerCalibrater);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HldUnpack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerRawHist),sizeof(HShowerRawHist),-1,62720,"ROOT extension",G__setup_memvarHShowerRawHist,G__setup_memfuncHShowerRawHist);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerUnpacker),sizeof(HShowerUnpacker),-1,62464,"unpack Shower data",G__setup_memvarHShowerUnpacker,G__setup_memfuncHShowerUnpacker);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerUnpackercLcLDataWord);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TTree);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TArrayD);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_maplEstringcOTObjArraymUcOlesslEstringgRcOallocatorlEpairlEconstsPstringcOTObjArraymUgRsPgRsPgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HGeantReader);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HMatrixCategory);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HGeantShower);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerGeantReader),sizeof(HShowerGeantReader),-1,29952,"SHOWER reader for HGeant Root file",G__setup_memvarHShowerGeantReader,G__setup_memfuncHShowerGeantReader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerGeantWire),sizeof(HShowerGeantWire),-1,29952,"Shower raw data",G__setup_memvarHShowerGeantWire,G__setup_memfuncHShowerGeantWire);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerFrameCorner),sizeof(HShowerFrameCorner),-1,28928,(char*)NULL,G__setup_memvarHShowerFrameCorner,G__setup_memfuncHShowerFrameCorner);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerFrame),sizeof(HShowerFrame),-1,29952,(char*)NULL,G__setup_memvarHShowerFrame,G__setup_memfuncHShowerFrame);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TArrayF);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HParamList);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerWireTab),sizeof(HShowerWireTab),-1,29952,(char*)NULL,G__setup_memvarHShowerWireTab,G__setup_memfuncHShowerWireTab);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerPad),sizeof(HShowerPad),-1,32512,(char*)NULL,G__setup_memvarHShowerPad,G__setup_memfuncHShowerPad);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerPadTab),sizeof(HShowerPadTab),-1,29952,(char*)NULL,G__setup_memvarHShowerPadTab,G__setup_memfuncHShowerPadTab);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HParCond);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TH1F);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TMatrixTBaselEfloatgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TMatrixTBaselEdoublegR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TH2D);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerDigiPar),sizeof(HShowerDigiPar),-1,62720,"ROOT extension",G__setup_memvarHShowerDigiPar,G__setup_memfuncHShowerDigiPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerGeometry),sizeof(HShowerGeometry),-1,62720,"Class for PreShower geometry container",G__setup_memvarHShowerGeometry,G__setup_memfuncHShowerGeometry);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerDigitizer),sizeof(HShowerDigitizer),-1,64769,"Shower digitizer base class",G__setup_memvarHShowerDigitizer,G__setup_memfuncHShowerDigitizer);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHitDigitizer),sizeof(HShowerHitDigitizer),-1,64768,"Shower hit digitizer",G__setup_memvarHShowerHitDigitizer,G__setup_memfuncHShowerHitDigitizer);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HLinearCategory);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerPadDigitizer),sizeof(HShowerPadDigitizer),-1,64768,"Shower pad digitizer",G__setup_memvarHShowerPadDigitizer,G__setup_memfuncHShowerPadDigitizer);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_vectorlEintcOallocatorlEintgRsPgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_reverse_iteratorlEvectorlEintcOallocatorlEintgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_maplEintcOvectorlEintcOallocatorlEintgRsPgRcOlesslEintgRcOallocatorlEpairlEconstsPintcOvectorlEintcOallocatorlEintgRsPgRsPgRsPgRsPgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHit),sizeof(HShowerHit),-1,62720,"ROOT extension",G__setup_memvarHShowerHit,G__setup_memfuncHShowerHit);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HRaTree);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HSpecGeomPar);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HGeomVector);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerPID),sizeof(HShowerPID),-1,62720,"ROOT extension",G__setup_memvarHShowerPID,G__setup_memfuncHShowerPID);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHitHeader),sizeof(HShowerHitHeader),-1,29952,(char*)NULL,G__setup_memvarHShowerHitHeader,G__setup_memfuncHShowerHitHeader);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCriterium),sizeof(HShowerCriterium),-1,61696,"ROOT extension",G__setup_memvarHShowerCriterium,G__setup_memfuncHShowerCriterium);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHitFPar),sizeof(HShowerHitFPar),-1,62720,"ROOT extension",G__setup_memvarHShowerHitFPar,G__setup_memfuncHShowerHitFPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHitFinder),sizeof(HShowerHitFinder),-1,64768,"ROOT extension",G__setup_memvarHShowerHitFinder,G__setup_memfuncHShowerHitFinder);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HDetector);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HTaskSet);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerDetector),sizeof(HShowerDetector),-1,62720,"SHOWER detector class",G__setup_memvarHShowerDetector,G__setup_memfuncHShowerDetector);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HGeomTransform);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HDetGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerGeomPar),sizeof(HShowerGeomPar),-1,62720,"Class for PreShower geometry container	",G__setup_memvarHShowerGeomPar,G__setup_memfuncHShowerGeomPar);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HGeomVector2),sizeof(HGeomVector2),-1,62720,"vector with 3 spherical components",G__setup_memvarHGeomVector2,G__setup_memfuncHGeomVector2);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HContainer);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HContFact);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerContFact),sizeof(HShowerContFact),-1,62720,"Factory for parameter containers in libShower",G__setup_memvarHShowerContFact,G__setup_memfuncHShowerContFact);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HDetParIo);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HDetParAsciiFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerParAsciiFileIo),sizeof(HShowerParAsciiFileIo),-1,62464,(char*)NULL,G__setup_memvarHShowerParAsciiFileIo,G__setup_memfuncHShowerParAsciiFileIo);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HParRootFile);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_HDetParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerParRootFileIo),sizeof(HShowerParRootFileIo),-1,62464,"Class for Shower parameter I/O from ROOT file",G__setup_memvarHShowerParRootFileIo,G__setup_memfuncHShowerParRootFileIo);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerTrack),sizeof(HShowerTrack),-1,29952,"ROOT extension",G__setup_memvarHShowerTrack,G__setup_memfuncHShowerTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerTaskSet),sizeof(HShowerTaskSet),-1,62720,"Set of tasks",G__setup_memvarHShowerTaskSet,G__setup_memfuncHShowerTaskSet);
   G__get_linked_tagnum_fwd(&G__ShowerDictLN_TH3S);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHistCell),sizeof(HShowerHistCell),-1,62720,"ROOT extension",G__setup_memvarHShowerHistCell,G__setup_memfuncHShowerHistCell);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHist),sizeof(HShowerHist),-1,62720,"ROOT extension",G__setup_memvarHShowerHist,G__setup_memfuncHShowerHist);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCalParCalculator),sizeof(HShowerCalParCalculator),-1,62464,"ROOT extension",G__setup_memvarHShowerCalParCalculator,G__setup_memfuncHShowerCalParCalculator);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCalHist),sizeof(HShowerCalHist),-1,62720,"ROOT extension",G__setup_memvarHShowerCalHist,G__setup_memfuncHShowerCalHist);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHitHist),sizeof(HShowerHitHist),-1,62720,"ROOT extension",G__setup_memvarHShowerHitHist,G__setup_memfuncHShowerHitHist);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerCopy),sizeof(HShowerCopy),-1,62720,"ROOT extension",G__setup_memvarHShowerCopy,G__setup_memfuncHShowerCopy);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHitSim),sizeof(HShowerHitSim),-1,64768,"SHOWER HIT data tied with track number",G__setup_memvarHShowerHitSim,G__setup_memfuncHShowerHitSim);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerPIDTrack),sizeof(HShowerPIDTrack),-1,64768,"SHOWER PID data tied with track number",G__setup_memvarHShowerPIDTrack,G__setup_memfuncHShowerPIDTrack);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerHitTrackMatcher),sizeof(HShowerHitTrackMatcher),-1,62720,"ROOT extension",G__setup_memvarHShowerHitTrackMatcher,G__setup_memfuncHShowerHitTrackMatcher);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerPIDTrackMatcher),sizeof(HShowerPIDTrackMatcher),-1,62720,"ROOT extension",G__setup_memvarHShowerPIDTrackMatcher,G__setup_memfuncHShowerPIDTrackMatcher);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__ShowerDictLN_HShowerParticleIdentifier),sizeof(HShowerParticleIdentifier),-1,62720,"ROOT extension",G__setup_memvarHShowerParticleIdentifier,G__setup_memfuncHShowerParticleIdentifier);
}
extern "C" void G__cpp_setupShowerDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupShowerDict()");
  G__set_cpp_environmentShowerDict();
  G__cpp_setup_tagtableShowerDict();

  G__cpp_setup_inheritanceShowerDict();

  G__cpp_setup_typetableShowerDict();

  G__cpp_setup_memvarShowerDict();

  G__cpp_setup_memfuncShowerDict();
  G__cpp_setup_globalShowerDict();
  G__cpp_setup_funcShowerDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncShowerDict();
  return;
}
class G__cpp_setup_initShowerDict {
  public:
    G__cpp_setup_initShowerDict() { G__add_setup_func("ShowerDict",(G__incsetup)(&G__cpp_setupShowerDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initShowerDict() { G__remove_setup_func("ShowerDict"); }
};
G__cpp_setup_initShowerDict G__cpp_setup_initializerShowerDict;

